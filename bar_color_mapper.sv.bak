module  bar_color_mapper #( parameter bar_count = 1)
								  ( input        	[9:0] DrawX, DrawY,
									 input			[9:0] bar_x 		 [bar_count - 1:0],
									 input			[9:0] bar_y 		 [bar_count - 1:0],
									 input			[9:0] bar_width,
									 input	 		[9:0] bar_height  [bar_count - 1:0],
									 output logic 	[7:0] Red, Green, Blue );

	parameter [9:0] x_max=639;     // Rightmost point on the X axis
									
	logic bar_on;
	
	int dist_x, dist_y, height, width, cur_bar_idx, x_offset, display_bar_width;
	
	assign color_one_r = 8'h00;
	assign color_one_g = 8'ha8;
	assign color_one_b = 8'hff;
	
	assign color_two_r = 8'h14;
	assign color_two_g = 8'hff;
	assign color_two_b = 8'hb5;
	
	
	//assign x_offset = (x_max - (bar_x[bar_count - 1] + bar_width)) / 2;
	
	always_comb
	begin: Get_Cur_Bar_Info
		
		cur_bar_idx = (DrawX) / bar_width;
		//cur_bar_idx = 0;
		// if current index out of bounds, use index 0 data
		if (cur_bar_idx < 0 || cur_bar_idx > bar_count - 1)
			cur_bar_idx = 0;
		
		//don't really need dist_x since bars should cover entire width of screen
		// BUT ALREADY IMPLEMENTED SO DONT TOUCH IT
		dist_x = DrawX - bar_x[cur_bar_idx];
		dist_y = bar_y[cur_bar_idx] - DrawY;
		
		height = bar_height[cur_bar_idx];
		width = bar_width;
		display_bar_width = bar_width / 2;
		
	end

	
	
	always_comb
   begin:Should_Color_Bar
		if ( dist_x >= 0 && dist_x < display_bar_width && dist_y >= 0 && dist_y <= height) 
			bar_on = 1'b1;
      
		else 
			bar_on = 1'b0;
   end
	
	
       
   always_comb
   begin:RGB_Display
		  if ((bar_on == 1'b1)) 
        begin 
            /*
				Red = 8'hff;
            Green = 8'h55;
            Blue = 8'h00;
				*//*
				Red = color_one_r + (DrawX / ((bar_x[bar_count - 1] + display_bar_width) / (color_two_r - color_one_r)));
            Green = color_one_g + (DrawX / ((bar_x[bar_count - 1] + display_bar_width) / (color_two_g - color_one_g)));
            Blue = color_one_b + (DrawX / ((bar_x[bar_count - 1] + display_bar_width) / (color_two_b - color_one_b)));
				*/
				Red = 8'h00 + DrawX[9:4];
            Green = 8'ha8 + DrawX[9:2];
            Blue = 8'hff - DrawX[9:3];
				
        end       
        else 
        begin 
            Red = 8'h00; 
            Green = 8'h00;
            Blue = 8'h7f - DrawX[9:3];
        end      
   end 
	
	
endmodule 