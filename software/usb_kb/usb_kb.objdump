
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001b028 memsz 0x0001b028 flags r-x
    LOAD off    0x0001c048 vaddr 0x0401b048 paddr 0x0401cbb8 align 2**12
         filesz 0x00001b70 memsz 0x00001b70 flags rw-
    LOAD off    0x0001e728 vaddr 0x0401e728 paddr 0x0401e728 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a678  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007a0  0401a8a8  0401a8a8  0001b8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b70  0401b048  0401cbb8  0001c048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  0401e728  0401e728  0001e728  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0401ea10  0401ea10  0001dbb8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001dbb8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001300  00000000  00000000  0001dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002bf61  00000000  00000000  0001eee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b967  00000000  00000000  0004ae41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f101  00000000  00000000  000567a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003604  00000000  00000000  000658ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00005806  00000000  00000000  00068eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c481  00000000  00000000  0006e6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0008ab38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001e68  00000000  00000000  0008ab78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000910c2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000910c5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000910d1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000910d2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000910d3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000910d7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000910db  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000910df  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000910ea  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000910f5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00091100  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000008e  00000000  00000000  00091108  2**0
                  CONTENTS, READONLY
 29 .jdi          00004f1b  00000000  00000000  00091196  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00087af1  00000000  00000000  000960b1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
0401a8a8 l    d  .rodata	00000000 .rodata
0401b048 l    d  .rwdata	00000000 .rwdata
0401e728 l    d  .bss	00000000 .bss
0401ea10 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 kiss_fft.c
0400026c l     F .text	00000200 kf_bfly2
0400046c l     F .text	00000718 kf_bfly4
04000b84 l     F .text	0000060c kf_bfly3
04001190 l     F .text	00000bc4 kf_bfly5
04001d54 l     F .text	0000034c kf_bfly_generic
040020a0 l     F .text	00000220 kf_work
040022c0 l     F .text	0000013c kf_factor
00000000 l    df *ABS*	00000000 main.c
0401cb5c l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0401e738 l     O .bss	00000004 usb_delay.2608
0401e73c l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0401abc4 l     O .rodata	00000108 two_over_pi
0401ab44 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0401ad0c l     O .rodata	00000010 init_jk
0401accc l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0401b078 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401ae66 l     O .rodata	00000010 zeroes.4404
0400e70c l     F .text	000000bc __sbprintf
0401ae76 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400e91c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04010474 l     F .text	00000008 __fp_unlock
04010488 l     F .text	0000019c __sinit.part.1
04010624 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0401b8c4 l     O .rwdata	00000020 lc_ctype_charset
0401b8a4 l     O .rwdata	00000020 lc_message_charset
0401b8e4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0401aea4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
040130dc l     F .text	000000fc __sprint_r.part.0
0401afc8 l     O .rodata	00000010 zeroes.4349
04014718 l     F .text	000000bc __sbprintf
0401afd8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
04015d88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04015e9c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04015ec8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04015fbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
040160a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04016190 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
040165d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0401cba0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04016a1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04016b58 l     F .text	00000034 alt_dev_reg
0401bac4 l     O .rwdata	00000038 i2c_0
0401bafc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
04016c38 l     F .text	00000110 optional_irq_callback
04016d98 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04018a74 l     F .text	0000020c altera_avalon_jtag_uart_irq
04018c80 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040194b4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401984c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04019d3c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04019e9c l     F .text	0000003c alt_get_errno
04019ed8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401e774 g     O .bss	00000004 alt_instruction_exception_handler
040127e8 g     F .text	00000074 _mprec_log10
040128d4 g     F .text	0000008c __any_on
04014ccc g     F .text	00000054 _isatty_r
0401aeb0 g     O .rodata	00000028 __mprec_tinytens
040162a8 g     F .text	0000007c alt_main
0401cb60 g     O .rwdata	00000008 ctrl_xfers
0400c254 g     F .text	000000c0 _puts_r
0401e910 g     O .bss	00000100 alt_irq
04007ab8 g     F .text	00000014 fabs
04014d20 g     F .text	00000060 _lseek_r
04004e78 g     F .text	00000644 USB_Task
04005a8c g     F .text	00000130 sqrt
0401cbb8 g       *ABS*	00000000 __flash_rwdata_start
0400a024 g     F .text	00000088 .hidden __eqdf2
0401ea10 g       *ABS*	00000000 __alt_heap_start
0400c218 g     F .text	0000003c printf
04014f38 g     F .text	0000009c _wcrtomb_r
04003f08 g     F .text	00000088 kbdPoll
04012f9c g     F .text	0000005c __sseek
040107d4 g     F .text	00000010 __sinit
04014de0 g     F .text	00000140 __swbuf_r
040112a8 g     F .text	0000007c _setlocale_r
0401062c g     F .text	00000078 __sfmoreglue
04017490 g     F .text	000000a8 alt_avalon_i2c_rx_read
04016348 g     F .text	00000024 __malloc_unlock
04002838 g     F .text	000001f0 GetDriverandReport
040186a8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
04017214 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
04011624 g     F .text	0000015c memmove
040107bc g     F .text	00000018 _cleanup
04017ef8 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
040118a8 g     F .text	000000a8 _Balloc
040040b0 g     F .text	00000094 MAXreg_wr
0401b048 g     O .rwdata	00000030 ClientDriverTable
0400a0ac g     F .text	000000dc .hidden __gtdf2
0401a120 g     F .text	00000024 altera_nios2_gen2_irq_init
0400b85c g     F .text	00000010 __errno
040054bc g     F .text	0000002c MSDProbe
04000000 g     F .entry	0000000c __reset
04004978 g     F .text	000000e8 XferCtrlData
04000020 g       *ABS*	00000000 __flash_exceptions_start
0401e778 g     O .bss	00000010 hid_ep
04014c70 g     F .text	0000005c _fstat_r
0401e74c g     O .bss	00000004 errno
040057b0 g     F .text	000001ec floor
04012f18 g     F .text	00000008 __seofread
0401e760 g     O .bss	00000004 alt_argv
04024b5c g       *ABS*	00000000 _gp
040169ec g     F .text	00000030 usleep
040186ec g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
040042b4 g     F .text	00000084 MAXreg_rd
040087d4 g     F .text	000004e4 .hidden __subsf3
040173a4 g     F .text	00000044 alt_avalon_i2c_is_busy
0401b944 g     O .rwdata	00000180 alt_fd_list
04005bbc g     F .text	0000076c __ieee754_rem_pio2
04003e40 g     F .text	00000040 HID_init
04017148 g     F .text	000000cc alt_avalon_i2c_master_config_set
040199ec g     F .text	00000090 alt_find_dev
0400c0a0 g     F .text	00000148 memcpy
0401047c g     F .text	0000000c _cleanup_r
0400b464 g     F .text	000000dc .hidden __floatsidf
04019e20 g     F .text	0000007c alt_io_redirect
0400a188 g     F .text	000000f4 .hidden __ltdf2
0401a8a8 g       *ABS*	00000000 __DTOR_END__
04017d38 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0400c314 g     F .text	00000014 puts
0401a310 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04007acc g     F .text	00000074 __fpclassifyd
04012744 g     F .text	000000a4 __ratio
040146fc g     F .text	0000001c __vfiprintf_internal
04018e78 g     F .text	0000021c altera_avalon_jtag_uart_read
0400b86c g     F .text	00000014 malloc
0400c1e8 g     F .text	00000030 _printf_r
04007df8 g     F .text	00000064 .hidden __udivsi3
04015ff8 g     F .text	000000ac isatty
0401af00 g     O .rodata	000000c8 __mprec_tens
04011324 g     F .text	0000000c __locale_charset
040065b0 g     F .text	000004a4 __kernel_cos
04016fb4 g     F .text	00000098 alt_avalon_i2c_enable
0401e748 g     O .bss	00000004 __malloc_top_pad
040185dc g     F .text	00000068 alt_avalon_i2c_int_disable
0401cb68 g     O .rwdata	00000001 usb_task_state
0401cb80 g     O .rwdata	00000004 __mb_cur_max
04011354 g     F .text	0000000c _localeconv_r
04011cdc g     F .text	0000003c __i2b
04010c58 g     F .text	000004c8 __sfvwrite_r
0400c328 g     F .text	00000054 _sbrk_r
04014d80 g     F .text	00000060 _read_r
0400462c g     F .text	00000094 MAX3421E_init
04002d24 g     F .text	00000038 setKeycode
040034dc g     F .text	000000b4 SGTL5000_Reg_Rd
0401cb98 g     O .rwdata	00000004 alt_max_fd
04014964 g     F .text	000000f0 _fclose_r
04010444 g     F .text	00000030 fflush
0401e744 g     O .bss	00000004 __malloc_max_sbrked_mem
04018104 g     F .text	00000210 alt_avalon_i2c_master_receive
040077ec g     F .text	000002cc __kernel_sin
0400b540 g     F .text	00000110 .hidden __extendsfdf2
04008da8 g     F .text	000008ac .hidden __adddf3
040124ec g     F .text	0000010c __b2d
0401571c g     F .text	000005c4 .hidden __umoddi3
040161cc g     F .text	000000dc lseek
0401cb6c g     O .rwdata	00000004 __fdlib_version
04018644 g     F .text	00000064 alt_avalon_i2c_int_enable
0401cb70 g     O .rwdata	00000004 _global_impure_ptr
04012960 g     F .text	00000564 _realloc_r
0401ea10 g       *ABS*	00000000 __bss_end
04019c4c g     F .text	000000f0 alt_iic_isr_register
040168e4 g     F .text	00000108 alt_tick
04015120 g     F .text	000005fc .hidden __udivdi3
04018504 g     F .text	00000058 alt_avalon_i2c_int_status_get
04014bcc g     F .text	00000024 _fputwc_r
0401aed8 g     O .rodata	00000028 __mprec_bigtens
04011ac0 g     F .text	00000104 __s2b
04015ce0 g     F .text	000000a8 .hidden __floatunsidf
0401222c g     F .text	00000060 __mcmp
040107f4 g     F .text	00000018 __fp_lock_all
04019c00 g     F .text	0000004c alt_ic_irq_enabled
04016848 g     F .text	0000009c alt_alarm_stop
04016e34 g     F .text	00000054 alt_avalon_i2c_register_callback
0401e770 g     O .bss	00000004 alt_irq_active
04016e88 g     F .text	000000ec alt_avalon_i2c_init
04005584 g     F .text	0000002c DummyProbe
040000fc g     F .exceptions	000000d4 alt_irq_handler
0401b91c g     O .rwdata	00000028 alt_dev_null
04006a54 g     F .text	00000d98 __kernel_rem_pio2
04003e80 g     F .text	00000088 mousePoll
04004480 g     F .text	00000024 Vbus_power
0401982c g     F .text	00000020 alt_dcache_flush_all
04011bc4 g     F .text	00000068 __hi0bits
0400b3e4 g     F .text	00000080 .hidden __fixdfsi
0401cbb8 g       *ABS*	00000000 __ram_rwdata_end
0401cb90 g     O .rwdata	00000008 alt_dev_list
04016a58 g     F .text	00000100 write
0401a474 g     F .text	000000a0 _putc_r
040177c4 g     F .text	0000004c alt_avalon_i2c_check_arblost
040185a0 g     F .text	0000003c alt_avalon_i2c_int_clear
0401b048 g       *ABS*	00000000 __ram_rodata_end
0401e73d g     O .bss	00000001 usb_error
04015f04 g     F .text	000000b8 fstat
0400a188 g     F .text	000000f4 .hidden __ledf2
0401cbac g     O .rwdata	00000008 alt_avalon_i2c_list
04011fa4 g     F .text	00000140 __pow5mult
040131f0 g     F .text	0000150c ___vfiprintf_internal_r
0401e758 g     O .bss	00000004 __nlocale_changed
04007e5c g     F .text	00000058 .hidden __umodsi3
0401ea10 g       *ABS*	00000000 end
040189b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04016f74 g     F .text	00000040 alt_avalon_i2c_open
04004ad4 g     F .text	0000017c XferDispatchPkt
0401a8a8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401794c g     F .text	000000e8 alt_avalon_i2c_master_tx
0401952c g     F .text	0000007c alt_avalon_timer_sc_init
0400b7f8 g     F .text	00000064 .hidden __clzsi2
04019094 g     F .text	00000224 altera_avalon_jtag_uart_write
040056c4 g     F .text	000000ec cos
0400262c g     F .text	000000d4 kiss_fft_stride
040107e4 g     F .text	00000004 __sfp_lock_acquire
04011540 g     F .text	000000e4 memchr
04002700 g     F .text	00000048 kiss_fft
0400c414 g     F .text	000022dc ___vfprintf_internal_r
040047f8 g     F .text	00000034 MaxGpxHandler
04010948 g     F .text	00000310 _free_r
0401636c g     F .text	0000022c alt_printf
04011330 g     F .text	00000010 __locale_mb_cur_max
0401a6f4 g     F .text	00000180 __call_exitprocs
0401e754 g     O .bss	00000004 __mlocale_changed
04016d48 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0401cb78 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
0401e768 g     O .bss	00000004 _alt_tick_rate
04004338 g     F .text	000000a0 MAXbytes_rd
0400599c g     F .text	000000f0 sin
04018314 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
04018738 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
040120e4 g     F .text	00000148 __lshift
040192b8 g     F .text	000001fc alt_avalon_spi_command
0401e76c g     O .bss	00000004 _alt_nticks
04016610 g     F .text	00000104 read
04016bc4 g     F .text	00000074 alt_sys_init
0401e8c8 g     O .bss	00000048 devtable
0401a5dc g     F .text	00000118 __register_exitproc
04003a38 g     F .text	00000408 HIDKProbe
0401e788 g     O .bss	00000018 msd_ep
04017b70 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
04011d18 g     F .text	0000028c __multiply
04018d20 g     F .text	00000068 altera_avalon_jtag_uart_close
04004de0 g     F .text	00000098 USB_init
0401e7c8 g     O .bss	00000100 bigbuf
04007eb4 g     F .text	00000028 .hidden __mulsi3
0401b048 g       *ABS*	00000000 __ram_rwdata_start
0401a8a8 g       *ABS*	00000000 __ram_rodata_start
0401e7a0 g     O .bss	00000028 __malloc_current_mallinfo
0401e734 g     O .bss	00000001 last_usb_task_state
040125f8 g     F .text	0000014c __d2b
0401e72c g     O .bss	00000008 dev0ep
04002a74 g     F .text	00000050 clearLED
04018850 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401a24c g     F .text	000000c4 alt_get_fd
040196d4 g     F .text	00000158 alt_busy_sleep
040054e8 g     F .text	00000038 MSDEventHandler
04014834 g     F .text	00000054 _close_r
0401a3f8 g     F .text	0000007c memcmp
040173e8 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
04018910 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0401ea10 g       *ABS*	00000000 __alt_stack_base
04018960 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400e7c8 g     F .text	00000154 __swsetup_r
04009654 g     F .text	000009d0 .hidden __divdf3
040106a4 g     F .text	00000118 __sfp
0401285c g     F .text	00000078 __copybits
0401b49c g     O .rwdata	00000408 __malloc_av_
040107f0 g     F .text	00000004 __sinit_lock_release
0400554c g     F .text	00000038 CDCEventHandler
0400a27c g     F .text	0000086c .hidden __muldf3
040055b0 g     F .text	00000038 DummyEventHandler
04012ec4 g     F .text	00000054 __sread
0401a144 g     F .text	00000108 alt_find_file
04019888 g     F .text	000000a4 alt_dev_llist_insert
04016324 g     F .text	00000024 __malloc_lock
04016798 g     F .text	000000b0 sbrk
04017810 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
04017778 g     F .text	0000004c alt_avalon_i2c_check_nack
040103e8 g     F .text	0000005c _fflush_r
04014888 g     F .text	000000dc _calloc_r
0401e728 g       *ABS*	00000000 __bss_start
040044a4 g     F .text	00000188 MAX_busprobe
0401e728 g     O .bss	00000002 hid_device
04011780 g     F .text	00000128 memset
04002d5c g     F .text	00000780 main
040046c0 g     F .text	0000006c MAX3421E_Task
04017744 g     F .text	00000034 alt_avalon_i2c_master_target_set
0401e764 g     O .bss	00000004 alt_envp
0401e740 g     O .bss	00000004 __malloc_max_total_mem
040188b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04014f20 g     F .text	00000018 __swbuf
04005640 g     F .text	00000084 ConvUTF8ToStr
0401855c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
04012ff8 g     F .text	00000008 __sclose
04007b40 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
04014a54 g     F .text	00000014 fclose
0400b650 g     F .text	000001a8 .hidden __truncdfsf2
0400eb44 g     F .text	00001688 _dtoa_r
0400b894 g     F .text	0000080c _malloc_r
04015094 g     F .text	00000030 __ascii_wctomb
0401cb9c g     O .rwdata	00000004 alt_errno
04011120 g     F .text	000000c4 _fwalk
0401a514 g     F .text	000000c8 putc
04007d00 g     F .text	00000084 .hidden __divsi3
04004c50 g     F .text	00000190 XferInTransfer
04002be4 g     F .text	00000140 printSignedHex1
04010824 g     F .text	00000124 _malloc_trim_r
0401a8a8 g       *ABS*	00000000 __CTOR_END__
040083a4 g     F .text	00000430 .hidden __mulsf3
04005608 g     F .text	00000038 GetDevtable
04013000 g     F .text	000000dc strcmp
0401a8a8 g       *ABS*	00000000 __flash_rodata_start
0401a8a8 g       *ABS*	00000000 __DTOR_LIST__
04004a60 g     F .text	00000074 XferCtrlND
04003590 g     F .text	000000a0 SGTL5000_Reg_Wr
04007ce4 g     F .text	0000001c copysign
0400a024 g     F .text	00000088 .hidden __nedf2
040043d8 g     F .text	000000a8 MAX3421E_reset
04016b8c g     F .text	00000038 alt_irq_init
04016714 g     F .text	00000084 alt_release_fd
0401ad1c g     O .rodata	00000100 .hidden __clz_tab
0401e750 g     O .bss	00000004 _PathLocale
0401a3ac g     F .text	00000014 atexit
040147d4 g     F .text	00000060 _write_r
04011360 g     F .text	00000018 setlocale
0401cb74 g     O .rwdata	00000004 _impure_ptr
0401e75c g     O .bss	00000004 alt_argc
040101cc g     F .text	0000021c __sflush_r
04007b48 g     F .text	0000019c scalbn
0401998c g     F .text	00000060 _do_dtors
0401134c g     F .text	00000008 __locale_cjk_lang
0401770c g     F .text	00000038 alt_avalon_i2c_master_target_get
0401761c g     F .text	000000f0 alt_avalon_i2c_send_address
04004144 g     F .text	00000170 MAXbytes_wr
04000020 g       .exceptions	00000000 alt_irq_entry
04012488 g     F .text	00000064 __ulp
0401080c g     F .text	00000018 __fp_unlock_all
0401cb88 g     O .rwdata	00000008 alt_fs_list
04005520 g     F .text	0000002c CDCProbe
04000020 g       *ABS*	00000000 __ram_exceptions_start
04011378 g     F .text	0000000c localeconv
04002a28 g     F .text	0000004c setLED
04006328 g     F .text	00000288 __ieee754_sqrt
040055e8 g     F .text	00000020 GetUsbTaskState
040187e8 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
04019a9c g     F .text	00000050 alt_ic_isr_register
0401704c g     F .text	0000004c alt_avalon_i2c_disable
0401a8e4 g     O .rodata	00000010 devclasses
0401cbb8 g       *ABS*	00000000 _edata
04003fc8 g     F .text	00000038 HIDKEventHandler
0401ea10 g       *ABS*	00000000 _end
0400472c g     F .text	000000cc MaxIntHandler
04014a68 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
04018d88 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04017098 g     F .text	000000b0 alt_avalon_i2c_master_config_get
04004000 g     F .text	00000034 SPI_init
04019b74 g     F .text	0000008c alt_ic_irq_disable
04012f20 g     F .text	0000007c __swrite
0401cb7c g     O .rwdata	00000004 __malloc_trim_threshold
04011340 g     F .text	0000000c __locale_msgcharset
0401a3c0 g     F .text	00000038 exit
040111e4 g     F .text	000000c4 _fwalk_reent
04008cb8 g     F .text	000000f0 .hidden __floatunsisf
0401228c g     F .text	000001fc __mdiff
04002748 g     F .text	00000020 kiss_fft_cleanup
04007d84 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
040107e8 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
040172a8 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
04017538 g     F .text	000000e4 alt_avalon_i2c_cmd_write
04003f90 g     F .text	00000038 HIDMEventHandler
0401a874 g     F .text	00000034 _exit
040195a8 g     F .text	0000012c alt_alarm_start
04002ac4 g     F .text	00000120 printSignedHex0
04011384 g     F .text	000001bc __smakebuf_r
0400c37c g     F .text	00000098 strlen
04019fc4 g     F .text	0000015c open
0400a0ac g     F .text	000000dc .hidden __gedf2
04016598 g     F .text	0000003c alt_putchar
0401cb84 g     O .rwdata	00000004 __wctomb
040131d8 g     F .text	00000018 __sprint_r
04019a7c g     F .text	00000020 alt_icache_flush_all
0401cbb4 g     O .rwdata	00000004 alt_priority_mask
04019aec g     F .text	00000088 alt_ic_irq_enable
0400e6f0 g     F .text	0000001c __vfprintf_internal
04003630 g     F .text	00000408 HIDMProbe
04002768 g     F .text	000000d0 kiss_fft_next_fast_size
040150c4 g     F .text	0000005c _wctomb_r
040023fc g     F .text	00000230 kiss_fft_alloc
04004034 g     F .text	0000007c SPI_wr
0400aae8 g     F .text	000008fc .hidden __subdf3
04011c2c g     F .text	000000b0 __lo0bits
0401cba4 g     O .rwdata	00000008 alt_alarm_list
0401992c g     F .text	00000060 _do_ctors
04014fd4 g     F .text	000000c0 wcrtomb
04015dc4 g     F .text	000000d8 close
04007edc g     F .text	000004c8 .hidden __addsf3
0401879c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0401610c g     F .text	00000084 alt_load
04017a34 g     F .text	0000013c alt_avalon_i2c_master_rx
04014bf0 g     F .text	00000080 fputwc
0400b880 g     F .text	00000014 free
040107ec g     F .text	00000004 __sinit_lock_acquire
0400482c g     F .text	0000014c XferCtrlReq
04011978 g     F .text	00000148 __multadd
04011950 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10ba4404 	addi	r2,r2,-5872
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10ba4404 	addi	r2,r2,-5872
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a70617 	ldw	r2,-25576(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a70617 	ldw	r2,-25576(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 400023c:	d692d714 	ori	gp,gp,19292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	10b9ca14 	ori	r2,r2,59176

    movhi r3, %hi(__bss_end)
 4000248:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 400024c:	18fa8414 	ori	r3,r3,59920

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	401610c0 	call	401610c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	40162a80 	call	40162a8 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <kf_bfly2>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 400026c:	defff504 	addi	sp,sp,-44
 4000270:	dfc00a15 	stw	ra,40(sp)
 4000274:	df000915 	stw	fp,36(sp)
 4000278:	dc000815 	stw	r16,32(sp)
 400027c:	df000904 	addi	fp,sp,36
 4000280:	e13ffb15 	stw	r4,-20(fp)
 4000284:	e17ffc15 	stw	r5,-16(fp)
 4000288:	e1bffd15 	stw	r6,-12(fp)
 400028c:	e1fffe15 	stw	r7,-8(fp)
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 4000290:	e0bffd17 	ldw	r2,-12(fp)
 4000294:	10804204 	addi	r2,r2,264
 4000298:	e0bff815 	stw	r2,-32(fp)
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 400029c:	e0bffe17 	ldw	r2,-8(fp)
 40002a0:	100490fa 	slli	r2,r2,3
 40002a4:	e0fffb17 	ldw	r3,-20(fp)
 40002a8:	1885883a 	add	r2,r3,r2
 40002ac:	e0bff715 	stw	r2,-36(fp)
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 40002b0:	e0bff717 	ldw	r2,-36(fp)
 40002b4:	10c00017 	ldw	r3,0(r2)
 40002b8:	e0bff817 	ldw	r2,-32(fp)
 40002bc:	11000017 	ldw	r4,0(r2)
 40002c0:	200b883a 	mov	r5,r4
 40002c4:	1809883a 	mov	r4,r3
 40002c8:	40083a40 	call	40083a4 <__mulsf3>
 40002cc:	1007883a 	mov	r3,r2
 40002d0:	1821883a 	mov	r16,r3
 40002d4:	e0bff717 	ldw	r2,-36(fp)
 40002d8:	10c00117 	ldw	r3,4(r2)
 40002dc:	e0bff817 	ldw	r2,-32(fp)
 40002e0:	11000117 	ldw	r4,4(r2)
 40002e4:	200b883a 	mov	r5,r4
 40002e8:	1809883a 	mov	r4,r3
 40002ec:	40083a40 	call	40083a4 <__mulsf3>
 40002f0:	1007883a 	mov	r3,r2
 40002f4:	1805883a 	mov	r2,r3
 40002f8:	100b883a 	mov	r5,r2
 40002fc:	8009883a 	mov	r4,r16
 4000300:	40087d40 	call	40087d4 <__subsf3>
 4000304:	1007883a 	mov	r3,r2
 4000308:	1805883a 	mov	r2,r3
 400030c:	e0bff915 	stw	r2,-28(fp)
 4000310:	e0bff717 	ldw	r2,-36(fp)
 4000314:	10c00017 	ldw	r3,0(r2)
 4000318:	e0bff817 	ldw	r2,-32(fp)
 400031c:	11000117 	ldw	r4,4(r2)
 4000320:	200b883a 	mov	r5,r4
 4000324:	1809883a 	mov	r4,r3
 4000328:	40083a40 	call	40083a4 <__mulsf3>
 400032c:	1007883a 	mov	r3,r2
 4000330:	1821883a 	mov	r16,r3
 4000334:	e0bff717 	ldw	r2,-36(fp)
 4000338:	10c00117 	ldw	r3,4(r2)
 400033c:	e0bff817 	ldw	r2,-32(fp)
 4000340:	11000017 	ldw	r4,0(r2)
 4000344:	200b883a 	mov	r5,r4
 4000348:	1809883a 	mov	r4,r3
 400034c:	40083a40 	call	40083a4 <__mulsf3>
 4000350:	1007883a 	mov	r3,r2
 4000354:	1805883a 	mov	r2,r3
 4000358:	100b883a 	mov	r5,r2
 400035c:	8009883a 	mov	r4,r16
 4000360:	4007edc0 	call	4007edc <__addsf3>
 4000364:	1007883a 	mov	r3,r2
 4000368:	1805883a 	mov	r2,r3
 400036c:	e0bffa15 	stw	r2,-24(fp)
        tw1 += fstride;
 4000370:	e0bffc17 	ldw	r2,-16(fp)
 4000374:	100490fa 	slli	r2,r2,3
 4000378:	e0fff817 	ldw	r3,-32(fp)
 400037c:	1885883a 	add	r2,r3,r2
 4000380:	e0bff815 	stw	r2,-32(fp)
        C_SUB( *Fout2 ,  *Fout , t );
 4000384:	e0bffb17 	ldw	r2,-20(fp)
 4000388:	10c00017 	ldw	r3,0(r2)
 400038c:	e0bff917 	ldw	r2,-28(fp)
 4000390:	100b883a 	mov	r5,r2
 4000394:	1809883a 	mov	r4,r3
 4000398:	40087d40 	call	40087d4 <__subsf3>
 400039c:	1009883a 	mov	r4,r2
 40003a0:	2007883a 	mov	r3,r4
 40003a4:	e0bff717 	ldw	r2,-36(fp)
 40003a8:	10c00015 	stw	r3,0(r2)
 40003ac:	e0bffb17 	ldw	r2,-20(fp)
 40003b0:	10c00117 	ldw	r3,4(r2)
 40003b4:	e0bffa17 	ldw	r2,-24(fp)
 40003b8:	100b883a 	mov	r5,r2
 40003bc:	1809883a 	mov	r4,r3
 40003c0:	40087d40 	call	40087d4 <__subsf3>
 40003c4:	1009883a 	mov	r4,r2
 40003c8:	2007883a 	mov	r3,r4
 40003cc:	e0bff717 	ldw	r2,-36(fp)
 40003d0:	10c00115 	stw	r3,4(r2)
        C_ADDTO( *Fout ,  t );
 40003d4:	e0bffb17 	ldw	r2,-20(fp)
 40003d8:	10c00017 	ldw	r3,0(r2)
 40003dc:	e0bff917 	ldw	r2,-28(fp)
 40003e0:	100b883a 	mov	r5,r2
 40003e4:	1809883a 	mov	r4,r3
 40003e8:	4007edc0 	call	4007edc <__addsf3>
 40003ec:	1009883a 	mov	r4,r2
 40003f0:	2007883a 	mov	r3,r4
 40003f4:	e0bffb17 	ldw	r2,-20(fp)
 40003f8:	10c00015 	stw	r3,0(r2)
 40003fc:	e0bffb17 	ldw	r2,-20(fp)
 4000400:	10c00117 	ldw	r3,4(r2)
 4000404:	e0bffa17 	ldw	r2,-24(fp)
 4000408:	100b883a 	mov	r5,r2
 400040c:	1809883a 	mov	r4,r3
 4000410:	4007edc0 	call	4007edc <__addsf3>
 4000414:	1009883a 	mov	r4,r2
 4000418:	2007883a 	mov	r3,r4
 400041c:	e0bffb17 	ldw	r2,-20(fp)
 4000420:	10c00115 	stw	r3,4(r2)
        ++Fout2;
 4000424:	e0bff717 	ldw	r2,-36(fp)
 4000428:	10800204 	addi	r2,r2,8
 400042c:	e0bff715 	stw	r2,-36(fp)
        ++Fout;
 4000430:	e0bffb17 	ldw	r2,-20(fp)
 4000434:	10800204 	addi	r2,r2,8
 4000438:	e0bffb15 	stw	r2,-20(fp)
    }while (--m);
 400043c:	e0bffe17 	ldw	r2,-8(fp)
 4000440:	10bfffc4 	addi	r2,r2,-1
 4000444:	e0bffe15 	stw	r2,-8(fp)
 4000448:	e0bffe17 	ldw	r2,-8(fp)
 400044c:	103f981e 	bne	r2,zero,40002b0 <__alt_data_end+0xfc0002b0>
}
 4000450:	0001883a 	nop
 4000454:	e6ffff04 	addi	sp,fp,-4
 4000458:	dfc00217 	ldw	ra,8(sp)
 400045c:	df000117 	ldw	fp,4(sp)
 4000460:	dc000017 	ldw	r16,0(sp)
 4000464:	dec00304 	addi	sp,sp,12
 4000468:	f800283a 	ret

0400046c <kf_bfly4>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 400046c:	deffe704 	addi	sp,sp,-100
 4000470:	dfc01815 	stw	ra,96(sp)
 4000474:	df001715 	stw	fp,92(sp)
 4000478:	dc001615 	stw	r16,88(sp)
 400047c:	df001704 	addi	fp,sp,92
 4000480:	e13ffb15 	stw	r4,-20(fp)
 4000484:	e17ffc15 	stw	r5,-16(fp)
 4000488:	e1bffd15 	stw	r6,-12(fp)
 400048c:	e1fffe15 	stw	r7,-8(fp)
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 4000490:	e0bffe17 	ldw	r2,-8(fp)
 4000494:	e0bfec15 	stw	r2,-80(fp)
    const size_t m2=2*m;
 4000498:	e0bffe17 	ldw	r2,-8(fp)
 400049c:	1085883a 	add	r2,r2,r2
 40004a0:	e0bfed15 	stw	r2,-76(fp)
    const size_t m3=3*m;
 40004a4:	e0fffe17 	ldw	r3,-8(fp)
 40004a8:	1805883a 	mov	r2,r3
 40004ac:	1085883a 	add	r2,r2,r2
 40004b0:	10c5883a 	add	r2,r2,r3
 40004b4:	e0bfee15 	stw	r2,-72(fp)


    tw3 = tw2 = tw1 = st->twiddles;
 40004b8:	e0bffd17 	ldw	r2,-12(fp)
 40004bc:	10804204 	addi	r2,r2,264
 40004c0:	e0bfe915 	stw	r2,-92(fp)
 40004c4:	e0bfe917 	ldw	r2,-92(fp)
 40004c8:	e0bfea15 	stw	r2,-88(fp)
 40004cc:	e0bfea17 	ldw	r2,-88(fp)
 40004d0:	e0bfeb15 	stw	r2,-84(fp)

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 40004d4:	e0bffe17 	ldw	r2,-8(fp)
 40004d8:	100490fa 	slli	r2,r2,3
 40004dc:	e0fffb17 	ldw	r3,-20(fp)
 40004e0:	1885883a 	add	r2,r3,r2
 40004e4:	10c00017 	ldw	r3,0(r2)
 40004e8:	e0bfe917 	ldw	r2,-92(fp)
 40004ec:	11000017 	ldw	r4,0(r2)
 40004f0:	200b883a 	mov	r5,r4
 40004f4:	1809883a 	mov	r4,r3
 40004f8:	40083a40 	call	40083a4 <__mulsf3>
 40004fc:	1007883a 	mov	r3,r2
 4000500:	1821883a 	mov	r16,r3
 4000504:	e0bffe17 	ldw	r2,-8(fp)
 4000508:	100490fa 	slli	r2,r2,3
 400050c:	e0fffb17 	ldw	r3,-20(fp)
 4000510:	1885883a 	add	r2,r3,r2
 4000514:	10c00117 	ldw	r3,4(r2)
 4000518:	e0bfe917 	ldw	r2,-92(fp)
 400051c:	11000117 	ldw	r4,4(r2)
 4000520:	200b883a 	mov	r5,r4
 4000524:	1809883a 	mov	r4,r3
 4000528:	40083a40 	call	40083a4 <__mulsf3>
 400052c:	1007883a 	mov	r3,r2
 4000530:	1805883a 	mov	r2,r3
 4000534:	100b883a 	mov	r5,r2
 4000538:	8009883a 	mov	r4,r16
 400053c:	40087d40 	call	40087d4 <__subsf3>
 4000540:	1007883a 	mov	r3,r2
 4000544:	1805883a 	mov	r2,r3
 4000548:	e0bfef15 	stw	r2,-68(fp)
 400054c:	e0bffe17 	ldw	r2,-8(fp)
 4000550:	100490fa 	slli	r2,r2,3
 4000554:	e0fffb17 	ldw	r3,-20(fp)
 4000558:	1885883a 	add	r2,r3,r2
 400055c:	10c00017 	ldw	r3,0(r2)
 4000560:	e0bfe917 	ldw	r2,-92(fp)
 4000564:	11000117 	ldw	r4,4(r2)
 4000568:	200b883a 	mov	r5,r4
 400056c:	1809883a 	mov	r4,r3
 4000570:	40083a40 	call	40083a4 <__mulsf3>
 4000574:	1007883a 	mov	r3,r2
 4000578:	1821883a 	mov	r16,r3
 400057c:	e0bffe17 	ldw	r2,-8(fp)
 4000580:	100490fa 	slli	r2,r2,3
 4000584:	e0fffb17 	ldw	r3,-20(fp)
 4000588:	1885883a 	add	r2,r3,r2
 400058c:	10c00117 	ldw	r3,4(r2)
 4000590:	e0bfe917 	ldw	r2,-92(fp)
 4000594:	11000017 	ldw	r4,0(r2)
 4000598:	200b883a 	mov	r5,r4
 400059c:	1809883a 	mov	r4,r3
 40005a0:	40083a40 	call	40083a4 <__mulsf3>
 40005a4:	1007883a 	mov	r3,r2
 40005a8:	1805883a 	mov	r2,r3
 40005ac:	100b883a 	mov	r5,r2
 40005b0:	8009883a 	mov	r4,r16
 40005b4:	4007edc0 	call	4007edc <__addsf3>
 40005b8:	1007883a 	mov	r3,r2
 40005bc:	1805883a 	mov	r2,r3
 40005c0:	e0bff015 	stw	r2,-64(fp)
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 40005c4:	e0bfed17 	ldw	r2,-76(fp)
 40005c8:	100490fa 	slli	r2,r2,3
 40005cc:	e0fffb17 	ldw	r3,-20(fp)
 40005d0:	1885883a 	add	r2,r3,r2
 40005d4:	10c00017 	ldw	r3,0(r2)
 40005d8:	e0bfea17 	ldw	r2,-88(fp)
 40005dc:	11000017 	ldw	r4,0(r2)
 40005e0:	200b883a 	mov	r5,r4
 40005e4:	1809883a 	mov	r4,r3
 40005e8:	40083a40 	call	40083a4 <__mulsf3>
 40005ec:	1007883a 	mov	r3,r2
 40005f0:	1821883a 	mov	r16,r3
 40005f4:	e0bfed17 	ldw	r2,-76(fp)
 40005f8:	100490fa 	slli	r2,r2,3
 40005fc:	e0fffb17 	ldw	r3,-20(fp)
 4000600:	1885883a 	add	r2,r3,r2
 4000604:	10c00117 	ldw	r3,4(r2)
 4000608:	e0bfea17 	ldw	r2,-88(fp)
 400060c:	11000117 	ldw	r4,4(r2)
 4000610:	200b883a 	mov	r5,r4
 4000614:	1809883a 	mov	r4,r3
 4000618:	40083a40 	call	40083a4 <__mulsf3>
 400061c:	1007883a 	mov	r3,r2
 4000620:	1805883a 	mov	r2,r3
 4000624:	100b883a 	mov	r5,r2
 4000628:	8009883a 	mov	r4,r16
 400062c:	40087d40 	call	40087d4 <__subsf3>
 4000630:	1007883a 	mov	r3,r2
 4000634:	1805883a 	mov	r2,r3
 4000638:	e0bff115 	stw	r2,-60(fp)
 400063c:	e0bfed17 	ldw	r2,-76(fp)
 4000640:	100490fa 	slli	r2,r2,3
 4000644:	e0fffb17 	ldw	r3,-20(fp)
 4000648:	1885883a 	add	r2,r3,r2
 400064c:	10c00017 	ldw	r3,0(r2)
 4000650:	e0bfea17 	ldw	r2,-88(fp)
 4000654:	11000117 	ldw	r4,4(r2)
 4000658:	200b883a 	mov	r5,r4
 400065c:	1809883a 	mov	r4,r3
 4000660:	40083a40 	call	40083a4 <__mulsf3>
 4000664:	1007883a 	mov	r3,r2
 4000668:	1821883a 	mov	r16,r3
 400066c:	e0bfed17 	ldw	r2,-76(fp)
 4000670:	100490fa 	slli	r2,r2,3
 4000674:	e0fffb17 	ldw	r3,-20(fp)
 4000678:	1885883a 	add	r2,r3,r2
 400067c:	10c00117 	ldw	r3,4(r2)
 4000680:	e0bfea17 	ldw	r2,-88(fp)
 4000684:	11000017 	ldw	r4,0(r2)
 4000688:	200b883a 	mov	r5,r4
 400068c:	1809883a 	mov	r4,r3
 4000690:	40083a40 	call	40083a4 <__mulsf3>
 4000694:	1007883a 	mov	r3,r2
 4000698:	1805883a 	mov	r2,r3
 400069c:	100b883a 	mov	r5,r2
 40006a0:	8009883a 	mov	r4,r16
 40006a4:	4007edc0 	call	4007edc <__addsf3>
 40006a8:	1007883a 	mov	r3,r2
 40006ac:	1805883a 	mov	r2,r3
 40006b0:	e0bff215 	stw	r2,-56(fp)
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 40006b4:	e0bfee17 	ldw	r2,-72(fp)
 40006b8:	100490fa 	slli	r2,r2,3
 40006bc:	e0fffb17 	ldw	r3,-20(fp)
 40006c0:	1885883a 	add	r2,r3,r2
 40006c4:	10c00017 	ldw	r3,0(r2)
 40006c8:	e0bfeb17 	ldw	r2,-84(fp)
 40006cc:	11000017 	ldw	r4,0(r2)
 40006d0:	200b883a 	mov	r5,r4
 40006d4:	1809883a 	mov	r4,r3
 40006d8:	40083a40 	call	40083a4 <__mulsf3>
 40006dc:	1007883a 	mov	r3,r2
 40006e0:	1821883a 	mov	r16,r3
 40006e4:	e0bfee17 	ldw	r2,-72(fp)
 40006e8:	100490fa 	slli	r2,r2,3
 40006ec:	e0fffb17 	ldw	r3,-20(fp)
 40006f0:	1885883a 	add	r2,r3,r2
 40006f4:	10c00117 	ldw	r3,4(r2)
 40006f8:	e0bfeb17 	ldw	r2,-84(fp)
 40006fc:	11000117 	ldw	r4,4(r2)
 4000700:	200b883a 	mov	r5,r4
 4000704:	1809883a 	mov	r4,r3
 4000708:	40083a40 	call	40083a4 <__mulsf3>
 400070c:	1007883a 	mov	r3,r2
 4000710:	1805883a 	mov	r2,r3
 4000714:	100b883a 	mov	r5,r2
 4000718:	8009883a 	mov	r4,r16
 400071c:	40087d40 	call	40087d4 <__subsf3>
 4000720:	1007883a 	mov	r3,r2
 4000724:	1805883a 	mov	r2,r3
 4000728:	e0bff315 	stw	r2,-52(fp)
 400072c:	e0bfee17 	ldw	r2,-72(fp)
 4000730:	100490fa 	slli	r2,r2,3
 4000734:	e0fffb17 	ldw	r3,-20(fp)
 4000738:	1885883a 	add	r2,r3,r2
 400073c:	10c00017 	ldw	r3,0(r2)
 4000740:	e0bfeb17 	ldw	r2,-84(fp)
 4000744:	11000117 	ldw	r4,4(r2)
 4000748:	200b883a 	mov	r5,r4
 400074c:	1809883a 	mov	r4,r3
 4000750:	40083a40 	call	40083a4 <__mulsf3>
 4000754:	1007883a 	mov	r3,r2
 4000758:	1821883a 	mov	r16,r3
 400075c:	e0bfee17 	ldw	r2,-72(fp)
 4000760:	100490fa 	slli	r2,r2,3
 4000764:	e0fffb17 	ldw	r3,-20(fp)
 4000768:	1885883a 	add	r2,r3,r2
 400076c:	10c00117 	ldw	r3,4(r2)
 4000770:	e0bfeb17 	ldw	r2,-84(fp)
 4000774:	11000017 	ldw	r4,0(r2)
 4000778:	200b883a 	mov	r5,r4
 400077c:	1809883a 	mov	r4,r3
 4000780:	40083a40 	call	40083a4 <__mulsf3>
 4000784:	1007883a 	mov	r3,r2
 4000788:	1805883a 	mov	r2,r3
 400078c:	100b883a 	mov	r5,r2
 4000790:	8009883a 	mov	r4,r16
 4000794:	4007edc0 	call	4007edc <__addsf3>
 4000798:	1007883a 	mov	r3,r2
 400079c:	1805883a 	mov	r2,r3
 40007a0:	e0bff415 	stw	r2,-48(fp)

        C_SUB( scratch[5] , *Fout, scratch[1] );
 40007a4:	e0bffb17 	ldw	r2,-20(fp)
 40007a8:	10c00017 	ldw	r3,0(r2)
 40007ac:	e0bff117 	ldw	r2,-60(fp)
 40007b0:	100b883a 	mov	r5,r2
 40007b4:	1809883a 	mov	r4,r3
 40007b8:	40087d40 	call	40087d4 <__subsf3>
 40007bc:	1007883a 	mov	r3,r2
 40007c0:	1805883a 	mov	r2,r3
 40007c4:	e0bff915 	stw	r2,-28(fp)
 40007c8:	e0bffb17 	ldw	r2,-20(fp)
 40007cc:	10c00117 	ldw	r3,4(r2)
 40007d0:	e0bff217 	ldw	r2,-56(fp)
 40007d4:	100b883a 	mov	r5,r2
 40007d8:	1809883a 	mov	r4,r3
 40007dc:	40087d40 	call	40087d4 <__subsf3>
 40007e0:	1007883a 	mov	r3,r2
 40007e4:	1805883a 	mov	r2,r3
 40007e8:	e0bffa15 	stw	r2,-24(fp)
        C_ADDTO(*Fout, scratch[1]);
 40007ec:	e0bffb17 	ldw	r2,-20(fp)
 40007f0:	10c00017 	ldw	r3,0(r2)
 40007f4:	e0bff117 	ldw	r2,-60(fp)
 40007f8:	100b883a 	mov	r5,r2
 40007fc:	1809883a 	mov	r4,r3
 4000800:	4007edc0 	call	4007edc <__addsf3>
 4000804:	1009883a 	mov	r4,r2
 4000808:	2007883a 	mov	r3,r4
 400080c:	e0bffb17 	ldw	r2,-20(fp)
 4000810:	10c00015 	stw	r3,0(r2)
 4000814:	e0bffb17 	ldw	r2,-20(fp)
 4000818:	10c00117 	ldw	r3,4(r2)
 400081c:	e0bff217 	ldw	r2,-56(fp)
 4000820:	100b883a 	mov	r5,r2
 4000824:	1809883a 	mov	r4,r3
 4000828:	4007edc0 	call	4007edc <__addsf3>
 400082c:	1009883a 	mov	r4,r2
 4000830:	2007883a 	mov	r3,r4
 4000834:	e0bffb17 	ldw	r2,-20(fp)
 4000838:	10c00115 	stw	r3,4(r2)
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 400083c:	e0bfef17 	ldw	r2,-68(fp)
 4000840:	e0fff317 	ldw	r3,-52(fp)
 4000844:	180b883a 	mov	r5,r3
 4000848:	1009883a 	mov	r4,r2
 400084c:	4007edc0 	call	4007edc <__addsf3>
 4000850:	1007883a 	mov	r3,r2
 4000854:	1805883a 	mov	r2,r3
 4000858:	e0bff515 	stw	r2,-44(fp)
 400085c:	e0bff017 	ldw	r2,-64(fp)
 4000860:	e0fff417 	ldw	r3,-48(fp)
 4000864:	180b883a 	mov	r5,r3
 4000868:	1009883a 	mov	r4,r2
 400086c:	4007edc0 	call	4007edc <__addsf3>
 4000870:	1007883a 	mov	r3,r2
 4000874:	1805883a 	mov	r2,r3
 4000878:	e0bff615 	stw	r2,-40(fp)
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 400087c:	e0bfef17 	ldw	r2,-68(fp)
 4000880:	e0fff317 	ldw	r3,-52(fp)
 4000884:	180b883a 	mov	r5,r3
 4000888:	1009883a 	mov	r4,r2
 400088c:	40087d40 	call	40087d4 <__subsf3>
 4000890:	1007883a 	mov	r3,r2
 4000894:	1805883a 	mov	r2,r3
 4000898:	e0bff715 	stw	r2,-36(fp)
 400089c:	e0bff017 	ldw	r2,-64(fp)
 40008a0:	e0fff417 	ldw	r3,-48(fp)
 40008a4:	180b883a 	mov	r5,r3
 40008a8:	1009883a 	mov	r4,r2
 40008ac:	40087d40 	call	40087d4 <__subsf3>
 40008b0:	1007883a 	mov	r3,r2
 40008b4:	1805883a 	mov	r2,r3
 40008b8:	e0bff815 	stw	r2,-32(fp)
        C_SUB( Fout[m2], *Fout, scratch[3] );
 40008bc:	e0bfed17 	ldw	r2,-76(fp)
 40008c0:	100490fa 	slli	r2,r2,3
 40008c4:	e0fffb17 	ldw	r3,-20(fp)
 40008c8:	18a1883a 	add	r16,r3,r2
 40008cc:	e0bffb17 	ldw	r2,-20(fp)
 40008d0:	10c00017 	ldw	r3,0(r2)
 40008d4:	e0bff517 	ldw	r2,-44(fp)
 40008d8:	100b883a 	mov	r5,r2
 40008dc:	1809883a 	mov	r4,r3
 40008e0:	40087d40 	call	40087d4 <__subsf3>
 40008e4:	1007883a 	mov	r3,r2
 40008e8:	1805883a 	mov	r2,r3
 40008ec:	80800015 	stw	r2,0(r16)
 40008f0:	e0bfed17 	ldw	r2,-76(fp)
 40008f4:	100490fa 	slli	r2,r2,3
 40008f8:	e0fffb17 	ldw	r3,-20(fp)
 40008fc:	18a1883a 	add	r16,r3,r2
 4000900:	e0bffb17 	ldw	r2,-20(fp)
 4000904:	10c00117 	ldw	r3,4(r2)
 4000908:	e0bff617 	ldw	r2,-40(fp)
 400090c:	100b883a 	mov	r5,r2
 4000910:	1809883a 	mov	r4,r3
 4000914:	40087d40 	call	40087d4 <__subsf3>
 4000918:	1007883a 	mov	r3,r2
 400091c:	1805883a 	mov	r2,r3
 4000920:	80800115 	stw	r2,4(r16)
        tw1 += fstride;
 4000924:	e0bffc17 	ldw	r2,-16(fp)
 4000928:	100490fa 	slli	r2,r2,3
 400092c:	e0ffe917 	ldw	r3,-92(fp)
 4000930:	1885883a 	add	r2,r3,r2
 4000934:	e0bfe915 	stw	r2,-92(fp)
        tw2 += fstride*2;
 4000938:	e0bffc17 	ldw	r2,-16(fp)
 400093c:	1004913a 	slli	r2,r2,4
 4000940:	e0ffea17 	ldw	r3,-88(fp)
 4000944:	1885883a 	add	r2,r3,r2
 4000948:	e0bfea15 	stw	r2,-88(fp)
        tw3 += fstride*3;
 400094c:	01400604 	movi	r5,24
 4000950:	e13ffc17 	ldw	r4,-16(fp)
 4000954:	4007eb40 	call	4007eb4 <__mulsi3>
 4000958:	1007883a 	mov	r3,r2
 400095c:	e0bfeb17 	ldw	r2,-84(fp)
 4000960:	10c5883a 	add	r2,r2,r3
 4000964:	e0bfeb15 	stw	r2,-84(fp)
        C_ADDTO( *Fout , scratch[3] );
 4000968:	e0bffb17 	ldw	r2,-20(fp)
 400096c:	10c00017 	ldw	r3,0(r2)
 4000970:	e0bff517 	ldw	r2,-44(fp)
 4000974:	100b883a 	mov	r5,r2
 4000978:	1809883a 	mov	r4,r3
 400097c:	4007edc0 	call	4007edc <__addsf3>
 4000980:	1009883a 	mov	r4,r2
 4000984:	2007883a 	mov	r3,r4
 4000988:	e0bffb17 	ldw	r2,-20(fp)
 400098c:	10c00015 	stw	r3,0(r2)
 4000990:	e0bffb17 	ldw	r2,-20(fp)
 4000994:	10c00117 	ldw	r3,4(r2)
 4000998:	e0bff617 	ldw	r2,-40(fp)
 400099c:	100b883a 	mov	r5,r2
 40009a0:	1809883a 	mov	r4,r3
 40009a4:	4007edc0 	call	4007edc <__addsf3>
 40009a8:	1009883a 	mov	r4,r2
 40009ac:	2007883a 	mov	r3,r4
 40009b0:	e0bffb17 	ldw	r2,-20(fp)
 40009b4:	10c00115 	stw	r3,4(r2)

        if(st->inverse) {
 40009b8:	e0bffd17 	ldw	r2,-12(fp)
 40009bc:	10800117 	ldw	r2,4(r2)
 40009c0:	10003126 	beq	r2,zero,4000a88 <kf_bfly4+0x61c>
            Fout[m].r = scratch[5].r - scratch[4].i;
 40009c4:	e0bffe17 	ldw	r2,-8(fp)
 40009c8:	100490fa 	slli	r2,r2,3
 40009cc:	e0fffb17 	ldw	r3,-20(fp)
 40009d0:	18a1883a 	add	r16,r3,r2
 40009d4:	e0bff917 	ldw	r2,-28(fp)
 40009d8:	e0fff817 	ldw	r3,-32(fp)
 40009dc:	180b883a 	mov	r5,r3
 40009e0:	1009883a 	mov	r4,r2
 40009e4:	40087d40 	call	40087d4 <__subsf3>
 40009e8:	1007883a 	mov	r3,r2
 40009ec:	1805883a 	mov	r2,r3
 40009f0:	80800015 	stw	r2,0(r16)
            Fout[m].i = scratch[5].i + scratch[4].r;
 40009f4:	e0bffe17 	ldw	r2,-8(fp)
 40009f8:	100490fa 	slli	r2,r2,3
 40009fc:	e0fffb17 	ldw	r3,-20(fp)
 4000a00:	18a1883a 	add	r16,r3,r2
 4000a04:	e0bffa17 	ldw	r2,-24(fp)
 4000a08:	e0fff717 	ldw	r3,-36(fp)
 4000a0c:	180b883a 	mov	r5,r3
 4000a10:	1009883a 	mov	r4,r2
 4000a14:	4007edc0 	call	4007edc <__addsf3>
 4000a18:	1007883a 	mov	r3,r2
 4000a1c:	1805883a 	mov	r2,r3
 4000a20:	80800115 	stw	r2,4(r16)
            Fout[m3].r = scratch[5].r + scratch[4].i;
 4000a24:	e0bfee17 	ldw	r2,-72(fp)
 4000a28:	100490fa 	slli	r2,r2,3
 4000a2c:	e0fffb17 	ldw	r3,-20(fp)
 4000a30:	18a1883a 	add	r16,r3,r2
 4000a34:	e0bff917 	ldw	r2,-28(fp)
 4000a38:	e0fff817 	ldw	r3,-32(fp)
 4000a3c:	180b883a 	mov	r5,r3
 4000a40:	1009883a 	mov	r4,r2
 4000a44:	4007edc0 	call	4007edc <__addsf3>
 4000a48:	1007883a 	mov	r3,r2
 4000a4c:	1805883a 	mov	r2,r3
 4000a50:	80800015 	stw	r2,0(r16)
            Fout[m3].i = scratch[5].i - scratch[4].r;
 4000a54:	e0bfee17 	ldw	r2,-72(fp)
 4000a58:	100490fa 	slli	r2,r2,3
 4000a5c:	e0fffb17 	ldw	r3,-20(fp)
 4000a60:	18a1883a 	add	r16,r3,r2
 4000a64:	e0bffa17 	ldw	r2,-24(fp)
 4000a68:	e0fff717 	ldw	r3,-36(fp)
 4000a6c:	180b883a 	mov	r5,r3
 4000a70:	1009883a 	mov	r4,r2
 4000a74:	40087d40 	call	40087d4 <__subsf3>
 4000a78:	1007883a 	mov	r3,r2
 4000a7c:	1805883a 	mov	r2,r3
 4000a80:	80800115 	stw	r2,4(r16)
 4000a84:	00003006 	br	4000b48 <kf_bfly4+0x6dc>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 4000a88:	e0bffe17 	ldw	r2,-8(fp)
 4000a8c:	100490fa 	slli	r2,r2,3
 4000a90:	e0fffb17 	ldw	r3,-20(fp)
 4000a94:	18a1883a 	add	r16,r3,r2
 4000a98:	e0bff917 	ldw	r2,-28(fp)
 4000a9c:	e0fff817 	ldw	r3,-32(fp)
 4000aa0:	180b883a 	mov	r5,r3
 4000aa4:	1009883a 	mov	r4,r2
 4000aa8:	4007edc0 	call	4007edc <__addsf3>
 4000aac:	1007883a 	mov	r3,r2
 4000ab0:	1805883a 	mov	r2,r3
 4000ab4:	80800015 	stw	r2,0(r16)
            Fout[m].i = scratch[5].i - scratch[4].r;
 4000ab8:	e0bffe17 	ldw	r2,-8(fp)
 4000abc:	100490fa 	slli	r2,r2,3
 4000ac0:	e0fffb17 	ldw	r3,-20(fp)
 4000ac4:	18a1883a 	add	r16,r3,r2
 4000ac8:	e0bffa17 	ldw	r2,-24(fp)
 4000acc:	e0fff717 	ldw	r3,-36(fp)
 4000ad0:	180b883a 	mov	r5,r3
 4000ad4:	1009883a 	mov	r4,r2
 4000ad8:	40087d40 	call	40087d4 <__subsf3>
 4000adc:	1007883a 	mov	r3,r2
 4000ae0:	1805883a 	mov	r2,r3
 4000ae4:	80800115 	stw	r2,4(r16)
            Fout[m3].r = scratch[5].r - scratch[4].i;
 4000ae8:	e0bfee17 	ldw	r2,-72(fp)
 4000aec:	100490fa 	slli	r2,r2,3
 4000af0:	e0fffb17 	ldw	r3,-20(fp)
 4000af4:	18a1883a 	add	r16,r3,r2
 4000af8:	e0bff917 	ldw	r2,-28(fp)
 4000afc:	e0fff817 	ldw	r3,-32(fp)
 4000b00:	180b883a 	mov	r5,r3
 4000b04:	1009883a 	mov	r4,r2
 4000b08:	40087d40 	call	40087d4 <__subsf3>
 4000b0c:	1007883a 	mov	r3,r2
 4000b10:	1805883a 	mov	r2,r3
 4000b14:	80800015 	stw	r2,0(r16)
            Fout[m3].i = scratch[5].i + scratch[4].r;
 4000b18:	e0bfee17 	ldw	r2,-72(fp)
 4000b1c:	100490fa 	slli	r2,r2,3
 4000b20:	e0fffb17 	ldw	r3,-20(fp)
 4000b24:	18a1883a 	add	r16,r3,r2
 4000b28:	e0bffa17 	ldw	r2,-24(fp)
 4000b2c:	e0fff717 	ldw	r3,-36(fp)
 4000b30:	180b883a 	mov	r5,r3
 4000b34:	1009883a 	mov	r4,r2
 4000b38:	4007edc0 	call	4007edc <__addsf3>
 4000b3c:	1007883a 	mov	r3,r2
 4000b40:	1805883a 	mov	r2,r3
 4000b44:	80800115 	stw	r2,4(r16)
        }
        ++Fout;
 4000b48:	e0bffb17 	ldw	r2,-20(fp)
 4000b4c:	10800204 	addi	r2,r2,8
 4000b50:	e0bffb15 	stw	r2,-20(fp)
    }while(--k);
 4000b54:	e0bfec17 	ldw	r2,-80(fp)
 4000b58:	10bfffc4 	addi	r2,r2,-1
 4000b5c:	e0bfec15 	stw	r2,-80(fp)
 4000b60:	e0bfec17 	ldw	r2,-80(fp)
 4000b64:	103e5b1e 	bne	r2,zero,40004d4 <__alt_data_end+0xfc0004d4>
}
 4000b68:	0001883a 	nop
 4000b6c:	e6ffff04 	addi	sp,fp,-4
 4000b70:	dfc00217 	ldw	ra,8(sp)
 4000b74:	df000117 	ldw	fp,4(sp)
 4000b78:	dc000017 	ldw	r16,0(sp)
 4000b7c:	dec00304 	addi	sp,sp,12
 4000b80:	f800283a 	ret

04000b84 <kf_bfly3>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 4000b84:	deffe704 	addi	sp,sp,-100
 4000b88:	dfc01815 	stw	ra,96(sp)
 4000b8c:	df001715 	stw	fp,92(sp)
 4000b90:	dc801615 	stw	r18,88(sp)
 4000b94:	dc401515 	stw	r17,84(sp)
 4000b98:	dc001415 	stw	r16,80(sp)
 4000b9c:	df001704 	addi	fp,sp,92
 4000ba0:	e13ff915 	stw	r4,-28(fp)
 4000ba4:	e17ffa15 	stw	r5,-24(fp)
 4000ba8:	e1bffb15 	stw	r6,-20(fp)
 4000bac:	e1fffc15 	stw	r7,-16(fp)
     size_t k=m;
 4000bb0:	e0bffc17 	ldw	r2,-16(fp)
 4000bb4:	e0bfe915 	stw	r2,-92(fp)
     const size_t m2 = 2*m;
 4000bb8:	e0bffc17 	ldw	r2,-16(fp)
 4000bbc:	1085883a 	add	r2,r2,r2
 4000bc0:	e0bfec15 	stw	r2,-80(fp)
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 4000bc4:	e17ffc17 	ldw	r5,-16(fp)
 4000bc8:	e13ffa17 	ldw	r4,-24(fp)
 4000bcc:	4007eb40 	call	4007eb4 <__mulsi3>
 4000bd0:	e0fffb17 	ldw	r3,-20(fp)
 4000bd4:	10800844 	addi	r2,r2,33
 4000bd8:	100490fa 	slli	r2,r2,3
 4000bdc:	1885883a 	add	r2,r3,r2
 4000be0:	10c00017 	ldw	r3,0(r2)
 4000be4:	e0fff715 	stw	r3,-36(fp)
 4000be8:	10800117 	ldw	r2,4(r2)
 4000bec:	e0bff815 	stw	r2,-32(fp)

     tw1=tw2=st->twiddles;
 4000bf0:	e0bffb17 	ldw	r2,-20(fp)
 4000bf4:	10804204 	addi	r2,r2,264
 4000bf8:	e0bfeb15 	stw	r2,-84(fp)
 4000bfc:	e0bfeb17 	ldw	r2,-84(fp)
 4000c00:	e0bfea15 	stw	r2,-88(fp)

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 4000c04:	e0bffc17 	ldw	r2,-16(fp)
 4000c08:	100490fa 	slli	r2,r2,3
 4000c0c:	e0fff917 	ldw	r3,-28(fp)
 4000c10:	1885883a 	add	r2,r3,r2
 4000c14:	10c00017 	ldw	r3,0(r2)
 4000c18:	e0bfea17 	ldw	r2,-88(fp)
 4000c1c:	11000017 	ldw	r4,0(r2)
 4000c20:	200b883a 	mov	r5,r4
 4000c24:	1809883a 	mov	r4,r3
 4000c28:	40083a40 	call	40083a4 <__mulsf3>
 4000c2c:	1007883a 	mov	r3,r2
 4000c30:	1821883a 	mov	r16,r3
 4000c34:	e0bffc17 	ldw	r2,-16(fp)
 4000c38:	100490fa 	slli	r2,r2,3
 4000c3c:	e0fff917 	ldw	r3,-28(fp)
 4000c40:	1885883a 	add	r2,r3,r2
 4000c44:	10c00117 	ldw	r3,4(r2)
 4000c48:	e0bfea17 	ldw	r2,-88(fp)
 4000c4c:	11000117 	ldw	r4,4(r2)
 4000c50:	200b883a 	mov	r5,r4
 4000c54:	1809883a 	mov	r4,r3
 4000c58:	40083a40 	call	40083a4 <__mulsf3>
 4000c5c:	1007883a 	mov	r3,r2
 4000c60:	1805883a 	mov	r2,r3
 4000c64:	100b883a 	mov	r5,r2
 4000c68:	8009883a 	mov	r4,r16
 4000c6c:	40087d40 	call	40087d4 <__subsf3>
 4000c70:	1007883a 	mov	r3,r2
 4000c74:	1805883a 	mov	r2,r3
 4000c78:	e0bfef15 	stw	r2,-68(fp)
 4000c7c:	e0bffc17 	ldw	r2,-16(fp)
 4000c80:	100490fa 	slli	r2,r2,3
 4000c84:	e0fff917 	ldw	r3,-28(fp)
 4000c88:	1885883a 	add	r2,r3,r2
 4000c8c:	10c00017 	ldw	r3,0(r2)
 4000c90:	e0bfea17 	ldw	r2,-88(fp)
 4000c94:	11000117 	ldw	r4,4(r2)
 4000c98:	200b883a 	mov	r5,r4
 4000c9c:	1809883a 	mov	r4,r3
 4000ca0:	40083a40 	call	40083a4 <__mulsf3>
 4000ca4:	1007883a 	mov	r3,r2
 4000ca8:	1821883a 	mov	r16,r3
 4000cac:	e0bffc17 	ldw	r2,-16(fp)
 4000cb0:	100490fa 	slli	r2,r2,3
 4000cb4:	e0fff917 	ldw	r3,-28(fp)
 4000cb8:	1885883a 	add	r2,r3,r2
 4000cbc:	10c00117 	ldw	r3,4(r2)
 4000cc0:	e0bfea17 	ldw	r2,-88(fp)
 4000cc4:	11000017 	ldw	r4,0(r2)
 4000cc8:	200b883a 	mov	r5,r4
 4000ccc:	1809883a 	mov	r4,r3
 4000cd0:	40083a40 	call	40083a4 <__mulsf3>
 4000cd4:	1007883a 	mov	r3,r2
 4000cd8:	1805883a 	mov	r2,r3
 4000cdc:	100b883a 	mov	r5,r2
 4000ce0:	8009883a 	mov	r4,r16
 4000ce4:	4007edc0 	call	4007edc <__addsf3>
 4000ce8:	1007883a 	mov	r3,r2
 4000cec:	1805883a 	mov	r2,r3
 4000cf0:	e0bff015 	stw	r2,-64(fp)
         C_MUL(scratch[2],Fout[m2] , *tw2);
 4000cf4:	e0bfec17 	ldw	r2,-80(fp)
 4000cf8:	100490fa 	slli	r2,r2,3
 4000cfc:	e0fff917 	ldw	r3,-28(fp)
 4000d00:	1885883a 	add	r2,r3,r2
 4000d04:	10c00017 	ldw	r3,0(r2)
 4000d08:	e0bfeb17 	ldw	r2,-84(fp)
 4000d0c:	11000017 	ldw	r4,0(r2)
 4000d10:	200b883a 	mov	r5,r4
 4000d14:	1809883a 	mov	r4,r3
 4000d18:	40083a40 	call	40083a4 <__mulsf3>
 4000d1c:	1007883a 	mov	r3,r2
 4000d20:	1821883a 	mov	r16,r3
 4000d24:	e0bfec17 	ldw	r2,-80(fp)
 4000d28:	100490fa 	slli	r2,r2,3
 4000d2c:	e0fff917 	ldw	r3,-28(fp)
 4000d30:	1885883a 	add	r2,r3,r2
 4000d34:	10c00117 	ldw	r3,4(r2)
 4000d38:	e0bfeb17 	ldw	r2,-84(fp)
 4000d3c:	11000117 	ldw	r4,4(r2)
 4000d40:	200b883a 	mov	r5,r4
 4000d44:	1809883a 	mov	r4,r3
 4000d48:	40083a40 	call	40083a4 <__mulsf3>
 4000d4c:	1007883a 	mov	r3,r2
 4000d50:	1805883a 	mov	r2,r3
 4000d54:	100b883a 	mov	r5,r2
 4000d58:	8009883a 	mov	r4,r16
 4000d5c:	40087d40 	call	40087d4 <__subsf3>
 4000d60:	1007883a 	mov	r3,r2
 4000d64:	1805883a 	mov	r2,r3
 4000d68:	e0bff115 	stw	r2,-60(fp)
 4000d6c:	e0bfec17 	ldw	r2,-80(fp)
 4000d70:	100490fa 	slli	r2,r2,3
 4000d74:	e0fff917 	ldw	r3,-28(fp)
 4000d78:	1885883a 	add	r2,r3,r2
 4000d7c:	10c00017 	ldw	r3,0(r2)
 4000d80:	e0bfeb17 	ldw	r2,-84(fp)
 4000d84:	11000117 	ldw	r4,4(r2)
 4000d88:	200b883a 	mov	r5,r4
 4000d8c:	1809883a 	mov	r4,r3
 4000d90:	40083a40 	call	40083a4 <__mulsf3>
 4000d94:	1007883a 	mov	r3,r2
 4000d98:	1821883a 	mov	r16,r3
 4000d9c:	e0bfec17 	ldw	r2,-80(fp)
 4000da0:	100490fa 	slli	r2,r2,3
 4000da4:	e0fff917 	ldw	r3,-28(fp)
 4000da8:	1885883a 	add	r2,r3,r2
 4000dac:	10c00117 	ldw	r3,4(r2)
 4000db0:	e0bfeb17 	ldw	r2,-84(fp)
 4000db4:	11000017 	ldw	r4,0(r2)
 4000db8:	200b883a 	mov	r5,r4
 4000dbc:	1809883a 	mov	r4,r3
 4000dc0:	40083a40 	call	40083a4 <__mulsf3>
 4000dc4:	1007883a 	mov	r3,r2
 4000dc8:	1805883a 	mov	r2,r3
 4000dcc:	100b883a 	mov	r5,r2
 4000dd0:	8009883a 	mov	r4,r16
 4000dd4:	4007edc0 	call	4007edc <__addsf3>
 4000dd8:	1007883a 	mov	r3,r2
 4000ddc:	1805883a 	mov	r2,r3
 4000de0:	e0bff215 	stw	r2,-56(fp)

         C_ADD(scratch[3],scratch[1],scratch[2]);
 4000de4:	e0bfef17 	ldw	r2,-68(fp)
 4000de8:	e0fff117 	ldw	r3,-60(fp)
 4000dec:	180b883a 	mov	r5,r3
 4000df0:	1009883a 	mov	r4,r2
 4000df4:	4007edc0 	call	4007edc <__addsf3>
 4000df8:	1007883a 	mov	r3,r2
 4000dfc:	1805883a 	mov	r2,r3
 4000e00:	e0bff315 	stw	r2,-52(fp)
 4000e04:	e0bff017 	ldw	r2,-64(fp)
 4000e08:	e0fff217 	ldw	r3,-56(fp)
 4000e0c:	180b883a 	mov	r5,r3
 4000e10:	1009883a 	mov	r4,r2
 4000e14:	4007edc0 	call	4007edc <__addsf3>
 4000e18:	1007883a 	mov	r3,r2
 4000e1c:	1805883a 	mov	r2,r3
 4000e20:	e0bff415 	stw	r2,-48(fp)
         C_SUB(scratch[0],scratch[1],scratch[2]);
 4000e24:	e0bfef17 	ldw	r2,-68(fp)
 4000e28:	e0fff117 	ldw	r3,-60(fp)
 4000e2c:	180b883a 	mov	r5,r3
 4000e30:	1009883a 	mov	r4,r2
 4000e34:	40087d40 	call	40087d4 <__subsf3>
 4000e38:	1007883a 	mov	r3,r2
 4000e3c:	1805883a 	mov	r2,r3
 4000e40:	e0bfed15 	stw	r2,-76(fp)
 4000e44:	e0bff017 	ldw	r2,-64(fp)
 4000e48:	e0fff217 	ldw	r3,-56(fp)
 4000e4c:	180b883a 	mov	r5,r3
 4000e50:	1009883a 	mov	r4,r2
 4000e54:	40087d40 	call	40087d4 <__subsf3>
 4000e58:	1007883a 	mov	r3,r2
 4000e5c:	1805883a 	mov	r2,r3
 4000e60:	e0bfee15 	stw	r2,-72(fp)
         tw1 += fstride;
 4000e64:	e0bffa17 	ldw	r2,-24(fp)
 4000e68:	100490fa 	slli	r2,r2,3
 4000e6c:	e0ffea17 	ldw	r3,-88(fp)
 4000e70:	1885883a 	add	r2,r3,r2
 4000e74:	e0bfea15 	stw	r2,-88(fp)
         tw2 += fstride*2;
 4000e78:	e0bffa17 	ldw	r2,-24(fp)
 4000e7c:	1004913a 	slli	r2,r2,4
 4000e80:	e0ffeb17 	ldw	r3,-84(fp)
 4000e84:	1885883a 	add	r2,r3,r2
 4000e88:	e0bfeb15 	stw	r2,-84(fp)

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 4000e8c:	e0bffc17 	ldw	r2,-16(fp)
 4000e90:	100490fa 	slli	r2,r2,3
 4000e94:	e0fff917 	ldw	r3,-28(fp)
 4000e98:	18a5883a 	add	r18,r3,r2
 4000e9c:	e0bff917 	ldw	r2,-28(fp)
 4000ea0:	10c00017 	ldw	r3,0(r2)
 4000ea4:	1809883a 	mov	r4,r3
 4000ea8:	400b5400 	call	400b540 <__extendsfdf2>
 4000eac:	1021883a 	mov	r16,r2
 4000eb0:	1823883a 	mov	r17,r3
 4000eb4:	e0bff317 	ldw	r2,-52(fp)
 4000eb8:	1009883a 	mov	r4,r2
 4000ebc:	400b5400 	call	400b540 <__extendsfdf2>
 4000ec0:	1011883a 	mov	r8,r2
 4000ec4:	1813883a 	mov	r9,r3
 4000ec8:	000d883a 	mov	r6,zero
 4000ecc:	01cff834 	movhi	r7,16352
 4000ed0:	4009883a 	mov	r4,r8
 4000ed4:	480b883a 	mov	r5,r9
 4000ed8:	400a27c0 	call	400a27c <__muldf3>
 4000edc:	1009883a 	mov	r4,r2
 4000ee0:	180b883a 	mov	r5,r3
 4000ee4:	2005883a 	mov	r2,r4
 4000ee8:	2807883a 	mov	r3,r5
 4000eec:	100d883a 	mov	r6,r2
 4000ef0:	180f883a 	mov	r7,r3
 4000ef4:	8009883a 	mov	r4,r16
 4000ef8:	880b883a 	mov	r5,r17
 4000efc:	400aae80 	call	400aae8 <__subdf3>
 4000f00:	1009883a 	mov	r4,r2
 4000f04:	180b883a 	mov	r5,r3
 4000f08:	2005883a 	mov	r2,r4
 4000f0c:	2807883a 	mov	r3,r5
 4000f10:	1009883a 	mov	r4,r2
 4000f14:	180b883a 	mov	r5,r3
 4000f18:	400b6500 	call	400b650 <__truncdfsf2>
 4000f1c:	1007883a 	mov	r3,r2
 4000f20:	90c00015 	stw	r3,0(r18)
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 4000f24:	e0bffc17 	ldw	r2,-16(fp)
 4000f28:	100490fa 	slli	r2,r2,3
 4000f2c:	e0fff917 	ldw	r3,-28(fp)
 4000f30:	18a5883a 	add	r18,r3,r2
 4000f34:	e0bff917 	ldw	r2,-28(fp)
 4000f38:	10c00117 	ldw	r3,4(r2)
 4000f3c:	1809883a 	mov	r4,r3
 4000f40:	400b5400 	call	400b540 <__extendsfdf2>
 4000f44:	1021883a 	mov	r16,r2
 4000f48:	1823883a 	mov	r17,r3
 4000f4c:	e0bff417 	ldw	r2,-48(fp)
 4000f50:	1009883a 	mov	r4,r2
 4000f54:	400b5400 	call	400b540 <__extendsfdf2>
 4000f58:	1011883a 	mov	r8,r2
 4000f5c:	1813883a 	mov	r9,r3
 4000f60:	000d883a 	mov	r6,zero
 4000f64:	01cff834 	movhi	r7,16352
 4000f68:	4009883a 	mov	r4,r8
 4000f6c:	480b883a 	mov	r5,r9
 4000f70:	400a27c0 	call	400a27c <__muldf3>
 4000f74:	1009883a 	mov	r4,r2
 4000f78:	180b883a 	mov	r5,r3
 4000f7c:	2005883a 	mov	r2,r4
 4000f80:	2807883a 	mov	r3,r5
 4000f84:	100d883a 	mov	r6,r2
 4000f88:	180f883a 	mov	r7,r3
 4000f8c:	8009883a 	mov	r4,r16
 4000f90:	880b883a 	mov	r5,r17
 4000f94:	400aae80 	call	400aae8 <__subdf3>
 4000f98:	1009883a 	mov	r4,r2
 4000f9c:	180b883a 	mov	r5,r3
 4000fa0:	2005883a 	mov	r2,r4
 4000fa4:	2807883a 	mov	r3,r5
 4000fa8:	1009883a 	mov	r4,r2
 4000fac:	180b883a 	mov	r5,r3
 4000fb0:	400b6500 	call	400b650 <__truncdfsf2>
 4000fb4:	1007883a 	mov	r3,r2
 4000fb8:	90c00115 	stw	r3,4(r18)

         C_MULBYSCALAR( scratch[0] , epi3.i );
 4000fbc:	e0bfed17 	ldw	r2,-76(fp)
 4000fc0:	e0fff817 	ldw	r3,-32(fp)
 4000fc4:	180b883a 	mov	r5,r3
 4000fc8:	1009883a 	mov	r4,r2
 4000fcc:	40083a40 	call	40083a4 <__mulsf3>
 4000fd0:	1007883a 	mov	r3,r2
 4000fd4:	1805883a 	mov	r2,r3
 4000fd8:	e0bfed15 	stw	r2,-76(fp)
 4000fdc:	e0bfee17 	ldw	r2,-72(fp)
 4000fe0:	e0fff817 	ldw	r3,-32(fp)
 4000fe4:	180b883a 	mov	r5,r3
 4000fe8:	1009883a 	mov	r4,r2
 4000fec:	40083a40 	call	40083a4 <__mulsf3>
 4000ff0:	1007883a 	mov	r3,r2
 4000ff4:	1805883a 	mov	r2,r3
 4000ff8:	e0bfee15 	stw	r2,-72(fp)

         C_ADDTO(*Fout,scratch[3]);
 4000ffc:	e0bff917 	ldw	r2,-28(fp)
 4001000:	10c00017 	ldw	r3,0(r2)
 4001004:	e0bff317 	ldw	r2,-52(fp)
 4001008:	100b883a 	mov	r5,r2
 400100c:	1809883a 	mov	r4,r3
 4001010:	4007edc0 	call	4007edc <__addsf3>
 4001014:	1009883a 	mov	r4,r2
 4001018:	2007883a 	mov	r3,r4
 400101c:	e0bff917 	ldw	r2,-28(fp)
 4001020:	10c00015 	stw	r3,0(r2)
 4001024:	e0bff917 	ldw	r2,-28(fp)
 4001028:	10c00117 	ldw	r3,4(r2)
 400102c:	e0bff417 	ldw	r2,-48(fp)
 4001030:	100b883a 	mov	r5,r2
 4001034:	1809883a 	mov	r4,r3
 4001038:	4007edc0 	call	4007edc <__addsf3>
 400103c:	1009883a 	mov	r4,r2
 4001040:	2007883a 	mov	r3,r4
 4001044:	e0bff917 	ldw	r2,-28(fp)
 4001048:	10c00115 	stw	r3,4(r2)

         Fout[m2].r = Fout[m].r + scratch[0].i;
 400104c:	e0bfec17 	ldw	r2,-80(fp)
 4001050:	100490fa 	slli	r2,r2,3
 4001054:	e0fff917 	ldw	r3,-28(fp)
 4001058:	18a1883a 	add	r16,r3,r2
 400105c:	e0bffc17 	ldw	r2,-16(fp)
 4001060:	100490fa 	slli	r2,r2,3
 4001064:	e0fff917 	ldw	r3,-28(fp)
 4001068:	1885883a 	add	r2,r3,r2
 400106c:	10c00017 	ldw	r3,0(r2)
 4001070:	e0bfee17 	ldw	r2,-72(fp)
 4001074:	100b883a 	mov	r5,r2
 4001078:	1809883a 	mov	r4,r3
 400107c:	4007edc0 	call	4007edc <__addsf3>
 4001080:	1007883a 	mov	r3,r2
 4001084:	1805883a 	mov	r2,r3
 4001088:	80800015 	stw	r2,0(r16)
         Fout[m2].i = Fout[m].i - scratch[0].r;
 400108c:	e0bfec17 	ldw	r2,-80(fp)
 4001090:	100490fa 	slli	r2,r2,3
 4001094:	e0fff917 	ldw	r3,-28(fp)
 4001098:	18a1883a 	add	r16,r3,r2
 400109c:	e0bffc17 	ldw	r2,-16(fp)
 40010a0:	100490fa 	slli	r2,r2,3
 40010a4:	e0fff917 	ldw	r3,-28(fp)
 40010a8:	1885883a 	add	r2,r3,r2
 40010ac:	10c00117 	ldw	r3,4(r2)
 40010b0:	e0bfed17 	ldw	r2,-76(fp)
 40010b4:	100b883a 	mov	r5,r2
 40010b8:	1809883a 	mov	r4,r3
 40010bc:	40087d40 	call	40087d4 <__subsf3>
 40010c0:	1007883a 	mov	r3,r2
 40010c4:	1805883a 	mov	r2,r3
 40010c8:	80800115 	stw	r2,4(r16)

         Fout[m].r -= scratch[0].i;
 40010cc:	e0bffc17 	ldw	r2,-16(fp)
 40010d0:	100490fa 	slli	r2,r2,3
 40010d4:	e0fff917 	ldw	r3,-28(fp)
 40010d8:	18a1883a 	add	r16,r3,r2
 40010dc:	e0bffc17 	ldw	r2,-16(fp)
 40010e0:	100490fa 	slli	r2,r2,3
 40010e4:	e0fff917 	ldw	r3,-28(fp)
 40010e8:	1885883a 	add	r2,r3,r2
 40010ec:	10c00017 	ldw	r3,0(r2)
 40010f0:	e0bfee17 	ldw	r2,-72(fp)
 40010f4:	100b883a 	mov	r5,r2
 40010f8:	1809883a 	mov	r4,r3
 40010fc:	40087d40 	call	40087d4 <__subsf3>
 4001100:	1007883a 	mov	r3,r2
 4001104:	1805883a 	mov	r2,r3
 4001108:	80800015 	stw	r2,0(r16)
         Fout[m].i += scratch[0].r;
 400110c:	e0bffc17 	ldw	r2,-16(fp)
 4001110:	100490fa 	slli	r2,r2,3
 4001114:	e0fff917 	ldw	r3,-28(fp)
 4001118:	18a1883a 	add	r16,r3,r2
 400111c:	e0bffc17 	ldw	r2,-16(fp)
 4001120:	100490fa 	slli	r2,r2,3
 4001124:	e0fff917 	ldw	r3,-28(fp)
 4001128:	1885883a 	add	r2,r3,r2
 400112c:	10c00117 	ldw	r3,4(r2)
 4001130:	e0bfed17 	ldw	r2,-76(fp)
 4001134:	100b883a 	mov	r5,r2
 4001138:	1809883a 	mov	r4,r3
 400113c:	4007edc0 	call	4007edc <__addsf3>
 4001140:	1007883a 	mov	r3,r2
 4001144:	1805883a 	mov	r2,r3
 4001148:	80800115 	stw	r2,4(r16)

         ++Fout;
 400114c:	e0bff917 	ldw	r2,-28(fp)
 4001150:	10800204 	addi	r2,r2,8
 4001154:	e0bff915 	stw	r2,-28(fp)
     }while(--k);
 4001158:	e0bfe917 	ldw	r2,-92(fp)
 400115c:	10bfffc4 	addi	r2,r2,-1
 4001160:	e0bfe915 	stw	r2,-92(fp)
 4001164:	e0bfe917 	ldw	r2,-92(fp)
 4001168:	103ea61e 	bne	r2,zero,4000c04 <__alt_data_end+0xfc000c04>
}
 400116c:	0001883a 	nop
 4001170:	e6fffd04 	addi	sp,fp,-12
 4001174:	dfc00417 	ldw	ra,16(sp)
 4001178:	df000317 	ldw	fp,12(sp)
 400117c:	dc800217 	ldw	r18,8(sp)
 4001180:	dc400117 	ldw	r17,4(sp)
 4001184:	dc000017 	ldw	r16,0(sp)
 4001188:	dec00504 	addi	sp,sp,20
 400118c:	f800283a 	ret

04001190 <kf_bfly5>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 4001190:	deffd204 	addi	sp,sp,-184
 4001194:	dfc02d15 	stw	ra,180(sp)
 4001198:	df002c15 	stw	fp,176(sp)
 400119c:	dc402b15 	stw	r17,172(sp)
 40011a0:	dc002a15 	stw	r16,168(sp)
 40011a4:	df002c04 	addi	fp,sp,176
 40011a8:	e13ffa15 	stw	r4,-24(fp)
 40011ac:	e17ffb15 	stw	r5,-20(fp)
 40011b0:	e1bffc15 	stw	r6,-16(fp)
 40011b4:	e1fffd15 	stw	r7,-12(fp)
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 40011b8:	e0bffc17 	ldw	r2,-16(fp)
 40011bc:	10804204 	addi	r2,r2,264
 40011c0:	e0bfda15 	stw	r2,-152(fp)
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 40011c4:	e0bffd17 	ldw	r2,-12(fp)
 40011c8:	e17ffb17 	ldw	r5,-20(fp)
 40011cc:	1009883a 	mov	r4,r2
 40011d0:	4007eb40 	call	4007eb4 <__mulsi3>
 40011d4:	100490fa 	slli	r2,r2,3
 40011d8:	e0ffda17 	ldw	r3,-152(fp)
 40011dc:	1885883a 	add	r2,r3,r2
 40011e0:	10c00017 	ldw	r3,0(r2)
 40011e4:	e0fff615 	stw	r3,-40(fp)
 40011e8:	10800117 	ldw	r2,4(r2)
 40011ec:	e0bff715 	stw	r2,-36(fp)
    yb = twiddles[fstride*2*m];
 40011f0:	e0bffd17 	ldw	r2,-12(fp)
 40011f4:	e17ffb17 	ldw	r5,-20(fp)
 40011f8:	1009883a 	mov	r4,r2
 40011fc:	4007eb40 	call	4007eb4 <__mulsi3>
 4001200:	1004913a 	slli	r2,r2,4
 4001204:	e0ffda17 	ldw	r3,-152(fp)
 4001208:	1885883a 	add	r2,r3,r2
 400120c:	10c00017 	ldw	r3,0(r2)
 4001210:	e0fff815 	stw	r3,-32(fp)
 4001214:	10800117 	ldw	r2,4(r2)
 4001218:	e0bff915 	stw	r2,-28(fp)

    Fout0=Fout;
 400121c:	e0bffa17 	ldw	r2,-24(fp)
 4001220:	e0bfd415 	stw	r2,-176(fp)
    Fout1=Fout0+m;
 4001224:	e0bffd17 	ldw	r2,-12(fp)
 4001228:	100490fa 	slli	r2,r2,3
 400122c:	e0ffd417 	ldw	r3,-176(fp)
 4001230:	1885883a 	add	r2,r3,r2
 4001234:	e0bfd515 	stw	r2,-172(fp)
    Fout2=Fout0+2*m;
 4001238:	e0bffd17 	ldw	r2,-12(fp)
 400123c:	1004913a 	slli	r2,r2,4
 4001240:	1007883a 	mov	r3,r2
 4001244:	e0bfd417 	ldw	r2,-176(fp)
 4001248:	10c5883a 	add	r2,r2,r3
 400124c:	e0bfd615 	stw	r2,-168(fp)
    Fout3=Fout0+3*m;
 4001250:	01400604 	movi	r5,24
 4001254:	e13ffd17 	ldw	r4,-12(fp)
 4001258:	4007eb40 	call	4007eb4 <__mulsi3>
 400125c:	1007883a 	mov	r3,r2
 4001260:	e0bfd417 	ldw	r2,-176(fp)
 4001264:	10c5883a 	add	r2,r2,r3
 4001268:	e0bfd715 	stw	r2,-164(fp)
    Fout4=Fout0+4*m;
 400126c:	e0bffd17 	ldw	r2,-12(fp)
 4001270:	1004917a 	slli	r2,r2,5
 4001274:	1007883a 	mov	r3,r2
 4001278:	e0bfd417 	ldw	r2,-176(fp)
 400127c:	10c5883a 	add	r2,r2,r3
 4001280:	e0bfd815 	stw	r2,-160(fp)

    tw=st->twiddles;
 4001284:	e0bffc17 	ldw	r2,-16(fp)
 4001288:	10804204 	addi	r2,r2,264
 400128c:	e0bfdb15 	stw	r2,-148(fp)
    for ( u=0; u<m; ++u ) {
 4001290:	e03fd915 	stw	zero,-156(fp)
 4001294:	0002a406 	br	4001d28 <kf_bfly5+0xb98>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 4001298:	e0bfd417 	ldw	r2,-176(fp)
 400129c:	10c00017 	ldw	r3,0(r2)
 40012a0:	e0ffdc15 	stw	r3,-144(fp)
 40012a4:	10800117 	ldw	r2,4(r2)
 40012a8:	e0bfdd15 	stw	r2,-140(fp)

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 40012ac:	e0bfd517 	ldw	r2,-172(fp)
 40012b0:	14000017 	ldw	r16,0(r2)
 40012b4:	e0bfd917 	ldw	r2,-156(fp)
 40012b8:	e17ffb17 	ldw	r5,-20(fp)
 40012bc:	1009883a 	mov	r4,r2
 40012c0:	4007eb40 	call	4007eb4 <__mulsi3>
 40012c4:	100490fa 	slli	r2,r2,3
 40012c8:	e0ffdb17 	ldw	r3,-148(fp)
 40012cc:	1885883a 	add	r2,r3,r2
 40012d0:	10c00017 	ldw	r3,0(r2)
 40012d4:	180b883a 	mov	r5,r3
 40012d8:	8009883a 	mov	r4,r16
 40012dc:	40083a40 	call	40083a4 <__mulsf3>
 40012e0:	1007883a 	mov	r3,r2
 40012e4:	1823883a 	mov	r17,r3
 40012e8:	e0bfd517 	ldw	r2,-172(fp)
 40012ec:	14000117 	ldw	r16,4(r2)
 40012f0:	e0bfd917 	ldw	r2,-156(fp)
 40012f4:	e17ffb17 	ldw	r5,-20(fp)
 40012f8:	1009883a 	mov	r4,r2
 40012fc:	4007eb40 	call	4007eb4 <__mulsi3>
 4001300:	100490fa 	slli	r2,r2,3
 4001304:	e0ffdb17 	ldw	r3,-148(fp)
 4001308:	1885883a 	add	r2,r3,r2
 400130c:	10c00117 	ldw	r3,4(r2)
 4001310:	180b883a 	mov	r5,r3
 4001314:	8009883a 	mov	r4,r16
 4001318:	40083a40 	call	40083a4 <__mulsf3>
 400131c:	1007883a 	mov	r3,r2
 4001320:	1805883a 	mov	r2,r3
 4001324:	100b883a 	mov	r5,r2
 4001328:	8809883a 	mov	r4,r17
 400132c:	40087d40 	call	40087d4 <__subsf3>
 4001330:	1007883a 	mov	r3,r2
 4001334:	1805883a 	mov	r2,r3
 4001338:	e0bfde15 	stw	r2,-136(fp)
 400133c:	e0bfd517 	ldw	r2,-172(fp)
 4001340:	14000017 	ldw	r16,0(r2)
 4001344:	e0bfd917 	ldw	r2,-156(fp)
 4001348:	e17ffb17 	ldw	r5,-20(fp)
 400134c:	1009883a 	mov	r4,r2
 4001350:	4007eb40 	call	4007eb4 <__mulsi3>
 4001354:	100490fa 	slli	r2,r2,3
 4001358:	e0ffdb17 	ldw	r3,-148(fp)
 400135c:	1885883a 	add	r2,r3,r2
 4001360:	10c00117 	ldw	r3,4(r2)
 4001364:	180b883a 	mov	r5,r3
 4001368:	8009883a 	mov	r4,r16
 400136c:	40083a40 	call	40083a4 <__mulsf3>
 4001370:	1007883a 	mov	r3,r2
 4001374:	1823883a 	mov	r17,r3
 4001378:	e0bfd517 	ldw	r2,-172(fp)
 400137c:	14000117 	ldw	r16,4(r2)
 4001380:	e0bfd917 	ldw	r2,-156(fp)
 4001384:	e17ffb17 	ldw	r5,-20(fp)
 4001388:	1009883a 	mov	r4,r2
 400138c:	4007eb40 	call	4007eb4 <__mulsi3>
 4001390:	100490fa 	slli	r2,r2,3
 4001394:	e0ffdb17 	ldw	r3,-148(fp)
 4001398:	1885883a 	add	r2,r3,r2
 400139c:	10c00017 	ldw	r3,0(r2)
 40013a0:	180b883a 	mov	r5,r3
 40013a4:	8009883a 	mov	r4,r16
 40013a8:	40083a40 	call	40083a4 <__mulsf3>
 40013ac:	1007883a 	mov	r3,r2
 40013b0:	1805883a 	mov	r2,r3
 40013b4:	100b883a 	mov	r5,r2
 40013b8:	8809883a 	mov	r4,r17
 40013bc:	4007edc0 	call	4007edc <__addsf3>
 40013c0:	1007883a 	mov	r3,r2
 40013c4:	1805883a 	mov	r2,r3
 40013c8:	e0bfdf15 	stw	r2,-132(fp)
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 40013cc:	e0bfd617 	ldw	r2,-168(fp)
 40013d0:	14000017 	ldw	r16,0(r2)
 40013d4:	e0bfd917 	ldw	r2,-156(fp)
 40013d8:	e17ffb17 	ldw	r5,-20(fp)
 40013dc:	1009883a 	mov	r4,r2
 40013e0:	4007eb40 	call	4007eb4 <__mulsi3>
 40013e4:	1004913a 	slli	r2,r2,4
 40013e8:	e0ffdb17 	ldw	r3,-148(fp)
 40013ec:	1885883a 	add	r2,r3,r2
 40013f0:	10c00017 	ldw	r3,0(r2)
 40013f4:	180b883a 	mov	r5,r3
 40013f8:	8009883a 	mov	r4,r16
 40013fc:	40083a40 	call	40083a4 <__mulsf3>
 4001400:	1007883a 	mov	r3,r2
 4001404:	1823883a 	mov	r17,r3
 4001408:	e0bfd617 	ldw	r2,-168(fp)
 400140c:	14000117 	ldw	r16,4(r2)
 4001410:	e0bfd917 	ldw	r2,-156(fp)
 4001414:	e17ffb17 	ldw	r5,-20(fp)
 4001418:	1009883a 	mov	r4,r2
 400141c:	4007eb40 	call	4007eb4 <__mulsi3>
 4001420:	1004913a 	slli	r2,r2,4
 4001424:	e0ffdb17 	ldw	r3,-148(fp)
 4001428:	1885883a 	add	r2,r3,r2
 400142c:	10c00117 	ldw	r3,4(r2)
 4001430:	180b883a 	mov	r5,r3
 4001434:	8009883a 	mov	r4,r16
 4001438:	40083a40 	call	40083a4 <__mulsf3>
 400143c:	1007883a 	mov	r3,r2
 4001440:	1805883a 	mov	r2,r3
 4001444:	100b883a 	mov	r5,r2
 4001448:	8809883a 	mov	r4,r17
 400144c:	40087d40 	call	40087d4 <__subsf3>
 4001450:	1007883a 	mov	r3,r2
 4001454:	1805883a 	mov	r2,r3
 4001458:	e0bfe015 	stw	r2,-128(fp)
 400145c:	e0bfd617 	ldw	r2,-168(fp)
 4001460:	14000017 	ldw	r16,0(r2)
 4001464:	e0bfd917 	ldw	r2,-156(fp)
 4001468:	e17ffb17 	ldw	r5,-20(fp)
 400146c:	1009883a 	mov	r4,r2
 4001470:	4007eb40 	call	4007eb4 <__mulsi3>
 4001474:	1004913a 	slli	r2,r2,4
 4001478:	e0ffdb17 	ldw	r3,-148(fp)
 400147c:	1885883a 	add	r2,r3,r2
 4001480:	10c00117 	ldw	r3,4(r2)
 4001484:	180b883a 	mov	r5,r3
 4001488:	8009883a 	mov	r4,r16
 400148c:	40083a40 	call	40083a4 <__mulsf3>
 4001490:	1007883a 	mov	r3,r2
 4001494:	1823883a 	mov	r17,r3
 4001498:	e0bfd617 	ldw	r2,-168(fp)
 400149c:	14000117 	ldw	r16,4(r2)
 40014a0:	e0bfd917 	ldw	r2,-156(fp)
 40014a4:	e17ffb17 	ldw	r5,-20(fp)
 40014a8:	1009883a 	mov	r4,r2
 40014ac:	4007eb40 	call	4007eb4 <__mulsi3>
 40014b0:	1004913a 	slli	r2,r2,4
 40014b4:	e0ffdb17 	ldw	r3,-148(fp)
 40014b8:	1885883a 	add	r2,r3,r2
 40014bc:	10c00017 	ldw	r3,0(r2)
 40014c0:	180b883a 	mov	r5,r3
 40014c4:	8009883a 	mov	r4,r16
 40014c8:	40083a40 	call	40083a4 <__mulsf3>
 40014cc:	1007883a 	mov	r3,r2
 40014d0:	1805883a 	mov	r2,r3
 40014d4:	100b883a 	mov	r5,r2
 40014d8:	8809883a 	mov	r4,r17
 40014dc:	4007edc0 	call	4007edc <__addsf3>
 40014e0:	1007883a 	mov	r3,r2
 40014e4:	1805883a 	mov	r2,r3
 40014e8:	e0bfe115 	stw	r2,-124(fp)
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 40014ec:	e0bfd717 	ldw	r2,-164(fp)
 40014f0:	14000017 	ldw	r16,0(r2)
 40014f4:	e0bfd917 	ldw	r2,-156(fp)
 40014f8:	e17ffb17 	ldw	r5,-20(fp)
 40014fc:	1009883a 	mov	r4,r2
 4001500:	4007eb40 	call	4007eb4 <__mulsi3>
 4001504:	01400604 	movi	r5,24
 4001508:	1009883a 	mov	r4,r2
 400150c:	4007eb40 	call	4007eb4 <__mulsi3>
 4001510:	1007883a 	mov	r3,r2
 4001514:	e0bfdb17 	ldw	r2,-148(fp)
 4001518:	10c5883a 	add	r2,r2,r3
 400151c:	10c00017 	ldw	r3,0(r2)
 4001520:	180b883a 	mov	r5,r3
 4001524:	8009883a 	mov	r4,r16
 4001528:	40083a40 	call	40083a4 <__mulsf3>
 400152c:	1007883a 	mov	r3,r2
 4001530:	1823883a 	mov	r17,r3
 4001534:	e0bfd717 	ldw	r2,-164(fp)
 4001538:	14000117 	ldw	r16,4(r2)
 400153c:	e0bfd917 	ldw	r2,-156(fp)
 4001540:	e17ffb17 	ldw	r5,-20(fp)
 4001544:	1009883a 	mov	r4,r2
 4001548:	4007eb40 	call	4007eb4 <__mulsi3>
 400154c:	01400604 	movi	r5,24
 4001550:	1009883a 	mov	r4,r2
 4001554:	4007eb40 	call	4007eb4 <__mulsi3>
 4001558:	1007883a 	mov	r3,r2
 400155c:	e0bfdb17 	ldw	r2,-148(fp)
 4001560:	10c5883a 	add	r2,r2,r3
 4001564:	10c00117 	ldw	r3,4(r2)
 4001568:	180b883a 	mov	r5,r3
 400156c:	8009883a 	mov	r4,r16
 4001570:	40083a40 	call	40083a4 <__mulsf3>
 4001574:	1007883a 	mov	r3,r2
 4001578:	1805883a 	mov	r2,r3
 400157c:	100b883a 	mov	r5,r2
 4001580:	8809883a 	mov	r4,r17
 4001584:	40087d40 	call	40087d4 <__subsf3>
 4001588:	1007883a 	mov	r3,r2
 400158c:	1805883a 	mov	r2,r3
 4001590:	e0bfe215 	stw	r2,-120(fp)
 4001594:	e0bfd717 	ldw	r2,-164(fp)
 4001598:	14000017 	ldw	r16,0(r2)
 400159c:	e0bfd917 	ldw	r2,-156(fp)
 40015a0:	e17ffb17 	ldw	r5,-20(fp)
 40015a4:	1009883a 	mov	r4,r2
 40015a8:	4007eb40 	call	4007eb4 <__mulsi3>
 40015ac:	01400604 	movi	r5,24
 40015b0:	1009883a 	mov	r4,r2
 40015b4:	4007eb40 	call	4007eb4 <__mulsi3>
 40015b8:	1007883a 	mov	r3,r2
 40015bc:	e0bfdb17 	ldw	r2,-148(fp)
 40015c0:	10c5883a 	add	r2,r2,r3
 40015c4:	10c00117 	ldw	r3,4(r2)
 40015c8:	180b883a 	mov	r5,r3
 40015cc:	8009883a 	mov	r4,r16
 40015d0:	40083a40 	call	40083a4 <__mulsf3>
 40015d4:	1007883a 	mov	r3,r2
 40015d8:	1823883a 	mov	r17,r3
 40015dc:	e0bfd717 	ldw	r2,-164(fp)
 40015e0:	14000117 	ldw	r16,4(r2)
 40015e4:	e0bfd917 	ldw	r2,-156(fp)
 40015e8:	e17ffb17 	ldw	r5,-20(fp)
 40015ec:	1009883a 	mov	r4,r2
 40015f0:	4007eb40 	call	4007eb4 <__mulsi3>
 40015f4:	01400604 	movi	r5,24
 40015f8:	1009883a 	mov	r4,r2
 40015fc:	4007eb40 	call	4007eb4 <__mulsi3>
 4001600:	1007883a 	mov	r3,r2
 4001604:	e0bfdb17 	ldw	r2,-148(fp)
 4001608:	10c5883a 	add	r2,r2,r3
 400160c:	10c00017 	ldw	r3,0(r2)
 4001610:	180b883a 	mov	r5,r3
 4001614:	8009883a 	mov	r4,r16
 4001618:	40083a40 	call	40083a4 <__mulsf3>
 400161c:	1007883a 	mov	r3,r2
 4001620:	1805883a 	mov	r2,r3
 4001624:	100b883a 	mov	r5,r2
 4001628:	8809883a 	mov	r4,r17
 400162c:	4007edc0 	call	4007edc <__addsf3>
 4001630:	1007883a 	mov	r3,r2
 4001634:	1805883a 	mov	r2,r3
 4001638:	e0bfe315 	stw	r2,-116(fp)
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 400163c:	e0bfd817 	ldw	r2,-160(fp)
 4001640:	14000017 	ldw	r16,0(r2)
 4001644:	e0bfd917 	ldw	r2,-156(fp)
 4001648:	e17ffb17 	ldw	r5,-20(fp)
 400164c:	1009883a 	mov	r4,r2
 4001650:	4007eb40 	call	4007eb4 <__mulsi3>
 4001654:	1004917a 	slli	r2,r2,5
 4001658:	e0ffdb17 	ldw	r3,-148(fp)
 400165c:	1885883a 	add	r2,r3,r2
 4001660:	10c00017 	ldw	r3,0(r2)
 4001664:	180b883a 	mov	r5,r3
 4001668:	8009883a 	mov	r4,r16
 400166c:	40083a40 	call	40083a4 <__mulsf3>
 4001670:	1007883a 	mov	r3,r2
 4001674:	1823883a 	mov	r17,r3
 4001678:	e0bfd817 	ldw	r2,-160(fp)
 400167c:	14000117 	ldw	r16,4(r2)
 4001680:	e0bfd917 	ldw	r2,-156(fp)
 4001684:	e17ffb17 	ldw	r5,-20(fp)
 4001688:	1009883a 	mov	r4,r2
 400168c:	4007eb40 	call	4007eb4 <__mulsi3>
 4001690:	1004917a 	slli	r2,r2,5
 4001694:	e0ffdb17 	ldw	r3,-148(fp)
 4001698:	1885883a 	add	r2,r3,r2
 400169c:	10c00117 	ldw	r3,4(r2)
 40016a0:	180b883a 	mov	r5,r3
 40016a4:	8009883a 	mov	r4,r16
 40016a8:	40083a40 	call	40083a4 <__mulsf3>
 40016ac:	1007883a 	mov	r3,r2
 40016b0:	1805883a 	mov	r2,r3
 40016b4:	100b883a 	mov	r5,r2
 40016b8:	8809883a 	mov	r4,r17
 40016bc:	40087d40 	call	40087d4 <__subsf3>
 40016c0:	1007883a 	mov	r3,r2
 40016c4:	1805883a 	mov	r2,r3
 40016c8:	e0bfe415 	stw	r2,-112(fp)
 40016cc:	e0bfd817 	ldw	r2,-160(fp)
 40016d0:	14000017 	ldw	r16,0(r2)
 40016d4:	e0bfd917 	ldw	r2,-156(fp)
 40016d8:	e17ffb17 	ldw	r5,-20(fp)
 40016dc:	1009883a 	mov	r4,r2
 40016e0:	4007eb40 	call	4007eb4 <__mulsi3>
 40016e4:	1004917a 	slli	r2,r2,5
 40016e8:	e0ffdb17 	ldw	r3,-148(fp)
 40016ec:	1885883a 	add	r2,r3,r2
 40016f0:	10c00117 	ldw	r3,4(r2)
 40016f4:	180b883a 	mov	r5,r3
 40016f8:	8009883a 	mov	r4,r16
 40016fc:	40083a40 	call	40083a4 <__mulsf3>
 4001700:	1007883a 	mov	r3,r2
 4001704:	1823883a 	mov	r17,r3
 4001708:	e0bfd817 	ldw	r2,-160(fp)
 400170c:	14000117 	ldw	r16,4(r2)
 4001710:	e0bfd917 	ldw	r2,-156(fp)
 4001714:	e17ffb17 	ldw	r5,-20(fp)
 4001718:	1009883a 	mov	r4,r2
 400171c:	4007eb40 	call	4007eb4 <__mulsi3>
 4001720:	1004917a 	slli	r2,r2,5
 4001724:	e0ffdb17 	ldw	r3,-148(fp)
 4001728:	1885883a 	add	r2,r3,r2
 400172c:	10c00017 	ldw	r3,0(r2)
 4001730:	180b883a 	mov	r5,r3
 4001734:	8009883a 	mov	r4,r16
 4001738:	40083a40 	call	40083a4 <__mulsf3>
 400173c:	1007883a 	mov	r3,r2
 4001740:	1805883a 	mov	r2,r3
 4001744:	100b883a 	mov	r5,r2
 4001748:	8809883a 	mov	r4,r17
 400174c:	4007edc0 	call	4007edc <__addsf3>
 4001750:	1007883a 	mov	r3,r2
 4001754:	1805883a 	mov	r2,r3
 4001758:	e0bfe515 	stw	r2,-108(fp)

        C_ADD( scratch[7],scratch[1],scratch[4]);
 400175c:	e0bfde17 	ldw	r2,-136(fp)
 4001760:	e0ffe417 	ldw	r3,-112(fp)
 4001764:	180b883a 	mov	r5,r3
 4001768:	1009883a 	mov	r4,r2
 400176c:	4007edc0 	call	4007edc <__addsf3>
 4001770:	1007883a 	mov	r3,r2
 4001774:	1805883a 	mov	r2,r3
 4001778:	e0bfea15 	stw	r2,-88(fp)
 400177c:	e0bfdf17 	ldw	r2,-132(fp)
 4001780:	e0ffe517 	ldw	r3,-108(fp)
 4001784:	180b883a 	mov	r5,r3
 4001788:	1009883a 	mov	r4,r2
 400178c:	4007edc0 	call	4007edc <__addsf3>
 4001790:	1007883a 	mov	r3,r2
 4001794:	1805883a 	mov	r2,r3
 4001798:	e0bfeb15 	stw	r2,-84(fp)
        C_SUB( scratch[10],scratch[1],scratch[4]);
 400179c:	e0bfde17 	ldw	r2,-136(fp)
 40017a0:	e0ffe417 	ldw	r3,-112(fp)
 40017a4:	180b883a 	mov	r5,r3
 40017a8:	1009883a 	mov	r4,r2
 40017ac:	40087d40 	call	40087d4 <__subsf3>
 40017b0:	1007883a 	mov	r3,r2
 40017b4:	1805883a 	mov	r2,r3
 40017b8:	e0bff015 	stw	r2,-64(fp)
 40017bc:	e0bfdf17 	ldw	r2,-132(fp)
 40017c0:	e0ffe517 	ldw	r3,-108(fp)
 40017c4:	180b883a 	mov	r5,r3
 40017c8:	1009883a 	mov	r4,r2
 40017cc:	40087d40 	call	40087d4 <__subsf3>
 40017d0:	1007883a 	mov	r3,r2
 40017d4:	1805883a 	mov	r2,r3
 40017d8:	e0bff115 	stw	r2,-60(fp)
        C_ADD( scratch[8],scratch[2],scratch[3]);
 40017dc:	e0bfe017 	ldw	r2,-128(fp)
 40017e0:	e0ffe217 	ldw	r3,-120(fp)
 40017e4:	180b883a 	mov	r5,r3
 40017e8:	1009883a 	mov	r4,r2
 40017ec:	4007edc0 	call	4007edc <__addsf3>
 40017f0:	1007883a 	mov	r3,r2
 40017f4:	1805883a 	mov	r2,r3
 40017f8:	e0bfec15 	stw	r2,-80(fp)
 40017fc:	e0bfe117 	ldw	r2,-124(fp)
 4001800:	e0ffe317 	ldw	r3,-116(fp)
 4001804:	180b883a 	mov	r5,r3
 4001808:	1009883a 	mov	r4,r2
 400180c:	4007edc0 	call	4007edc <__addsf3>
 4001810:	1007883a 	mov	r3,r2
 4001814:	1805883a 	mov	r2,r3
 4001818:	e0bfed15 	stw	r2,-76(fp)
        C_SUB( scratch[9],scratch[2],scratch[3]);
 400181c:	e0bfe017 	ldw	r2,-128(fp)
 4001820:	e0ffe217 	ldw	r3,-120(fp)
 4001824:	180b883a 	mov	r5,r3
 4001828:	1009883a 	mov	r4,r2
 400182c:	40087d40 	call	40087d4 <__subsf3>
 4001830:	1007883a 	mov	r3,r2
 4001834:	1805883a 	mov	r2,r3
 4001838:	e0bfee15 	stw	r2,-72(fp)
 400183c:	e0bfe117 	ldw	r2,-124(fp)
 4001840:	e0ffe317 	ldw	r3,-116(fp)
 4001844:	180b883a 	mov	r5,r3
 4001848:	1009883a 	mov	r4,r2
 400184c:	40087d40 	call	40087d4 <__subsf3>
 4001850:	1007883a 	mov	r3,r2
 4001854:	1805883a 	mov	r2,r3
 4001858:	e0bfef15 	stw	r2,-68(fp)

        Fout0->r += scratch[7].r + scratch[8].r;
 400185c:	e0bfd417 	ldw	r2,-176(fp)
 4001860:	14000017 	ldw	r16,0(r2)
 4001864:	e0bfea17 	ldw	r2,-88(fp)
 4001868:	e0ffec17 	ldw	r3,-80(fp)
 400186c:	180b883a 	mov	r5,r3
 4001870:	1009883a 	mov	r4,r2
 4001874:	4007edc0 	call	4007edc <__addsf3>
 4001878:	1007883a 	mov	r3,r2
 400187c:	1805883a 	mov	r2,r3
 4001880:	100b883a 	mov	r5,r2
 4001884:	8009883a 	mov	r4,r16
 4001888:	4007edc0 	call	4007edc <__addsf3>
 400188c:	1009883a 	mov	r4,r2
 4001890:	2007883a 	mov	r3,r4
 4001894:	e0bfd417 	ldw	r2,-176(fp)
 4001898:	10c00015 	stw	r3,0(r2)
        Fout0->i += scratch[7].i + scratch[8].i;
 400189c:	e0bfd417 	ldw	r2,-176(fp)
 40018a0:	14000117 	ldw	r16,4(r2)
 40018a4:	e0bfeb17 	ldw	r2,-84(fp)
 40018a8:	e0ffed17 	ldw	r3,-76(fp)
 40018ac:	180b883a 	mov	r5,r3
 40018b0:	1009883a 	mov	r4,r2
 40018b4:	4007edc0 	call	4007edc <__addsf3>
 40018b8:	1007883a 	mov	r3,r2
 40018bc:	1805883a 	mov	r2,r3
 40018c0:	100b883a 	mov	r5,r2
 40018c4:	8009883a 	mov	r4,r16
 40018c8:	4007edc0 	call	4007edc <__addsf3>
 40018cc:	1009883a 	mov	r4,r2
 40018d0:	2007883a 	mov	r3,r4
 40018d4:	e0bfd417 	ldw	r2,-176(fp)
 40018d8:	10c00115 	stw	r3,4(r2)

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 40018dc:	e43fdc17 	ldw	r16,-144(fp)
 40018e0:	e0bfea17 	ldw	r2,-88(fp)
 40018e4:	e0fff617 	ldw	r3,-40(fp)
 40018e8:	180b883a 	mov	r5,r3
 40018ec:	1009883a 	mov	r4,r2
 40018f0:	40083a40 	call	40083a4 <__mulsf3>
 40018f4:	1007883a 	mov	r3,r2
 40018f8:	1805883a 	mov	r2,r3
 40018fc:	100b883a 	mov	r5,r2
 4001900:	8009883a 	mov	r4,r16
 4001904:	4007edc0 	call	4007edc <__addsf3>
 4001908:	1007883a 	mov	r3,r2
 400190c:	1821883a 	mov	r16,r3
 4001910:	e0bfec17 	ldw	r2,-80(fp)
 4001914:	e0fff817 	ldw	r3,-32(fp)
 4001918:	180b883a 	mov	r5,r3
 400191c:	1009883a 	mov	r4,r2
 4001920:	40083a40 	call	40083a4 <__mulsf3>
 4001924:	1007883a 	mov	r3,r2
 4001928:	1805883a 	mov	r2,r3
 400192c:	100b883a 	mov	r5,r2
 4001930:	8009883a 	mov	r4,r16
 4001934:	4007edc0 	call	4007edc <__addsf3>
 4001938:	1007883a 	mov	r3,r2
 400193c:	1805883a 	mov	r2,r3
 4001940:	e0bfe615 	stw	r2,-104(fp)
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 4001944:	e43fdd17 	ldw	r16,-140(fp)
 4001948:	e0bfeb17 	ldw	r2,-84(fp)
 400194c:	e0fff617 	ldw	r3,-40(fp)
 4001950:	180b883a 	mov	r5,r3
 4001954:	1009883a 	mov	r4,r2
 4001958:	40083a40 	call	40083a4 <__mulsf3>
 400195c:	1007883a 	mov	r3,r2
 4001960:	1805883a 	mov	r2,r3
 4001964:	100b883a 	mov	r5,r2
 4001968:	8009883a 	mov	r4,r16
 400196c:	4007edc0 	call	4007edc <__addsf3>
 4001970:	1007883a 	mov	r3,r2
 4001974:	1821883a 	mov	r16,r3
 4001978:	e0bfed17 	ldw	r2,-76(fp)
 400197c:	e0fff817 	ldw	r3,-32(fp)
 4001980:	180b883a 	mov	r5,r3
 4001984:	1009883a 	mov	r4,r2
 4001988:	40083a40 	call	40083a4 <__mulsf3>
 400198c:	1007883a 	mov	r3,r2
 4001990:	1805883a 	mov	r2,r3
 4001994:	100b883a 	mov	r5,r2
 4001998:	8009883a 	mov	r4,r16
 400199c:	4007edc0 	call	4007edc <__addsf3>
 40019a0:	1007883a 	mov	r3,r2
 40019a4:	1805883a 	mov	r2,r3
 40019a8:	e0bfe715 	stw	r2,-100(fp)

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 40019ac:	e0bff117 	ldw	r2,-60(fp)
 40019b0:	e0fff717 	ldw	r3,-36(fp)
 40019b4:	180b883a 	mov	r5,r3
 40019b8:	1009883a 	mov	r4,r2
 40019bc:	40083a40 	call	40083a4 <__mulsf3>
 40019c0:	1007883a 	mov	r3,r2
 40019c4:	1821883a 	mov	r16,r3
 40019c8:	e0bfef17 	ldw	r2,-68(fp)
 40019cc:	e0fff917 	ldw	r3,-28(fp)
 40019d0:	180b883a 	mov	r5,r3
 40019d4:	1009883a 	mov	r4,r2
 40019d8:	40083a40 	call	40083a4 <__mulsf3>
 40019dc:	1007883a 	mov	r3,r2
 40019e0:	1805883a 	mov	r2,r3
 40019e4:	100b883a 	mov	r5,r2
 40019e8:	8009883a 	mov	r4,r16
 40019ec:	4007edc0 	call	4007edc <__addsf3>
 40019f0:	1007883a 	mov	r3,r2
 40019f4:	1805883a 	mov	r2,r3
 40019f8:	e0bfe815 	stw	r2,-96(fp)
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 40019fc:	e0bff017 	ldw	r2,-64(fp)
 4001a00:	e0fff717 	ldw	r3,-36(fp)
 4001a04:	180b883a 	mov	r5,r3
 4001a08:	1009883a 	mov	r4,r2
 4001a0c:	40083a40 	call	40083a4 <__mulsf3>
 4001a10:	1007883a 	mov	r3,r2
 4001a14:	1805883a 	mov	r2,r3
 4001a18:	1420003c 	xorhi	r16,r2,32768
 4001a1c:	e0bfee17 	ldw	r2,-72(fp)
 4001a20:	e0fff917 	ldw	r3,-28(fp)
 4001a24:	180b883a 	mov	r5,r3
 4001a28:	1009883a 	mov	r4,r2
 4001a2c:	40083a40 	call	40083a4 <__mulsf3>
 4001a30:	1007883a 	mov	r3,r2
 4001a34:	1805883a 	mov	r2,r3
 4001a38:	100b883a 	mov	r5,r2
 4001a3c:	8009883a 	mov	r4,r16
 4001a40:	40087d40 	call	40087d4 <__subsf3>
 4001a44:	1007883a 	mov	r3,r2
 4001a48:	1805883a 	mov	r2,r3
 4001a4c:	e0bfe915 	stw	r2,-92(fp)

        C_SUB(*Fout1,scratch[5],scratch[6]);
 4001a50:	e0bfe617 	ldw	r2,-104(fp)
 4001a54:	e0ffe817 	ldw	r3,-96(fp)
 4001a58:	180b883a 	mov	r5,r3
 4001a5c:	1009883a 	mov	r4,r2
 4001a60:	40087d40 	call	40087d4 <__subsf3>
 4001a64:	1009883a 	mov	r4,r2
 4001a68:	2007883a 	mov	r3,r4
 4001a6c:	e0bfd517 	ldw	r2,-172(fp)
 4001a70:	10c00015 	stw	r3,0(r2)
 4001a74:	e0bfe717 	ldw	r2,-100(fp)
 4001a78:	e0ffe917 	ldw	r3,-92(fp)
 4001a7c:	180b883a 	mov	r5,r3
 4001a80:	1009883a 	mov	r4,r2
 4001a84:	40087d40 	call	40087d4 <__subsf3>
 4001a88:	1009883a 	mov	r4,r2
 4001a8c:	2007883a 	mov	r3,r4
 4001a90:	e0bfd517 	ldw	r2,-172(fp)
 4001a94:	10c00115 	stw	r3,4(r2)
        C_ADD(*Fout4,scratch[5],scratch[6]);
 4001a98:	e0bfe617 	ldw	r2,-104(fp)
 4001a9c:	e0ffe817 	ldw	r3,-96(fp)
 4001aa0:	180b883a 	mov	r5,r3
 4001aa4:	1009883a 	mov	r4,r2
 4001aa8:	4007edc0 	call	4007edc <__addsf3>
 4001aac:	1009883a 	mov	r4,r2
 4001ab0:	2007883a 	mov	r3,r4
 4001ab4:	e0bfd817 	ldw	r2,-160(fp)
 4001ab8:	10c00015 	stw	r3,0(r2)
 4001abc:	e0bfe717 	ldw	r2,-100(fp)
 4001ac0:	e0ffe917 	ldw	r3,-92(fp)
 4001ac4:	180b883a 	mov	r5,r3
 4001ac8:	1009883a 	mov	r4,r2
 4001acc:	4007edc0 	call	4007edc <__addsf3>
 4001ad0:	1009883a 	mov	r4,r2
 4001ad4:	2007883a 	mov	r3,r4
 4001ad8:	e0bfd817 	ldw	r2,-160(fp)
 4001adc:	10c00115 	stw	r3,4(r2)

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 4001ae0:	e43fdc17 	ldw	r16,-144(fp)
 4001ae4:	e0bfea17 	ldw	r2,-88(fp)
 4001ae8:	e0fff817 	ldw	r3,-32(fp)
 4001aec:	180b883a 	mov	r5,r3
 4001af0:	1009883a 	mov	r4,r2
 4001af4:	40083a40 	call	40083a4 <__mulsf3>
 4001af8:	1007883a 	mov	r3,r2
 4001afc:	1805883a 	mov	r2,r3
 4001b00:	100b883a 	mov	r5,r2
 4001b04:	8009883a 	mov	r4,r16
 4001b08:	4007edc0 	call	4007edc <__addsf3>
 4001b0c:	1007883a 	mov	r3,r2
 4001b10:	1821883a 	mov	r16,r3
 4001b14:	e0bfec17 	ldw	r2,-80(fp)
 4001b18:	e0fff617 	ldw	r3,-40(fp)
 4001b1c:	180b883a 	mov	r5,r3
 4001b20:	1009883a 	mov	r4,r2
 4001b24:	40083a40 	call	40083a4 <__mulsf3>
 4001b28:	1007883a 	mov	r3,r2
 4001b2c:	1805883a 	mov	r2,r3
 4001b30:	100b883a 	mov	r5,r2
 4001b34:	8009883a 	mov	r4,r16
 4001b38:	4007edc0 	call	4007edc <__addsf3>
 4001b3c:	1007883a 	mov	r3,r2
 4001b40:	1805883a 	mov	r2,r3
 4001b44:	e0bff215 	stw	r2,-56(fp)
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 4001b48:	e43fdd17 	ldw	r16,-140(fp)
 4001b4c:	e0bfeb17 	ldw	r2,-84(fp)
 4001b50:	e0fff817 	ldw	r3,-32(fp)
 4001b54:	180b883a 	mov	r5,r3
 4001b58:	1009883a 	mov	r4,r2
 4001b5c:	40083a40 	call	40083a4 <__mulsf3>
 4001b60:	1007883a 	mov	r3,r2
 4001b64:	1805883a 	mov	r2,r3
 4001b68:	100b883a 	mov	r5,r2
 4001b6c:	8009883a 	mov	r4,r16
 4001b70:	4007edc0 	call	4007edc <__addsf3>
 4001b74:	1007883a 	mov	r3,r2
 4001b78:	1821883a 	mov	r16,r3
 4001b7c:	e0bfed17 	ldw	r2,-76(fp)
 4001b80:	e0fff617 	ldw	r3,-40(fp)
 4001b84:	180b883a 	mov	r5,r3
 4001b88:	1009883a 	mov	r4,r2
 4001b8c:	40083a40 	call	40083a4 <__mulsf3>
 4001b90:	1007883a 	mov	r3,r2
 4001b94:	1805883a 	mov	r2,r3
 4001b98:	100b883a 	mov	r5,r2
 4001b9c:	8009883a 	mov	r4,r16
 4001ba0:	4007edc0 	call	4007edc <__addsf3>
 4001ba4:	1007883a 	mov	r3,r2
 4001ba8:	1805883a 	mov	r2,r3
 4001bac:	e0bff315 	stw	r2,-52(fp)
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 4001bb0:	e0bfef17 	ldw	r2,-68(fp)
 4001bb4:	e0fff717 	ldw	r3,-36(fp)
 4001bb8:	180b883a 	mov	r5,r3
 4001bbc:	1009883a 	mov	r4,r2
 4001bc0:	40083a40 	call	40083a4 <__mulsf3>
 4001bc4:	1007883a 	mov	r3,r2
 4001bc8:	1821883a 	mov	r16,r3
 4001bcc:	e0bff117 	ldw	r2,-60(fp)
 4001bd0:	e0fff917 	ldw	r3,-28(fp)
 4001bd4:	180b883a 	mov	r5,r3
 4001bd8:	1009883a 	mov	r4,r2
 4001bdc:	40083a40 	call	40083a4 <__mulsf3>
 4001be0:	1007883a 	mov	r3,r2
 4001be4:	1805883a 	mov	r2,r3
 4001be8:	100b883a 	mov	r5,r2
 4001bec:	8009883a 	mov	r4,r16
 4001bf0:	40087d40 	call	40087d4 <__subsf3>
 4001bf4:	1007883a 	mov	r3,r2
 4001bf8:	1805883a 	mov	r2,r3
 4001bfc:	e0bff415 	stw	r2,-48(fp)
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 4001c00:	e0bff017 	ldw	r2,-64(fp)
 4001c04:	e0fff917 	ldw	r3,-28(fp)
 4001c08:	180b883a 	mov	r5,r3
 4001c0c:	1009883a 	mov	r4,r2
 4001c10:	40083a40 	call	40083a4 <__mulsf3>
 4001c14:	1007883a 	mov	r3,r2
 4001c18:	1821883a 	mov	r16,r3
 4001c1c:	e0bfee17 	ldw	r2,-72(fp)
 4001c20:	e0fff717 	ldw	r3,-36(fp)
 4001c24:	180b883a 	mov	r5,r3
 4001c28:	1009883a 	mov	r4,r2
 4001c2c:	40083a40 	call	40083a4 <__mulsf3>
 4001c30:	1007883a 	mov	r3,r2
 4001c34:	1805883a 	mov	r2,r3
 4001c38:	100b883a 	mov	r5,r2
 4001c3c:	8009883a 	mov	r4,r16
 4001c40:	40087d40 	call	40087d4 <__subsf3>
 4001c44:	1007883a 	mov	r3,r2
 4001c48:	1805883a 	mov	r2,r3
 4001c4c:	e0bff515 	stw	r2,-44(fp)

        C_ADD(*Fout2,scratch[11],scratch[12]);
 4001c50:	e0bff217 	ldw	r2,-56(fp)
 4001c54:	e0fff417 	ldw	r3,-48(fp)
 4001c58:	180b883a 	mov	r5,r3
 4001c5c:	1009883a 	mov	r4,r2
 4001c60:	4007edc0 	call	4007edc <__addsf3>
 4001c64:	1009883a 	mov	r4,r2
 4001c68:	2007883a 	mov	r3,r4
 4001c6c:	e0bfd617 	ldw	r2,-168(fp)
 4001c70:	10c00015 	stw	r3,0(r2)
 4001c74:	e0bff317 	ldw	r2,-52(fp)
 4001c78:	e0fff517 	ldw	r3,-44(fp)
 4001c7c:	180b883a 	mov	r5,r3
 4001c80:	1009883a 	mov	r4,r2
 4001c84:	4007edc0 	call	4007edc <__addsf3>
 4001c88:	1009883a 	mov	r4,r2
 4001c8c:	2007883a 	mov	r3,r4
 4001c90:	e0bfd617 	ldw	r2,-168(fp)
 4001c94:	10c00115 	stw	r3,4(r2)
        C_SUB(*Fout3,scratch[11],scratch[12]);
 4001c98:	e0bff217 	ldw	r2,-56(fp)
 4001c9c:	e0fff417 	ldw	r3,-48(fp)
 4001ca0:	180b883a 	mov	r5,r3
 4001ca4:	1009883a 	mov	r4,r2
 4001ca8:	40087d40 	call	40087d4 <__subsf3>
 4001cac:	1009883a 	mov	r4,r2
 4001cb0:	2007883a 	mov	r3,r4
 4001cb4:	e0bfd717 	ldw	r2,-164(fp)
 4001cb8:	10c00015 	stw	r3,0(r2)
 4001cbc:	e0bff317 	ldw	r2,-52(fp)
 4001cc0:	e0fff517 	ldw	r3,-44(fp)
 4001cc4:	180b883a 	mov	r5,r3
 4001cc8:	1009883a 	mov	r4,r2
 4001ccc:	40087d40 	call	40087d4 <__subsf3>
 4001cd0:	1009883a 	mov	r4,r2
 4001cd4:	2007883a 	mov	r3,r4
 4001cd8:	e0bfd717 	ldw	r2,-164(fp)
 4001cdc:	10c00115 	stw	r3,4(r2)

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 4001ce0:	e0bfd417 	ldw	r2,-176(fp)
 4001ce4:	10800204 	addi	r2,r2,8
 4001ce8:	e0bfd415 	stw	r2,-176(fp)
 4001cec:	e0bfd517 	ldw	r2,-172(fp)
 4001cf0:	10800204 	addi	r2,r2,8
 4001cf4:	e0bfd515 	stw	r2,-172(fp)
 4001cf8:	e0bfd617 	ldw	r2,-168(fp)
 4001cfc:	10800204 	addi	r2,r2,8
 4001d00:	e0bfd615 	stw	r2,-168(fp)
 4001d04:	e0bfd717 	ldw	r2,-164(fp)
 4001d08:	10800204 	addi	r2,r2,8
 4001d0c:	e0bfd715 	stw	r2,-164(fp)
 4001d10:	e0bfd817 	ldw	r2,-160(fp)
 4001d14:	10800204 	addi	r2,r2,8
 4001d18:	e0bfd815 	stw	r2,-160(fp)
    Fout2=Fout0+2*m;
    Fout3=Fout0+3*m;
    Fout4=Fout0+4*m;

    tw=st->twiddles;
    for ( u=0; u<m; ++u ) {
 4001d1c:	e0bfd917 	ldw	r2,-156(fp)
 4001d20:	10800044 	addi	r2,r2,1
 4001d24:	e0bfd915 	stw	r2,-156(fp)
 4001d28:	e0ffd917 	ldw	r3,-156(fp)
 4001d2c:	e0bffd17 	ldw	r2,-12(fp)
 4001d30:	18bd5916 	blt	r3,r2,4001298 <__alt_data_end+0xfc001298>
        C_ADD(*Fout2,scratch[11],scratch[12]);
        C_SUB(*Fout3,scratch[11],scratch[12]);

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
    }
}
 4001d34:	0001883a 	nop
 4001d38:	e6fffe04 	addi	sp,fp,-8
 4001d3c:	dfc00317 	ldw	ra,12(sp)
 4001d40:	df000217 	ldw	fp,8(sp)
 4001d44:	dc400117 	ldw	r17,4(sp)
 4001d48:	dc000017 	ldw	r16,0(sp)
 4001d4c:	dec00404 	addi	sp,sp,16
 4001d50:	f800283a 	ret

04001d54 <kf_bfly_generic>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 4001d54:	deffef04 	addi	sp,sp,-68
 4001d58:	dfc01015 	stw	ra,64(sp)
 4001d5c:	df000f15 	stw	fp,60(sp)
 4001d60:	dc000e15 	stw	r16,56(sp)
 4001d64:	df000f04 	addi	fp,sp,60
 4001d68:	e13ffb15 	stw	r4,-20(fp)
 4001d6c:	e17ffc15 	stw	r5,-16(fp)
 4001d70:	e1bffd15 	stw	r6,-12(fp)
 4001d74:	e1fffe15 	stw	r7,-8(fp)
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 4001d78:	e0bffd17 	ldw	r2,-12(fp)
 4001d7c:	10804204 	addi	r2,r2,264
 4001d80:	e0bff615 	stw	r2,-40(fp)
    kiss_fft_cpx t;
    int Norig = st->nfft;
 4001d84:	e0bffd17 	ldw	r2,-12(fp)
 4001d88:	10800017 	ldw	r2,0(r2)
 4001d8c:	e0bff715 	stw	r2,-36(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 4001d90:	e0800217 	ldw	r2,8(fp)
 4001d94:	100490fa 	slli	r2,r2,3
 4001d98:	1009883a 	mov	r4,r2
 4001d9c:	400b86c0 	call	400b86c <malloc>
 4001da0:	e0bff815 	stw	r2,-32(fp)

    for ( u=0; u<m; ++u ) {
 4001da4:	e03ff115 	stw	zero,-60(fp)
 4001da8:	0000b106 	br	4002070 <kf_bfly_generic+0x31c>
        k=u;
 4001dac:	e0bff117 	ldw	r2,-60(fp)
 4001db0:	e0bff215 	stw	r2,-56(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
 4001db4:	e03ff315 	stw	zero,-52(fp)
 4001db8:	00001306 	br	4001e08 <kf_bfly_generic+0xb4>
            scratch[q1] = Fout[ k  ];
 4001dbc:	e0bff317 	ldw	r2,-52(fp)
 4001dc0:	100490fa 	slli	r2,r2,3
 4001dc4:	e0fff817 	ldw	r3,-32(fp)
 4001dc8:	1885883a 	add	r2,r3,r2
 4001dcc:	e0fff217 	ldw	r3,-56(fp)
 4001dd0:	180690fa 	slli	r3,r3,3
 4001dd4:	e13ffb17 	ldw	r4,-20(fp)
 4001dd8:	20c7883a 	add	r3,r4,r3
 4001ddc:	19000017 	ldw	r4,0(r3)
 4001de0:	11000015 	stw	r4,0(r2)
 4001de4:	18c00117 	ldw	r3,4(r3)
 4001de8:	10c00115 	stw	r3,4(r2)
            C_FIXDIV(scratch[q1],p);
            k += m;
 4001dec:	e0fff217 	ldw	r3,-56(fp)
 4001df0:	e0bffe17 	ldw	r2,-8(fp)
 4001df4:	1885883a 	add	r2,r3,r2
 4001df8:	e0bff215 	stw	r2,-56(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);

    for ( u=0; u<m; ++u ) {
        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
 4001dfc:	e0bff317 	ldw	r2,-52(fp)
 4001e00:	10800044 	addi	r2,r2,1
 4001e04:	e0bff315 	stw	r2,-52(fp)
 4001e08:	e0fff317 	ldw	r3,-52(fp)
 4001e0c:	e0800217 	ldw	r2,8(fp)
 4001e10:	18bfea16 	blt	r3,r2,4001dbc <__alt_data_end+0xfc001dbc>
            scratch[q1] = Fout[ k  ];
            C_FIXDIV(scratch[q1],p);
            k += m;
        }

        k=u;
 4001e14:	e0bff117 	ldw	r2,-60(fp)
 4001e18:	e0bff215 	stw	r2,-56(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
 4001e1c:	e03ff315 	stw	zero,-52(fp)
 4001e20:	00008d06 	br	4002058 <kf_bfly_generic+0x304>
            int twidx=0;
 4001e24:	e03ff515 	stw	zero,-44(fp)
            Fout[ k ] = scratch[0];
 4001e28:	e0bff217 	ldw	r2,-56(fp)
 4001e2c:	100490fa 	slli	r2,r2,3
 4001e30:	e0fffb17 	ldw	r3,-20(fp)
 4001e34:	1885883a 	add	r2,r3,r2
 4001e38:	e0fff817 	ldw	r3,-32(fp)
 4001e3c:	19000017 	ldw	r4,0(r3)
 4001e40:	11000015 	stw	r4,0(r2)
 4001e44:	18c00117 	ldw	r3,4(r3)
 4001e48:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
 4001e4c:	00800044 	movi	r2,1
 4001e50:	e0bff415 	stw	r2,-48(fp)
 4001e54:	00007606 	br	4002030 <kf_bfly_generic+0x2dc>
                twidx += fstride * k;
 4001e58:	e0bff217 	ldw	r2,-56(fp)
 4001e5c:	e17ffc17 	ldw	r5,-16(fp)
 4001e60:	1009883a 	mov	r4,r2
 4001e64:	4007eb40 	call	4007eb4 <__mulsi3>
 4001e68:	1007883a 	mov	r3,r2
 4001e6c:	e0bff517 	ldw	r2,-44(fp)
 4001e70:	1885883a 	add	r2,r3,r2
 4001e74:	e0bff515 	stw	r2,-44(fp)
                if (twidx>=Norig) twidx-=Norig;
 4001e78:	e0fff517 	ldw	r3,-44(fp)
 4001e7c:	e0bff717 	ldw	r2,-36(fp)
 4001e80:	18800416 	blt	r3,r2,4001e94 <kf_bfly_generic+0x140>
 4001e84:	e0fff517 	ldw	r3,-44(fp)
 4001e88:	e0bff717 	ldw	r2,-36(fp)
 4001e8c:	1885c83a 	sub	r2,r3,r2
 4001e90:	e0bff515 	stw	r2,-44(fp)
                C_MUL(t,scratch[q] , twiddles[twidx] );
 4001e94:	e0bff417 	ldw	r2,-48(fp)
 4001e98:	100490fa 	slli	r2,r2,3
 4001e9c:	e0fff817 	ldw	r3,-32(fp)
 4001ea0:	1885883a 	add	r2,r3,r2
 4001ea4:	11000017 	ldw	r4,0(r2)
 4001ea8:	e0bff517 	ldw	r2,-44(fp)
 4001eac:	100490fa 	slli	r2,r2,3
 4001eb0:	e0fff617 	ldw	r3,-40(fp)
 4001eb4:	1885883a 	add	r2,r3,r2
 4001eb8:	10c00017 	ldw	r3,0(r2)
 4001ebc:	180b883a 	mov	r5,r3
 4001ec0:	40083a40 	call	40083a4 <__mulsf3>
 4001ec4:	1007883a 	mov	r3,r2
 4001ec8:	1821883a 	mov	r16,r3
 4001ecc:	e0bff417 	ldw	r2,-48(fp)
 4001ed0:	100490fa 	slli	r2,r2,3
 4001ed4:	e0fff817 	ldw	r3,-32(fp)
 4001ed8:	1885883a 	add	r2,r3,r2
 4001edc:	11000117 	ldw	r4,4(r2)
 4001ee0:	e0bff517 	ldw	r2,-44(fp)
 4001ee4:	100490fa 	slli	r2,r2,3
 4001ee8:	e0fff617 	ldw	r3,-40(fp)
 4001eec:	1885883a 	add	r2,r3,r2
 4001ef0:	10c00117 	ldw	r3,4(r2)
 4001ef4:	180b883a 	mov	r5,r3
 4001ef8:	40083a40 	call	40083a4 <__mulsf3>
 4001efc:	1007883a 	mov	r3,r2
 4001f00:	1805883a 	mov	r2,r3
 4001f04:	100b883a 	mov	r5,r2
 4001f08:	8009883a 	mov	r4,r16
 4001f0c:	40087d40 	call	40087d4 <__subsf3>
 4001f10:	1007883a 	mov	r3,r2
 4001f14:	1805883a 	mov	r2,r3
 4001f18:	e0bff915 	stw	r2,-28(fp)
 4001f1c:	e0bff417 	ldw	r2,-48(fp)
 4001f20:	100490fa 	slli	r2,r2,3
 4001f24:	e0fff817 	ldw	r3,-32(fp)
 4001f28:	1885883a 	add	r2,r3,r2
 4001f2c:	11000017 	ldw	r4,0(r2)
 4001f30:	e0bff517 	ldw	r2,-44(fp)
 4001f34:	100490fa 	slli	r2,r2,3
 4001f38:	e0fff617 	ldw	r3,-40(fp)
 4001f3c:	1885883a 	add	r2,r3,r2
 4001f40:	10c00117 	ldw	r3,4(r2)
 4001f44:	180b883a 	mov	r5,r3
 4001f48:	40083a40 	call	40083a4 <__mulsf3>
 4001f4c:	1007883a 	mov	r3,r2
 4001f50:	1821883a 	mov	r16,r3
 4001f54:	e0bff417 	ldw	r2,-48(fp)
 4001f58:	100490fa 	slli	r2,r2,3
 4001f5c:	e0fff817 	ldw	r3,-32(fp)
 4001f60:	1885883a 	add	r2,r3,r2
 4001f64:	11000117 	ldw	r4,4(r2)
 4001f68:	e0bff517 	ldw	r2,-44(fp)
 4001f6c:	100490fa 	slli	r2,r2,3
 4001f70:	e0fff617 	ldw	r3,-40(fp)
 4001f74:	1885883a 	add	r2,r3,r2
 4001f78:	10c00017 	ldw	r3,0(r2)
 4001f7c:	180b883a 	mov	r5,r3
 4001f80:	40083a40 	call	40083a4 <__mulsf3>
 4001f84:	1007883a 	mov	r3,r2
 4001f88:	1805883a 	mov	r2,r3
 4001f8c:	100b883a 	mov	r5,r2
 4001f90:	8009883a 	mov	r4,r16
 4001f94:	4007edc0 	call	4007edc <__addsf3>
 4001f98:	1007883a 	mov	r3,r2
 4001f9c:	1805883a 	mov	r2,r3
 4001fa0:	e0bffa15 	stw	r2,-24(fp)
                C_ADDTO( Fout[ k ] ,t);
 4001fa4:	e0bff217 	ldw	r2,-56(fp)
 4001fa8:	100490fa 	slli	r2,r2,3
 4001fac:	e0fffb17 	ldw	r3,-20(fp)
 4001fb0:	18a1883a 	add	r16,r3,r2
 4001fb4:	e0bff217 	ldw	r2,-56(fp)
 4001fb8:	100490fa 	slli	r2,r2,3
 4001fbc:	e0fffb17 	ldw	r3,-20(fp)
 4001fc0:	1885883a 	add	r2,r3,r2
 4001fc4:	10c00017 	ldw	r3,0(r2)
 4001fc8:	e0bff917 	ldw	r2,-28(fp)
 4001fcc:	100b883a 	mov	r5,r2
 4001fd0:	1809883a 	mov	r4,r3
 4001fd4:	4007edc0 	call	4007edc <__addsf3>
 4001fd8:	1007883a 	mov	r3,r2
 4001fdc:	1805883a 	mov	r2,r3
 4001fe0:	80800015 	stw	r2,0(r16)
 4001fe4:	e0bff217 	ldw	r2,-56(fp)
 4001fe8:	100490fa 	slli	r2,r2,3
 4001fec:	e0fffb17 	ldw	r3,-20(fp)
 4001ff0:	18a1883a 	add	r16,r3,r2
 4001ff4:	e0bff217 	ldw	r2,-56(fp)
 4001ff8:	100490fa 	slli	r2,r2,3
 4001ffc:	e0fffb17 	ldw	r3,-20(fp)
 4002000:	1885883a 	add	r2,r3,r2
 4002004:	10c00117 	ldw	r3,4(r2)
 4002008:	e0bffa17 	ldw	r2,-24(fp)
 400200c:	100b883a 	mov	r5,r2
 4002010:	1809883a 	mov	r4,r3
 4002014:	4007edc0 	call	4007edc <__addsf3>
 4002018:	1007883a 	mov	r3,r2
 400201c:	1805883a 	mov	r2,r3
 4002020:	80800115 	stw	r2,4(r16)

        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
            int twidx=0;
            Fout[ k ] = scratch[0];
            for (q=1;q<p;++q ) {
 4002024:	e0bff417 	ldw	r2,-48(fp)
 4002028:	10800044 	addi	r2,r2,1
 400202c:	e0bff415 	stw	r2,-48(fp)
 4002030:	e0fff417 	ldw	r3,-48(fp)
 4002034:	e0800217 	ldw	r2,8(fp)
 4002038:	18bf8716 	blt	r3,r2,4001e58 <__alt_data_end+0xfc001e58>
                twidx += fstride * k;
                if (twidx>=Norig) twidx-=Norig;
                C_MUL(t,scratch[q] , twiddles[twidx] );
                C_ADDTO( Fout[ k ] ,t);
            }
            k += m;
 400203c:	e0fff217 	ldw	r3,-56(fp)
 4002040:	e0bffe17 	ldw	r2,-8(fp)
 4002044:	1885883a 	add	r2,r3,r2
 4002048:	e0bff215 	stw	r2,-56(fp)
            C_FIXDIV(scratch[q1],p);
            k += m;
        }

        k=u;
        for ( q1=0 ; q1<p ; ++q1 ) {
 400204c:	e0bff317 	ldw	r2,-52(fp)
 4002050:	10800044 	addi	r2,r2,1
 4002054:	e0bff315 	stw	r2,-52(fp)
 4002058:	e0fff317 	ldw	r3,-52(fp)
 400205c:	e0800217 	ldw	r2,8(fp)
 4002060:	18bf7016 	blt	r3,r2,4001e24 <__alt_data_end+0xfc001e24>
    kiss_fft_cpx t;
    int Norig = st->nfft;

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);

    for ( u=0; u<m; ++u ) {
 4002064:	e0bff117 	ldw	r2,-60(fp)
 4002068:	10800044 	addi	r2,r2,1
 400206c:	e0bff115 	stw	r2,-60(fp)
 4002070:	e0fff117 	ldw	r3,-60(fp)
 4002074:	e0bffe17 	ldw	r2,-8(fp)
 4002078:	18bf4c16 	blt	r3,r2,4001dac <__alt_data_end+0xfc001dac>
                C_ADDTO( Fout[ k ] ,t);
            }
            k += m;
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 400207c:	e13ff817 	ldw	r4,-32(fp)
 4002080:	400b8800 	call	400b880 <free>
}
 4002084:	0001883a 	nop
 4002088:	e6ffff04 	addi	sp,fp,-4
 400208c:	dfc00217 	ldw	ra,8(sp)
 4002090:	df000117 	ldw	fp,4(sp)
 4002094:	dc000017 	ldw	r16,0(sp)
 4002098:	dec00304 	addi	sp,sp,12
 400209c:	f800283a 	ret

040020a0 <kf_work>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 40020a0:	defff404 	addi	sp,sp,-48
 40020a4:	dfc00b15 	stw	ra,44(sp)
 40020a8:	df000a15 	stw	fp,40(sp)
 40020ac:	df000a04 	addi	fp,sp,40
 40020b0:	e13ffc15 	stw	r4,-16(fp)
 40020b4:	e17ffd15 	stw	r5,-12(fp)
 40020b8:	e1bffe15 	stw	r6,-8(fp)
 40020bc:	e1ffff15 	stw	r7,-4(fp)
    kiss_fft_cpx * Fout_beg=Fout;
 40020c0:	e0bffc17 	ldw	r2,-16(fp)
 40020c4:	e0bff815 	stw	r2,-32(fp)
    const int p=*factors++; /* the radix  */
 40020c8:	e0800217 	ldw	r2,8(fp)
 40020cc:	10c00104 	addi	r3,r2,4
 40020d0:	e0c00215 	stw	r3,8(fp)
 40020d4:	10800017 	ldw	r2,0(r2)
 40020d8:	e0bff915 	stw	r2,-28(fp)
    const int m=*factors++; /* stage's fft length/p */
 40020dc:	e0800217 	ldw	r2,8(fp)
 40020e0:	10c00104 	addi	r3,r2,4
 40020e4:	e0c00215 	stw	r3,8(fp)
 40020e8:	10800017 	ldw	r2,0(r2)
 40020ec:	e0bffa15 	stw	r2,-24(fp)
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 40020f0:	e17ffa17 	ldw	r5,-24(fp)
 40020f4:	e13ff917 	ldw	r4,-28(fp)
 40020f8:	4007eb40 	call	4007eb4 <__mulsi3>
 40020fc:	100490fa 	slli	r2,r2,3
 4002100:	e0fffc17 	ldw	r3,-16(fp)
 4002104:	1885883a 	add	r2,r3,r2
 4002108:	e0bffb15 	stw	r2,-20(fp)
        }
        return;
    }
#endif

    if (m==1) {
 400210c:	e0bffa17 	ldw	r2,-24(fp)
 4002110:	10800058 	cmpnei	r2,r2,1
 4002114:	1000151e 	bne	r2,zero,400216c <kf_work+0xcc>
        do{
            *Fout = *f;
 4002118:	e0bffc17 	ldw	r2,-16(fp)
 400211c:	e0fffd17 	ldw	r3,-12(fp)
 4002120:	19000017 	ldw	r4,0(r3)
 4002124:	11000015 	stw	r4,0(r2)
 4002128:	18c00117 	ldw	r3,4(r3)
 400212c:	10c00115 	stw	r3,4(r2)
            f += fstride*in_stride;
 4002130:	e0bfff17 	ldw	r2,-4(fp)
 4002134:	e17ffe17 	ldw	r5,-8(fp)
 4002138:	1009883a 	mov	r4,r2
 400213c:	4007eb40 	call	4007eb4 <__mulsi3>
 4002140:	100490fa 	slli	r2,r2,3
 4002144:	e0fffd17 	ldw	r3,-12(fp)
 4002148:	1885883a 	add	r2,r3,r2
 400214c:	e0bffd15 	stw	r2,-12(fp)
        }while(++Fout != Fout_end );
 4002150:	e0bffc17 	ldw	r2,-16(fp)
 4002154:	10800204 	addi	r2,r2,8
 4002158:	e0bffc15 	stw	r2,-16(fp)
 400215c:	e0fffc17 	ldw	r3,-16(fp)
 4002160:	e0bffb17 	ldw	r2,-20(fp)
 4002164:	18bfec1e 	bne	r3,r2,4002118 <__alt_data_end+0xfc002118>
 4002168:	00001e06 	br	40021e4 <kf_work+0x144>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m, 
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 400216c:	e0bff917 	ldw	r2,-28(fp)
 4002170:	e17ffe17 	ldw	r5,-8(fp)
 4002174:	1009883a 	mov	r4,r2
 4002178:	4007eb40 	call	4007eb4 <__mulsi3>
 400217c:	1007883a 	mov	r3,r2
 4002180:	e0800317 	ldw	r2,12(fp)
 4002184:	d8800115 	stw	r2,4(sp)
 4002188:	e0800217 	ldw	r2,8(fp)
 400218c:	d8800015 	stw	r2,0(sp)
 4002190:	e1ffff17 	ldw	r7,-4(fp)
 4002194:	180d883a 	mov	r6,r3
 4002198:	e17ffd17 	ldw	r5,-12(fp)
 400219c:	e13ffc17 	ldw	r4,-16(fp)
 40021a0:	40020a00 	call	40020a0 <kf_work>
            f += fstride*in_stride;
 40021a4:	e0bfff17 	ldw	r2,-4(fp)
 40021a8:	e17ffe17 	ldw	r5,-8(fp)
 40021ac:	1009883a 	mov	r4,r2
 40021b0:	4007eb40 	call	4007eb4 <__mulsi3>
 40021b4:	100490fa 	slli	r2,r2,3
 40021b8:	e0fffd17 	ldw	r3,-12(fp)
 40021bc:	1885883a 	add	r2,r3,r2
 40021c0:	e0bffd15 	stw	r2,-12(fp)
        }while( (Fout += m) != Fout_end );
 40021c4:	e0bffa17 	ldw	r2,-24(fp)
 40021c8:	100490fa 	slli	r2,r2,3
 40021cc:	e0fffc17 	ldw	r3,-16(fp)
 40021d0:	1885883a 	add	r2,r3,r2
 40021d4:	e0bffc15 	stw	r2,-16(fp)
 40021d8:	e0fffc17 	ldw	r3,-16(fp)
 40021dc:	e0bffb17 	ldw	r2,-20(fp)
 40021e0:	18bfe21e 	bne	r3,r2,400216c <__alt_data_end+0xfc00216c>
    }

    Fout=Fout_beg;
 40021e4:	e0bff817 	ldw	r2,-32(fp)
 40021e8:	e0bffc15 	stw	r2,-16(fp)

    // recombine the p smaller DFTs 
    switch (p) {
 40021ec:	e0bff917 	ldw	r2,-28(fp)
 40021f0:	10c000e0 	cmpeqi	r3,r2,3
 40021f4:	1800101e 	bne	r3,zero,4002238 <kf_work+0x198>
 40021f8:	10c00108 	cmpgei	r3,r2,4
 40021fc:	1800031e 	bne	r3,zero,400220c <kf_work+0x16c>
 4002200:	108000a0 	cmpeqi	r2,r2,2
 4002204:	1000061e 	bne	r2,zero,4002220 <kf_work+0x180>
 4002208:	00001f06 	br	4002288 <kf_work+0x1e8>
 400220c:	10c00120 	cmpeqi	r3,r2,4
 4002210:	1800101e 	bne	r3,zero,4002254 <kf_work+0x1b4>
 4002214:	10800160 	cmpeqi	r2,r2,5
 4002218:	1000151e 	bne	r2,zero,4002270 <kf_work+0x1d0>
 400221c:	00001a06 	br	4002288 <kf_work+0x1e8>
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 4002220:	e1fffa17 	ldw	r7,-24(fp)
 4002224:	e1800317 	ldw	r6,12(fp)
 4002228:	e17ffe17 	ldw	r5,-8(fp)
 400222c:	e13ffc17 	ldw	r4,-16(fp)
 4002230:	400026c0 	call	400026c <kf_bfly2>
 4002234:	00001c06 	br	40022a8 <kf_work+0x208>
        case 3: kf_bfly3(Fout,fstride,st,m); break; 
 4002238:	e0bffa17 	ldw	r2,-24(fp)
 400223c:	100f883a 	mov	r7,r2
 4002240:	e1800317 	ldw	r6,12(fp)
 4002244:	e17ffe17 	ldw	r5,-8(fp)
 4002248:	e13ffc17 	ldw	r4,-16(fp)
 400224c:	4000b840 	call	4000b84 <kf_bfly3>
 4002250:	00001506 	br	40022a8 <kf_work+0x208>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 4002254:	e0bffa17 	ldw	r2,-24(fp)
 4002258:	100f883a 	mov	r7,r2
 400225c:	e1800317 	ldw	r6,12(fp)
 4002260:	e17ffe17 	ldw	r5,-8(fp)
 4002264:	e13ffc17 	ldw	r4,-16(fp)
 4002268:	400046c0 	call	400046c <kf_bfly4>
 400226c:	00000e06 	br	40022a8 <kf_work+0x208>
        case 5: kf_bfly5(Fout,fstride,st,m); break; 
 4002270:	e1fffa17 	ldw	r7,-24(fp)
 4002274:	e1800317 	ldw	r6,12(fp)
 4002278:	e17ffe17 	ldw	r5,-8(fp)
 400227c:	e13ffc17 	ldw	r4,-16(fp)
 4002280:	40011900 	call	4001190 <kf_bfly5>
 4002284:	00000806 	br	40022a8 <kf_work+0x208>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 4002288:	e0bff917 	ldw	r2,-28(fp)
 400228c:	d8800015 	stw	r2,0(sp)
 4002290:	e1fffa17 	ldw	r7,-24(fp)
 4002294:	e1800317 	ldw	r6,12(fp)
 4002298:	e17ffe17 	ldw	r5,-8(fp)
 400229c:	e13ffc17 	ldw	r4,-16(fp)
 40022a0:	4001d540 	call	4001d54 <kf_bfly_generic>
 40022a4:	0001883a 	nop
    }
}
 40022a8:	0001883a 	nop
 40022ac:	e037883a 	mov	sp,fp
 40022b0:	dfc00117 	ldw	ra,4(sp)
 40022b4:	df000017 	ldw	fp,0(sp)
 40022b8:	dec00204 	addi	sp,sp,8
 40022bc:	f800283a 	ret

040022c0 <kf_factor>:
    where 
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static 
void kf_factor(int n,int * facbuf)
{
 40022c0:	defff904 	addi	sp,sp,-28
 40022c4:	dfc00615 	stw	ra,24(sp)
 40022c8:	df000515 	stw	fp,20(sp)
 40022cc:	df000504 	addi	fp,sp,20
 40022d0:	e13ffe15 	stw	r4,-8(fp)
 40022d4:	e17fff15 	stw	r5,-4(fp)
    int p=4;
 40022d8:	00800104 	movi	r2,4
 40022dc:	e0bffb15 	stw	r2,-20(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 40022e0:	e13ffe17 	ldw	r4,-8(fp)
 40022e4:	400b4640 	call	400b464 <__floatsidf>
 40022e8:	100b883a 	mov	r5,r2
 40022ec:	180d883a 	mov	r6,r3
 40022f0:	2809883a 	mov	r4,r5
 40022f4:	300b883a 	mov	r5,r6
 40022f8:	4005a8c0 	call	4005a8c <sqrt>
 40022fc:	100b883a 	mov	r5,r2
 4002300:	180d883a 	mov	r6,r3
 4002304:	2809883a 	mov	r4,r5
 4002308:	300b883a 	mov	r5,r6
 400230c:	40057b00 	call	40057b0 <floor>
 4002310:	e0bffc15 	stw	r2,-16(fp)
 4002314:	e0fffd15 	stw	r3,-12(fp)

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 4002318:	00001c06 	br	400238c <kf_factor+0xcc>
            switch (p) {
 400231c:	e0bffb17 	ldw	r2,-20(fp)
 4002320:	10c000a0 	cmpeqi	r3,r2,2
 4002324:	1800051e 	bne	r3,zero,400233c <kf_factor+0x7c>
 4002328:	10800120 	cmpeqi	r2,r2,4
 400232c:	10000626 	beq	r2,zero,4002348 <kf_factor+0x88>
                case 4: p = 2; break;
 4002330:	00800084 	movi	r2,2
 4002334:	e0bffb15 	stw	r2,-20(fp)
 4002338:	00000706 	br	4002358 <kf_factor+0x98>
                case 2: p = 3; break;
 400233c:	008000c4 	movi	r2,3
 4002340:	e0bffb15 	stw	r2,-20(fp)
 4002344:	00000406 	br	4002358 <kf_factor+0x98>
                default: p += 2; break;
 4002348:	e0bffb17 	ldw	r2,-20(fp)
 400234c:	10800084 	addi	r2,r2,2
 4002350:	e0bffb15 	stw	r2,-20(fp)
 4002354:	0001883a 	nop
            }
            if (p > floor_sqrt)
 4002358:	e13ffb17 	ldw	r4,-20(fp)
 400235c:	400b4640 	call	400b464 <__floatsidf>
 4002360:	1011883a 	mov	r8,r2
 4002364:	1813883a 	mov	r9,r3
 4002368:	e1bffc17 	ldw	r6,-16(fp)
 400236c:	e1fffd17 	ldw	r7,-12(fp)
 4002370:	4009883a 	mov	r4,r8
 4002374:	480b883a 	mov	r5,r9
 4002378:	400a0ac0 	call	400a0ac <__gedf2>
 400237c:	00800116 	blt	zero,r2,4002384 <kf_factor+0xc4>
 4002380:	00000206 	br	400238c <kf_factor+0xcc>
                p = n;          /* no more factors, skip to end */
 4002384:	e0bffe17 	ldw	r2,-8(fp)
 4002388:	e0bffb15 	stw	r2,-20(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 400238c:	e0bffe17 	ldw	r2,-8(fp)
 4002390:	e17ffb17 	ldw	r5,-20(fp)
 4002394:	1009883a 	mov	r4,r2
 4002398:	4007d840 	call	4007d84 <__modsi3>
 400239c:	103fdf1e 	bne	r2,zero,400231c <__alt_data_end+0xfc00231c>
                default: p += 2; break;
            }
            if (p > floor_sqrt)
                p = n;          /* no more factors, skip to end */
        }
        n /= p;
 40023a0:	e17ffb17 	ldw	r5,-20(fp)
 40023a4:	e13ffe17 	ldw	r4,-8(fp)
 40023a8:	4007d000 	call	4007d00 <__divsi3>
 40023ac:	e0bffe15 	stw	r2,-8(fp)
        *facbuf++ = p;
 40023b0:	e0bfff17 	ldw	r2,-4(fp)
 40023b4:	10c00104 	addi	r3,r2,4
 40023b8:	e0ffff15 	stw	r3,-4(fp)
 40023bc:	e0fffb17 	ldw	r3,-20(fp)
 40023c0:	10c00015 	stw	r3,0(r2)
        *facbuf++ = n;
 40023c4:	e0bfff17 	ldw	r2,-4(fp)
 40023c8:	10c00104 	addi	r3,r2,4
 40023cc:	e0ffff15 	stw	r3,-4(fp)
 40023d0:	e0fffe17 	ldw	r3,-8(fp)
 40023d4:	10c00015 	stw	r3,0(r2)
    } while (n > 1);
 40023d8:	e0bffe17 	ldw	r2,-8(fp)
 40023dc:	10800088 	cmpgei	r2,r2,2
 40023e0:	103fea1e 	bne	r2,zero,400238c <__alt_data_end+0xfc00238c>
}
 40023e4:	0001883a 	nop
 40023e8:	e037883a 	mov	sp,fp
 40023ec:	dfc00117 	ldw	ra,4(sp)
 40023f0:	df000017 	ldw	fp,0(sp)
 40023f4:	dec00204 	addi	sp,sp,8
 40023f8:	f800283a 	ret

040023fc <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
 40023fc:	defff104 	addi	sp,sp,-60
 4002400:	dfc00e15 	stw	ra,56(sp)
 4002404:	df000d15 	stw	fp,52(sp)
 4002408:	dc400c15 	stw	r17,48(sp)
 400240c:	dc000b15 	stw	r16,44(sp)
 4002410:	df000d04 	addi	fp,sp,52
 4002414:	e13ffa15 	stw	r4,-24(fp)
 4002418:	e17ffb15 	stw	r5,-20(fp)
 400241c:	e1bffc15 	stw	r6,-16(fp)
 4002420:	e1fffd15 	stw	r7,-12(fp)
    kiss_fft_cfg st=NULL;
 4002424:	e03ff315 	stw	zero,-52(fp)
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 4002428:	e0bffa17 	ldw	r2,-24(fp)
 400242c:	10800844 	addi	r2,r2,33
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
 4002430:	100490fa 	slli	r2,r2,3
 4002434:	e0bff715 	stw	r2,-36(fp)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/

    if ( lenmem==NULL ) {
 4002438:	e0bffd17 	ldw	r2,-12(fp)
 400243c:	1000041e 	bne	r2,zero,4002450 <kiss_fft_alloc+0x54>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 4002440:	e13ff717 	ldw	r4,-36(fp)
 4002444:	400b86c0 	call	400b86c <malloc>
 4002448:	e0bff315 	stw	r2,-52(fp)
 400244c:	00000b06 	br	400247c <kiss_fft_alloc+0x80>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 4002450:	e0bffc17 	ldw	r2,-16(fp)
 4002454:	10000626 	beq	r2,zero,4002470 <kiss_fft_alloc+0x74>
 4002458:	e0bffd17 	ldw	r2,-12(fp)
 400245c:	10c00017 	ldw	r3,0(r2)
 4002460:	e0bff717 	ldw	r2,-36(fp)
 4002464:	18800236 	bltu	r3,r2,4002470 <kiss_fft_alloc+0x74>
            st = (kiss_fft_cfg)mem;
 4002468:	e0bffc17 	ldw	r2,-16(fp)
 400246c:	e0bff315 	stw	r2,-52(fp)
        *lenmem = memneeded;
 4002470:	e0bffd17 	ldw	r2,-12(fp)
 4002474:	e0fff717 	ldw	r3,-36(fp)
 4002478:	10c00015 	stw	r3,0(r2)
    }
    if (st) {
 400247c:	e0bff317 	ldw	r2,-52(fp)
 4002480:	10006226 	beq	r2,zero,400260c <kiss_fft_alloc+0x210>
        int i;
        st->nfft=nfft;
 4002484:	e0bff317 	ldw	r2,-52(fp)
 4002488:	e0fffa17 	ldw	r3,-24(fp)
 400248c:	10c00015 	stw	r3,0(r2)
        st->inverse = inverse_fft;
 4002490:	e0bff317 	ldw	r2,-52(fp)
 4002494:	e0fffb17 	ldw	r3,-20(fp)
 4002498:	10c00115 	stw	r3,4(r2)

        for (i=0;i<nfft;++i) {
 400249c:	e03ff415 	stw	zero,-48(fp)
 40024a0:	00005206 	br	40025ec <kiss_fft_alloc+0x1f0>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 40024a4:	00951134 	movhi	r2,21572
 40024a8:	108b4604 	addi	r2,r2,11544
 40024ac:	e0bff815 	stw	r2,-32(fp)
 40024b0:	00900274 	movhi	r2,16393
 40024b4:	10887ec4 	addi	r2,r2,8699
 40024b8:	e0bff915 	stw	r2,-28(fp)
            double phase = -2*pi*i / nfft;
 40024bc:	000d883a 	mov	r6,zero
 40024c0:	01f00034 	movhi	r7,49152
 40024c4:	e13ff817 	ldw	r4,-32(fp)
 40024c8:	e17ff917 	ldw	r5,-28(fp)
 40024cc:	400a27c0 	call	400a27c <__muldf3>
 40024d0:	1009883a 	mov	r4,r2
 40024d4:	180b883a 	mov	r5,r3
 40024d8:	2021883a 	mov	r16,r4
 40024dc:	2823883a 	mov	r17,r5
 40024e0:	e13ff417 	ldw	r4,-48(fp)
 40024e4:	400b4640 	call	400b464 <__floatsidf>
 40024e8:	1009883a 	mov	r4,r2
 40024ec:	180b883a 	mov	r5,r3
 40024f0:	200d883a 	mov	r6,r4
 40024f4:	280f883a 	mov	r7,r5
 40024f8:	8009883a 	mov	r4,r16
 40024fc:	880b883a 	mov	r5,r17
 4002500:	400a27c0 	call	400a27c <__muldf3>
 4002504:	1009883a 	mov	r4,r2
 4002508:	180b883a 	mov	r5,r3
 400250c:	2021883a 	mov	r16,r4
 4002510:	2823883a 	mov	r17,r5
 4002514:	e13ffa17 	ldw	r4,-24(fp)
 4002518:	400b4640 	call	400b464 <__floatsidf>
 400251c:	1009883a 	mov	r4,r2
 4002520:	180b883a 	mov	r5,r3
 4002524:	200d883a 	mov	r6,r4
 4002528:	280f883a 	mov	r7,r5
 400252c:	8009883a 	mov	r4,r16
 4002530:	880b883a 	mov	r5,r17
 4002534:	40096540 	call	4009654 <__divdf3>
 4002538:	1009883a 	mov	r4,r2
 400253c:	180b883a 	mov	r5,r3
 4002540:	e13ff515 	stw	r4,-44(fp)
 4002544:	e17ff615 	stw	r5,-40(fp)
            if (st->inverse)
 4002548:	e0bff317 	ldw	r2,-52(fp)
 400254c:	10800117 	ldw	r2,4(r2)
 4002550:	10000526 	beq	r2,zero,4002568 <kiss_fft_alloc+0x16c>
                phase *= -1;
 4002554:	e0bff517 	ldw	r2,-44(fp)
 4002558:	e0bff515 	stw	r2,-44(fp)
 400255c:	e0bff617 	ldw	r2,-40(fp)
 4002560:	10a0003c 	xorhi	r2,r2,32768
 4002564:	e0bff615 	stw	r2,-40(fp)
            kf_cexp(st->twiddles+i, phase );
 4002568:	e0bff317 	ldw	r2,-52(fp)
 400256c:	10c04204 	addi	r3,r2,264
 4002570:	e0bff417 	ldw	r2,-48(fp)
 4002574:	100490fa 	slli	r2,r2,3
 4002578:	18a1883a 	add	r16,r3,r2
 400257c:	e13ff517 	ldw	r4,-44(fp)
 4002580:	e17ff617 	ldw	r5,-40(fp)
 4002584:	40056c40 	call	40056c4 <cos>
 4002588:	100b883a 	mov	r5,r2
 400258c:	180d883a 	mov	r6,r3
 4002590:	2809883a 	mov	r4,r5
 4002594:	300b883a 	mov	r5,r6
 4002598:	400b6500 	call	400b650 <__truncdfsf2>
 400259c:	1007883a 	mov	r3,r2
 40025a0:	80c00015 	stw	r3,0(r16)
 40025a4:	e0bff317 	ldw	r2,-52(fp)
 40025a8:	10c04204 	addi	r3,r2,264
 40025ac:	e0bff417 	ldw	r2,-48(fp)
 40025b0:	100490fa 	slli	r2,r2,3
 40025b4:	18a1883a 	add	r16,r3,r2
 40025b8:	e13ff517 	ldw	r4,-44(fp)
 40025bc:	e17ff617 	ldw	r5,-40(fp)
 40025c0:	400599c0 	call	400599c <sin>
 40025c4:	100b883a 	mov	r5,r2
 40025c8:	180d883a 	mov	r6,r3
 40025cc:	2809883a 	mov	r4,r5
 40025d0:	300b883a 	mov	r5,r6
 40025d4:	400b6500 	call	400b650 <__truncdfsf2>
 40025d8:	1007883a 	mov	r3,r2
 40025dc:	80c00115 	stw	r3,4(r16)
    if (st) {
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;

        for (i=0;i<nfft;++i) {
 40025e0:	e0bff417 	ldw	r2,-48(fp)
 40025e4:	10800044 	addi	r2,r2,1
 40025e8:	e0bff415 	stw	r2,-48(fp)
 40025ec:	e0fff417 	ldw	r3,-48(fp)
 40025f0:	e0bffa17 	ldw	r2,-24(fp)
 40025f4:	18bfab16 	blt	r3,r2,40024a4 <__alt_data_end+0xfc0024a4>
            if (st->inverse)
                phase *= -1;
            kf_cexp(st->twiddles+i, phase );
        }

        kf_factor(nfft,st->factors);
 40025f8:	e0bff317 	ldw	r2,-52(fp)
 40025fc:	10800204 	addi	r2,r2,8
 4002600:	100b883a 	mov	r5,r2
 4002604:	e13ffa17 	ldw	r4,-24(fp)
 4002608:	40022c00 	call	40022c0 <kf_factor>
    }
    return st;
 400260c:	e0bff317 	ldw	r2,-52(fp)
}
 4002610:	e6fffe04 	addi	sp,fp,-8
 4002614:	dfc00317 	ldw	ra,12(sp)
 4002618:	df000217 	ldw	fp,8(sp)
 400261c:	dc400117 	ldw	r17,4(sp)
 4002620:	dc000017 	ldw	r16,0(sp)
 4002624:	dec00404 	addi	sp,sp,16
 4002628:	f800283a 	ret

0400262c <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 400262c:	defff704 	addi	sp,sp,-36
 4002630:	dfc00815 	stw	ra,32(sp)
 4002634:	df000715 	stw	fp,28(sp)
 4002638:	df000704 	addi	fp,sp,28
 400263c:	e13ffc15 	stw	r4,-16(fp)
 4002640:	e17ffd15 	stw	r5,-12(fp)
 4002644:	e1bffe15 	stw	r6,-8(fp)
 4002648:	e1ffff15 	stw	r7,-4(fp)
    if (fin == fout) {
 400264c:	e0fffd17 	ldw	r3,-12(fp)
 4002650:	e0bffe17 	ldw	r2,-8(fp)
 4002654:	18801a1e 	bne	r3,r2,40026c0 <kiss_fft_stride+0x94>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 4002658:	e0bffc17 	ldw	r2,-16(fp)
 400265c:	10800017 	ldw	r2,0(r2)
 4002660:	100490fa 	slli	r2,r2,3
 4002664:	1009883a 	mov	r4,r2
 4002668:	400b86c0 	call	400b86c <malloc>
 400266c:	e0bffb15 	stw	r2,-20(fp)
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 4002670:	e0bffc17 	ldw	r2,-16(fp)
 4002674:	10800204 	addi	r2,r2,8
 4002678:	e0fffc17 	ldw	r3,-16(fp)
 400267c:	d8c00115 	stw	r3,4(sp)
 4002680:	d8800015 	stw	r2,0(sp)
 4002684:	e1ffff17 	ldw	r7,-4(fp)
 4002688:	01800044 	movi	r6,1
 400268c:	e17ffd17 	ldw	r5,-12(fp)
 4002690:	e13ffb17 	ldw	r4,-20(fp)
 4002694:	40020a00 	call	40020a0 <kf_work>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 4002698:	e0bffc17 	ldw	r2,-16(fp)
 400269c:	10800017 	ldw	r2,0(r2)
 40026a0:	100490fa 	slli	r2,r2,3
 40026a4:	100d883a 	mov	r6,r2
 40026a8:	e17ffb17 	ldw	r5,-20(fp)
 40026ac:	e13ffe17 	ldw	r4,-8(fp)
 40026b0:	400c0a00 	call	400c0a0 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 40026b4:	e13ffb17 	ldw	r4,-20(fp)
 40026b8:	400b8800 	call	400b880 <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 40026bc:	00000a06 	br	40026e8 <kiss_fft_stride+0xbc>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
        KISS_FFT_TMP_FREE(tmpbuf);
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 40026c0:	e0bffc17 	ldw	r2,-16(fp)
 40026c4:	10800204 	addi	r2,r2,8
 40026c8:	e0fffc17 	ldw	r3,-16(fp)
 40026cc:	d8c00115 	stw	r3,4(sp)
 40026d0:	d8800015 	stw	r2,0(sp)
 40026d4:	e1ffff17 	ldw	r7,-4(fp)
 40026d8:	01800044 	movi	r6,1
 40026dc:	e17ffd17 	ldw	r5,-12(fp)
 40026e0:	e13ffe17 	ldw	r4,-8(fp)
 40026e4:	40020a00 	call	40020a0 <kf_work>
    }
}
 40026e8:	0001883a 	nop
 40026ec:	e037883a 	mov	sp,fp
 40026f0:	dfc00117 	ldw	ra,4(sp)
 40026f4:	df000017 	ldw	fp,0(sp)
 40026f8:	dec00204 	addi	sp,sp,8
 40026fc:	f800283a 	ret

04002700 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 4002700:	defffb04 	addi	sp,sp,-20
 4002704:	dfc00415 	stw	ra,16(sp)
 4002708:	df000315 	stw	fp,12(sp)
 400270c:	df000304 	addi	fp,sp,12
 4002710:	e13ffd15 	stw	r4,-12(fp)
 4002714:	e17ffe15 	stw	r5,-8(fp)
 4002718:	e1bfff15 	stw	r6,-4(fp)
    kiss_fft_stride(cfg,fin,fout,1);
 400271c:	01c00044 	movi	r7,1
 4002720:	e1bfff17 	ldw	r6,-4(fp)
 4002724:	e17ffe17 	ldw	r5,-8(fp)
 4002728:	e13ffd17 	ldw	r4,-12(fp)
 400272c:	400262c0 	call	400262c <kiss_fft_stride>
}
 4002730:	0001883a 	nop
 4002734:	e037883a 	mov	sp,fp
 4002738:	dfc00117 	ldw	ra,4(sp)
 400273c:	df000017 	ldw	fp,0(sp)
 4002740:	dec00204 	addi	sp,sp,8
 4002744:	f800283a 	ret

04002748 <kiss_fft_cleanup>:


void kiss_fft_cleanup(void)
{
 4002748:	deffff04 	addi	sp,sp,-4
 400274c:	df000015 	stw	fp,0(sp)
 4002750:	d839883a 	mov	fp,sp
    // nothing needed any more
}
 4002754:	0001883a 	nop
 4002758:	e037883a 	mov	sp,fp
 400275c:	df000017 	ldw	fp,0(sp)
 4002760:	dec00104 	addi	sp,sp,4
 4002764:	f800283a 	ret

04002768 <kiss_fft_next_fast_size>:

int kiss_fft_next_fast_size(int n)
{
 4002768:	defffc04 	addi	sp,sp,-16
 400276c:	dfc00315 	stw	ra,12(sp)
 4002770:	df000215 	stw	fp,8(sp)
 4002774:	df000204 	addi	fp,sp,8
 4002778:	e13fff15 	stw	r4,-4(fp)
    while(1) {
        int m=n;
 400277c:	e0bfff17 	ldw	r2,-4(fp)
 4002780:	e0bffe15 	stw	r2,-8(fp)
        while ( (m%2) == 0 ) m/=2;
 4002784:	00000506 	br	400279c <kiss_fft_next_fast_size+0x34>
 4002788:	e0bffe17 	ldw	r2,-8(fp)
 400278c:	1006d7fa 	srli	r3,r2,31
 4002790:	1885883a 	add	r2,r3,r2
 4002794:	1005d07a 	srai	r2,r2,1
 4002798:	e0bffe15 	stw	r2,-8(fp)
 400279c:	e0bffe17 	ldw	r2,-8(fp)
 40027a0:	1080004c 	andi	r2,r2,1
 40027a4:	103ff826 	beq	r2,zero,4002788 <__alt_data_end+0xfc002788>
        while ( (m%3) == 0 ) m/=3;
 40027a8:	00000506 	br	40027c0 <kiss_fft_next_fast_size+0x58>
 40027ac:	e0bffe17 	ldw	r2,-8(fp)
 40027b0:	014000c4 	movi	r5,3
 40027b4:	1009883a 	mov	r4,r2
 40027b8:	4007d000 	call	4007d00 <__divsi3>
 40027bc:	e0bffe15 	stw	r2,-8(fp)
 40027c0:	e0bffe17 	ldw	r2,-8(fp)
 40027c4:	014000c4 	movi	r5,3
 40027c8:	1009883a 	mov	r4,r2
 40027cc:	4007d840 	call	4007d84 <__modsi3>
 40027d0:	103ff626 	beq	r2,zero,40027ac <__alt_data_end+0xfc0027ac>
        while ( (m%5) == 0 ) m/=5;
 40027d4:	00000506 	br	40027ec <kiss_fft_next_fast_size+0x84>
 40027d8:	e0bffe17 	ldw	r2,-8(fp)
 40027dc:	01400144 	movi	r5,5
 40027e0:	1009883a 	mov	r4,r2
 40027e4:	4007d000 	call	4007d00 <__divsi3>
 40027e8:	e0bffe15 	stw	r2,-8(fp)
 40027ec:	e0bffe17 	ldw	r2,-8(fp)
 40027f0:	01400144 	movi	r5,5
 40027f4:	1009883a 	mov	r4,r2
 40027f8:	4007d840 	call	4007d84 <__modsi3>
 40027fc:	103ff626 	beq	r2,zero,40027d8 <__alt_data_end+0xfc0027d8>
        if (m<=1)
 4002800:	e0bffe17 	ldw	r2,-8(fp)
 4002804:	10800088 	cmpgei	r2,r2,2
 4002808:	10000426 	beq	r2,zero,400281c <kiss_fft_next_fast_size+0xb4>
            break; /* n is completely factorable by twos, threes, and fives */
        n++;
 400280c:	e0bfff17 	ldw	r2,-4(fp)
 4002810:	10800044 	addi	r2,r2,1
 4002814:	e0bfff15 	stw	r2,-4(fp)
    }
 4002818:	003fd806 	br	400277c <__alt_data_end+0xfc00277c>
        int m=n;
        while ( (m%2) == 0 ) m/=2;
        while ( (m%3) == 0 ) m/=3;
        while ( (m%5) == 0 ) m/=5;
        if (m<=1)
            break; /* n is completely factorable by twos, threes, and fives */
 400281c:	0001883a 	nop
        n++;
    }
    return n;
 4002820:	e0bfff17 	ldw	r2,-4(fp)
}
 4002824:	e037883a 	mov	sp,fp
 4002828:	dfc00117 	ldw	ra,4(sp)
 400282c:	df000017 	ldw	fp,0(sp)
 4002830:	dec00204 	addi	sp,sp,8
 4002834:	f800283a 	ret

04002838 <GetDriverandReport>:
#include "usb_kb/usb_ch9.h"
#include "usb_kb/USB.h"
extern HID_DEVICE hid_device;
static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };
BYTE GetDriverandReport() {
 4002838:	defff604 	addi	sp,sp,-40
 400283c:	dfc00915 	stw	ra,36(sp)
 4002840:	df000815 	stw	fp,32(sp)
 4002844:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 4002848:	00bfffc4 	movi	r2,-1
 400284c:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;
	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 4002850:	010100b4 	movhi	r4,1026
 4002854:	212a3d04 	addi	r4,r4,-22284
 4002858:	400c3140 	call	400c314 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 400285c:	00800044 	movi	r2,1
 4002860:	e0bffd05 	stb	r2,-12(fp)
 4002864:	00001f06 	br	40028e4 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 4002868:	e0bffd03 	ldbu	r2,-12(fp)
 400286c:	1009883a 	mov	r4,r2
 4002870:	40056080 	call	4005608 <GetDevtable>
 4002874:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 4002878:	e0bffe17 	ldw	r2,-8(fp)
 400287c:	10800017 	ldw	r2,0(r2)
 4002880:	10001526 	beq	r2,zero,40028d8 <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 4002884:	e0bffd03 	ldbu	r2,-12(fp)
 4002888:	100b883a 	mov	r5,r2
 400288c:	010100b4 	movhi	r4,1026
 4002890:	212a4604 	addi	r4,r4,-22248
 4002894:	400c2180 	call	400c218 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 4002898:	e0bffe17 	ldw	r2,-8(fp)
 400289c:	10800103 	ldbu	r2,4(r2)
 40028a0:	10c03fcc 	andi	r3,r2,255
 40028a4:	008100b4 	movhi	r2,1026
 40028a8:	10aa3904 	addi	r2,r2,-22300
 40028ac:	18c7883a 	add	r3,r3,r3
 40028b0:	18c7883a 	add	r3,r3,r3
 40028b4:	10c5883a 	add	r2,r2,r3
 40028b8:	10800017 	ldw	r2,0(r2)
 40028bc:	100b883a 	mov	r5,r2
 40028c0:	010100b4 	movhi	r4,1026
 40028c4:	212a4904 	addi	r4,r4,-22236
 40028c8:	400c2180 	call	400c218 <printf>
			device = tpl_ptr->devclass;
 40028cc:	e0bffe17 	ldw	r2,-8(fp)
 40028d0:	10800103 	ldbu	r2,4(r2)
 40028d4:	e0bffd45 	stb	r2,-11(fp)
	BYTE rcode;
	BYTE device = 0xFF;
	BYTE tmpbyte;
	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 40028d8:	e0bffd03 	ldbu	r2,-12(fp)
 40028dc:	10800044 	addi	r2,r2,1
 40028e0:	e0bffd05 	stb	r2,-12(fp)
 40028e4:	e0bffd03 	ldbu	r2,-12(fp)
 40028e8:	10800230 	cmpltui	r2,r2,8
 40028ec:	103fde1e 	bne	r2,zero,4002868 <__alt_data_end+0xfc002868>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 40028f0:	d0a00003 	ldbu	r2,-32768(gp)
 40028f4:	11003fcc 	andi	r4,r2,255
 40028f8:	d0a6f343 	ldbu	r2,-25651(gp)
 40028fc:	10803fcc 	andi	r2,r2,255
 4002900:	e0ffff44 	addi	r3,fp,-3
 4002904:	d8c00415 	stw	r3,16(sp)
 4002908:	00c00044 	movi	r3,1
 400290c:	d8c00315 	stw	r3,12(sp)
 4002910:	d8800215 	stw	r2,8(sp)
 4002914:	d8000115 	stw	zero,4(sp)
 4002918:	d8000015 	stw	zero,0(sp)
 400291c:	01c00084 	movi	r7,2
 4002920:	01802844 	movi	r6,161
 4002924:	000b883a 	mov	r5,zero
 4002928:	400482c0 	call	400482c <XferCtrlReq>
 400292c:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 4002930:	e0bfff03 	ldbu	r2,-4(fp)
 4002934:	10000926 	beq	r2,zero,400295c <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 4002938:	010100b4 	movhi	r4,1026
 400293c:	212a4b04 	addi	r4,r4,-22228
 4002940:	400c2180 	call	400c218 <printf>
		printf("%x \n", rcode);
 4002944:	e0bfff03 	ldbu	r2,-4(fp)
 4002948:	100b883a 	mov	r5,r2
 400294c:	010100b4 	movhi	r4,1026
 4002950:	212a5204 	addi	r4,r4,-22200
 4002954:	400c2180 	call	400c218 <printf>
 4002958:	00000906 	br	4002980 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 400295c:	010100b4 	movhi	r4,1026
 4002960:	212a5404 	addi	r4,r4,-22192
 4002964:	400c2180 	call	400c218 <printf>
		printf("%x \n", tmpbyte);
 4002968:	e0bfff43 	ldbu	r2,-3(fp)
 400296c:	10803fcc 	andi	r2,r2,255
 4002970:	100b883a 	mov	r5,r2
 4002974:	010100b4 	movhi	r4,1026
 4002978:	212a5204 	addi	r4,r4,-22200
 400297c:	400c2180 	call	400c218 <printf>
	}
	printf("Protocol: ");
 4002980:	010100b4 	movhi	r4,1026
 4002984:	212a5804 	addi	r4,r4,-22176
 4002988:	400c2180 	call	400c218 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 400298c:	d0a00003 	ldbu	r2,-32768(gp)
 4002990:	11003fcc 	andi	r4,r2,255
 4002994:	d0a6f343 	ldbu	r2,-25651(gp)
 4002998:	10803fcc 	andi	r2,r2,255
 400299c:	e0ffff44 	addi	r3,fp,-3
 40029a0:	d8c00415 	stw	r3,16(sp)
 40029a4:	00c00044 	movi	r3,1
 40029a8:	d8c00315 	stw	r3,12(sp)
 40029ac:	d8800215 	stw	r2,8(sp)
 40029b0:	d8000115 	stw	zero,4(sp)
 40029b4:	d8000015 	stw	zero,0(sp)
 40029b8:	01c000c4 	movi	r7,3
 40029bc:	01802844 	movi	r6,161
 40029c0:	000b883a 	mov	r5,zero
 40029c4:	400482c0 	call	400482c <XferCtrlReq>
 40029c8:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 40029cc:	e0bfff03 	ldbu	r2,-4(fp)
 40029d0:	10000926 	beq	r2,zero,40029f8 <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 40029d4:	010100b4 	movhi	r4,1026
 40029d8:	212a5b04 	addi	r4,r4,-22164
 40029dc:	400c2180 	call	400c218 <printf>
		printf("%x \n", rcode);
 40029e0:	e0bfff03 	ldbu	r2,-4(fp)
 40029e4:	100b883a 	mov	r5,r2
 40029e8:	010100b4 	movhi	r4,1026
 40029ec:	212a5204 	addi	r4,r4,-22200
 40029f0:	400c2180 	call	400c218 <printf>
 40029f4:	00000606 	br	4002a10 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 40029f8:	e0bfff43 	ldbu	r2,-3(fp)
 40029fc:	10803fcc 	andi	r2,r2,255
 4002a00:	100b883a 	mov	r5,r2
 4002a04:	010100b4 	movhi	r4,1026
 4002a08:	212a6204 	addi	r4,r4,-22136
 4002a0c:	400c2180 	call	400c218 <printf>
	}
	return device;
 4002a10:	e0bffd43 	ldbu	r2,-11(fp)
}
 4002a14:	e037883a 	mov	sp,fp
 4002a18:	dfc00117 	ldw	ra,4(sp)
 4002a1c:	df000017 	ldw	fp,0(sp)
 4002a20:	dec00204 	addi	sp,sp,8
 4002a24:	f800283a 	ret

04002a28 <setLED>:
void setLED(int LED) {
 4002a28:	defffe04 	addi	sp,sp,-8
 4002a2c:	df000115 	stw	fp,4(sp)
 4002a30:	df000104 	addi	fp,sp,4
 4002a34:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 4002a38:	00820034 	movhi	r2,2048
 4002a3c:	10947004 	addi	r2,r2,20928
 4002a40:	10c00037 	ldwio	r3,0(r2)
 4002a44:	01000044 	movi	r4,1
 4002a48:	e0bfff17 	ldw	r2,-4(fp)
 4002a4c:	2084983a 	sll	r2,r4,r2
 4002a50:	1886b03a 	or	r3,r3,r2
 4002a54:	00820034 	movhi	r2,2048
 4002a58:	10947004 	addi	r2,r2,20928
 4002a5c:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 4002a60:	0001883a 	nop
 4002a64:	e037883a 	mov	sp,fp
 4002a68:	df000017 	ldw	fp,0(sp)
 4002a6c:	dec00104 	addi	sp,sp,4
 4002a70:	f800283a 	ret

04002a74 <clearLED>:
void clearLED(int LED) {
 4002a74:	defffe04 	addi	sp,sp,-8
 4002a78:	df000115 	stw	fp,4(sp)
 4002a7c:	df000104 	addi	fp,sp,4
 4002a80:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 4002a84:	00820034 	movhi	r2,2048
 4002a88:	10947004 	addi	r2,r2,20928
 4002a8c:	10c00037 	ldwio	r3,0(r2)
 4002a90:	01000044 	movi	r4,1
 4002a94:	e0bfff17 	ldw	r2,-4(fp)
 4002a98:	2084983a 	sll	r2,r4,r2
 4002a9c:	0084303a 	nor	r2,zero,r2
 4002aa0:	1886703a 	and	r3,r3,r2
 4002aa4:	00820034 	movhi	r2,2048
 4002aa8:	10947004 	addi	r2,r2,20928
 4002aac:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
}
 4002ab0:	0001883a 	nop
 4002ab4:	e037883a 	mov	sp,fp
 4002ab8:	df000017 	ldw	fp,0(sp)
 4002abc:	dec00104 	addi	sp,sp,4
 4002ac0:	f800283a 	ret

04002ac4 <printSignedHex0>:
void printSignedHex0(signed char value) {
 4002ac4:	defffc04 	addi	sp,sp,-16
 4002ac8:	dfc00315 	stw	ra,12(sp)
 4002acc:	df000215 	stw	fp,8(sp)
 4002ad0:	df000204 	addi	fp,sp,8
 4002ad4:	2005883a 	mov	r2,r4
 4002ad8:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4002adc:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4002ae0:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 4002ae4:	00820034 	movhi	r2,2048
 4002ae8:	10947804 	addi	r2,r2,20960
 4002aec:	10800037 	ldwio	r2,0(r2)
 4002af0:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 4002af4:	e0bfff07 	ldb	r2,-4(fp)
 4002af8:	1000060e 	bge	r2,zero,4002b14 <printSignedHex0+0x50>
		setLED(11);
 4002afc:	010002c4 	movi	r4,11
 4002b00:	4002a280 	call	4002a28 <setLED>
		value = -value;
 4002b04:	e0bfff03 	ldbu	r2,-4(fp)
 4002b08:	0085c83a 	sub	r2,zero,r2
 4002b0c:	e0bfff05 	stb	r2,-4(fp)
 4002b10:	00000206 	br	4002b1c <printSignedHex0+0x58>
	} else {
		clearLED(11);
 4002b14:	010002c4 	movi	r4,11
 4002b18:	4002a740 	call	4002a74 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 4002b1c:	e0bfff03 	ldbu	r2,-4(fp)
 4002b20:	108018c4 	addi	r2,r2,99
 4002b24:	10803fcc 	andi	r2,r2,255
 4002b28:	108031f0 	cmpltui	r2,r2,199
 4002b2c:	1000031e 	bne	r2,zero,4002b3c <printSignedHex0+0x78>
		setLED(13);
 4002b30:	01000344 	movi	r4,13
 4002b34:	4002a280 	call	4002a28 <setLED>
 4002b38:	00000206 	br	4002b44 <printSignedHex0+0x80>
	else
		clearLED(13);
 4002b3c:	01000344 	movi	r4,13
 4002b40:	4002a740 	call	4002a74 <clearLED>
	value = value % 100;
 4002b44:	e0bfff07 	ldb	r2,-4(fp)
 4002b48:	01401904 	movi	r5,100
 4002b4c:	1009883a 	mov	r4,r2
 4002b50:	4007d840 	call	4007d84 <__modsi3>
 4002b54:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 4002b58:	e0bfff07 	ldb	r2,-4(fp)
 4002b5c:	01400284 	movi	r5,10
 4002b60:	1009883a 	mov	r4,r2
 4002b64:	4007d000 	call	4007d00 <__divsi3>
 4002b68:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 4002b6c:	e0bfff07 	ldb	r2,-4(fp)
 4002b70:	01400284 	movi	r5,10
 4002b74:	1009883a 	mov	r4,r2
 4002b78:	4007d840 	call	4007d84 <__modsi3>
 4002b7c:	e0bffe45 	stb	r2,-7(fp)
	pio_val &= 0x00FF;
 4002b80:	e0bffe8b 	ldhu	r2,-6(fp)
 4002b84:	10803fcc 	andi	r2,r2,255
 4002b88:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 4002b8c:	e0bffe03 	ldbu	r2,-8(fp)
 4002b90:	1004933a 	slli	r2,r2,12
 4002b94:	1007883a 	mov	r3,r2
 4002b98:	e0bffe8b 	ldhu	r2,-6(fp)
 4002b9c:	1884b03a 	or	r2,r3,r2
 4002ba0:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 4002ba4:	e0bffe43 	ldbu	r2,-7(fp)
 4002ba8:	1004923a 	slli	r2,r2,8
 4002bac:	1007883a 	mov	r3,r2
 4002bb0:	e0bffe8b 	ldhu	r2,-6(fp)
 4002bb4:	1884b03a 	or	r2,r3,r2
 4002bb8:	e0bffe8d 	sth	r2,-6(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4002bbc:	e0fffe8b 	ldhu	r3,-6(fp)
 4002bc0:	00820034 	movhi	r2,2048
 4002bc4:	10947804 	addi	r2,r2,20960
 4002bc8:	10c00035 	stwio	r3,0(r2)
}
 4002bcc:	0001883a 	nop
 4002bd0:	e037883a 	mov	sp,fp
 4002bd4:	dfc00117 	ldw	ra,4(sp)
 4002bd8:	df000017 	ldw	fp,0(sp)
 4002bdc:	dec00204 	addi	sp,sp,8
 4002be0:	f800283a 	ret

04002be4 <printSignedHex1>:
void printSignedHex1(signed char value) {
 4002be4:	defffb04 	addi	sp,sp,-20
 4002be8:	dfc00415 	stw	ra,16(sp)
 4002bec:	df000315 	stw	fp,12(sp)
 4002bf0:	df000304 	addi	fp,sp,12
 4002bf4:	2005883a 	mov	r2,r4
 4002bf8:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4002bfc:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4002c00:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 4002c04:	00820034 	movhi	r2,2048
 4002c08:	10947804 	addi	r2,r2,20960
 4002c0c:	10800037 	ldwio	r2,0(r2)
 4002c10:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 4002c14:	e0bfff07 	ldb	r2,-4(fp)
 4002c18:	1000060e 	bge	r2,zero,4002c34 <printSignedHex1+0x50>
		setLED(10);
 4002c1c:	01000284 	movi	r4,10
 4002c20:	4002a280 	call	4002a28 <setLED>
		value = -value;
 4002c24:	e0bfff03 	ldbu	r2,-4(fp)
 4002c28:	0085c83a 	sub	r2,zero,r2
 4002c2c:	e0bfff05 	stb	r2,-4(fp)
 4002c30:	00000206 	br	4002c3c <printSignedHex1+0x58>
	} else {
		clearLED(10);
 4002c34:	01000284 	movi	r4,10
 4002c38:	4002a740 	call	4002a74 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 4002c3c:	e0bfff03 	ldbu	r2,-4(fp)
 4002c40:	108018c4 	addi	r2,r2,99
 4002c44:	10803fcc 	andi	r2,r2,255
 4002c48:	108031f0 	cmpltui	r2,r2,199
 4002c4c:	1000031e 	bne	r2,zero,4002c5c <printSignedHex1+0x78>
		setLED(12);
 4002c50:	01000304 	movi	r4,12
 4002c54:	4002a280 	call	4002a28 <setLED>
 4002c58:	00000206 	br	4002c64 <printSignedHex1+0x80>
	else
		clearLED(12);
 4002c5c:	01000304 	movi	r4,12
 4002c60:	4002a740 	call	4002a74 <clearLED>
	value = value % 100;
 4002c64:	e0bfff07 	ldb	r2,-4(fp)
 4002c68:	01401904 	movi	r5,100
 4002c6c:	1009883a 	mov	r4,r2
 4002c70:	4007d840 	call	4007d84 <__modsi3>
 4002c74:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 4002c78:	e0bfff07 	ldb	r2,-4(fp)
 4002c7c:	01400284 	movi	r5,10
 4002c80:	1009883a 	mov	r4,r2
 4002c84:	4007d000 	call	4007d00 <__divsi3>
 4002c88:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 4002c8c:	e0bfff07 	ldb	r2,-4(fp)
 4002c90:	01400284 	movi	r5,10
 4002c94:	1009883a 	mov	r4,r2
 4002c98:	4007d840 	call	4007d84 <__modsi3>
 4002c9c:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 4002ca0:	e0bfff07 	ldb	r2,-4(fp)
 4002ca4:	01400284 	movi	r5,10
 4002ca8:	1009883a 	mov	r4,r2
 4002cac:	4007d000 	call	4007d00 <__divsi3>
 4002cb0:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 4002cb4:	e0bfff07 	ldb	r2,-4(fp)
 4002cb8:	01400284 	movi	r5,10
 4002cbc:	1009883a 	mov	r4,r2
 4002cc0:	4007d840 	call	4007d84 <__modsi3>
 4002cc4:	e0bffd45 	stb	r2,-11(fp)
	pio_val &= 0xFF00;
 4002cc8:	e0bffe17 	ldw	r2,-8(fp)
 4002ccc:	10bfc00c 	andi	r2,r2,65280
 4002cd0:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 4002cd4:	e0bffd03 	ldbu	r2,-12(fp)
 4002cd8:	1004913a 	slli	r2,r2,4
 4002cdc:	1007883a 	mov	r3,r2
 4002ce0:	e0bffe17 	ldw	r2,-8(fp)
 4002ce4:	10c4b03a 	or	r2,r2,r3
 4002ce8:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4002cec:	e0bffd43 	ldbu	r2,-11(fp)
 4002cf0:	e0fffe17 	ldw	r3,-8(fp)
 4002cf4:	1884b03a 	or	r2,r3,r2
 4002cf8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4002cfc:	e0fffe17 	ldw	r3,-8(fp)
 4002d00:	00820034 	movhi	r2,2048
 4002d04:	10947804 	addi	r2,r2,20960
 4002d08:	10c00035 	stwio	r3,0(r2)
}
 4002d0c:	0001883a 	nop
 4002d10:	e037883a 	mov	sp,fp
 4002d14:	dfc00117 	ldw	ra,4(sp)
 4002d18:	df000017 	ldw	fp,0(sp)
 4002d1c:	dec00204 	addi	sp,sp,8
 4002d20:	f800283a 	ret

04002d24 <setKeycode>:
void setKeycode(WORD keycode)
{
 4002d24:	defffe04 	addi	sp,sp,-8
 4002d28:	df000115 	stw	fp,4(sp)
 4002d2c:	df000104 	addi	fp,sp,4
 4002d30:	2005883a 	mov	r2,r4
 4002d34:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 4002d38:	e0ffff0b 	ldhu	r3,-4(fp)
 4002d3c:	00820034 	movhi	r2,2048
 4002d40:	10948804 	addi	r2,r2,21024
 4002d44:	10c00035 	stwio	r3,0(r2)
}
 4002d48:	0001883a 	nop
 4002d4c:	e037883a 	mov	sp,fp
 4002d50:	df000017 	ldw	fp,0(sp)
 4002d54:	dec00104 	addi	sp,sp,4
 4002d58:	f800283a 	ret

04002d5c <main>:
#define FIXED_POINT 32
#define SIZE 256
#define BILLION 1000000000.0
#define INPUT_MAX 16777216

int main() {
 4002d5c:	def7eb04 	addi	sp,sp,-8276
 4002d60:	dfc81415 	stw	ra,8272(sp)
 4002d64:	df081315 	stw	fp,8268(sp)
 4002d68:	dcc81215 	stw	r19,8264(sp)
 4002d6c:	dc881115 	stw	r18,8260(sp)
 4002d70:	dc481015 	stw	r17,8256(sp)
 4002d74:	dc080f15 	stw	r16,8252(sp)
 4002d78:	df081304 	addi	fp,sp,8268
    //clock_gettime(CLOCK_REALTIME, &start);
    //srand(start.tv_nsec);
    // Vector 1. This will be used for the imaginary component of inputs as all our inputs are real
    int i;
    float vec1[SIZE];
    for (i = 0; i < SIZE; ++i)
 4002d7c:	e037f015 	stw	zero,-8256(fp)
 4002d80:	00000a06 	br	4002dac <main+0x50>
        vec1[i] = 0;
 4002d84:	e0b7f017 	ldw	r2,-8256(fp)
 4002d88:	1085883a 	add	r2,r2,r2
 4002d8c:	1085883a 	add	r2,r2,r2
 4002d90:	e0f7f004 	addi	r3,fp,-8256
 4002d94:	1885883a 	add	r2,r3,r2
 4002d98:	10800804 	addi	r2,r2,32
 4002d9c:	10000015 	stw	zero,0(r2)
    //clock_gettime(CLOCK_REALTIME, &start);
    //srand(start.tv_nsec);
    // Vector 1. This will be used for the imaginary component of inputs as all our inputs are real
    int i;
    float vec1[SIZE];
    for (i = 0; i < SIZE; ++i)
 4002da0:	e0b7f017 	ldw	r2,-8256(fp)
 4002da4:	10800044 	addi	r2,r2,1
 4002da8:	e0b7f015 	stw	r2,-8256(fp)
 4002dac:	e0b7f017 	ldw	r2,-8256(fp)
 4002db0:	10804010 	cmplti	r2,r2,256
 4002db4:	103ff31e 	bne	r2,zero,4002d84 <__alt_data_end+0xfc002d84>
        vec1[i] = 0;


    // Vector 2: Only 1s
    float vec2[SIZE];
    vec2[0] = 65535;
 4002db8:	0091e034 	movhi	r2,18304
 4002dbc:	10bfc004 	addi	r2,r2,-256
 4002dc0:	e0b8f815 	stw	r2,-7200(fp)
    vec2[1] = 65535;
 4002dc4:	0091e034 	movhi	r2,18304
 4002dc8:	10bfc004 	addi	r2,r2,-256
 4002dcc:	e0b8f915 	stw	r2,-7196(fp)
    vec2[2] = 65535;
 4002dd0:	0091e034 	movhi	r2,18304
 4002dd4:	10bfc004 	addi	r2,r2,-256
 4002dd8:	e0b8fa15 	stw	r2,-7192(fp)
    vec2[3] = 65535;
 4002ddc:	0091e034 	movhi	r2,18304
 4002de0:	10bfc004 	addi	r2,r2,-256
 4002de4:	e0b8fb15 	stw	r2,-7188(fp)
    for (i = 4; i < SIZE; ++i)
 4002de8:	00800104 	movi	r2,4
 4002dec:	e0b7f015 	stw	r2,-8256(fp)
 4002df0:	00000b06 	br	4002e20 <main+0xc4>
        vec2[i] = 4294967296;
 4002df4:	e0b7f017 	ldw	r2,-8256(fp)
 4002df8:	1085883a 	add	r2,r2,r2
 4002dfc:	1085883a 	add	r2,r2,r2
 4002e00:	e137f004 	addi	r4,fp,-8256
 4002e04:	2085883a 	add	r2,r4,r2
 4002e08:	10810804 	addi	r2,r2,1056
 4002e0c:	00d3e034 	movhi	r3,20352
 4002e10:	10c00015 	stw	r3,0(r2)
    float vec2[SIZE];
    vec2[0] = 65535;
    vec2[1] = 65535;
    vec2[2] = 65535;
    vec2[3] = 65535;
    for (i = 4; i < SIZE; ++i)
 4002e14:	e0b7f017 	ldw	r2,-8256(fp)
 4002e18:	10800044 	addi	r2,r2,1
 4002e1c:	e0b7f015 	stw	r2,-8256(fp)
 4002e20:	e0b7f017 	ldw	r2,-8256(fp)
 4002e24:	10804010 	cmplti	r2,r2,256
 4002e28:	103ff21e 	bne	r2,zero,4002df4 <__alt_data_end+0xfc002df4>


    	BYTE rcode;
    	BOOT_MOUSE_REPORT buf;		//USB mouse report
    	BOOT_KBD_REPORT kbdbuf;
    	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 4002e2c:	e037f105 	stb	zero,-8252(fp)
    	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 4002e30:	e037f145 	stb	zero,-8251(fp)
    	BYTE device;
    	WORD keycode;
    	printf("initializing MAX3421E...\n");
 4002e34:	010100b4 	movhi	r4,1026
 4002e38:	212a6404 	addi	r4,r4,-22128
 4002e3c:	400c3140 	call	400c314 <puts>
    	MAX3421E_init();
 4002e40:	400462c0 	call	400462c <MAX3421E_init>
    	printf("initializing USB...\n");
 4002e44:	010100b4 	movhi	r4,1026
 4002e48:	212a6b04 	addi	r4,r4,-22100
 4002e4c:	400c3140 	call	400c314 <puts>
    	USB_init();
 4002e50:	4004de00 	call	4004de0 <USB_init>





    volatile unsigned int * audio_data_transfer = (unsigned int *) 0x08002000;
 4002e54:	00820034 	movhi	r2,2048
 4002e58:	10880004 	addi	r2,r2,8192
 4002e5c:	e0b7f415 	stw	r2,-8240(fp)
    	// unsigned int audio_data[SIZE];
    	float audio_data[SIZE];

    	int is_inverse_fft = 0; // We are not doing an inverse fft
 4002e60:	e037f515 	stw	zero,-8236(fp)
    	kiss_fft_cfg config = kiss_fft_alloc(SIZE, is_inverse_fft, 0 ,0);
 4002e64:	000f883a 	mov	r7,zero
 4002e68:	000d883a 	mov	r6,zero
 4002e6c:	e177f517 	ldw	r5,-8236(fp)
 4002e70:	01004004 	movi	r4,256
 4002e74:	40023fc0 	call	40023fc <kiss_fft_alloc>
 4002e78:	e0b7f615 	stw	r2,-8232(fp)
    	int out_int[SIZE];

    	while(1)
    		{
    			// set ready bit so that data can't be changed while reading
    			audio_data_transfer[512] = 1;
 4002e7c:	e0b7f417 	ldw	r2,-8240(fp)
 4002e80:	10820004 	addi	r2,r2,2048
 4002e84:	00c00044 	movi	r3,1
 4002e88:	10c00015 	stw	r3,0(r2)
    			// audio_data_transfer[512] = 0x234432;
    			// printf(" Val in reg: %d", audio_data_transfer[512]);

    			for(i = 0; i < SIZE; i++)
 4002e8c:	e037f015 	stw	zero,-8256(fp)
 4002e90:	00001406 	br	4002ee4 <main+0x188>
    			{
    				// always 1 dummy sclk period before each audio sample in DIN, so fix it here
    				// also add 1 to index of audio_data_transfer_in because the first reg (idx 0) of audio_data_in_transfer is the ready reg
    				// audio_data[i] = audio_data_transfer[i] >> 1;
    				audio_data[i] = (float) audio_data_transfer[i];
 4002e94:	e0b7f017 	ldw	r2,-8256(fp)
 4002e98:	1085883a 	add	r2,r2,r2
 4002e9c:	1085883a 	add	r2,r2,r2
 4002ea0:	1007883a 	mov	r3,r2
 4002ea4:	e0b7f417 	ldw	r2,-8240(fp)
 4002ea8:	10c5883a 	add	r2,r2,r3
 4002eac:	10800017 	ldw	r2,0(r2)
 4002eb0:	1009883a 	mov	r4,r2
 4002eb4:	4008cb80 	call	4008cb8 <__floatunsisf>
 4002eb8:	1007883a 	mov	r3,r2
 4002ebc:	e0b7f017 	ldw	r2,-8256(fp)
 4002ec0:	1085883a 	add	r2,r2,r2
 4002ec4:	1085883a 	add	r2,r2,r2
 4002ec8:	e137f004 	addi	r4,fp,-8256
 4002ecc:	2085883a 	add	r2,r4,r2
 4002ed0:	10820c04 	addi	r2,r2,2096
 4002ed4:	10c00015 	stw	r3,0(r2)
    			// set ready bit so that data can't be changed while reading
    			audio_data_transfer[512] = 1;
    			// audio_data_transfer[512] = 0x234432;
    			// printf(" Val in reg: %d", audio_data_transfer[512]);

    			for(i = 0; i < SIZE; i++)
 4002ed8:	e0b7f017 	ldw	r2,-8256(fp)
 4002edc:	10800044 	addi	r2,r2,1
 4002ee0:	e0b7f015 	stw	r2,-8256(fp)
 4002ee4:	e0b7f017 	ldw	r2,-8256(fp)
 4002ee8:	10804010 	cmplti	r2,r2,256
 4002eec:	103fe91e 	bne	r2,zero,4002e94 <__alt_data_end+0xfc002e94>
    				// always 1 dummy sclk period before each audio sample in DIN, so fix it here
    				// also add 1 to index of audio_data_transfer_in because the first reg (idx 0) of audio_data_in_transfer is the ready reg
    				// audio_data[i] = audio_data_transfer[i] >> 1;
    				audio_data[i] = (float) audio_data_transfer[i];
    			}
    			audio_data_transfer[512] = 0;
 4002ef0:	e0b7f417 	ldw	r2,-8240(fp)
 4002ef4:	10820004 	addi	r2,r2,2048
 4002ef8:	10000015 	stw	zero,0(r2)


    			kiss_fft_cpx in[SIZE], out[SIZE];

    			// Load the complex and real values into the inputs.
    			for (int i = 0; i < SIZE; ++i)
 4002efc:	e037f215 	stw	zero,-8248(fp)
 4002f00:	00001d06 	br	4002f78 <main+0x21c>
    			{
    				in[i].r = audio_data[i];
 4002f04:	e0b7f217 	ldw	r2,-8248(fp)
 4002f08:	1085883a 	add	r2,r2,r2
 4002f0c:	1085883a 	add	r2,r2,r2
 4002f10:	e0f7f004 	addi	r3,fp,-8256
 4002f14:	1885883a 	add	r2,r3,r2
 4002f18:	10820c04 	addi	r2,r2,2096
 4002f1c:	10c00017 	ldw	r3,0(r2)
 4002f20:	e0b7f217 	ldw	r2,-8248(fp)
 4002f24:	100490fa 	slli	r2,r2,3
 4002f28:	e137f004 	addi	r4,fp,-8256
 4002f2c:	2085883a 	add	r2,r4,r2
 4002f30:	10860c04 	addi	r2,r2,6192
 4002f34:	10c00015 	stw	r3,0(r2)
    				//in[i].r = vec2[i];
    				in[i].i = vec1[i];
 4002f38:	e0b7f217 	ldw	r2,-8248(fp)
 4002f3c:	1085883a 	add	r2,r2,r2
 4002f40:	1085883a 	add	r2,r2,r2
 4002f44:	e0f7f004 	addi	r3,fp,-8256
 4002f48:	1885883a 	add	r2,r3,r2
 4002f4c:	10800804 	addi	r2,r2,32
 4002f50:	10c00017 	ldw	r3,0(r2)
 4002f54:	e0b7f217 	ldw	r2,-8248(fp)
 4002f58:	100490fa 	slli	r2,r2,3
 4002f5c:	e137f004 	addi	r4,fp,-8256
 4002f60:	2085883a 	add	r2,r4,r2
 4002f64:	10860d04 	addi	r2,r2,6196
 4002f68:	10c00015 	stw	r3,0(r2)


    			kiss_fft_cpx in[SIZE], out[SIZE];

    			// Load the complex and real values into the inputs.
    			for (int i = 0; i < SIZE; ++i)
 4002f6c:	e0b7f217 	ldw	r2,-8248(fp)
 4002f70:	10800044 	addi	r2,r2,1
 4002f74:	e0b7f215 	stw	r2,-8248(fp)
 4002f78:	e0b7f217 	ldw	r2,-8248(fp)
 4002f7c:	10804010 	cmplti	r2,r2,256
 4002f80:	103fe01e 	bne	r2,zero,4002f04 <__alt_data_end+0xfc002f04>
    				in[i].r = audio_data[i];
    				//in[i].r = vec2[i];
    				in[i].i = vec1[i];
    			}

    			kiss_fft(config, in, out);
 4002f84:	e0fbfc04 	addi	r3,fp,-4112
 4002f88:	e0bdfc04 	addi	r2,fp,-2064
 4002f8c:	180d883a 	mov	r6,r3
 4002f90:	100b883a 	mov	r5,r2
 4002f94:	e137f617 	ldw	r4,-8232(fp)
 4002f98:	40027000 	call	4002700 <kiss_fft>
    			#define BIN_FREQ (float)((i-SIZE/2.0)*44100.0/SIZE)


    			for (i = 0; i < SIZE; ++i)
 4002f9c:	e037f015 	stw	zero,-8256(fp)
 4002fa0:	00009206 	br	40031ec <main+0x490>
    			{
    				///printf("Audio bin %d : %f, %f", i, audio_data[i], vec2[i]);
    				//printf("Audio binT %d : %d", i, audio_data_transfer[i]);
    				 ///printf("Freq %f, Real : %f; Complex: %f \n", BIN_FREQ, out[i].r, out[i].i);
    				 out_int[i] = (int) sqrt((out[i].r*out[i].r + out[i].i*out[i].i));
 4002fa4:	e0b7f017 	ldw	r2,-8256(fp)
 4002fa8:	100490fa 	slli	r2,r2,3
 4002fac:	e0f7f004 	addi	r3,fp,-8256
 4002fb0:	1885883a 	add	r2,r3,r2
 4002fb4:	10840c04 	addi	r2,r2,4144
 4002fb8:	10c00017 	ldw	r3,0(r2)
 4002fbc:	e0b7f017 	ldw	r2,-8256(fp)
 4002fc0:	100490fa 	slli	r2,r2,3
 4002fc4:	e137f004 	addi	r4,fp,-8256
 4002fc8:	2085883a 	add	r2,r4,r2
 4002fcc:	10840c04 	addi	r2,r2,4144
 4002fd0:	11000017 	ldw	r4,0(r2)
 4002fd4:	200b883a 	mov	r5,r4
 4002fd8:	1809883a 	mov	r4,r3
 4002fdc:	40083a40 	call	40083a4 <__mulsf3>
 4002fe0:	1007883a 	mov	r3,r2
 4002fe4:	1821883a 	mov	r16,r3
 4002fe8:	e0b7f017 	ldw	r2,-8256(fp)
 4002fec:	100490fa 	slli	r2,r2,3
 4002ff0:	e0f7f004 	addi	r3,fp,-8256
 4002ff4:	1885883a 	add	r2,r3,r2
 4002ff8:	10840d04 	addi	r2,r2,4148
 4002ffc:	10c00017 	ldw	r3,0(r2)
 4003000:	e0b7f017 	ldw	r2,-8256(fp)
 4003004:	100490fa 	slli	r2,r2,3
 4003008:	e137f004 	addi	r4,fp,-8256
 400300c:	2085883a 	add	r2,r4,r2
 4003010:	10840d04 	addi	r2,r2,4148
 4003014:	11000017 	ldw	r4,0(r2)
 4003018:	200b883a 	mov	r5,r4
 400301c:	1809883a 	mov	r4,r3
 4003020:	40083a40 	call	40083a4 <__mulsf3>
 4003024:	1007883a 	mov	r3,r2
 4003028:	1805883a 	mov	r2,r3
 400302c:	100b883a 	mov	r5,r2
 4003030:	8009883a 	mov	r4,r16
 4003034:	4007edc0 	call	4007edc <__addsf3>
 4003038:	1007883a 	mov	r3,r2
 400303c:	1805883a 	mov	r2,r3
 4003040:	1009883a 	mov	r4,r2
 4003044:	400b5400 	call	400b540 <__extendsfdf2>
 4003048:	100b883a 	mov	r5,r2
 400304c:	180d883a 	mov	r6,r3
 4003050:	2809883a 	mov	r4,r5
 4003054:	300b883a 	mov	r5,r6
 4003058:	4005a8c0 	call	4005a8c <sqrt>
 400305c:	100b883a 	mov	r5,r2
 4003060:	180d883a 	mov	r6,r3
 4003064:	2809883a 	mov	r4,r5
 4003068:	300b883a 	mov	r5,r6
 400306c:	400b3e40 	call	400b3e4 <__fixdfsi>
 4003070:	1007883a 	mov	r3,r2
 4003074:	e0b7f017 	ldw	r2,-8256(fp)
 4003078:	1085883a 	add	r2,r2,r2
 400307c:	1085883a 	add	r2,r2,r2
 4003080:	e137f004 	addi	r4,fp,-8256
 4003084:	2085883a 	add	r2,r4,r2
 4003088:	10830c04 	addi	r2,r2,3120
 400308c:	10c00015 	stw	r3,0(r2)
    				//printf("Magnitude : %d \n", out_int[i]);
    				 printf("Freq %f, Real : %f; Complex: %f \n", BIN_FREQ, out[i].r, out[i].i);
 4003090:	e137f017 	ldw	r4,-8256(fp)
 4003094:	400b4640 	call	400b464 <__floatsidf>
 4003098:	1011883a 	mov	r8,r2
 400309c:	1813883a 	mov	r9,r3
 40030a0:	000d883a 	mov	r6,zero
 40030a4:	01d01834 	movhi	r7,16480
 40030a8:	4009883a 	mov	r4,r8
 40030ac:	480b883a 	mov	r5,r9
 40030b0:	400aae80 	call	400aae8 <__subdf3>
 40030b4:	1009883a 	mov	r4,r2
 40030b8:	180b883a 	mov	r5,r3
 40030bc:	2005883a 	mov	r2,r4
 40030c0:	2807883a 	mov	r3,r5
 40030c4:	000d883a 	mov	r6,zero
 40030c8:	01d039b4 	movhi	r7,16614
 40030cc:	39e22004 	addi	r7,r7,-30592
 40030d0:	1009883a 	mov	r4,r2
 40030d4:	180b883a 	mov	r5,r3
 40030d8:	400a27c0 	call	400a27c <__muldf3>
 40030dc:	1009883a 	mov	r4,r2
 40030e0:	180b883a 	mov	r5,r3
 40030e4:	2005883a 	mov	r2,r4
 40030e8:	2807883a 	mov	r3,r5
 40030ec:	000d883a 	mov	r6,zero
 40030f0:	01d01c34 	movhi	r7,16496
 40030f4:	1009883a 	mov	r4,r2
 40030f8:	180b883a 	mov	r5,r3
 40030fc:	40096540 	call	4009654 <__divdf3>
 4003100:	1009883a 	mov	r4,r2
 4003104:	180b883a 	mov	r5,r3
 4003108:	2005883a 	mov	r2,r4
 400310c:	2807883a 	mov	r3,r5
 4003110:	1009883a 	mov	r4,r2
 4003114:	180b883a 	mov	r5,r3
 4003118:	400b6500 	call	400b650 <__truncdfsf2>
 400311c:	1007883a 	mov	r3,r2
 4003120:	1809883a 	mov	r4,r3
 4003124:	400b5400 	call	400b540 <__extendsfdf2>
 4003128:	1025883a 	mov	r18,r2
 400312c:	1827883a 	mov	r19,r3
 4003130:	e0b7f017 	ldw	r2,-8256(fp)
 4003134:	100490fa 	slli	r2,r2,3
 4003138:	e0f7f004 	addi	r3,fp,-8256
 400313c:	1885883a 	add	r2,r3,r2
 4003140:	10840c04 	addi	r2,r2,4144
 4003144:	10c00017 	ldw	r3,0(r2)
 4003148:	1809883a 	mov	r4,r3
 400314c:	400b5400 	call	400b540 <__extendsfdf2>
 4003150:	1021883a 	mov	r16,r2
 4003154:	1823883a 	mov	r17,r3
 4003158:	e0b7f017 	ldw	r2,-8256(fp)
 400315c:	100490fa 	slli	r2,r2,3
 4003160:	e137f004 	addi	r4,fp,-8256
 4003164:	2085883a 	add	r2,r4,r2
 4003168:	10840d04 	addi	r2,r2,4148
 400316c:	10c00017 	ldw	r3,0(r2)
 4003170:	1809883a 	mov	r4,r3
 4003174:	400b5400 	call	400b540 <__extendsfdf2>
 4003178:	1009883a 	mov	r4,r2
 400317c:	180b883a 	mov	r5,r3
 4003180:	d9000115 	stw	r4,4(sp)
 4003184:	d9400215 	stw	r5,8(sp)
 4003188:	dc400015 	stw	r17,0(sp)
 400318c:	800f883a 	mov	r7,r16
 4003190:	900b883a 	mov	r5,r18
 4003194:	980d883a 	mov	r6,r19
 4003198:	010100b4 	movhi	r4,1026
 400319c:	212a7004 	addi	r4,r4,-22080
 40031a0:	400c2180 	call	400c218 <printf>
    				 //printf("DATA : %d \n", out_int[i]);
    				// NEW EDITS
    				audio_data_transfer[i + SIZE] = out_int[i];
 40031a4:	e0b7f017 	ldw	r2,-8256(fp)
 40031a8:	10804004 	addi	r2,r2,256
 40031ac:	1085883a 	add	r2,r2,r2
 40031b0:	1085883a 	add	r2,r2,r2
 40031b4:	1007883a 	mov	r3,r2
 40031b8:	e0b7f417 	ldw	r2,-8240(fp)
 40031bc:	10c7883a 	add	r3,r2,r3
 40031c0:	e0b7f017 	ldw	r2,-8256(fp)
 40031c4:	1085883a 	add	r2,r2,r2
 40031c8:	1085883a 	add	r2,r2,r2
 40031cc:	e137f004 	addi	r4,fp,-8256
 40031d0:	2085883a 	add	r2,r4,r2
 40031d4:	10830c04 	addi	r2,r2,3120
 40031d8:	10800017 	ldw	r2,0(r2)
 40031dc:	18800015 	stw	r2,0(r3)

    			kiss_fft(config, in, out);
    			#define BIN_FREQ (float)((i-SIZE/2.0)*44100.0/SIZE)


    			for (i = 0; i < SIZE; ++i)
 40031e0:	e0b7f017 	ldw	r2,-8256(fp)
 40031e4:	10800044 	addi	r2,r2,1
 40031e8:	e0b7f015 	stw	r2,-8256(fp)
 40031ec:	e0b7f017 	ldw	r2,-8256(fp)
 40031f0:	10804010 	cmplti	r2,r2,256
 40031f4:	103f6b1e 	bne	r2,zero,4002fa4 <__alt_data_end+0xfc002fa4>




    			///printf(".");
					MAX3421E_Task();
 40031f8:	40046c00 	call	40046c0 <MAX3421E_Task>
					USB_Task();
 40031fc:	4004e780 	call	4004e78 <USB_Task>
					//usleep (500000);
					if (GetUsbTaskState() == USB_STATE_RUNNING) {
 4003200:	40055e80 	call	40055e8 <GetUsbTaskState>
 4003204:	10803fcc 	andi	r2,r2,255
 4003208:	10801018 	cmpnei	r2,r2,64
 400320c:	10008d1e 	bne	r2,zero,4003444 <main+0x6e8>
						if (!runningdebugflag) {
 4003210:	e0b7f103 	ldbu	r2,-8252(fp)
 4003214:	1000071e 	bne	r2,zero,4003234 <main+0x4d8>
							runningdebugflag = 1;
 4003218:	00800044 	movi	r2,1
 400321c:	e0b7f105 	stb	r2,-8252(fp)
							setLED(9);
 4003220:	01000244 	movi	r4,9
 4003224:	4002a280 	call	4002a28 <setLED>
							device = GetDriverandReport();
 4003228:	40028380 	call	4002838 <GetDriverandReport>
 400322c:	e0b7f185 	stb	r2,-8250(fp)
 4003230:	003f1206 	br	4002e7c <__alt_data_end+0xfc002e7c>
						} else if (device == 1) {
 4003234:	e0b7f183 	ldbu	r2,-8250(fp)
 4003238:	10800058 	cmpnei	r2,r2,1
 400323c:	1000251e 	bne	r2,zero,40032d4 <main+0x578>
							//run keyboard debug polling
							rcode = kbdPoll(&kbdbuf);
 4003240:	e0b9fa04 	addi	r2,fp,-6168
 4003244:	1009883a 	mov	r4,r2
 4003248:	4003f080 	call	4003f08 <kbdPoll>
 400324c:	e0b7f705 	stb	r2,-8228(fp)
							if (rcode == hrNAK) {
 4003250:	e0b7f703 	ldbu	r2,-8228(fp)
 4003254:	10800118 	cmpnei	r2,r2,4
 4003258:	10009a26 	beq	r2,zero,40034c4 <main+0x768>
								continue; //NAK means no new data
							} else if (rcode) {
 400325c:	e0b7f703 	ldbu	r2,-8228(fp)
 4003260:	10009a1e 	bne	r2,zero,40034cc <main+0x770>
								///printf("Rcode: ");
								///printf("%x \n", rcode);
								continue;
							}
							printf("keycodes: ");
 4003264:	010100b4 	movhi	r4,1026
 4003268:	212a7904 	addi	r4,r4,-22044
 400326c:	400c2180 	call	400c218 <printf>
							for (int i = 0; i < 6; i++) {
 4003270:	e037f315 	stw	zero,-8244(fp)
 4003274:	00000306 	br	4003284 <main+0x528>
 4003278:	e0b7f317 	ldw	r2,-8244(fp)
 400327c:	10800044 	addi	r2,r2,1
 4003280:	e0b7f315 	stw	r2,-8244(fp)
 4003284:	e0b7f317 	ldw	r2,-8244(fp)
 4003288:	10800190 	cmplti	r2,r2,6
 400328c:	103ffa1e 	bne	r2,zero,4003278 <__alt_data_end+0xfc003278>
								///printf("%x ", kbdbuf.keycode[i]);
							}
							setKeycode(kbdbuf.keycode[0]);
 4003290:	e0b9fa83 	ldbu	r2,-6166(fp)
 4003294:	10803fcc 	andi	r2,r2,255
 4003298:	1009883a 	mov	r4,r2
 400329c:	4002d240 	call	4002d24 <setKeycode>
							printSignedHex0(kbdbuf.keycode[0]);
 40032a0:	e0b9fa83 	ldbu	r2,-6166(fp)
 40032a4:	10803fcc 	andi	r2,r2,255
 40032a8:	1080201c 	xori	r2,r2,128
 40032ac:	10bfe004 	addi	r2,r2,-128
 40032b0:	1009883a 	mov	r4,r2
 40032b4:	4002ac40 	call	4002ac4 <printSignedHex0>
							printSignedHex1(kbdbuf.keycode[1]);
 40032b8:	e0b9fac3 	ldbu	r2,-6165(fp)
 40032bc:	10803fcc 	andi	r2,r2,255
 40032c0:	1080201c 	xori	r2,r2,128
 40032c4:	10bfe004 	addi	r2,r2,-128
 40032c8:	1009883a 	mov	r4,r2
 40032cc:	4002be40 	call	4002be4 <printSignedHex1>
 40032d0:	003eea06 	br	4002e7c <__alt_data_end+0xfc002e7c>
							///printf("\n");
						}
						else if (device == 2) {
 40032d4:	e0b7f183 	ldbu	r2,-8250(fp)
 40032d8:	10800098 	cmpnei	r2,r2,2
 40032dc:	103ee71e 	bne	r2,zero,4002e7c <__alt_data_end+0xfc002e7c>
							rcode = mousePoll(&buf);
 40032e0:	e0b9f804 	addi	r2,fp,-6176
 40032e4:	1009883a 	mov	r4,r2
 40032e8:	4003e800 	call	4003e80 <mousePoll>
 40032ec:	e0b7f705 	stb	r2,-8228(fp)
							if (rcode == hrNAK) {
 40032f0:	e0b7f703 	ldbu	r2,-8228(fp)
 40032f4:	10800118 	cmpnei	r2,r2,4
 40032f8:	10007626 	beq	r2,zero,40034d4 <main+0x778>
								//NAK means no new data
								continue;
							} else if (rcode) {
 40032fc:	e0b7f703 	ldbu	r2,-8228(fp)
 4003300:	10000926 	beq	r2,zero,4003328 <main+0x5cc>
								printf("Rcode: ");
 4003304:	010100b4 	movhi	r4,1026
 4003308:	212a7c04 	addi	r4,r4,-22032
 400330c:	400c2180 	call	400c218 <printf>
								printf("%x \n", rcode);
 4003310:	e0b7f703 	ldbu	r2,-8228(fp)
 4003314:	100b883a 	mov	r5,r2
 4003318:	010100b4 	movhi	r4,1026
 400331c:	212a5204 	addi	r4,r4,-22200
 4003320:	400c2180 	call	400c218 <printf>
								continue;
 4003324:	00006c06 	br	40034d8 <main+0x77c>
							}
							printf("X displacement: ");
 4003328:	010100b4 	movhi	r4,1026
 400332c:	212a7e04 	addi	r4,r4,-22024
 4003330:	400c2180 	call	400c218 <printf>
							printf("%d ", (signed char) buf.Xdispl);
 4003334:	e0b9f843 	ldbu	r2,-6175(fp)
 4003338:	10803fcc 	andi	r2,r2,255
 400333c:	1080201c 	xori	r2,r2,128
 4003340:	10bfe004 	addi	r2,r2,-128
 4003344:	100b883a 	mov	r5,r2
 4003348:	010100b4 	movhi	r4,1026
 400334c:	212a8304 	addi	r4,r4,-22004
 4003350:	400c2180 	call	400c218 <printf>
							printSignedHex0((signed char) buf.Xdispl);
 4003354:	e0b9f843 	ldbu	r2,-6175(fp)
 4003358:	10803fcc 	andi	r2,r2,255
 400335c:	1080201c 	xori	r2,r2,128
 4003360:	10bfe004 	addi	r2,r2,-128
 4003364:	1009883a 	mov	r4,r2
 4003368:	4002ac40 	call	4002ac4 <printSignedHex0>
							printf("Y displacement: ");
 400336c:	010100b4 	movhi	r4,1026
 4003370:	212a8404 	addi	r4,r4,-22000
 4003374:	400c2180 	call	400c218 <printf>
							printf("%d ", (signed char) buf.Ydispl);
 4003378:	e0b9f883 	ldbu	r2,-6174(fp)
 400337c:	10803fcc 	andi	r2,r2,255
 4003380:	1080201c 	xori	r2,r2,128
 4003384:	10bfe004 	addi	r2,r2,-128
 4003388:	100b883a 	mov	r5,r2
 400338c:	010100b4 	movhi	r4,1026
 4003390:	212a8304 	addi	r4,r4,-22004
 4003394:	400c2180 	call	400c218 <printf>
							printSignedHex1((signed char) buf.Ydispl);
 4003398:	e0b9f883 	ldbu	r2,-6174(fp)
 400339c:	10803fcc 	andi	r2,r2,255
 40033a0:	1080201c 	xori	r2,r2,128
 40033a4:	10bfe004 	addi	r2,r2,-128
 40033a8:	1009883a 	mov	r4,r2
 40033ac:	4002be40 	call	4002be4 <printSignedHex1>
							printf("Buttons: ");
 40033b0:	010100b4 	movhi	r4,1026
 40033b4:	212a8904 	addi	r4,r4,-21980
 40033b8:	400c2180 	call	400c218 <printf>
							printf("%x\n", buf.button);
 40033bc:	e0b9f803 	ldbu	r2,-6176(fp)
 40033c0:	10803fcc 	andi	r2,r2,255
 40033c4:	100b883a 	mov	r5,r2
 40033c8:	010100b4 	movhi	r4,1026
 40033cc:	212a8c04 	addi	r4,r4,-21968
 40033d0:	400c2180 	call	400c218 <printf>
							if (buf.button & 0x04)
 40033d4:	e0b9f803 	ldbu	r2,-6176(fp)
 40033d8:	10803fcc 	andi	r2,r2,255
 40033dc:	1080010c 	andi	r2,r2,4
 40033e0:	10000326 	beq	r2,zero,40033f0 <main+0x694>
								setLED(2);
 40033e4:	01000084 	movi	r4,2
 40033e8:	4002a280 	call	4002a28 <setLED>
 40033ec:	00000206 	br	40033f8 <main+0x69c>
							else
								clearLED(2);
 40033f0:	01000084 	movi	r4,2
 40033f4:	4002a740 	call	4002a74 <clearLED>
							if (buf.button & 0x02)
 40033f8:	e0b9f803 	ldbu	r2,-6176(fp)
 40033fc:	10803fcc 	andi	r2,r2,255
 4003400:	1080008c 	andi	r2,r2,2
 4003404:	10000326 	beq	r2,zero,4003414 <main+0x6b8>
								setLED(1);
 4003408:	01000044 	movi	r4,1
 400340c:	4002a280 	call	4002a28 <setLED>
 4003410:	00000206 	br	400341c <main+0x6c0>
							else
								clearLED(1);
 4003414:	01000044 	movi	r4,1
 4003418:	4002a740 	call	4002a74 <clearLED>
							if (buf.button & 0x01)
 400341c:	e0b9f803 	ldbu	r2,-6176(fp)
 4003420:	10803fcc 	andi	r2,r2,255
 4003424:	1080004c 	andi	r2,r2,1
 4003428:	10000326 	beq	r2,zero,4003438 <main+0x6dc>
								setLED(0);
 400342c:	0009883a 	mov	r4,zero
 4003430:	4002a280 	call	4002a28 <setLED>
 4003434:	003e9106 	br	4002e7c <__alt_data_end+0xfc002e7c>
							else
								clearLED(0);
 4003438:	0009883a 	mov	r4,zero
 400343c:	4002a740 	call	4002a74 <clearLED>
 4003440:	003e8e06 	br	4002e7c <__alt_data_end+0xfc002e7c>
						}
    					} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 4003444:	40055e80 	call	40055e8 <GetUsbTaskState>
 4003448:	10803fcc 	andi	r2,r2,255
 400344c:	10803fd8 	cmpnei	r2,r2,255
 4003450:	10000a1e 	bne	r2,zero,400347c <main+0x720>
    						if (!errorflag) {
 4003454:	e0b7f143 	ldbu	r2,-8251(fp)
 4003458:	103e881e 	bne	r2,zero,4002e7c <__alt_data_end+0xfc002e7c>
    							errorflag = 1;
 400345c:	00800044 	movi	r2,1
 4003460:	e0b7f145 	stb	r2,-8251(fp)
    							clearLED(9);
 4003464:	01000244 	movi	r4,9
 4003468:	4002a740 	call	4002a74 <clearLED>
    							printf("USB Error State\n");
 400346c:	010100b4 	movhi	r4,1026
 4003470:	212a8d04 	addi	r4,r4,-21964
 4003474:	400c3140 	call	400c314 <puts>
 4003478:	003e8006 	br	4002e7c <__alt_data_end+0xfc002e7c>
    							//print out string descriptor here
    						}
    					} else //not in USB running state
    					{
    						printf("USB task state: ");
 400347c:	010100b4 	movhi	r4,1026
 4003480:	212a9104 	addi	r4,r4,-21948
 4003484:	400c2180 	call	400c218 <printf>
    						printf("%x\n", GetUsbTaskState());
 4003488:	40055e80 	call	40055e8 <GetUsbTaskState>
 400348c:	10803fcc 	andi	r2,r2,255
 4003490:	100b883a 	mov	r5,r2
 4003494:	010100b4 	movhi	r4,1026
 4003498:	212a8c04 	addi	r4,r4,-21968
 400349c:	400c2180 	call	400c218 <printf>
    						if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 40034a0:	e0b7f103 	ldbu	r2,-8252(fp)
 40034a4:	10000326 	beq	r2,zero,40034b4 <main+0x758>
    							runningdebugflag = 0;
 40034a8:	e037f105 	stb	zero,-8252(fp)
    							MAX3421E_init();
 40034ac:	400462c0 	call	400462c <MAX3421E_init>
    							USB_init();
 40034b0:	4004de00 	call	4004de0 <USB_init>
    						}
    						errorflag = 0;
 40034b4:	e037f145 	stb	zero,-8251(fp)
    						clearLED(9);
 40034b8:	01000244 	movi	r4,9
 40034bc:	4002a740 	call	4002a74 <clearLED>
 40034c0:	003e6e06 	br	4002e7c <__alt_data_end+0xfc002e7c>
							device = GetDriverandReport();
						} else if (device == 1) {
							//run keyboard debug polling
							rcode = kbdPoll(&kbdbuf);
							if (rcode == hrNAK) {
								continue; //NAK means no new data
 40034c4:	0001883a 	nop
 40034c8:	003e6c06 	br	4002e7c <__alt_data_end+0xfc002e7c>
							} else if (rcode) {
								///printf("Rcode: ");
								///printf("%x \n", rcode);
								continue;
 40034cc:	0001883a 	nop
 40034d0:	003e6a06 	br	4002e7c <__alt_data_end+0xfc002e7c>
						}
						else if (device == 2) {
							rcode = mousePoll(&buf);
							if (rcode == hrNAK) {
								//NAK means no new data
								continue;
 40034d4:	0001883a 	nop
    							USB_init();
    						}
    						errorflag = 0;
    						clearLED(9);
    					}
    		}
 40034d8:	003e6806 	br	4002e7c <__alt_data_end+0xfc002e7c>

040034dc <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 40034dc:	defff804 	addi	sp,sp,-32
 40034e0:	dfc00715 	stw	ra,28(sp)
 40034e4:	df000615 	stw	fp,24(sp)
 40034e8:	df000604 	addi	fp,sp,24
 40034ec:	e13ffe15 	stw	r4,-8(fp)
 40034f0:	2805883a 	mov	r2,r5
 40034f4:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 40034f8:	e0bfff0b 	ldhu	r2,-4(fp)
 40034fc:	1004d23a 	srli	r2,r2,8
 4003500:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 4003504:	e0bfff0b 	ldhu	r2,-4(fp)
 4003508:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 400350c:	e13ffd84 	addi	r4,fp,-10
 4003510:	e0fffd84 	addi	r3,fp,-10
 4003514:	d8000115 	stw	zero,4(sp)
 4003518:	00800084 	movi	r2,2
 400351c:	d8800015 	stw	r2,0(sp)
 4003520:	200f883a 	mov	r7,r4
 4003524:	01800084 	movi	r6,2
 4003528:	180b883a 	mov	r5,r3
 400352c:	e13ffe17 	ldw	r4,-8(fp)
 4003530:	4017b700 	call	4017b70 <alt_avalon_i2c_master_tx_rx>
 4003534:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 4003538:	e0bffc17 	ldw	r2,-16(fp)
 400353c:	10000626 	beq	r2,zero,4003558 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 4003540:	e0bfff0b 	ldhu	r2,-4(fp)
 4003544:	100b883a 	mov	r5,r2
 4003548:	010100b4 	movhi	r4,1026
 400354c:	212a9604 	addi	r4,r4,-21928
 4003550:	400c2180 	call	400c218 <printf>
		while (1)
		{
			//hang here
		}
 4003554:	003fff06 	br	4003554 <__alt_data_end+0xfc003554>
	}
	value = (buffer[0] << 8) | buffer[1];
 4003558:	e0bffd83 	ldbu	r2,-10(fp)
 400355c:	10803fcc 	andi	r2,r2,255
 4003560:	1004923a 	slli	r2,r2,8
 4003564:	1007883a 	mov	r3,r2
 4003568:	e0bffdc3 	ldbu	r2,-9(fp)
 400356c:	10803fcc 	andi	r2,r2,255
 4003570:	1884b03a 	or	r2,r3,r2
 4003574:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 4003578:	e0bffd0b 	ldhu	r2,-12(fp)
}
 400357c:	e037883a 	mov	sp,fp
 4003580:	dfc00117 	ldw	ra,4(sp)
 4003584:	df000017 	ldw	fp,0(sp)
 4003588:	dec00204 	addi	sp,sp,8
 400358c:	f800283a 	ret

04003590 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 4003590:	defff904 	addi	sp,sp,-28
 4003594:	dfc00615 	stw	ra,24(sp)
 4003598:	df000515 	stw	fp,20(sp)
 400359c:	df000504 	addi	fp,sp,20
 40035a0:	e13ffd15 	stw	r4,-12(fp)
 40035a4:	2807883a 	mov	r3,r5
 40035a8:	3005883a 	mov	r2,r6
 40035ac:	e0fffe0d 	sth	r3,-8(fp)
 40035b0:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 40035b4:	e0bffe0b 	ldhu	r2,-8(fp)
 40035b8:	1004d23a 	srli	r2,r2,8
 40035bc:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 40035c0:	e0bffe0b 	ldhu	r2,-8(fp)
 40035c4:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 40035c8:	e0bfff0b 	ldhu	r2,-4(fp)
 40035cc:	1004d23a 	srli	r2,r2,8
 40035d0:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 40035d4:	e0bfff0b 	ldhu	r2,-4(fp)
 40035d8:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 40035dc:	e0bffc04 	addi	r2,fp,-16
 40035e0:	000f883a 	mov	r7,zero
 40035e4:	01800104 	movi	r6,4
 40035e8:	100b883a 	mov	r5,r2
 40035ec:	e13ffd17 	ldw	r4,-12(fp)
 40035f0:	401794c0 	call	401794c <alt_avalon_i2c_master_tx>
 40035f4:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 40035f8:	e0bffb17 	ldw	r2,-20(fp)
 40035fc:	10000626 	beq	r2,zero,4003618 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 4003600:	e0bffe0b 	ldhu	r2,-8(fp)
 4003604:	100b883a 	mov	r5,r2
 4003608:	010100b4 	movhi	r4,1026
 400360c:	212a9604 	addi	r4,r4,-21928
 4003610:	400c2180 	call	400c218 <printf>
		while (1)
		{
			//hang here
		}
 4003614:	003fff06 	br	4003614 <__alt_data_end+0xfc003614>
	}
	return DATA;
 4003618:	e0bfff0b 	ldhu	r2,-4(fp)
}
 400361c:	e037883a 	mov	sp,fp
 4003620:	dfc00117 	ldw	ra,4(sp)
 4003624:	df000017 	ldw	fp,0(sp)
 4003628:	dec00204 	addi	sp,sp,8
 400362c:	f800283a 	ret

04003630 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 4003630:	defff204 	addi	sp,sp,-56
 4003634:	dfc00d15 	stw	ra,52(sp)
 4003638:	df000c15 	stw	fp,48(sp)
 400363c:	df000c04 	addi	fp,sp,48
 4003640:	2005883a 	mov	r2,r4
 4003644:	e17fff15 	stw	r5,-4(fp)
 4003648:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 400364c:	008100b4 	movhi	r2,1026
 4003650:	10b9f204 	addi	r2,r2,-6200
 4003654:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 4003658:	008100b4 	movhi	r2,1026
 400365c:	10b9f204 	addi	r2,r2,-6200
 4003660:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 4003664:	e0fffe03 	ldbu	r3,-8(fp)
 4003668:	008100b4 	movhi	r2,1026
 400366c:	10b9f204 	addi	r2,r2,-6200
 4003670:	d8800415 	stw	r2,16(sp)
 4003674:	00800244 	movi	r2,9
 4003678:	d8800315 	stw	r2,12(sp)
 400367c:	d8000215 	stw	zero,8(sp)
 4003680:	00800084 	movi	r2,2
 4003684:	d8800115 	stw	r2,4(sp)
 4003688:	d8000015 	stw	zero,0(sp)
 400368c:	01c00184 	movi	r7,6
 4003690:	01802004 	movi	r6,128
 4003694:	000b883a 	mov	r5,zero
 4003698:	1809883a 	mov	r4,r3
 400369c:	400482c0 	call	400482c <XferCtrlReq>
 40036a0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 40036a4:	e0bffc03 	ldbu	r2,-16(fp)
 40036a8:	10000226 	beq	r2,zero,40036b4 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 40036ac:	0005883a 	mov	r2,zero
 40036b0:	0000dc06 	br	4003a24 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 40036b4:	e0bffa17 	ldw	r2,-24(fp)
 40036b8:	1080008b 	ldhu	r2,2(r2)
 40036bc:	10bfffcc 	andi	r2,r2,65535
 40036c0:	10804070 	cmpltui	r2,r2,257
 40036c4:	1000031e 	bne	r2,zero,40036d4 <HIDMProbe+0xa4>
		total_length = 256;
 40036c8:	00804004 	movi	r2,256
 40036cc:	e0bff90d 	sth	r2,-28(fp)
 40036d0:	00000306 	br	40036e0 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 40036d4:	e0bffa17 	ldw	r2,-24(fp)
 40036d8:	1080008b 	ldhu	r2,2(r2)
 40036dc:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 40036e0:	e13ffe03 	ldbu	r4,-8(fp)
 40036e4:	e0fff90b 	ldhu	r3,-28(fp)
 40036e8:	008100b4 	movhi	r2,1026
 40036ec:	10b9f204 	addi	r2,r2,-6200
 40036f0:	d8800415 	stw	r2,16(sp)
 40036f4:	d8c00315 	stw	r3,12(sp)
 40036f8:	d8000215 	stw	zero,8(sp)
 40036fc:	00800084 	movi	r2,2
 4003700:	d8800115 	stw	r2,4(sp)
 4003704:	d8000015 	stw	zero,0(sp)
 4003708:	01c00184 	movi	r7,6
 400370c:	01802004 	movi	r6,128
 4003710:	000b883a 	mov	r5,zero
 4003714:	400482c0 	call	400482c <XferCtrlReq>
 4003718:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 400371c:	e0bffc03 	ldbu	r2,-16(fp)
 4003720:	10000226 	beq	r2,zero,400372c <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 4003724:	0005883a 	mov	r2,zero
 4003728:	0000be06 	br	4003a24 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 400372c:	e0bffa17 	ldw	r2,-24(fp)
 4003730:	10800143 	ldbu	r2,5(r2)
 4003734:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 4003738:	0000b306 	br	4003a08 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 400373c:	e0bffa17 	ldw	r2,-24(fp)
 4003740:	10800043 	ldbu	r2,1(r2)
 4003744:	10803fcc 	andi	r2,r2,255
 4003748:	10800120 	cmpeqi	r2,r2,4
 400374c:	1000091e 	bne	r2,zero,4003774 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4003750:	e0bffa17 	ldw	r2,-24(fp)
 4003754:	10800003 	ldbu	r2,0(r2)
 4003758:	10803fcc 	andi	r2,r2,255
 400375c:	e0fffb17 	ldw	r3,-20(fp)
 4003760:	1885883a 	add	r2,r3,r2
 4003764:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 4003768:	e0bffb17 	ldw	r2,-20(fp)
 400376c:	e0bffa15 	stw	r2,-24(fp)
 4003770:	0000a506 	br	4003a08 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 4003774:	e0bffa17 	ldw	r2,-24(fp)
 4003778:	10800143 	ldbu	r2,5(r2)
 400377c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 4003780:	e0bffa17 	ldw	r2,-24(fp)
 4003784:	10800183 	ldbu	r2,6(r2)
 4003788:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 400378c:	e0bffa17 	ldw	r2,-24(fp)
 4003790:	108001c3 	ldbu	r2,7(r2)
 4003794:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 4003798:	e0bffc83 	ldbu	r2,-14(fp)
 400379c:	108000d8 	cmpnei	r2,r2,3
 40037a0:	1000971e 	bne	r2,zero,4003a00 <HIDMProbe+0x3d0>
 40037a4:	e0bffcc3 	ldbu	r2,-13(fp)
 40037a8:	10800058 	cmpnei	r2,r2,1
 40037ac:	1000941e 	bne	r2,zero,4003a00 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 40037b0:	e0bffd03 	ldbu	r2,-12(fp)
 40037b4:	10800098 	cmpnei	r2,r2,2
 40037b8:	1000911e 	bne	r2,zero,4003a00 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 40037bc:	e0fffe03 	ldbu	r3,-8(fp)
 40037c0:	008100b4 	movhi	r2,1026
 40037c4:	10ba3204 	addi	r2,r2,-5944
 40037c8:	180690fa 	slli	r3,r3,3
 40037cc:	10c5883a 	add	r2,r2,r3
 40037d0:	10800104 	addi	r2,r2,4
 40037d4:	00c00084 	movi	r3,2
 40037d8:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 40037dc:	e0fffe03 	ldbu	r3,-8(fp)
 40037e0:	008100b4 	movhi	r2,1026
 40037e4:	10ba3204 	addi	r2,r2,-5944
 40037e8:	180690fa 	slli	r3,r3,3
 40037ec:	10c5883a 	add	r2,r2,r3
 40037f0:	10800017 	ldw	r2,0(r2)
 40037f4:	1080008b 	ldhu	r2,2(r2)
 40037f8:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 40037fc:	4003e400 	call	4003e40 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 4003800:	e0fffe03 	ldbu	r3,-8(fp)
 4003804:	008100b4 	movhi	r2,1026
 4003808:	10ba3204 	addi	r2,r2,-5944
 400380c:	180690fa 	slli	r3,r3,3
 4003810:	10c7883a 	add	r3,r2,r3
 4003814:	008100b4 	movhi	r2,1026
 4003818:	10b9de04 	addi	r2,r2,-6280
 400381c:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 4003820:	e0fffe03 	ldbu	r3,-8(fp)
 4003824:	008100b4 	movhi	r2,1026
 4003828:	10ba3204 	addi	r2,r2,-5944
 400382c:	180690fa 	slli	r3,r3,3
 4003830:	10c5883a 	add	r2,r2,r3
 4003834:	10800017 	ldw	r2,0(r2)
 4003838:	e0fffd43 	ldbu	r3,-11(fp)
 400383c:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 4003840:	e0bffa17 	ldw	r2,-24(fp)
 4003844:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 4003848:	d0a6f345 	stb	r2,-25651(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 400384c:	e0bffe03 	ldbu	r2,-8(fp)
 4003850:	d0a6f305 	stb	r2,-25652(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4003854:	e0bffa17 	ldw	r2,-24(fp)
 4003858:	10800003 	ldbu	r2,0(r2)
 400385c:	10803fcc 	andi	r2,r2,255
 4003860:	e0fffb17 	ldw	r3,-20(fp)
 4003864:	1885883a 	add	r2,r3,r2
 4003868:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 400386c:	e0bffb17 	ldw	r2,-20(fp)
 4003870:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 4003874:	00005b06 	br	40039e4 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 4003878:	e0bffa17 	ldw	r2,-24(fp)
 400387c:	10800043 	ldbu	r2,1(r2)
 4003880:	10803fcc 	andi	r2,r2,255
 4003884:	10800160 	cmpeqi	r2,r2,5
 4003888:	1000091e 	bne	r2,zero,40038b0 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400388c:	e0bffa17 	ldw	r2,-24(fp)
 4003890:	10800003 	ldbu	r2,0(r2)
 4003894:	10803fcc 	andi	r2,r2,255
 4003898:	e0fffb17 	ldw	r3,-20(fp)
 400389c:	1885883a 	add	r2,r3,r2
 40038a0:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 40038a4:	e0bffb17 	ldw	r2,-20(fp)
 40038a8:	e0bffa15 	stw	r2,-24(fp)
 40038ac:	00004d06 	br	40039e4 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 40038b0:	e0fffe03 	ldbu	r3,-8(fp)
 40038b4:	008100b4 	movhi	r2,1026
 40038b8:	10ba3204 	addi	r2,r2,-5944
 40038bc:	180690fa 	slli	r3,r3,3
 40038c0:	10c5883a 	add	r2,r2,r3
 40038c4:	10800017 	ldw	r2,0(r2)
 40038c8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 40038cc:	e0fffa17 	ldw	r3,-24(fp)
 40038d0:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 40038d4:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 40038d8:	e0fffe03 	ldbu	r3,-8(fp)
 40038dc:	008100b4 	movhi	r2,1026
 40038e0:	10ba3204 	addi	r2,r2,-5944
 40038e4:	180690fa 	slli	r3,r3,3
 40038e8:	10c5883a 	add	r2,r2,r3
 40038ec:	10800017 	ldw	r2,0(r2)
 40038f0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 40038f4:	e0fffa17 	ldw	r3,-24(fp)
 40038f8:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 40038fc:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4003900:	e0fffe03 	ldbu	r3,-8(fp)
 4003904:	008100b4 	movhi	r2,1026
 4003908:	10ba3204 	addi	r2,r2,-5944
 400390c:	180690fa 	slli	r3,r3,3
 4003910:	10c5883a 	add	r2,r2,r3
 4003914:	10800017 	ldw	r2,0(r2)
 4003918:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 400391c:	e0fffa17 	ldw	r3,-24(fp)
 4003920:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4003924:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4003928:	e0fffe03 	ldbu	r3,-8(fp)
 400392c:	008100b4 	movhi	r2,1026
 4003930:	10ba3204 	addi	r2,r2,-5944
 4003934:	180690fa 	slli	r3,r3,3
 4003938:	10c5883a 	add	r2,r2,r3
 400393c:	10800017 	ldw	r2,0(r2)
 4003940:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 4003944:	e0fffa17 	ldw	r3,-24(fp)
 4003948:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400394c:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 4003950:	e0fffe03 	ldbu	r3,-8(fp)
 4003954:	e0bffc43 	ldbu	r2,-15(fp)
 4003958:	d8000415 	stw	zero,16(sp)
 400395c:	d8000315 	stw	zero,12(sp)
 4003960:	d8000215 	stw	zero,8(sp)
 4003964:	d8000115 	stw	zero,4(sp)
 4003968:	d8800015 	stw	r2,0(sp)
 400396c:	01c00244 	movi	r7,9
 4003970:	000d883a 	mov	r6,zero
 4003974:	000b883a 	mov	r5,zero
 4003978:	1809883a 	mov	r4,r3
 400397c:	400482c0 	call	400482c <XferCtrlReq>
 4003980:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 4003984:	e0bffc03 	ldbu	r2,-16(fp)
 4003988:	10000226 	beq	r2,zero,4003994 <HIDMProbe+0x364>
							return (FALSE);
 400398c:	0005883a 	mov	r2,zero
 4003990:	00002406 	br	4003a24 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 4003994:	e0fffe03 	ldbu	r3,-8(fp)
 4003998:	d0a6f343 	ldbu	r2,-25651(gp)
 400399c:	10803fcc 	andi	r2,r2,255
 40039a0:	d8000415 	stw	zero,16(sp)
 40039a4:	d8000315 	stw	zero,12(sp)
 40039a8:	d8800215 	stw	r2,8(sp)
 40039ac:	d8000115 	stw	zero,4(sp)
 40039b0:	d8000015 	stw	zero,0(sp)
 40039b4:	01c002c4 	movi	r7,11
 40039b8:	01800844 	movi	r6,33
 40039bc:	000b883a 	mov	r5,zero
 40039c0:	1809883a 	mov	r4,r3
 40039c4:	400482c0 	call	400482c <XferCtrlReq>
 40039c8:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 40039cc:	e0bffc03 	ldbu	r2,-16(fp)
 40039d0:	10000226 	beq	r2,zero,40039dc <HIDMProbe+0x3ac>
							return (FALSE);
 40039d4:	0005883a 	mov	r2,zero
 40039d8:	00001206 	br	4003a24 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 40039dc:	00800044 	movi	r2,1
 40039e0:	00001006 	br	4003a24 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 40039e4:	e0fff90b 	ldhu	r3,-28(fp)
 40039e8:	008100b4 	movhi	r2,1026
 40039ec:	10b9f204 	addi	r2,r2,-6200
 40039f0:	1885883a 	add	r2,r3,r2
 40039f4:	e0fffb17 	ldw	r3,-20(fp)
 40039f8:	18bf9f36 	bltu	r3,r2,4003878 <__alt_data_end+0xfc003878>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 40039fc:	00000206 	br	4003a08 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 4003a00:	0005883a 	mov	r2,zero
 4003a04:	00000706 	br	4003a24 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 4003a08:	e0fff90b 	ldhu	r3,-28(fp)
 4003a0c:	008100b4 	movhi	r2,1026
 4003a10:	10b9f204 	addi	r2,r2,-6200
 4003a14:	1885883a 	add	r2,r3,r2
 4003a18:	e0fffb17 	ldw	r3,-20(fp)
 4003a1c:	18bf4736 	bltu	r3,r2,400373c <__alt_data_end+0xfc00373c>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 4003a20:	0005883a 	mov	r2,zero
}
 4003a24:	e037883a 	mov	sp,fp
 4003a28:	dfc00117 	ldw	ra,4(sp)
 4003a2c:	df000017 	ldw	fp,0(sp)
 4003a30:	dec00204 	addi	sp,sp,8
 4003a34:	f800283a 	ret

04003a38 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 4003a38:	defff204 	addi	sp,sp,-56
 4003a3c:	dfc00d15 	stw	ra,52(sp)
 4003a40:	df000c15 	stw	fp,48(sp)
 4003a44:	df000c04 	addi	fp,sp,48
 4003a48:	2005883a 	mov	r2,r4
 4003a4c:	e17fff15 	stw	r5,-4(fp)
 4003a50:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 4003a54:	008100b4 	movhi	r2,1026
 4003a58:	10b9f204 	addi	r2,r2,-6200
 4003a5c:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 4003a60:	008100b4 	movhi	r2,1026
 4003a64:	10b9f204 	addi	r2,r2,-6200
 4003a68:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 4003a6c:	e0fffe03 	ldbu	r3,-8(fp)
 4003a70:	008100b4 	movhi	r2,1026
 4003a74:	10b9f204 	addi	r2,r2,-6200
 4003a78:	d8800415 	stw	r2,16(sp)
 4003a7c:	00800244 	movi	r2,9
 4003a80:	d8800315 	stw	r2,12(sp)
 4003a84:	d8000215 	stw	zero,8(sp)
 4003a88:	00800084 	movi	r2,2
 4003a8c:	d8800115 	stw	r2,4(sp)
 4003a90:	d8000015 	stw	zero,0(sp)
 4003a94:	01c00184 	movi	r7,6
 4003a98:	01802004 	movi	r6,128
 4003a9c:	000b883a 	mov	r5,zero
 4003aa0:	1809883a 	mov	r4,r3
 4003aa4:	400482c0 	call	400482c <XferCtrlReq>
 4003aa8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 4003aac:	e0bffc03 	ldbu	r2,-16(fp)
 4003ab0:	10000226 	beq	r2,zero,4003abc <HIDKProbe+0x84>
		return (FALSE);
 4003ab4:	0005883a 	mov	r2,zero
 4003ab8:	0000dc06 	br	4003e2c <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 4003abc:	e0bffa17 	ldw	r2,-24(fp)
 4003ac0:	1080008b 	ldhu	r2,2(r2)
 4003ac4:	10bfffcc 	andi	r2,r2,65535
 4003ac8:	10804070 	cmpltui	r2,r2,257
 4003acc:	1000031e 	bne	r2,zero,4003adc <HIDKProbe+0xa4>
		total_length = 256;
 4003ad0:	00804004 	movi	r2,256
 4003ad4:	e0bff90d 	sth	r2,-28(fp)
 4003ad8:	00000306 	br	4003ae8 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 4003adc:	e0bffa17 	ldw	r2,-24(fp)
 4003ae0:	1080008b 	ldhu	r2,2(r2)
 4003ae4:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 4003ae8:	e13ffe03 	ldbu	r4,-8(fp)
 4003aec:	e0fff90b 	ldhu	r3,-28(fp)
 4003af0:	008100b4 	movhi	r2,1026
 4003af4:	10b9f204 	addi	r2,r2,-6200
 4003af8:	d8800415 	stw	r2,16(sp)
 4003afc:	d8c00315 	stw	r3,12(sp)
 4003b00:	d8000215 	stw	zero,8(sp)
 4003b04:	00800084 	movi	r2,2
 4003b08:	d8800115 	stw	r2,4(sp)
 4003b0c:	d8000015 	stw	zero,0(sp)
 4003b10:	01c00184 	movi	r7,6
 4003b14:	01802004 	movi	r6,128
 4003b18:	000b883a 	mov	r5,zero
 4003b1c:	400482c0 	call	400482c <XferCtrlReq>
 4003b20:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 4003b24:	e0bffc03 	ldbu	r2,-16(fp)
 4003b28:	10000226 	beq	r2,zero,4003b34 <HIDKProbe+0xfc>
		return (FALSE);
 4003b2c:	0005883a 	mov	r2,zero
 4003b30:	0000be06 	br	4003e2c <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 4003b34:	e0bffa17 	ldw	r2,-24(fp)
 4003b38:	10800143 	ldbu	r2,5(r2)
 4003b3c:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 4003b40:	0000b306 	br	4003e10 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 4003b44:	e0bffa17 	ldw	r2,-24(fp)
 4003b48:	10800043 	ldbu	r2,1(r2)
 4003b4c:	10803fcc 	andi	r2,r2,255
 4003b50:	10800120 	cmpeqi	r2,r2,4
 4003b54:	1000091e 	bne	r2,zero,4003b7c <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4003b58:	e0bffa17 	ldw	r2,-24(fp)
 4003b5c:	10800003 	ldbu	r2,0(r2)
 4003b60:	10803fcc 	andi	r2,r2,255
 4003b64:	e0fffb17 	ldw	r3,-20(fp)
 4003b68:	1885883a 	add	r2,r3,r2
 4003b6c:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 4003b70:	e0bffb17 	ldw	r2,-20(fp)
 4003b74:	e0bffa15 	stw	r2,-24(fp)
 4003b78:	0000a506 	br	4003e10 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 4003b7c:	e0bffa17 	ldw	r2,-24(fp)
 4003b80:	10800143 	ldbu	r2,5(r2)
 4003b84:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 4003b88:	e0bffa17 	ldw	r2,-24(fp)
 4003b8c:	10800183 	ldbu	r2,6(r2)
 4003b90:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 4003b94:	e0bffa17 	ldw	r2,-24(fp)
 4003b98:	108001c3 	ldbu	r2,7(r2)
 4003b9c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 4003ba0:	e0bffc83 	ldbu	r2,-14(fp)
 4003ba4:	108000d8 	cmpnei	r2,r2,3
 4003ba8:	1000971e 	bne	r2,zero,4003e08 <HIDKProbe+0x3d0>
 4003bac:	e0bffcc3 	ldbu	r2,-13(fp)
 4003bb0:	10800058 	cmpnei	r2,r2,1
 4003bb4:	1000941e 	bne	r2,zero,4003e08 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 4003bb8:	e0bffd03 	ldbu	r2,-12(fp)
 4003bbc:	10800058 	cmpnei	r2,r2,1
 4003bc0:	1000911e 	bne	r2,zero,4003e08 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 4003bc4:	e0fffe03 	ldbu	r3,-8(fp)
 4003bc8:	008100b4 	movhi	r2,1026
 4003bcc:	10ba3204 	addi	r2,r2,-5944
 4003bd0:	180690fa 	slli	r3,r3,3
 4003bd4:	10c5883a 	add	r2,r2,r3
 4003bd8:	10800104 	addi	r2,r2,4
 4003bdc:	00c00044 	movi	r3,1
 4003be0:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 4003be4:	e0fffe03 	ldbu	r3,-8(fp)
 4003be8:	008100b4 	movhi	r2,1026
 4003bec:	10ba3204 	addi	r2,r2,-5944
 4003bf0:	180690fa 	slli	r3,r3,3
 4003bf4:	10c5883a 	add	r2,r2,r3
 4003bf8:	10800017 	ldw	r2,0(r2)
 4003bfc:	1080008b 	ldhu	r2,2(r2)
 4003c00:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 4003c04:	4003e400 	call	4003e40 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 4003c08:	e0fffe03 	ldbu	r3,-8(fp)
 4003c0c:	008100b4 	movhi	r2,1026
 4003c10:	10ba3204 	addi	r2,r2,-5944
 4003c14:	180690fa 	slli	r3,r3,3
 4003c18:	10c7883a 	add	r3,r2,r3
 4003c1c:	008100b4 	movhi	r2,1026
 4003c20:	10b9de04 	addi	r2,r2,-6280
 4003c24:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 4003c28:	e0fffe03 	ldbu	r3,-8(fp)
 4003c2c:	008100b4 	movhi	r2,1026
 4003c30:	10ba3204 	addi	r2,r2,-5944
 4003c34:	180690fa 	slli	r3,r3,3
 4003c38:	10c5883a 	add	r2,r2,r3
 4003c3c:	10800017 	ldw	r2,0(r2)
 4003c40:	e0fffd43 	ldbu	r3,-11(fp)
 4003c44:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 4003c48:	e0bffa17 	ldw	r2,-24(fp)
 4003c4c:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 4003c50:	d0a6f345 	stb	r2,-25651(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 4003c54:	e0bffe03 	ldbu	r2,-8(fp)
 4003c58:	d0a6f305 	stb	r2,-25652(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 4003c5c:	e0bffa17 	ldw	r2,-24(fp)
 4003c60:	10800003 	ldbu	r2,0(r2)
 4003c64:	10803fcc 	andi	r2,r2,255
 4003c68:	e0fffb17 	ldw	r3,-20(fp)
 4003c6c:	1885883a 	add	r2,r3,r2
 4003c70:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 4003c74:	e0bffb17 	ldw	r2,-20(fp)
 4003c78:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 4003c7c:	00005b06 	br	4003dec <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 4003c80:	e0bffa17 	ldw	r2,-24(fp)
 4003c84:	10800043 	ldbu	r2,1(r2)
 4003c88:	10803fcc 	andi	r2,r2,255
 4003c8c:	10800160 	cmpeqi	r2,r2,5
 4003c90:	1000091e 	bne	r2,zero,4003cb8 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4003c94:	e0bffa17 	ldw	r2,-24(fp)
 4003c98:	10800003 	ldbu	r2,0(r2)
 4003c9c:	10803fcc 	andi	r2,r2,255
 4003ca0:	e0fffb17 	ldw	r3,-20(fp)
 4003ca4:	1885883a 	add	r2,r3,r2
 4003ca8:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 4003cac:	e0bffb17 	ldw	r2,-20(fp)
 4003cb0:	e0bffa15 	stw	r2,-24(fp)
 4003cb4:	00004d06 	br	4003dec <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 4003cb8:	e0fffe03 	ldbu	r3,-8(fp)
 4003cbc:	008100b4 	movhi	r2,1026
 4003cc0:	10ba3204 	addi	r2,r2,-5944
 4003cc4:	180690fa 	slli	r3,r3,3
 4003cc8:	10c5883a 	add	r2,r2,r3
 4003ccc:	10800017 	ldw	r2,0(r2)
 4003cd0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 4003cd4:	e0fffa17 	ldw	r3,-24(fp)
 4003cd8:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 4003cdc:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 4003ce0:	e0fffe03 	ldbu	r3,-8(fp)
 4003ce4:	008100b4 	movhi	r2,1026
 4003ce8:	10ba3204 	addi	r2,r2,-5944
 4003cec:	180690fa 	slli	r3,r3,3
 4003cf0:	10c5883a 	add	r2,r2,r3
 4003cf4:	10800017 	ldw	r2,0(r2)
 4003cf8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 4003cfc:	e0fffa17 	ldw	r3,-24(fp)
 4003d00:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 4003d04:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4003d08:	e0fffe03 	ldbu	r3,-8(fp)
 4003d0c:	008100b4 	movhi	r2,1026
 4003d10:	10ba3204 	addi	r2,r2,-5944
 4003d14:	180690fa 	slli	r3,r3,3
 4003d18:	10c5883a 	add	r2,r2,r3
 4003d1c:	10800017 	ldw	r2,0(r2)
 4003d20:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 4003d24:	e0fffa17 	ldw	r3,-24(fp)
 4003d28:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4003d2c:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4003d30:	e0fffe03 	ldbu	r3,-8(fp)
 4003d34:	008100b4 	movhi	r2,1026
 4003d38:	10ba3204 	addi	r2,r2,-5944
 4003d3c:	180690fa 	slli	r3,r3,3
 4003d40:	10c5883a 	add	r2,r2,r3
 4003d44:	10800017 	ldw	r2,0(r2)
 4003d48:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 4003d4c:	e0fffa17 	ldw	r3,-24(fp)
 4003d50:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4003d54:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 4003d58:	e0fffe03 	ldbu	r3,-8(fp)
 4003d5c:	e0bffc43 	ldbu	r2,-15(fp)
 4003d60:	d8000415 	stw	zero,16(sp)
 4003d64:	d8000315 	stw	zero,12(sp)
 4003d68:	d8000215 	stw	zero,8(sp)
 4003d6c:	d8000115 	stw	zero,4(sp)
 4003d70:	d8800015 	stw	r2,0(sp)
 4003d74:	01c00244 	movi	r7,9
 4003d78:	000d883a 	mov	r6,zero
 4003d7c:	000b883a 	mov	r5,zero
 4003d80:	1809883a 	mov	r4,r3
 4003d84:	400482c0 	call	400482c <XferCtrlReq>
 4003d88:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 4003d8c:	e0bffc03 	ldbu	r2,-16(fp)
 4003d90:	10000226 	beq	r2,zero,4003d9c <HIDKProbe+0x364>
							return (FALSE);
 4003d94:	0005883a 	mov	r2,zero
 4003d98:	00002406 	br	4003e2c <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 4003d9c:	e0fffe03 	ldbu	r3,-8(fp)
 4003da0:	d0a6f343 	ldbu	r2,-25651(gp)
 4003da4:	10803fcc 	andi	r2,r2,255
 4003da8:	d8000415 	stw	zero,16(sp)
 4003dac:	d8000315 	stw	zero,12(sp)
 4003db0:	d8800215 	stw	r2,8(sp)
 4003db4:	d8000115 	stw	zero,4(sp)
 4003db8:	d8000015 	stw	zero,0(sp)
 4003dbc:	01c002c4 	movi	r7,11
 4003dc0:	01800844 	movi	r6,33
 4003dc4:	000b883a 	mov	r5,zero
 4003dc8:	1809883a 	mov	r4,r3
 4003dcc:	400482c0 	call	400482c <XferCtrlReq>
 4003dd0:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 4003dd4:	e0bffc03 	ldbu	r2,-16(fp)
 4003dd8:	10000226 	beq	r2,zero,4003de4 <HIDKProbe+0x3ac>
							return (FALSE);
 4003ddc:	0005883a 	mov	r2,zero
 4003de0:	00001206 	br	4003e2c <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 4003de4:	00800044 	movi	r2,1
 4003de8:	00001006 	br	4003e2c <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 4003dec:	e0fff90b 	ldhu	r3,-28(fp)
 4003df0:	008100b4 	movhi	r2,1026
 4003df4:	10b9f204 	addi	r2,r2,-6200
 4003df8:	1885883a 	add	r2,r3,r2
 4003dfc:	e0fffb17 	ldw	r3,-20(fp)
 4003e00:	18bf9f36 	bltu	r3,r2,4003c80 <__alt_data_end+0xfc003c80>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 4003e04:	00000206 	br	4003e10 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 4003e08:	0005883a 	mov	r2,zero
 4003e0c:	00000706 	br	4003e2c <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 4003e10:	e0fff90b 	ldhu	r3,-28(fp)
 4003e14:	008100b4 	movhi	r2,1026
 4003e18:	10b9f204 	addi	r2,r2,-6200
 4003e1c:	1885883a 	add	r2,r3,r2
 4003e20:	e0fffb17 	ldw	r3,-20(fp)
 4003e24:	18bf4736 	bltu	r3,r2,4003b44 <__alt_data_end+0xfc003b44>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 4003e28:	0005883a 	mov	r2,zero
}
 4003e2c:	e037883a 	mov	sp,fp
 4003e30:	dfc00117 	ldw	ra,4(sp)
 4003e34:	df000017 	ldw	fp,0(sp)
 4003e38:	dec00204 	addi	sp,sp,8
 4003e3c:	f800283a 	ret

04003e40 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 4003e40:	deffff04 	addi	sp,sp,-4
 4003e44:	df000015 	stw	fp,0(sp)
 4003e48:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 4003e4c:	008100b4 	movhi	r2,1026
 4003e50:	10b9de04 	addi	r2,r2,-6280
 4003e54:	00c01004 	movi	r3,64
 4003e58:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 4003e5c:	008100b4 	movhi	r2,1026
 4003e60:	10b9de04 	addi	r2,r2,-6280
 4003e64:	00c00404 	movi	r3,16
 4003e68:	10c00385 	stb	r3,14(r2)
}
 4003e6c:	0001883a 	nop
 4003e70:	e037883a 	mov	sp,fp
 4003e74:	df000017 	ldw	fp,0(sp)
 4003e78:	dec00104 	addi	sp,sp,4
 4003e7c:	f800283a 	ret

04003e80 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 4003e80:	defffb04 	addi	sp,sp,-20
 4003e84:	dfc00415 	stw	ra,16(sp)
 4003e88:	df000315 	stw	fp,12(sp)
 4003e8c:	df000304 	addi	fp,sp,12
 4003e90:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 4003e94:	d0a6f303 	ldbu	r2,-25652(gp)
 4003e98:	10803fcc 	andi	r2,r2,255
 4003e9c:	100b883a 	mov	r5,r2
 4003ea0:	01003804 	movi	r4,224
 4003ea4:	40040b00 	call	40040b0 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4003ea8:	d0a6f303 	ldbu	r2,-25652(gp)
 4003eac:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 4003eb0:	d0a6f303 	ldbu	r2,-25652(gp)
 4003eb4:	10c03fcc 	andi	r3,r2,255
 4003eb8:	008100b4 	movhi	r2,1026
 4003ebc:	10ba3204 	addi	r2,r2,-5944
 4003ec0:	180690fa 	slli	r3,r3,3
 4003ec4:	10c5883a 	add	r2,r2,r3
 4003ec8:	10800017 	ldw	r2,0(r2)
 4003ecc:	10800204 	addi	r2,r2,8
 4003ed0:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4003ed4:	10803fcc 	andi	r2,r2,255
 4003ed8:	d8800015 	stw	r2,0(sp)
 4003edc:	e1ffff17 	ldw	r7,-4(fp)
 4003ee0:	01800204 	movi	r6,8
 4003ee4:	01400044 	movi	r5,1
 4003ee8:	4004c500 	call	4004c50 <XferInTransfer>
 4003eec:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 4003ef0:	e0bffe03 	ldbu	r2,-8(fp)
}
 4003ef4:	e037883a 	mov	sp,fp
 4003ef8:	dfc00117 	ldw	ra,4(sp)
 4003efc:	df000017 	ldw	fp,0(sp)
 4003f00:	dec00204 	addi	sp,sp,8
 4003f04:	f800283a 	ret

04003f08 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 4003f08:	defffb04 	addi	sp,sp,-20
 4003f0c:	dfc00415 	stw	ra,16(sp)
 4003f10:	df000315 	stw	fp,12(sp)
 4003f14:	df000304 	addi	fp,sp,12
 4003f18:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 4003f1c:	d0a6f303 	ldbu	r2,-25652(gp)
 4003f20:	10803fcc 	andi	r2,r2,255
 4003f24:	100b883a 	mov	r5,r2
 4003f28:	01003804 	movi	r4,224
 4003f2c:	40040b00 	call	40040b0 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4003f30:	d0a6f303 	ldbu	r2,-25652(gp)
 4003f34:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 4003f38:	d0a6f303 	ldbu	r2,-25652(gp)
 4003f3c:	10c03fcc 	andi	r3,r2,255
 4003f40:	008100b4 	movhi	r2,1026
 4003f44:	10ba3204 	addi	r2,r2,-5944
 4003f48:	180690fa 	slli	r3,r3,3
 4003f4c:	10c5883a 	add	r2,r2,r3
 4003f50:	10800017 	ldw	r2,0(r2)
 4003f54:	10800204 	addi	r2,r2,8
 4003f58:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4003f5c:	10803fcc 	andi	r2,r2,255
 4003f60:	d8800015 	stw	r2,0(sp)
 4003f64:	e1ffff17 	ldw	r7,-4(fp)
 4003f68:	01800204 	movi	r6,8
 4003f6c:	01400044 	movi	r5,1
 4003f70:	4004c500 	call	4004c50 <XferInTransfer>
 4003f74:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 4003f78:	e0bffe03 	ldbu	r2,-8(fp)
}
 4003f7c:	e037883a 	mov	sp,fp
 4003f80:	dfc00117 	ldw	ra,4(sp)
 4003f84:	df000017 	ldw	fp,0(sp)
 4003f88:	dec00204 	addi	sp,sp,8
 4003f8c:	f800283a 	ret

04003f90 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 4003f90:	defffb04 	addi	sp,sp,-20
 4003f94:	df000415 	stw	fp,16(sp)
 4003f98:	df000404 	addi	fp,sp,16
 4003f9c:	2007883a 	mov	r3,r4
 4003fa0:	2805883a 	mov	r2,r5
 4003fa4:	e1bffe15 	stw	r6,-8(fp)
 4003fa8:	e1ffff15 	stw	r7,-4(fp)
 4003fac:	e0fffc05 	stb	r3,-16(fp)
 4003fb0:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 4003fb4:	0005883a 	mov	r2,zero
}
 4003fb8:	e037883a 	mov	sp,fp
 4003fbc:	df000017 	ldw	fp,0(sp)
 4003fc0:	dec00104 	addi	sp,sp,4
 4003fc4:	f800283a 	ret

04003fc8 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 4003fc8:	defffb04 	addi	sp,sp,-20
 4003fcc:	df000415 	stw	fp,16(sp)
 4003fd0:	df000404 	addi	fp,sp,16
 4003fd4:	2007883a 	mov	r3,r4
 4003fd8:	2805883a 	mov	r2,r5
 4003fdc:	e1bffe15 	stw	r6,-8(fp)
 4003fe0:	e1ffff15 	stw	r7,-4(fp)
 4003fe4:	e0fffc05 	stb	r3,-16(fp)
 4003fe8:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 4003fec:	0005883a 	mov	r2,zero
}
 4003ff0:	e037883a 	mov	sp,fp
 4003ff4:	df000017 	ldw	fp,0(sp)
 4003ff8:	dec00104 	addi	sp,sp,4
 4003ffc:	f800283a 	ret

04004000 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 4004000:	defffc04 	addi	sp,sp,-16
 4004004:	df000315 	stw	fp,12(sp)
 4004008:	df000304 	addi	fp,sp,12
 400400c:	2807883a 	mov	r3,r5
 4004010:	3005883a 	mov	r2,r6
 4004014:	e13ffd05 	stb	r4,-12(fp)
 4004018:	e0fffe05 	stb	r3,-8(fp)
 400401c:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 4004020:	0001883a 	nop
 4004024:	e037883a 	mov	sp,fp
 4004028:	df000017 	ldw	fp,0(sp)
 400402c:	dec00104 	addi	sp,sp,4
 4004030:	f800283a 	ret

04004034 <SPI_wr>:

//writes single byte to MAX3421E via SPI, reads BF and checks that it's > 0 (and returns)
BYTE SPI_wr(BYTE data) {
 4004034:	defff804 	addi	sp,sp,-32
 4004038:	dfc00715 	stw	ra,28(sp)
 400403c:	df000615 	stw	fp,24(sp)
 4004040:	df000604 	addi	fp,sp,24
 4004044:	2005883a 	mov	r2,r4
 4004048:	e0bfff05 	stb	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return the status register

    int code = 0;
 400404c:	e03ffd15 	stw	zero,-12(fp)
    alt_u8 status;
	code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, &data, 1, &status, 0);
 4004050:	e0ffff04 	addi	r3,fp,-4
 4004054:	d8000215 	stw	zero,8(sp)
 4004058:	e0bffe04 	addi	r2,fp,-8
 400405c:	d8800115 	stw	r2,4(sp)
 4004060:	00800044 	movi	r2,1
 4004064:	d8800015 	stw	r2,0(sp)
 4004068:	180f883a 	mov	r7,r3
 400406c:	01800044 	movi	r6,1
 4004070:	000b883a 	mov	r5,zero
 4004074:	01020034 	movhi	r4,2048
 4004078:	21144804 	addi	r4,r4,20768
 400407c:	40192b80 	call	40192b8 <alt_avalon_spi_command>
 4004080:	e0bffd15 	stw	r2,-12(fp)
	if (code < 0) {
 4004084:	e0bffd17 	ldw	r2,-12(fp)
 4004088:	1000030e 	bge	r2,zero,4004098 <SPI_wr+0x64>
		alt_printf("ERROR1");
 400408c:	010100b4 	movhi	r4,1026
 4004090:	212a9e04 	addi	r4,r4,-21896
 4004094:	401636c0 	call	401636c <alt_printf>
	}
	return status;
 4004098:	e0bffe03 	ldbu	r2,-8(fp)
}
 400409c:	e037883a 	mov	sp,fp
 40040a0:	dfc00117 	ldw	ra,4(sp)
 40040a4:	df000017 	ldw	fp,0(sp)
 40040a8:	dec00204 	addi	sp,sp,8
 40040ac:	f800283a 	ret

040040b0 <MAXreg_wr>:

//writes register to MAX3421E via SPI, reads BF and checks that it's > 0 (and returns)
void MAXreg_wr(BYTE reg, BYTE val) {
 40040b0:	defff704 	addi	sp,sp,-36
 40040b4:	dfc00815 	stw	ra,32(sp)
 40040b8:	df000715 	stw	fp,28(sp)
 40040bc:	df000704 	addi	fp,sp,28
 40040c0:	2007883a 	mov	r3,r4
 40040c4:	2805883a 	mov	r2,r5
 40040c8:	e0fffe05 	stb	r3,-8(fp)
 40040cc:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)

    int code = 0;
 40040d0:	e03ffc15 	stw	zero,-16(fp)
    alt_u8 data[2];
    alt_u8 status;
    data[0] = reg + 2;
 40040d4:	e0bffe03 	ldbu	r2,-8(fp)
 40040d8:	10800084 	addi	r2,r2,2
 40040dc:	e0bffd05 	stb	r2,-12(fp)
    data[1] = val;
 40040e0:	e0bfff03 	ldbu	r2,-4(fp)
 40040e4:	e0bffd45 	stb	r2,-11(fp)
    code = alt_avalon_spi_command(SPI_0_BASE, 0, 2, data, 0, &status, 0);
 40040e8:	e0fffd04 	addi	r3,fp,-12
 40040ec:	d8000215 	stw	zero,8(sp)
 40040f0:	e0bffd84 	addi	r2,fp,-10
 40040f4:	d8800115 	stw	r2,4(sp)
 40040f8:	d8000015 	stw	zero,0(sp)
 40040fc:	180f883a 	mov	r7,r3
 4004100:	01800084 	movi	r6,2
 4004104:	000b883a 	mov	r5,zero
 4004108:	01020034 	movhi	r4,2048
 400410c:	21144804 	addi	r4,r4,20768
 4004110:	40192b80 	call	40192b8 <alt_avalon_spi_command>
 4004114:	e0bffc15 	stw	r2,-16(fp)
    if (code < 0) {
 4004118:	e0bffc17 	ldw	r2,-16(fp)
 400411c:	1000030e 	bge	r2,zero,400412c <MAXreg_wr+0x7c>
        alt_printf("ERROR2");
 4004120:	010100b4 	movhi	r4,1026
 4004124:	212aa004 	addi	r4,r4,-21888
 4004128:	401636c0 	call	401636c <alt_printf>
    }
}
 400412c:	0001883a 	nop
 4004130:	e037883a 	mov	sp,fp
 4004134:	dfc00117 	ldw	ra,4(sp)
 4004138:	df000017 	ldw	fp,0(sp)
 400413c:	dec00204 	addi	sp,sp,8
 4004140:	f800283a 	ret

04004144 <MAXbytes_wr>:

//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 4004144:	defff204 	addi	sp,sp,-56
 4004148:	dfc00d15 	stw	ra,52(sp)
 400414c:	df000c15 	stw	fp,48(sp)
 4004150:	dc000b15 	stw	r16,44(sp)
 4004154:	df000c04 	addi	fp,sp,48
 4004158:	201b883a 	mov	r13,r4
 400415c:	2809883a 	mov	r4,r5
 4004160:	e1bffe15 	stw	r6,-8(fp)
 4004164:	e37ffc05 	stb	r13,-16(fp)
 4004168:	e13ffd05 	stb	r4,-12(fp)
 400416c:	d809883a 	mov	r4,sp
 4004170:	2021883a 	mov	r16,r4
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);

    int code = 0;
 4004174:	e03ff815 	stw	zero,-32(fp)
    alt_u8 numa[nbytes + 1];
 4004178:	e13ffd03 	ldbu	r4,-12(fp)
 400417c:	21000044 	addi	r4,r4,1
 4004180:	217fffc4 	addi	r5,r4,-1
 4004184:	e17ff915 	stw	r5,-28(fp)
 4004188:	200b883a 	mov	r5,r4
 400418c:	2817883a 	mov	r11,r5
 4004190:	0019883a 	mov	r12,zero
 4004194:	580ad77a 	srli	r5,r11,29
 4004198:	601090fa 	slli	r8,r12,3
 400419c:	2a10b03a 	or	r8,r5,r8
 40041a0:	580e90fa 	slli	r7,r11,3
 40041a4:	200b883a 	mov	r5,r4
 40041a8:	2813883a 	mov	r9,r5
 40041ac:	0015883a 	mov	r10,zero
 40041b0:	480ad77a 	srli	r5,r9,29
 40041b4:	500690fa 	slli	r3,r10,3
 40041b8:	28c6b03a 	or	r3,r5,r3
 40041bc:	480490fa 	slli	r2,r9,3
 40041c0:	2005883a 	mov	r2,r4
 40041c4:	108000c4 	addi	r2,r2,3
 40041c8:	1004d0ba 	srli	r2,r2,2
 40041cc:	1085883a 	add	r2,r2,r2
 40041d0:	1085883a 	add	r2,r2,r2
 40041d4:	d8b7c83a 	sub	sp,sp,r2
 40041d8:	d8800304 	addi	r2,sp,12
 40041dc:	1005883a 	mov	r2,r2
 40041e0:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 status;
    BYTE place = nbytes;
 40041e4:	e0bffd03 	ldbu	r2,-12(fp)
 40041e8:	e0bff705 	stb	r2,-36(fp)
    numa[0] = reg + 2;
 40041ec:	e0bffc03 	ldbu	r2,-16(fp)
 40041f0:	10800084 	addi	r2,r2,2
 40041f4:	1007883a 	mov	r3,r2
 40041f8:	e0bffa17 	ldw	r2,-24(fp)
 40041fc:	10c00005 	stb	r3,0(r2)
    while (place > 0) {
 4004200:	00000c06 	br	4004234 <MAXbytes_wr+0xf0>
        numa[place] = data[place - 1];
 4004204:	e0bff703 	ldbu	r2,-36(fp)
 4004208:	e0fff703 	ldbu	r3,-36(fp)
 400420c:	18ffffc4 	addi	r3,r3,-1
 4004210:	e13ffe17 	ldw	r4,-8(fp)
 4004214:	20c7883a 	add	r3,r4,r3
 4004218:	18c00003 	ldbu	r3,0(r3)
 400421c:	e13ffa17 	ldw	r4,-24(fp)
 4004220:	2085883a 	add	r2,r4,r2
 4004224:	10c00005 	stb	r3,0(r2)
        place--;
 4004228:	e0bff703 	ldbu	r2,-36(fp)
 400422c:	10bfffc4 	addi	r2,r2,-1
 4004230:	e0bff705 	stb	r2,-36(fp)
    int code = 0;
    alt_u8 numa[nbytes + 1];
    alt_u8 status;
    BYTE place = nbytes;
    numa[0] = reg + 2;
    while (place > 0) {
 4004234:	e0bff703 	ldbu	r2,-36(fp)
 4004238:	103ff21e 	bne	r2,zero,4004204 <__alt_data_end+0xfc004204>
        numa[place] = data[place - 1];
        place--;
    }
    code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1, numa, 0, &status, 0);
 400423c:	e0bffd03 	ldbu	r2,-12(fp)
 4004240:	10800044 	addi	r2,r2,1
 4004244:	1009883a 	mov	r4,r2
 4004248:	e0fffa17 	ldw	r3,-24(fp)
 400424c:	d8000215 	stw	zero,8(sp)
 4004250:	e0bffb04 	addi	r2,fp,-20
 4004254:	d8800115 	stw	r2,4(sp)
 4004258:	d8000015 	stw	zero,0(sp)
 400425c:	180f883a 	mov	r7,r3
 4004260:	200d883a 	mov	r6,r4
 4004264:	000b883a 	mov	r5,zero
 4004268:	01020034 	movhi	r4,2048
 400426c:	21144804 	addi	r4,r4,20768
 4004270:	40192b80 	call	40192b8 <alt_avalon_spi_command>
 4004274:	e0bff815 	stw	r2,-32(fp)
    if (code < 0) {
 4004278:	e0bff817 	ldw	r2,-32(fp)
 400427c:	1000030e 	bge	r2,zero,400428c <MAXbytes_wr+0x148>
        alt_printf("ERROR3");
 4004280:	010100b4 	movhi	r4,1026
 4004284:	212aa204 	addi	r4,r4,-21880
 4004288:	401636c0 	call	401636c <alt_printf>
    }
    return (&(data[nbytes]));
 400428c:	e0bffd03 	ldbu	r2,-12(fp)
 4004290:	e0fffe17 	ldw	r3,-8(fp)
 4004294:	1885883a 	add	r2,r3,r2
 4004298:	8037883a 	mov	sp,r16
}
 400429c:	e6ffff04 	addi	sp,fp,-4
 40042a0:	dfc00217 	ldw	ra,8(sp)
 40042a4:	df000117 	ldw	fp,4(sp)
 40042a8:	dc000017 	ldw	r16,0(sp)
 40042ac:	dec00304 	addi	sp,sp,12
 40042b0:	f800283a 	ret

040042b4 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 40042b4:	defff804 	addi	sp,sp,-32
 40042b8:	dfc00715 	stw	ra,28(sp)
 40042bc:	df000615 	stw	fp,24(sp)
 40042c0:	df000604 	addi	fp,sp,24
 40042c4:	2005883a 	mov	r2,r4
 40042c8:	e0bfff05 	stb	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val

    int code = 0;
 40042cc:	e03ffd15 	stw	zero,-12(fp)
    alt_u8 data;
    alt_u8 val;
    data = reg;
 40042d0:	e0bfff03 	ldbu	r2,-4(fp)
 40042d4:	e0bffe05 	stb	r2,-8(fp)
    code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, &data, 2, &val, 0);
 40042d8:	e0fffe04 	addi	r3,fp,-8
 40042dc:	d8000215 	stw	zero,8(sp)
 40042e0:	e0bffe44 	addi	r2,fp,-7
 40042e4:	d8800115 	stw	r2,4(sp)
 40042e8:	00800084 	movi	r2,2
 40042ec:	d8800015 	stw	r2,0(sp)
 40042f0:	180f883a 	mov	r7,r3
 40042f4:	01800044 	movi	r6,1
 40042f8:	000b883a 	mov	r5,zero
 40042fc:	01020034 	movhi	r4,2048
 4004300:	21144804 	addi	r4,r4,20768
 4004304:	40192b80 	call	40192b8 <alt_avalon_spi_command>
 4004308:	e0bffd15 	stw	r2,-12(fp)
    if (code < 0 ) {
 400430c:	e0bffd17 	ldw	r2,-12(fp)
 4004310:	1000030e 	bge	r2,zero,4004320 <MAXreg_rd+0x6c>
        alt_printf("ERROR4");
 4004314:	010100b4 	movhi	r4,1026
 4004318:	212aa404 	addi	r4,r4,-21872
 400431c:	401636c0 	call	401636c <alt_printf>
    }
    return val;
 4004320:	e0bffe43 	ldbu	r2,-7(fp)

}
 4004324:	e037883a 	mov	sp,fp
 4004328:	dfc00117 	ldw	ra,4(sp)
 400432c:	df000017 	ldw	fp,0(sp)
 4004330:	dec00204 	addi	sp,sp,8
 4004334:	f800283a 	ret

04004338 <MAXbytes_rd>:

//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 4004338:	defff604 	addi	sp,sp,-40
 400433c:	dfc00915 	stw	ra,36(sp)
 4004340:	df000815 	stw	fp,32(sp)
 4004344:	df000804 	addi	fp,sp,32
 4004348:	2007883a 	mov	r3,r4
 400434c:	2805883a 	mov	r2,r5
 4004350:	e1bfff15 	stw	r6,-4(fp)
 4004354:	e0fffd05 	stb	r3,-12(fp)
 4004358:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);

    int code = 0;
 400435c:	e03ffb15 	stw	zero,-20(fp)
    alt_u8 numa;
    numa = reg;
 4004360:	e0bffd03 	ldbu	r2,-12(fp)
 4004364:	e0bffc05 	stb	r2,-16(fp)
    code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, &numa, nbytes + 1, data, 0);
 4004368:	e0bffe03 	ldbu	r2,-8(fp)
 400436c:	10800044 	addi	r2,r2,1
 4004370:	1009883a 	mov	r4,r2
 4004374:	e0fffc04 	addi	r3,fp,-16
 4004378:	d8000215 	stw	zero,8(sp)
 400437c:	e0bfff17 	ldw	r2,-4(fp)
 4004380:	d8800115 	stw	r2,4(sp)
 4004384:	d9000015 	stw	r4,0(sp)
 4004388:	180f883a 	mov	r7,r3
 400438c:	01800044 	movi	r6,1
 4004390:	000b883a 	mov	r5,zero
 4004394:	01020034 	movhi	r4,2048
 4004398:	21144804 	addi	r4,r4,20768
 400439c:	40192b80 	call	40192b8 <alt_avalon_spi_command>
 40043a0:	e0bffb15 	stw	r2,-20(fp)
    if (code < 0) {
 40043a4:	e0bffb17 	ldw	r2,-20(fp)
 40043a8:	1000030e 	bge	r2,zero,40043b8 <MAXbytes_rd+0x80>
        alt_printf("ERROR5");
 40043ac:	010100b4 	movhi	r4,1026
 40043b0:	212aa604 	addi	r4,r4,-21864
 40043b4:	401636c0 	call	401636c <alt_printf>
    }
	return (&(data[nbytes]));
 40043b8:	e0bffe03 	ldbu	r2,-8(fp)
 40043bc:	e0ffff17 	ldw	r3,-4(fp)
 40043c0:	1885883a 	add	r2,r3,r2
}
 40043c4:	e037883a 	mov	sp,fp
 40043c8:	dfc00117 	ldw	ra,4(sp)
 40043cc:	df000017 	ldw	fp,0(sp)
 40043d0:	dec00204 	addi	sp,sp,8
 40043d4:	f800283a 	ret

040043d8 <MAX3421E_reset>:

/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 40043d8:	defffd04 	addi	sp,sp,-12
 40043dc:	dfc00215 	stw	ra,8(sp)
 40043e0:	df000115 	stw	fp,4(sp)
 40043e4:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 40043e8:	0007883a 	mov	r3,zero
 40043ec:	00820034 	movhi	r2,2048
 40043f0:	10947c04 	addi	r2,r2,20976
 40043f4:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 40043f8:	010003f4 	movhi	r4,15
 40043fc:	21109004 	addi	r4,r4,16960
 4004400:	40169ec0 	call	40169ec <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 4004404:	00c00044 	movi	r3,1
 4004408:	00820034 	movhi	r2,2048
 400440c:	10947c04 	addi	r2,r2,20976
 4004410:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 4004414:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 4004418:	01400804 	movi	r5,32
 400441c:	01001e04 	movi	r4,120
 4004420:	40040b00 	call	40040b0 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 4004424:	000b883a 	mov	r5,zero
 4004428:	01001e04 	movi	r4,120
 400442c:	40040b00 	call	40040b0 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 4004430:	00000806 	br	4004454 <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
 4004434:	e0bfff03 	ldbu	r2,-4(fp)
 4004438:	10800044 	addi	r2,r2,1
 400443c:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 4004440:	e0bfff03 	ldbu	r2,-4(fp)
 4004444:	1000031e 	bne	r2,zero,4004454 <MAX3421E_reset+0x7c>
			printf("reset timeout!");
 4004448:	010100b4 	movhi	r4,1026
 400444c:	212aa804 	addi	r4,r4,-21856
 4004450:	400c2180 	call	400c218 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 4004454:	01001a04 	movi	r4,104
 4004458:	40042b40 	call	40042b4 <MAXreg_rd>
 400445c:	10803fcc 	andi	r2,r2,255
 4004460:	1080004c 	andi	r2,r2,1
 4004464:	103ff326 	beq	r2,zero,4004434 <__alt_data_end+0xfc004434>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 4004468:	0001883a 	nop
 400446c:	e037883a 	mov	sp,fp
 4004470:	dfc00117 	ldw	ra,4(sp)
 4004474:	df000017 	ldw	fp,0(sp)
 4004478:	dec00204 	addi	sp,sp,8
 400447c:	f800283a 	ret

04004480 <Vbus_power>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 4004480:	defffe04 	addi	sp,sp,-8
 4004484:	df000115 	stw	fp,4(sp)
 4004488:	df000104 	addi	fp,sp,4
 400448c:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 4004490:	00800044 	movi	r2,1
}
 4004494:	e037883a 	mov	sp,fp
 4004498:	df000017 	ldw	fp,0(sp)
 400449c:	dec00104 	addi	sp,sp,4
 40044a0:	f800283a 	ret

040044a4 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 40044a4:	defffd04 	addi	sp,sp,-12
 40044a8:	dfc00215 	stw	ra,8(sp)
 40044ac:	df000115 	stw	fp,4(sp)
 40044b0:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 40044b4:	01003e04 	movi	r4,248
 40044b8:	40042b40 	call	40042b4 <MAXreg_rd>
 40044bc:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 40044c0:	e0ffff03 	ldbu	r3,-4(fp)
 40044c4:	00bff004 	movi	r2,-64
 40044c8:	1884703a 	and	r2,r3,r2
 40044cc:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 40044d0:	e0bfff03 	ldbu	r2,-4(fp)
 40044d4:	10c01020 	cmpeqi	r3,r2,64
 40044d8:	1800221e 	bne	r3,zero,4004564 <MAX_busprobe+0xc0>
 40044dc:	10c01048 	cmpgei	r3,r2,65
 40044e0:	1800021e 	bne	r3,zero,40044ec <MAX_busprobe+0x48>
 40044e4:	10003b26 	beq	r2,zero,40045d4 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 40044e8:	00004a06 	br	4004614 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 40044ec:	10c02020 	cmpeqi	r3,r2,128
 40044f0:	1800031e 	bne	r3,zero,4004500 <MAX_busprobe+0x5c>
 40044f4:	10803020 	cmpeqi	r2,r2,192
 40044f8:	1000331e 	bne	r2,zero,40045c8 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 40044fc:	00004506 	br	4004614 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 4004500:	d0a00303 	ldbu	r2,-32756(gp)
 4004504:	10803fcc 	andi	r2,r2,255
 4004508:	108004e0 	cmpeqi	r2,r2,19
 400450c:	10003e1e 	bne	r2,zero,4004608 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 4004510:	01003604 	movi	r4,216
 4004514:	40042b40 	call	40042b4 <MAXreg_rd>
 4004518:	10803fcc 	andi	r2,r2,255
 400451c:	1080008c 	andi	r2,r2,2
 4004520:	1000071e 	bne	r2,zero,4004540 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 4004524:	01403244 	movi	r5,201
 4004528:	01003604 	movi	r4,216
 400452c:	40040b00 	call	40040b0 <MAXreg_wr>
				printf("Starting in full speed\n");
 4004530:	010100b4 	movhi	r4,1026
 4004534:	212aac04 	addi	r4,r4,-21840
 4004538:	400c3140 	call	400c314 <puts>
 400453c:	00000606 	br	4004558 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 4004540:	014032c4 	movi	r5,203
 4004544:	01003604 	movi	r4,216
 4004548:	40040b00 	call	40040b0 <MAXreg_wr>
				printf("Starting in low speed\n");
 400454c:	010100b4 	movhi	r4,1026
 4004550:	212ab204 	addi	r4,r4,-21816
 4004554:	400c3140 	call	400c314 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 4004558:	00800404 	movi	r2,16
 400455c:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 4004560:	00002906 	br	4004608 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 4004564:	d0a00303 	ldbu	r2,-32756(gp)
 4004568:	10803fcc 	andi	r2,r2,255
 400456c:	108004e0 	cmpeqi	r2,r2,19
 4004570:	1000271e 	bne	r2,zero,4004610 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 4004574:	01003604 	movi	r4,216
 4004578:	40042b40 	call	40042b4 <MAXreg_rd>
 400457c:	10803fcc 	andi	r2,r2,255
 4004580:	1080008c 	andi	r2,r2,2
 4004584:	1000071e 	bne	r2,zero,40045a4 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 4004588:	014032c4 	movi	r5,203
 400458c:	01003604 	movi	r4,216
 4004590:	40040b00 	call	40040b0 <MAXreg_wr>
				printf("Starting in low speed\n");
 4004594:	010100b4 	movhi	r4,1026
 4004598:	212ab204 	addi	r4,r4,-21816
 400459c:	400c3140 	call	400c314 <puts>
 40045a0:	00000606 	br	40045bc <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 40045a4:	01403244 	movi	r5,201
 40045a8:	01003604 	movi	r4,216
 40045ac:	40040b00 	call	40040b0 <MAXreg_wr>
				printf("Starting in full speed\n");
 40045b0:	010100b4 	movhi	r4,1026
 40045b4:	212aac04 	addi	r4,r4,-21840
 40045b8:	400c3140 	call	400c314 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 40045bc:	00800404 	movi	r2,16
 40045c0:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 40045c4:	00001206 	br	4004610 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 40045c8:	00800104 	movi	r2,4
 40045cc:	d0a00305 	stb	r2,-32756(gp)
		break;
 40045d0:	00001006 	br	4004614 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 40045d4:	d0a00303 	ldbu	r2,-32756(gp)
 40045d8:	10803fcc 	andi	r2,r2,255
 40045dc:	10803c0c 	andi	r2,r2,240
 40045e0:	10000326 	beq	r2,zero,40045f0 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 40045e4:	00800044 	movi	r2,1
 40045e8:	d0a00305 	stb	r2,-32756(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 40045ec:	00000906 	br	4004614 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 40045f0:	01403244 	movi	r5,201
 40045f4:	01003604 	movi	r4,216
 40045f8:	40040b00 	call	40040b0 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 40045fc:	008000c4 	movi	r2,3
 4004600:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 4004604:	00000306 	br	4004614 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 4004608:	0001883a 	nop
 400460c:	00000106 	br	4004614 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 4004610:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4004614:	0001883a 	nop
 4004618:	e037883a 	mov	sp,fp
 400461c:	dfc00117 	ldw	ra,4(sp)
 4004620:	df000017 	ldw	fp,0(sp)
 4004624:	dec00204 	addi	sp,sp,8
 4004628:	f800283a 	ret

0400462c <MAX3421E_init>:

/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 400462c:	defffe04 	addi	sp,sp,-8
 4004630:	dfc00115 	stw	ra,4(sp)
 4004634:	df000015 	stw	fp,0(sp)
 4004638:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 400463c:	01400684 	movi	r5,26
 4004640:	01002204 	movi	r4,136
 4004644:	40040b00 	call	40040b0 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 4004648:	40043d80 	call	40043d8 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 400464c:	0009883a 	mov	r4,zero
 4004650:	40044800 	call	4004480 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 4004654:	01402004 	movi	r5,128
 4004658:	01002e04 	movi	r4,184
 400465c:	40040b00 	call	40040b0 <MAXreg_wr>
	Vbus_power( ON);
 4004660:	01000044 	movi	r4,1
 4004664:	40044800 	call	4004480 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 4004668:	01403444 	movi	r5,209
 400466c:	01003604 	movi	r4,216
 4004670:	40040b00 	call	40040b0 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 4004674:	01400804 	movi	r5,32
 4004678:	01003404 	movi	r4,208
 400467c:	40040b00 	call	40040b0 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 4004680:	01400104 	movi	r5,4
 4004684:	01003a04 	movi	r4,232
 4004688:	40040b00 	call	40040b0 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 400468c:	40044a40 	call	40044a4 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 4004690:	01400804 	movi	r5,32
 4004694:	01003204 	movi	r4,200
 4004698:	40040b00 	call	40040b0 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 400469c:	01400044 	movi	r5,1
 40046a0:	01002004 	movi	r4,128
 40046a4:	40040b00 	call	40040b0 <MAXreg_wr>
}
 40046a8:	0001883a 	nop
 40046ac:	e037883a 	mov	sp,fp
 40046b0:	dfc00117 	ldw	ra,4(sp)
 40046b4:	df000017 	ldw	fp,0(sp)
 40046b8:	dec00204 	addi	sp,sp,8
 40046bc:	f800283a 	ret

040046c0 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 40046c0:	defffe04 	addi	sp,sp,-8
 40046c4:	dfc00115 	stw	ra,4(sp)
 40046c8:	df000015 	stw	fp,0(sp)
 40046cc:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 40046d0:	00820034 	movhi	r2,2048
 40046d4:	10948004 	addi	r2,r2,20992
 40046d8:	10800037 	ldwio	r2,0(r2)
 40046dc:	1000041e 	bne	r2,zero,40046f0 <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
 40046e0:	010100b4 	movhi	r4,1026
 40046e4:	212ab804 	addi	r4,r4,-21792
 40046e8:	400c2180 	call	400c218 <printf>
		MaxIntHandler();
 40046ec:	400472c0 	call	400472c <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 40046f0:	00820034 	movhi	r2,2048
 40046f4:	10948404 	addi	r2,r2,21008
 40046f8:	10800037 	ldwio	r2,0(r2)
 40046fc:	10800058 	cmpnei	r2,r2,1
 4004700:	1000041e 	bne	r2,zero,4004714 <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
 4004704:	010100b4 	movhi	r4,1026
 4004708:	212abc04 	addi	r4,r4,-21776
 400470c:	400c2180 	call	400c218 <printf>
		MaxGpxHandler();
 4004710:	40047f80 	call	40047f8 <MaxGpxHandler>
	}
}
 4004714:	0001883a 	nop
 4004718:	e037883a 	mov	sp,fp
 400471c:	dfc00117 	ldw	ra,4(sp)
 4004720:	df000017 	ldw	fp,0(sp)
 4004724:	dec00204 	addi	sp,sp,8
 4004728:	f800283a 	ret

0400472c <MaxIntHandler>:

void MaxIntHandler(void) {
 400472c:	defffd04 	addi	sp,sp,-12
 4004730:	dfc00215 	stw	ra,8(sp)
 4004734:	df000115 	stw	fp,4(sp)
 4004738:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 400473c:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 4004740:	01003204 	movi	r4,200
 4004744:	40042b40 	call	40042b4 <MAXreg_rd>
 4004748:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 400474c:	e0bfff43 	ldbu	r2,-3(fp)
 4004750:	100b883a 	mov	r5,r2
 4004754:	010100b4 	movhi	r4,1026
 4004758:	212ac004 	addi	r4,r4,-21760
 400475c:	400c2180 	call	400c218 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 4004760:	e0bfff43 	ldbu	r2,-3(fp)
 4004764:	1080100c 	andi	r2,r2,64
 4004768:	10000326 	beq	r2,zero,4004778 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 400476c:	e0bfff03 	ldbu	r2,-4(fp)
 4004770:	10801014 	ori	r2,r2,64
 4004774:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 4004778:	e0bfff43 	ldbu	r2,-3(fp)
 400477c:	1080080c 	andi	r2,r2,32
 4004780:	10000426 	beq	r2,zero,4004794 <MaxIntHandler+0x68>
		MAX_busprobe();
 4004784:	40044a40 	call	40044a4 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 4004788:	e0bfff03 	ldbu	r2,-4(fp)
 400478c:	10800814 	ori	r2,r2,32
 4004790:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 4004794:	e0bfff43 	ldbu	r2,-3(fp)
 4004798:	1080020c 	andi	r2,r2,8
 400479c:	10000326 	beq	r2,zero,40047ac <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 40047a0:	000b883a 	mov	r5,zero
 40047a4:	01000e04 	movi	r4,56
 40047a8:	40040b00 	call	40040b0 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 40047ac:	e0bfff43 	ldbu	r2,-3(fp)
 40047b0:	1080004c 	andi	r2,r2,1
 40047b4:	10000626 	beq	r2,zero,40047d0 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 40047b8:	d0a00303 	ldbu	r2,-32756(gp)
 40047bc:	10800044 	addi	r2,r2,1
 40047c0:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 40047c4:	e0bfff03 	ldbu	r2,-4(fp)
 40047c8:	10800054 	ori	r2,r2,1
 40047cc:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 40047d0:	e0bfff03 	ldbu	r2,-4(fp)
 40047d4:	100b883a 	mov	r5,r2
 40047d8:	01003204 	movi	r4,200
 40047dc:	40040b00 	call	40040b0 <MAXreg_wr>
}
 40047e0:	0001883a 	nop
 40047e4:	e037883a 	mov	sp,fp
 40047e8:	dfc00117 	ldw	ra,4(sp)
 40047ec:	df000017 	ldw	fp,0(sp)
 40047f0:	dec00204 	addi	sp,sp,8
 40047f4:	f800283a 	ret

040047f8 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 40047f8:	defffd04 	addi	sp,sp,-12
 40047fc:	dfc00215 	stw	ra,8(sp)
 4004800:	df000115 	stw	fp,4(sp)
 4004804:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 4004808:	01002c04 	movi	r4,176
 400480c:	40042b40 	call	40042b4 <MAXreg_rd>
 4004810:	e0bfff05 	stb	r2,-4(fp)
}
 4004814:	0001883a 	nop
 4004818:	e037883a 	mov	sp,fp
 400481c:	dfc00117 	ldw	ra,4(sp)
 4004820:	df000017 	ldw	fp,0(sp)
 4004824:	dec00204 	addi	sp,sp,8
 4004828:	f800283a 	ret

0400482c <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 400482c:	defff104 	addi	sp,sp,-60
 4004830:	dfc00e15 	stw	ra,56(sp)
 4004834:	df000d15 	stw	fp,52(sp)
 4004838:	df000d04 	addi	fp,sp,52
 400483c:	2015883a 	mov	r10,r4
 4004840:	2813883a 	mov	r9,r5
 4004844:	3011883a 	mov	r8,r6
 4004848:	380d883a 	mov	r6,r7
 400484c:	e1400217 	ldw	r5,8(fp)
 4004850:	e1000317 	ldw	r4,12(fp)
 4004854:	e0c00417 	ldw	r3,16(fp)
 4004858:	e0800517 	ldw	r2,20(fp)
 400485c:	e2bff805 	stb	r10,-32(fp)
 4004860:	e27ff905 	stb	r9,-28(fp)
 4004864:	e23ffa05 	stb	r8,-24(fp)
 4004868:	e1bffb05 	stb	r6,-20(fp)
 400486c:	e17ffc05 	stb	r5,-16(fp)
 4004870:	e13ffd05 	stb	r4,-12(fp)
 4004874:	e0fffe0d 	sth	r3,-8(fp)
 4004878:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 400487c:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 4004880:	00800044 	movi	r2,1
 4004884:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 4004888:	e0800617 	ldw	r2,24(fp)
 400488c:	1000011e 	bne	r2,zero,4004894 <XferCtrlReq+0x68>
        datastage = 0;
 4004890:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 4004894:	e0bff803 	ldbu	r2,-32(fp)
 4004898:	100b883a 	mov	r5,r2
 400489c:	01003804 	movi	r4,224
 40048a0:	40040b00 	call	40040b0 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 40048a4:	e0bffa03 	ldbu	r2,-24(fp)
 40048a8:	10803fcc 	andi	r2,r2,255
 40048ac:	1080201c 	xori	r2,r2,128
 40048b0:	10bfe004 	addi	r2,r2,-128
 40048b4:	1000020e 	bge	r2,zero,40048c0 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 40048b8:	00800044 	movi	r2,1
 40048bc:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 40048c0:	e0bffa03 	ldbu	r2,-24(fp)
 40048c4:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 40048c8:	e0bffb03 	ldbu	r2,-20(fp)
 40048cc:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 40048d0:	e0bffc03 	ldbu	r2,-16(fp)
 40048d4:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 40048d8:	e0bffd03 	ldbu	r2,-12(fp)
 40048dc:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 40048e0:	e0bffe0b 	ldhu	r2,-8(fp)
 40048e4:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 40048e8:	e0bfff0b 	ldhu	r2,-4(fp)
 40048ec:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 40048f0:	e0bff584 	addi	r2,fp,-42
 40048f4:	100d883a 	mov	r6,r2
 40048f8:	01400204 	movi	r5,8
 40048fc:	01000804 	movi	r4,32
 4004900:	40041440 	call	4004144 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 4004904:	e0bff903 	ldbu	r2,-28(fp)
 4004908:	100b883a 	mov	r5,r2
 400490c:	01000404 	movi	r4,16
 4004910:	4004ad40 	call	4004ad4 <XferDispatchPkt>
 4004914:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 4004918:	e0bff543 	ldbu	r2,-43(fp)
 400491c:	10000226 	beq	r2,zero,4004928 <XferCtrlReq+0xfc>
        return( rcode );
 4004920:	e0bff543 	ldbu	r2,-43(fp)
 4004924:	00000f06 	br	4004964 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 4004928:	e0bff503 	ldbu	r2,-44(fp)
 400492c:	1085883a 	add	r2,r2,r2
 4004930:	1087883a 	add	r3,r2,r2
 4004934:	d0a00104 	addi	r2,gp,-32764
 4004938:	1885883a 	add	r2,r3,r2
 400493c:	10800017 	ldw	r2,0(r2)
 4004940:	e13ff803 	ldbu	r4,-32(fp)
 4004944:	e17ff903 	ldbu	r5,-28(fp)
 4004948:	e1bfff0b 	ldhu	r6,-4(fp)
 400494c:	e0fff417 	ldw	r3,-48(fp)
 4004950:	d8c00015 	stw	r3,0(sp)
 4004954:	e1c00617 	ldw	r7,24(fp)
 4004958:	103ee83a 	callr	r2
 400495c:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 4004960:	e0bff543 	ldbu	r2,-43(fp)
}
 4004964:	e037883a 	mov	sp,fp
 4004968:	dfc00117 	ldw	ra,4(sp)
 400496c:	df000017 	ldw	fp,0(sp)
 4004970:	dec00204 	addi	sp,sp,8
 4004974:	f800283a 	ret

04004978 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 4004978:	defff804 	addi	sp,sp,-32
 400497c:	dfc00715 	stw	ra,28(sp)
 4004980:	df000615 	stw	fp,24(sp)
 4004984:	df000604 	addi	fp,sp,24
 4004988:	2807883a 	mov	r3,r5
 400498c:	3005883a 	mov	r2,r6
 4004990:	e1ffff15 	stw	r7,-4(fp)
 4004994:	e13ffc05 	stb	r4,-16(fp)
 4004998:	e0fffd05 	stb	r3,-12(fp)
 400499c:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 40049a0:	e0800217 	ldw	r2,8(fp)
 40049a4:	10002826 	beq	r2,zero,4004a48 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 40049a8:	e0fffc03 	ldbu	r3,-16(fp)
 40049ac:	008100b4 	movhi	r2,1026
 40049b0:	10ba3204 	addi	r2,r2,-5944
 40049b4:	180690fa 	slli	r3,r3,3
 40049b8:	10c5883a 	add	r2,r2,r3
 40049bc:	10c00017 	ldw	r3,0(r2)
 40049c0:	e0bffd03 	ldbu	r2,-12(fp)
 40049c4:	100490fa 	slli	r2,r2,3
 40049c8:	1885883a 	add	r2,r3,r2
 40049cc:	00c00804 	movi	r3,32
 40049d0:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 40049d4:	e13ffc03 	ldbu	r4,-16(fp)
 40049d8:	e17ffd03 	ldbu	r5,-12(fp)
 40049dc:	e1bffe0b 	ldhu	r6,-8(fp)
 40049e0:	e0fffc03 	ldbu	r3,-16(fp)
 40049e4:	008100b4 	movhi	r2,1026
 40049e8:	10ba3204 	addi	r2,r2,-5944
 40049ec:	180690fa 	slli	r3,r3,3
 40049f0:	10c5883a 	add	r2,r2,r3
 40049f4:	10c00017 	ldw	r3,0(r2)
 40049f8:	e0bffd03 	ldbu	r2,-12(fp)
 40049fc:	100490fa 	slli	r2,r2,3
 4004a00:	1885883a 	add	r2,r3,r2
 4004a04:	1080008b 	ldhu	r2,2(r2)
 4004a08:	10803fcc 	andi	r2,r2,255
 4004a0c:	d8800015 	stw	r2,0(sp)
 4004a10:	e1ffff17 	ldw	r7,-4(fp)
 4004a14:	4004c500 	call	4004c50 <XferInTransfer>
 4004a18:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 4004a1c:	e0bffb03 	ldbu	r2,-20(fp)
 4004a20:	10000226 	beq	r2,zero,4004a2c <XferCtrlData+0xb4>
        return( rcode );
 4004a24:	e0bffb03 	ldbu	r2,-20(fp)
 4004a28:	00000806 	br	4004a4c <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 4004a2c:	e0bffd03 	ldbu	r2,-12(fp)
 4004a30:	100b883a 	mov	r5,r2
 4004a34:	01002804 	movi	r4,160
 4004a38:	4004ad40 	call	4004ad4 <XferDispatchPkt>
 4004a3c:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 4004a40:	e0bffb03 	ldbu	r2,-20(fp)
 4004a44:	00000106 	br	4004a4c <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 4004a48:	00bfffc4 	movi	r2,-1
    }
}
 4004a4c:	e037883a 	mov	sp,fp
 4004a50:	dfc00117 	ldw	ra,4(sp)
 4004a54:	df000017 	ldw	fp,0(sp)
 4004a58:	dec00204 	addi	sp,sp,8
 4004a5c:	f800283a 	ret

04004a60 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 4004a60:	defff904 	addi	sp,sp,-28
 4004a64:	dfc00615 	stw	ra,24(sp)
 4004a68:	df000515 	stw	fp,20(sp)
 4004a6c:	df000504 	addi	fp,sp,20
 4004a70:	2807883a 	mov	r3,r5
 4004a74:	3005883a 	mov	r2,r6
 4004a78:	e1ffff15 	stw	r7,-4(fp)
 4004a7c:	e13ffc05 	stb	r4,-16(fp)
 4004a80:	e0fffd05 	stb	r3,-12(fp)
 4004a84:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 4004a88:	e0800217 	ldw	r2,8(fp)
 4004a8c:	10000626 	beq	r2,zero,4004aa8 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 4004a90:	e0bffd03 	ldbu	r2,-12(fp)
 4004a94:	100b883a 	mov	r5,r2
 4004a98:	01002804 	movi	r4,160
 4004a9c:	4004ad40 	call	4004ad4 <XferDispatchPkt>
 4004aa0:	e0bffb05 	stb	r2,-20(fp)
 4004aa4:	00000506 	br	4004abc <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 4004aa8:	e0bffd03 	ldbu	r2,-12(fp)
 4004aac:	100b883a 	mov	r5,r2
 4004ab0:	01002004 	movi	r4,128
 4004ab4:	4004ad40 	call	4004ad4 <XferDispatchPkt>
 4004ab8:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 4004abc:	e0bffb03 	ldbu	r2,-20(fp)
}
 4004ac0:	e037883a 	mov	sp,fp
 4004ac4:	dfc00117 	ldw	ra,4(sp)
 4004ac8:	df000017 	ldw	fp,0(sp)
 4004acc:	dec00204 	addi	sp,sp,8
 4004ad0:	f800283a 	ret

04004ad4 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 4004ad4:	defff904 	addi	sp,sp,-28
 4004ad8:	dfc00615 	stw	ra,24(sp)
 4004adc:	df000515 	stw	fp,20(sp)
 4004ae0:	df000504 	addi	fp,sp,20
 4004ae4:	2007883a 	mov	r3,r4
 4004ae8:	2805883a 	mov	r2,r5
 4004aec:	e0fffe05 	stb	r3,-8(fp)
 4004af0:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4004af4:	d0a70417 	ldw	r2,-25584(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 4004af8:	0140fa04 	movi	r5,1000
 4004afc:	1009883a 	mov	r4,r2
 4004b00:	4007eb40 	call	4007eb4 <__mulsi3>
 4004b04:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004b08:	d0a70317 	ldw	r2,-25588(gp)
 4004b0c:	100b883a 	mov	r5,r2
 4004b10:	1809883a 	mov	r4,r3
 4004b14:	4007df80 	call	4007df8 <__udivsi3>
 4004b18:	1084e204 	addi	r2,r2,5000
 4004b1c:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 4004b20:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 4004b24:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 4004b28:	e0fffe03 	ldbu	r3,-8(fp)
 4004b2c:	e0bfff03 	ldbu	r2,-4(fp)
 4004b30:	1884b03a 	or	r2,r3,r2
 4004b34:	10803fcc 	andi	r2,r2,255
 4004b38:	100b883a 	mov	r5,r2
 4004b3c:	01003c04 	movi	r4,240
 4004b40:	40040b00 	call	40040b0 <MAXreg_wr>
        rcode = 0xff;
 4004b44:	00bfffc4 	movi	r2,-1
 4004b48:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 4004b4c:	00000d06 	br	4004b84 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 4004b50:	01003204 	movi	r4,200
 4004b54:	40042b40 	call	40042b4 <MAXreg_rd>
 4004b58:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 4004b5c:	e0bffd03 	ldbu	r2,-12(fp)
 4004b60:	10803fcc 	andi	r2,r2,255
 4004b64:	1080201c 	xori	r2,r2,128
 4004b68:	10bfe004 	addi	r2,r2,-128
 4004b6c:	1000050e 	bge	r2,zero,4004b84 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 4004b70:	01402004 	movi	r5,128
 4004b74:	01003204 	movi	r4,200
 4004b78:	40040b00 	call	40040b0 <MAXreg_wr>
                rcode = 0x00;
 4004b7c:	e03ffb05 	stb	zero,-20(fp)
                break;
 4004b80:	00000c06 	br	4004bb4 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4004b84:	d0a70417 	ldw	r2,-25584(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 4004b88:	0140fa04 	movi	r5,1000
 4004b8c:	1009883a 	mov	r4,r2
 4004b90:	4007eb40 	call	4007eb4 <__mulsi3>
 4004b94:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004b98:	d0a70317 	ldw	r2,-25588(gp)
 4004b9c:	100b883a 	mov	r5,r2
 4004ba0:	1809883a 	mov	r4,r3
 4004ba4:	4007df80 	call	4007df8 <__udivsi3>
 4004ba8:	1007883a 	mov	r3,r2
 4004bac:	e0bffc17 	ldw	r2,-16(fp)
 4004bb0:	18bfe736 	bltu	r3,r2,4004b50 <__alt_data_end+0xfc004b50>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 4004bb4:	e0bffb03 	ldbu	r2,-20(fp)
 4004bb8:	10000226 	beq	r2,zero,4004bc4 <XferDispatchPkt+0xf0>
            return( rcode );
 4004bbc:	e0bffb03 	ldbu	r2,-20(fp)
 4004bc0:	00001e06 	br	4004c3c <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 4004bc4:	01003e04 	movi	r4,248
 4004bc8:	40042b40 	call	40042b4 <MAXreg_rd>
 4004bcc:	108003cc 	andi	r2,r2,15
 4004bd0:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 4004bd4:	e0bffb03 	ldbu	r2,-20(fp)
 4004bd8:	10800118 	cmpnei	r2,r2,4
 4004bdc:	1000071e 	bne	r2,zero,4004bfc <XferDispatchPkt+0x128>
            nak_count++;
 4004be0:	e0bffb83 	ldbu	r2,-18(fp)
 4004be4:	10800044 	addi	r2,r2,1
 4004be8:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 4004bec:	e0bffb83 	ldbu	r2,-18(fp)
 4004bf0:	10803218 	cmpnei	r2,r2,200
 4004bf4:	10000b1e 	bne	r2,zero,4004c24 <XferDispatchPkt+0x150>
                break;
 4004bf8:	00000f06 	br	4004c38 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 4004bfc:	e0bffb03 	ldbu	r2,-20(fp)
 4004c00:	10800398 	cmpnei	r2,r2,14
 4004c04:	1000091e 	bne	r2,zero,4004c2c <XferDispatchPkt+0x158>
            retry_count++;
 4004c08:	e0bffb43 	ldbu	r2,-19(fp)
 4004c0c:	10800044 	addi	r2,r2,1
 4004c10:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 4004c14:	e0bffb47 	ldb	r2,-19(fp)
 4004c18:	108000d8 	cmpnei	r2,r2,3
 4004c1c:	10000526 	beq	r2,zero,4004c34 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 4004c20:	00000106 	br	4004c28 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 4004c24:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 4004c28:	003fbf06 	br	4004b28 <__alt_data_end+0xfc004b28>
            }
            else {
                continue;
            }
        }
        else break;
 4004c2c:	0001883a 	nop
 4004c30:	00000106 	br	4004c38 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 4004c34:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 4004c38:	e0bffb03 	ldbu	r2,-20(fp)
}
 4004c3c:	e037883a 	mov	sp,fp
 4004c40:	dfc00117 	ldw	ra,4(sp)
 4004c44:	df000017 	ldw	fp,0(sp)
 4004c48:	dec00204 	addi	sp,sp,8
 4004c4c:	f800283a 	ret

04004c50 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 4004c50:	defff804 	addi	sp,sp,-32
 4004c54:	dfc00715 	stw	ra,28(sp)
 4004c58:	df000615 	stw	fp,24(sp)
 4004c5c:	df000604 	addi	fp,sp,24
 4004c60:	2011883a 	mov	r8,r4
 4004c64:	2809883a 	mov	r4,r5
 4004c68:	3007883a 	mov	r3,r6
 4004c6c:	e1fffe15 	stw	r7,-8(fp)
 4004c70:	e0800217 	ldw	r2,8(fp)
 4004c74:	e23ffb05 	stb	r8,-20(fp)
 4004c78:	e13ffc05 	stb	r4,-16(fp)
 4004c7c:	e0fffd0d 	sth	r3,-12(fp)
 4004c80:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 4004c84:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 4004c88:	e0fffb03 	ldbu	r3,-20(fp)
 4004c8c:	008100b4 	movhi	r2,1026
 4004c90:	10ba3204 	addi	r2,r2,-5944
 4004c94:	180690fa 	slli	r3,r3,3
 4004c98:	10c5883a 	add	r2,r2,r3
 4004c9c:	10c00017 	ldw	r3,0(r2)
 4004ca0:	e0bffc03 	ldbu	r2,-16(fp)
 4004ca4:	100490fa 	slli	r2,r2,3
 4004ca8:	1885883a 	add	r2,r3,r2
 4004cac:	10800183 	ldbu	r2,6(r2)
 4004cb0:	10803fcc 	andi	r2,r2,255
 4004cb4:	100b883a 	mov	r5,r2
 4004cb8:	01003a04 	movi	r4,232
 4004cbc:	40040b00 	call	40040b0 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 4004cc0:	e0bffc03 	ldbu	r2,-16(fp)
 4004cc4:	100b883a 	mov	r5,r2
 4004cc8:	0009883a 	mov	r4,zero
 4004ccc:	4004ad40 	call	4004ad4 <XferDispatchPkt>
 4004cd0:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 4004cd4:	e0bffa83 	ldbu	r2,-22(fp)
 4004cd8:	10000226 	beq	r2,zero,4004ce4 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 4004cdc:	e0bffa83 	ldbu	r2,-22(fp)
 4004ce0:	00003a06 	br	4004dcc <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 4004ce4:	01003204 	movi	r4,200
 4004ce8:	40042b40 	call	40042b4 <MAXreg_rd>
 4004cec:	10803fcc 	andi	r2,r2,255
 4004cf0:	1080010c 	andi	r2,r2,4
 4004cf4:	1000021e 	bne	r2,zero,4004d00 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 4004cf8:	00bffc04 	movi	r2,-16
 4004cfc:	00003306 	br	4004dcc <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 4004d00:	01000c04 	movi	r4,48
 4004d04:	40042b40 	call	40042b4 <MAXreg_rd>
 4004d08:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 4004d0c:	e0bffac3 	ldbu	r2,-21(fp)
 4004d10:	e1bffe17 	ldw	r6,-8(fp)
 4004d14:	100b883a 	mov	r5,r2
 4004d18:	01000204 	movi	r4,8
 4004d1c:	40043380 	call	4004338 <MAXbytes_rd>
 4004d20:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 4004d24:	01400104 	movi	r5,4
 4004d28:	01003204 	movi	r4,200
 4004d2c:	40040b00 	call	40040b0 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 4004d30:	e0fffac3 	ldbu	r3,-21(fp)
 4004d34:	e0bffa0b 	ldhu	r2,-24(fp)
 4004d38:	1885883a 	add	r2,r3,r2
 4004d3c:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 4004d40:	e0fffac3 	ldbu	r3,-21(fp)
 4004d44:	e0bfff03 	ldbu	r2,-4(fp)
 4004d48:	18800336 	bltu	r3,r2,4004d58 <XferInTransfer+0x108>
 4004d4c:	e0fffa0b 	ldhu	r3,-24(fp)
 4004d50:	e0bffd0b 	ldhu	r2,-12(fp)
 4004d54:	18bfda36 	bltu	r3,r2,4004cc0 <__alt_data_end+0xfc004cc0>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 4004d58:	01003e04 	movi	r4,248
 4004d5c:	40042b40 	call	40042b4 <MAXreg_rd>
 4004d60:	10803fcc 	andi	r2,r2,255
 4004d64:	1080040c 	andi	r2,r2,16
 4004d68:	10000c26 	beq	r2,zero,4004d9c <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 4004d6c:	e0fffb03 	ldbu	r3,-20(fp)
 4004d70:	008100b4 	movhi	r2,1026
 4004d74:	10ba3204 	addi	r2,r2,-5944
 4004d78:	180690fa 	slli	r3,r3,3
 4004d7c:	10c5883a 	add	r2,r2,r3
 4004d80:	10c00017 	ldw	r3,0(r2)
 4004d84:	e0bffc03 	ldbu	r2,-16(fp)
 4004d88:	100490fa 	slli	r2,r2,3
 4004d8c:	1885883a 	add	r2,r3,r2
 4004d90:	00c00804 	movi	r3,32
 4004d94:	10c00185 	stb	r3,6(r2)
 4004d98:	00000b06 	br	4004dc8 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 4004d9c:	e0fffb03 	ldbu	r3,-20(fp)
 4004da0:	008100b4 	movhi	r2,1026
 4004da4:	10ba3204 	addi	r2,r2,-5944
 4004da8:	180690fa 	slli	r3,r3,3
 4004dac:	10c5883a 	add	r2,r2,r3
 4004db0:	10c00017 	ldw	r3,0(r2)
 4004db4:	e0bffc03 	ldbu	r2,-16(fp)
 4004db8:	100490fa 	slli	r2,r2,3
 4004dbc:	1885883a 	add	r2,r3,r2
 4004dc0:	00c00404 	movi	r3,16
 4004dc4:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 4004dc8:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 4004dcc:	e037883a 	mov	sp,fp
 4004dd0:	dfc00117 	ldw	ra,4(sp)
 4004dd4:	df000017 	ldw	fp,0(sp)
 4004dd8:	dec00204 	addi	sp,sp,8
 4004ddc:	f800283a 	ret

04004de0 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 4004de0:	defffe04 	addi	sp,sp,-8
 4004de4:	df000115 	stw	fp,4(sp)
 4004de8:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 4004dec:	e03fff05 	stb	zero,-4(fp)
 4004df0:	00001006 	br	4004e34 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 4004df4:	e0ffff03 	ldbu	r3,-4(fp)
 4004df8:	008100b4 	movhi	r2,1026
 4004dfc:	10ba3204 	addi	r2,r2,-5944
 4004e00:	180690fa 	slli	r3,r3,3
 4004e04:	10c5883a 	add	r2,r2,r3
 4004e08:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 4004e0c:	e0ffff03 	ldbu	r3,-4(fp)
 4004e10:	008100b4 	movhi	r2,1026
 4004e14:	10ba3204 	addi	r2,r2,-5944
 4004e18:	180690fa 	slli	r3,r3,3
 4004e1c:	10c5883a 	add	r2,r2,r3
 4004e20:	10800104 	addi	r2,r2,4
 4004e24:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 4004e28:	e0bfff03 	ldbu	r2,-4(fp)
 4004e2c:	10800044 	addi	r2,r2,1
 4004e30:	e0bfff05 	stb	r2,-4(fp)
 4004e34:	e0bfff03 	ldbu	r2,-4(fp)
 4004e38:	10800270 	cmpltui	r2,r2,9
 4004e3c:	103fed1e 	bne	r2,zero,4004df4 <__alt_data_end+0xfc004df4>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 4004e40:	008100b4 	movhi	r2,1026
 4004e44:	10ba3204 	addi	r2,r2,-5944
 4004e48:	d0e6f404 	addi	r3,gp,-25648
 4004e4c:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 4004e50:	d026f48d 	sth	zero,-25646(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 4004e54:	00801004 	movi	r2,64
 4004e58:	d0a6f545 	stb	r2,-25643(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 4004e5c:	00800404 	movi	r2,16
 4004e60:	d0a6f585 	stb	r2,-25642(gp)
}
 4004e64:	0001883a 	nop
 4004e68:	e037883a 	mov	sp,fp
 4004e6c:	df000017 	ldw	fp,0(sp)
 4004e70:	dec00104 	addi	sp,sp,4
 4004e74:	f800283a 	ret

04004e78 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 4004e78:	deffb204 	addi	sp,sp,-312
 4004e7c:	dfc04d15 	stw	ra,308(sp)
 4004e80:	df004c15 	stw	fp,304(sp)
 4004e84:	dc004b15 	stw	r16,300(sp)
 4004e88:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 4004e8c:	d0a00303 	ldbu	r2,-32756(gp)
 4004e90:	10803fcc 	andi	r2,r2,255
 4004e94:	10803c0c 	andi	r2,r2,240
 4004e98:	10c00820 	cmpeqi	r3,r2,32
 4004e9c:	1801121e 	bne	r3,zero,40052e8 <USB_Task+0x470>
 4004ea0:	10c00848 	cmpgei	r3,r2,33
 4004ea4:	1800041e 	bne	r3,zero,4004eb8 <USB_Task+0x40>
 4004ea8:	10000a26 	beq	r2,zero,4004ed4 <USB_Task+0x5c>
 4004eac:	10800420 	cmpeqi	r2,r2,16
 4004eb0:	10001b1e 	bne	r2,zero,4004f20 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 4004eb4:	00017a06 	br	40054a0 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 4004eb8:	10c01020 	cmpeqi	r3,r2,64
 4004ebc:	18016f1e 	bne	r3,zero,400547c <USB_Task+0x604>
 4004ec0:	10c03fe0 	cmpeqi	r3,r2,255
 4004ec4:	18016f1e 	bne	r3,zero,4005484 <USB_Task+0x60c>
 4004ec8:	10800c20 	cmpeqi	r2,r2,48
 4004ecc:	1001441e 	bne	r2,zero,40053e0 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 4004ed0:	00017306 	br	40054a0 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 4004ed4:	d0a00303 	ldbu	r2,-32756(gp)
 4004ed8:	10803fcc 	andi	r2,r2,255
 4004edc:	10c000e0 	cmpeqi	r3,r2,3
 4004ee0:	1800091e 	bne	r3,zero,4004f08 <USB_Task+0x90>
 4004ee4:	10c00120 	cmpeqi	r3,r2,4
 4004ee8:	18000b1e 	bne	r3,zero,4004f18 <USB_Task+0xa0>
 4004eec:	10800060 	cmpeqi	r2,r2,1
 4004ef0:	1000011e 	bne	r2,zero,4004ef8 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 4004ef4:	00016a06 	br	40054a0 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 4004ef8:	4004de00 	call	4004de0 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 4004efc:	008000c4 	movi	r2,3
 4004f00:	d0a00305 	stb	r2,-32756(gp)
                    break;
 4004f04:	00000506 	br	4004f1c <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 4004f08:	01400104 	movi	r5,4
 4004f0c:	01003a04 	movi	r4,232
 4004f10:	40040b00 	call	40040b0 <MAXreg_wr>
                    break;
 4004f14:	00000106 	br	4004f1c <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 4004f18:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 4004f1c:	00016006 	br	40054a0 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 4004f20:	d0a00303 	ldbu	r2,-32756(gp)
 4004f24:	10803fcc 	andi	r2,r2,255
 4004f28:	10bffc04 	addi	r2,r2,-16
 4004f2c:	10c001a8 	cmpgeui	r3,r2,6
 4004f30:	1801561e 	bne	r3,zero,400548c <USB_Task+0x614>
 4004f34:	100690ba 	slli	r3,r2,2
 4004f38:	00810034 	movhi	r2,1024
 4004f3c:	1093d304 	addi	r2,r2,20300
 4004f40:	1885883a 	add	r2,r3,r2
 4004f44:	10800017 	ldw	r2,0(r2)
 4004f48:	1000683a 	jmp	r2
 4004f4c:	04004f64 	muli	r16,zero,317
 4004f50:	04004f9c 	xori	r16,zero,318
 4004f54:	04004fd8 	cmpnei	r16,zero,319
 4004f58:	04004ffc 	xorhi	r16,zero,319
 4004f5c:	0400503c 	xorhi	r16,zero,320
 4004f60:	04005050 	cmplti	r16,zero,321
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4004f64:	d0a70417 	ldw	r2,-25584(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 4004f68:	0140fa04 	movi	r5,1000
 4004f6c:	1009883a 	mov	r4,r2
 4004f70:	4007eb40 	call	4007eb4 <__mulsi3>
 4004f74:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004f78:	d0a70317 	ldw	r2,-25588(gp)
 4004f7c:	100b883a 	mov	r5,r2
 4004f80:	1809883a 	mov	r4,r3
 4004f84:	4007df80 	call	4007df8 <__udivsi3>
 4004f88:	10803204 	addi	r2,r2,200
 4004f8c:	d0a6f715 	stw	r2,-25636(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 4004f90:	00800444 	movi	r2,17
 4004f94:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
 4004f98:	0000d206 	br	40052e4 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4004f9c:	d0a70417 	ldw	r2,-25584(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 4004fa0:	0140fa04 	movi	r5,1000
 4004fa4:	1009883a 	mov	r4,r2
 4004fa8:	4007eb40 	call	4007eb4 <__mulsi3>
 4004fac:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004fb0:	d0a70317 	ldw	r2,-25588(gp)
 4004fb4:	100b883a 	mov	r5,r2
 4004fb8:	1809883a 	mov	r4,r3
 4004fbc:	4007df80 	call	4007df8 <__udivsi3>
 4004fc0:	1007883a 	mov	r3,r2
 4004fc4:	d0a6f717 	ldw	r2,-25636(gp)
 4004fc8:	10c0c32e 	bgeu	r2,r3,40052d8 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 4004fcc:	00800484 	movi	r2,18
 4004fd0:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 4004fd4:	0000c006 	br	40052d8 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 4004fd8:	01400044 	movi	r5,1
 4004fdc:	01003204 	movi	r4,200
 4004fe0:	40040b00 	call	40040b0 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 4004fe4:	01400044 	movi	r5,1
 4004fe8:	01003a04 	movi	r4,232
 4004fec:	40040b00 	call	40040b0 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 4004ff0:	008004c4 	movi	r2,19
 4004ff4:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 4004ff8:	0000ba06 	br	40052e4 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 4004ffc:	01003a04 	movi	r4,232
 4005000:	40042b40 	call	40042b4 <MAXreg_rd>
 4005004:	10803fcc 	andi	r2,r2,255
 4005008:	1080004c 	andi	r2,r2,1
 400500c:	1000b41e 	bne	r2,zero,40052e0 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 4005010:	01003604 	movi	r4,216
 4005014:	40042b40 	call	40042b4 <MAXreg_rd>
 4005018:	10800214 	ori	r2,r2,8
 400501c:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 4005020:	e0bfb943 	ldbu	r2,-283(fp)
 4005024:	100b883a 	mov	r5,r2
 4005028:	01003604 	movi	r4,216
 400502c:	40040b00 	call	40040b0 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 4005030:	00800504 	movi	r2,20
 4005034:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 4005038:	0000a906 	br	40052e0 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 400503c:	01003204 	movi	r4,200
 4005040:	40042b40 	call	40042b4 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 4005044:	00800544 	movi	r2,21
 4005048:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 400504c:	0000a506 	br	40052e4 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 4005050:	008100b4 	movhi	r2,1026
 4005054:	10ba3204 	addi	r2,r2,-5944
 4005058:	10800017 	ldw	r2,0(r2)
 400505c:	00c00204 	movi	r3,8
 4005060:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 4005064:	e0bfba04 	addi	r2,fp,-280
 4005068:	d8800415 	stw	r2,16(sp)
 400506c:	00800204 	movi	r2,8
 4005070:	d8800315 	stw	r2,12(sp)
 4005074:	d8000215 	stw	zero,8(sp)
 4005078:	00800044 	movi	r2,1
 400507c:	d8800115 	stw	r2,4(sp)
 4005080:	d8000015 	stw	zero,0(sp)
 4005084:	01c00184 	movi	r7,6
 4005088:	01802004 	movi	r6,128
 400508c:	000b883a 	mov	r5,zero
 4005090:	0009883a 	mov	r4,zero
 4005094:	400482c0 	call	400482c <XferCtrlReq>
 4005098:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 400509c:	e0bfb983 	ldbu	r2,-282(fp)
 40050a0:	1000861e 	bne	r2,zero,40052bc <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 40050a4:	008100b4 	movhi	r2,1026
 40050a8:	10ba3204 	addi	r2,r2,-5944
 40050ac:	10800017 	ldw	r2,0(r2)
 40050b0:	e0ffbbc3 	ldbu	r3,-273(fp)
 40050b4:	18c03fcc 	andi	r3,r3,255
 40050b8:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 40050bc:	e0bfba03 	ldbu	r2,-280(fp)
 40050c0:	10803fcc 	andi	r2,r2,255
 40050c4:	e0ffba04 	addi	r3,fp,-280
 40050c8:	d8c00415 	stw	r3,16(sp)
 40050cc:	d8800315 	stw	r2,12(sp)
 40050d0:	d8000215 	stw	zero,8(sp)
 40050d4:	00800044 	movi	r2,1
 40050d8:	d8800115 	stw	r2,4(sp)
 40050dc:	d8000015 	stw	zero,0(sp)
 40050e0:	01c00184 	movi	r7,6
 40050e4:	01802004 	movi	r6,128
 40050e8:	000b883a 	mov	r5,zero
 40050ec:	0009883a 	mov	r4,zero
 40050f0:	400482c0 	call	400482c <XferCtrlReq>
 40050f4:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 40050f8:	e0bfbd83 	ldbu	r2,-266(fp)
 40050fc:	10803fcc 	andi	r2,r2,255
 4005100:	10003426 	beq	r2,zero,40051d4 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 4005104:	e0bfbd83 	ldbu	r2,-266(fp)
 4005108:	10803fcc 	andi	r2,r2,255
 400510c:	e0ffbe84 	addi	r3,fp,-262
 4005110:	d8c00415 	stw	r3,16(sp)
 4005114:	00c00084 	movi	r3,2
 4005118:	d8c00315 	stw	r3,12(sp)
 400511c:	00c10244 	movi	r3,1033
 4005120:	d8c00215 	stw	r3,8(sp)
 4005124:	00c000c4 	movi	r3,3
 4005128:	d8c00115 	stw	r3,4(sp)
 400512c:	d8800015 	stw	r2,0(sp)
 4005130:	01c00184 	movi	r7,6
 4005134:	01802004 	movi	r6,128
 4005138:	000b883a 	mov	r5,zero
 400513c:	0009883a 	mov	r4,zero
 4005140:	400482c0 	call	400482c <XferCtrlReq>
 4005144:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 4005148:	e0bfbd83 	ldbu	r2,-266(fp)
 400514c:	10803fcc 	andi	r2,r2,255
 4005150:	e0ffbe83 	ldbu	r3,-262(fp)
 4005154:	18c03fcc 	andi	r3,r3,255
 4005158:	e13fbe84 	addi	r4,fp,-262
 400515c:	d9000415 	stw	r4,16(sp)
 4005160:	d8c00315 	stw	r3,12(sp)
 4005164:	00c10244 	movi	r3,1033
 4005168:	d8c00215 	stw	r3,8(sp)
 400516c:	00c000c4 	movi	r3,3
 4005170:	d8c00115 	stw	r3,4(sp)
 4005174:	d8800015 	stw	r2,0(sp)
 4005178:	01c00184 	movi	r7,6
 400517c:	01802004 	movi	r6,128
 4005180:	000b883a 	mov	r5,zero
 4005184:	0009883a 	mov	r4,zero
 4005188:	400482c0 	call	400482c <XferCtrlReq>
 400518c:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 4005190:	e0bfbd83 	ldbu	r2,-266(fp)
 4005194:	14003fcc 	andi	r16,r2,255
 4005198:	e0bfbe83 	ldbu	r2,-262(fp)
 400519c:	10803fcc 	andi	r2,r2,255
 40051a0:	1004d07a 	srli	r2,r2,1
 40051a4:	10bfffc4 	addi	r2,r2,-1
 40051a8:	10c03fcc 	andi	r3,r2,255
 40051ac:	e0bfbe84 	addi	r2,fp,-262
 40051b0:	10800084 	addi	r2,r2,2
 40051b4:	180b883a 	mov	r5,r3
 40051b8:	1009883a 	mov	r4,r2
 40051bc:	40056400 	call	4005640 <ConvUTF8ToStr>
 40051c0:	100d883a 	mov	r6,r2
 40051c4:	800b883a 	mov	r5,r16
 40051c8:	010100b4 	movhi	r4,1026
 40051cc:	212ac304 	addi	r4,r4,-21748
 40051d0:	400c2180 	call	400c218 <printf>
                		}
                		if (buf.iProduct != 0)
 40051d4:	e0bfbdc3 	ldbu	r2,-265(fp)
 40051d8:	10803fcc 	andi	r2,r2,255
 40051dc:	10003426 	beq	r2,zero,40052b0 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 40051e0:	e0bfbdc3 	ldbu	r2,-265(fp)
 40051e4:	10803fcc 	andi	r2,r2,255
 40051e8:	e0ffbe84 	addi	r3,fp,-262
 40051ec:	d8c00415 	stw	r3,16(sp)
 40051f0:	00c00084 	movi	r3,2
 40051f4:	d8c00315 	stw	r3,12(sp)
 40051f8:	00c10244 	movi	r3,1033
 40051fc:	d8c00215 	stw	r3,8(sp)
 4005200:	00c000c4 	movi	r3,3
 4005204:	d8c00115 	stw	r3,4(sp)
 4005208:	d8800015 	stw	r2,0(sp)
 400520c:	01c00184 	movi	r7,6
 4005210:	01802004 	movi	r6,128
 4005214:	000b883a 	mov	r5,zero
 4005218:	0009883a 	mov	r4,zero
 400521c:	400482c0 	call	400482c <XferCtrlReq>
 4005220:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 4005224:	e0bfbdc3 	ldbu	r2,-265(fp)
 4005228:	10803fcc 	andi	r2,r2,255
 400522c:	e0ffbe83 	ldbu	r3,-262(fp)
 4005230:	18c03fcc 	andi	r3,r3,255
 4005234:	e13fbe84 	addi	r4,fp,-262
 4005238:	d9000415 	stw	r4,16(sp)
 400523c:	d8c00315 	stw	r3,12(sp)
 4005240:	00c10244 	movi	r3,1033
 4005244:	d8c00215 	stw	r3,8(sp)
 4005248:	00c000c4 	movi	r3,3
 400524c:	d8c00115 	stw	r3,4(sp)
 4005250:	d8800015 	stw	r2,0(sp)
 4005254:	01c00184 	movi	r7,6
 4005258:	01802004 	movi	r6,128
 400525c:	000b883a 	mov	r5,zero
 4005260:	0009883a 	mov	r4,zero
 4005264:	400482c0 	call	400482c <XferCtrlReq>
 4005268:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 400526c:	e0bfbdc3 	ldbu	r2,-265(fp)
 4005270:	14003fcc 	andi	r16,r2,255
 4005274:	e0bfbe83 	ldbu	r2,-262(fp)
 4005278:	10803fcc 	andi	r2,r2,255
 400527c:	1004d07a 	srli	r2,r2,1
 4005280:	10bfffc4 	addi	r2,r2,-1
 4005284:	10c03fcc 	andi	r3,r2,255
 4005288:	e0bfbe84 	addi	r2,fp,-262
 400528c:	10800084 	addi	r2,r2,2
 4005290:	180b883a 	mov	r5,r3
 4005294:	1009883a 	mov	r4,r2
 4005298:	40056400 	call	4005640 <ConvUTF8ToStr>
 400529c:	100d883a 	mov	r6,r2
 40052a0:	800b883a 	mov	r5,r16
 40052a4:	010100b4 	movhi	r4,1026
 40052a8:	212ac904 	addi	r4,r4,-21724
 40052ac:	400c2180 	call	400c218 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 40052b0:	00800804 	movi	r2,32
 40052b4:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 40052b8:	00000a06 	br	40052e4 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 40052bc:	e0bfb983 	ldbu	r2,-282(fp)
 40052c0:	d0a6f845 	stb	r2,-25631(gp)
                        last_usb_task_state = usb_task_state;
 40052c4:	d0a00303 	ldbu	r2,-32756(gp)
 40052c8:	d0a6f605 	stb	r2,-25640(gp)
                        usb_task_state = USB_STATE_ERROR;
 40052cc:	00bfffc4 	movi	r2,-1
 40052d0:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 40052d4:	00000306 	br	40052e4 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 40052d8:	0001883a 	nop
 40052dc:	00006b06 	br	400548c <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 40052e0:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 40052e4:	00006906 	br	400548c <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 40052e8:	00800044 	movi	r2,1
 40052ec:	e0bfb905 	stb	r2,-284(fp)
 40052f0:	00002d06 	br	40053a8 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 40052f4:	e0ffb903 	ldbu	r3,-284(fp)
 40052f8:	008100b4 	movhi	r2,1026
 40052fc:	10ba3204 	addi	r2,r2,-5944
 4005300:	180690fa 	slli	r3,r3,3
 4005304:	10c5883a 	add	r2,r2,r3
 4005308:	10800017 	ldw	r2,0(r2)
 400530c:	1000231e 	bne	r2,zero,400539c <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 4005310:	e13fb903 	ldbu	r4,-284(fp)
 4005314:	008100b4 	movhi	r2,1026
 4005318:	10ba3204 	addi	r2,r2,-5944
 400531c:	10c00017 	ldw	r3,0(r2)
 4005320:	008100b4 	movhi	r2,1026
 4005324:	10ba3204 	addi	r2,r2,-5944
 4005328:	200890fa 	slli	r4,r4,3
 400532c:	1105883a 	add	r2,r2,r4
 4005330:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 4005334:	e0bfb903 	ldbu	r2,-284(fp)
 4005338:	d8000415 	stw	zero,16(sp)
 400533c:	d8000315 	stw	zero,12(sp)
 4005340:	d8000215 	stw	zero,8(sp)
 4005344:	d8000115 	stw	zero,4(sp)
 4005348:	d8800015 	stw	r2,0(sp)
 400534c:	01c00144 	movi	r7,5
 4005350:	000d883a 	mov	r6,zero
 4005354:	000b883a 	mov	r5,zero
 4005358:	0009883a 	mov	r4,zero
 400535c:	400482c0 	call	400482c <XferCtrlReq>
 4005360:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 4005364:	e0bfb983 	ldbu	r2,-282(fp)
 4005368:	1000051e 	bne	r2,zero,4005380 <USB_Task+0x508>
                        tmp_addr = i;
 400536c:	e0bfb903 	ldbu	r2,-284(fp)
 4005370:	d0a6f805 	stb	r2,-25632(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 4005374:	00800c04 	movi	r2,48
 4005378:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 400537c:	00000d06 	br	40053b4 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 4005380:	e0bfb983 	ldbu	r2,-282(fp)
 4005384:	d0a6f845 	stb	r2,-25631(gp)
                        last_usb_task_state = usb_task_state;
 4005388:	d0a00303 	ldbu	r2,-32756(gp)
 400538c:	d0a6f605 	stb	r2,-25640(gp)
                        usb_task_state = USB_STATE_ERROR;
 4005390:	00bfffc4 	movi	r2,-1
 4005394:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 4005398:	00000606 	br	40053b4 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 400539c:	e0bfb903 	ldbu	r2,-284(fp)
 40053a0:	10800044 	addi	r2,r2,1
 40053a4:	e0bfb905 	stb	r2,-284(fp)
 40053a8:	e0bfb903 	ldbu	r2,-284(fp)
 40053ac:	10800230 	cmpltui	r2,r2,8
 40053b0:	103fd01e 	bne	r2,zero,40052f4 <__alt_data_end+0xfc0052f4>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 40053b4:	d0a00303 	ldbu	r2,-32756(gp)
 40053b8:	10803fcc 	andi	r2,r2,255
 40053bc:	10800818 	cmpnei	r2,r2,32
 40053c0:	1000341e 	bne	r2,zero,4005494 <USB_Task+0x61c>
                usb_error = 0xfe;
 40053c4:	00bfff84 	movi	r2,-2
 40053c8:	d0a6f845 	stb	r2,-25631(gp)
                last_usb_task_state = usb_task_state;
 40053cc:	d0a00303 	ldbu	r2,-32756(gp)
 40053d0:	d0a6f605 	stb	r2,-25640(gp)
                usb_task_state = USB_STATE_ERROR;
 40053d4:	00bfffc4 	movi	r2,-1
 40053d8:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 40053dc:	00002d06 	br	4005494 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 40053e0:	e03fb905 	stb	zero,-284(fp)
 40053e4:	00001706 	br	4005444 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 40053e8:	e0bfb903 	ldbu	r2,-284(fp)
 40053ec:	040100b4 	movhi	r16,1026
 40053f0:	842c1204 	addi	r16,r16,-20408
 40053f4:	01400304 	movi	r5,12
 40053f8:	1009883a 	mov	r4,r2
 40053fc:	4007eb40 	call	4007eb4 <__mulsi3>
 4005400:	8085883a 	add	r2,r16,r2
 4005404:	10800017 	ldw	r2,0(r2)
 4005408:	d0e6f803 	ldbu	r3,-25632(gp)
 400540c:	18c03fcc 	andi	r3,r3,255
 4005410:	000b883a 	mov	r5,zero
 4005414:	1809883a 	mov	r4,r3
 4005418:	103ee83a 	callr	r2
 400541c:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 4005420:	e0bfb983 	ldbu	r2,-282(fp)
 4005424:	10800058 	cmpnei	r2,r2,1
 4005428:	1000031e 	bne	r2,zero,4005438 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 400542c:	00801004 	movi	r2,64
 4005430:	d0a00305 	stb	r2,-32756(gp)
                    break;
 4005434:	00000606 	br	4005450 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 4005438:	e0bfb903 	ldbu	r2,-284(fp)
 400543c:	10800044 	addi	r2,r2,1
 4005440:	e0bfb905 	stb	r2,-284(fp)
 4005444:	e0bfb903 	ldbu	r2,-284(fp)
 4005448:	10800130 	cmpltui	r2,r2,4
 400544c:	103fe61e 	bne	r2,zero,40053e8 <__alt_data_end+0xfc0053e8>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 4005450:	d0a00303 	ldbu	r2,-32756(gp)
 4005454:	10803fcc 	andi	r2,r2,255
 4005458:	10800c18 	cmpnei	r2,r2,48
 400545c:	10000f1e 	bne	r2,zero,400549c <USB_Task+0x624>
                usb_error = 0xfd;
 4005460:	00bfff44 	movi	r2,-3
 4005464:	d0a6f845 	stb	r2,-25631(gp)
                last_usb_task_state = usb_task_state;
 4005468:	d0a00303 	ldbu	r2,-32756(gp)
 400546c:	d0a6f605 	stb	r2,-25640(gp)
                usb_task_state = USB_STATE_ERROR;
 4005470:	00bfffc4 	movi	r2,-1
 4005474:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 4005478:	00000806 	br	400549c <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 400547c:	0001883a 	nop
 4005480:	00000706 	br	40054a0 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 4005484:	0001883a 	nop
 4005488:	00000506 	br	40054a0 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 400548c:	0001883a 	nop
 4005490:	00000306 	br	40054a0 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 4005494:	0001883a 	nop
 4005498:	00000106 	br	40054a0 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 400549c:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 40054a0:	0001883a 	nop
 40054a4:	e6ffff04 	addi	sp,fp,-4
 40054a8:	dfc00217 	ldw	ra,8(sp)
 40054ac:	df000117 	ldw	fp,4(sp)
 40054b0:	dc000017 	ldw	r16,0(sp)
 40054b4:	dec00304 	addi	sp,sp,12
 40054b8:	f800283a 	ret

040054bc <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 40054bc:	defffd04 	addi	sp,sp,-12
 40054c0:	df000215 	stw	fp,8(sp)
 40054c4:	df000204 	addi	fp,sp,8
 40054c8:	2005883a 	mov	r2,r4
 40054cc:	e17fff15 	stw	r5,-4(fp)
 40054d0:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 40054d4:	0005883a 	mov	r2,zero
}
 40054d8:	e037883a 	mov	sp,fp
 40054dc:	df000017 	ldw	fp,0(sp)
 40054e0:	dec00104 	addi	sp,sp,4
 40054e4:	f800283a 	ret

040054e8 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 40054e8:	defffb04 	addi	sp,sp,-20
 40054ec:	df000415 	stw	fp,16(sp)
 40054f0:	df000404 	addi	fp,sp,16
 40054f4:	2007883a 	mov	r3,r4
 40054f8:	2805883a 	mov	r2,r5
 40054fc:	e1bffe15 	stw	r6,-8(fp)
 4005500:	e1ffff15 	stw	r7,-4(fp)
 4005504:	e0fffc05 	stb	r3,-16(fp)
 4005508:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 400550c:	0005883a 	mov	r2,zero

}
 4005510:	e037883a 	mov	sp,fp
 4005514:	df000017 	ldw	fp,0(sp)
 4005518:	dec00104 	addi	sp,sp,4
 400551c:	f800283a 	ret

04005520 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 4005520:	defffd04 	addi	sp,sp,-12
 4005524:	df000215 	stw	fp,8(sp)
 4005528:	df000204 	addi	fp,sp,8
 400552c:	2005883a 	mov	r2,r4
 4005530:	e17fff15 	stw	r5,-4(fp)
 4005534:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 4005538:	0005883a 	mov	r2,zero

}
 400553c:	e037883a 	mov	sp,fp
 4005540:	df000017 	ldw	fp,0(sp)
 4005544:	dec00104 	addi	sp,sp,4
 4005548:	f800283a 	ret

0400554c <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 400554c:	defffb04 	addi	sp,sp,-20
 4005550:	df000415 	stw	fp,16(sp)
 4005554:	df000404 	addi	fp,sp,16
 4005558:	2007883a 	mov	r3,r4
 400555c:	2805883a 	mov	r2,r5
 4005560:	e1bffe15 	stw	r6,-8(fp)
 4005564:	e1ffff15 	stw	r7,-4(fp)
 4005568:	e0fffc05 	stb	r3,-16(fp)
 400556c:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 4005570:	0005883a 	mov	r2,zero
}
 4005574:	e037883a 	mov	sp,fp
 4005578:	df000017 	ldw	fp,0(sp)
 400557c:	dec00104 	addi	sp,sp,4
 4005580:	f800283a 	ret

04005584 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 4005584:	defffd04 	addi	sp,sp,-12
 4005588:	df000215 	stw	fp,8(sp)
 400558c:	df000204 	addi	fp,sp,8
 4005590:	2005883a 	mov	r2,r4
 4005594:	e17fff15 	stw	r5,-4(fp)
 4005598:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 400559c:	0005883a 	mov	r2,zero
}
 40055a0:	e037883a 	mov	sp,fp
 40055a4:	df000017 	ldw	fp,0(sp)
 40055a8:	dec00104 	addi	sp,sp,4
 40055ac:	f800283a 	ret

040055b0 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 40055b0:	defffb04 	addi	sp,sp,-20
 40055b4:	df000415 	stw	fp,16(sp)
 40055b8:	df000404 	addi	fp,sp,16
 40055bc:	2007883a 	mov	r3,r4
 40055c0:	2805883a 	mov	r2,r5
 40055c4:	e1bffe15 	stw	r6,-8(fp)
 40055c8:	e1ffff15 	stw	r7,-4(fp)
 40055cc:	e0fffc05 	stb	r3,-16(fp)
 40055d0:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 40055d4:	0005883a 	mov	r2,zero
}
 40055d8:	e037883a 	mov	sp,fp
 40055dc:	df000017 	ldw	fp,0(sp)
 40055e0:	dec00104 	addi	sp,sp,4
 40055e4:	f800283a 	ret

040055e8 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 40055e8:	deffff04 	addi	sp,sp,-4
 40055ec:	df000015 	stw	fp,0(sp)
 40055f0:	d839883a 	mov	fp,sp
    return( usb_task_state );
 40055f4:	d0a00303 	ldbu	r2,-32756(gp)
}
 40055f8:	e037883a 	mov	sp,fp
 40055fc:	df000017 	ldw	fp,0(sp)
 4005600:	dec00104 	addi	sp,sp,4
 4005604:	f800283a 	ret

04005608 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 4005608:	defffe04 	addi	sp,sp,-8
 400560c:	df000115 	stw	fp,4(sp)
 4005610:	df000104 	addi	fp,sp,4
 4005614:	2005883a 	mov	r2,r4
 4005618:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 400561c:	e0bfff03 	ldbu	r2,-4(fp)
 4005620:	100690fa 	slli	r3,r2,3
 4005624:	008100b4 	movhi	r2,1026
 4005628:	10ba3204 	addi	r2,r2,-5944
 400562c:	1885883a 	add	r2,r3,r2
}
 4005630:	e037883a 	mov	sp,fp
 4005634:	df000017 	ldw	fp,0(sp)
 4005638:	dec00104 	addi	sp,sp,4
 400563c:	f800283a 	ret

04005640 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 4005640:	defffc04 	addi	sp,sp,-16
 4005644:	df000315 	stw	fp,12(sp)
 4005648:	df000304 	addi	fp,sp,12
 400564c:	e13ffe15 	stw	r4,-8(fp)
 4005650:	2805883a 	mov	r2,r5
 4005654:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 4005658:	e03ffd05 	stb	zero,-12(fp)
 400565c:	00000d06 	br	4005694 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 4005660:	e0bffd03 	ldbu	r2,-12(fp)
 4005664:	e0fffe17 	ldw	r3,-8(fp)
 4005668:	1887883a 	add	r3,r3,r2
 400566c:	e0bffd03 	ldbu	r2,-12(fp)
 4005670:	1085883a 	add	r2,r2,r2
 4005674:	1009883a 	mov	r4,r2
 4005678:	e0bffe17 	ldw	r2,-8(fp)
 400567c:	1105883a 	add	r2,r2,r4
 4005680:	10800003 	ldbu	r2,0(r2)
 4005684:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 4005688:	e0bffd03 	ldbu	r2,-12(fp)
 400568c:	10800044 	addi	r2,r2,1
 4005690:	e0bffd05 	stb	r2,-12(fp)
 4005694:	e0fffd03 	ldbu	r3,-12(fp)
 4005698:	e0bfff03 	ldbu	r2,-4(fp)
 400569c:	18bff036 	bltu	r3,r2,4005660 <__alt_data_end+0xfc005660>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 40056a0:	e0bfff03 	ldbu	r2,-4(fp)
 40056a4:	e0fffe17 	ldw	r3,-8(fp)
 40056a8:	1885883a 	add	r2,r3,r2
 40056ac:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 40056b0:	e0bffe17 	ldw	r2,-8(fp)
}
 40056b4:	e037883a 	mov	sp,fp
 40056b8:	df000017 	ldw	fp,0(sp)
 40056bc:	dec00104 	addi	sp,sp,4
 40056c0:	f800283a 	ret

040056c4 <cos>:
 40056c4:	00a00034 	movhi	r2,32768
 40056c8:	defffa04 	addi	sp,sp,-24
 40056cc:	10bfffc4 	addi	r2,r2,-1
 40056d0:	00cffa74 	movhi	r3,16361
 40056d4:	dfc00515 	stw	ra,20(sp)
 40056d8:	2884703a 	and	r2,r5,r2
 40056dc:	18c87ec4 	addi	r3,r3,8699
 40056e0:	1880180e 	bge	r3,r2,4005744 <cos+0x80>
 40056e4:	00dffc34 	movhi	r3,32752
 40056e8:	18ffffc4 	addi	r3,r3,-1
 40056ec:	1880060e 	bge	r3,r2,4005708 <cos+0x44>
 40056f0:	280f883a 	mov	r7,r5
 40056f4:	200d883a 	mov	r6,r4
 40056f8:	400aae80 	call	400aae8 <__subdf3>
 40056fc:	dfc00517 	ldw	ra,20(sp)
 4005700:	dec00604 	addi	sp,sp,24
 4005704:	f800283a 	ret
 4005708:	d9800104 	addi	r6,sp,4
 400570c:	4005bbc0 	call	4005bbc <__ieee754_rem_pio2>
 4005710:	108000cc 	andi	r2,r2,3
 4005714:	00c00044 	movi	r3,1
 4005718:	10c01726 	beq	r2,r3,4005778 <cos+0xb4>
 400571c:	01000084 	movi	r4,2
 4005720:	11000e26 	beq	r2,r4,400575c <cos+0x98>
 4005724:	10001c26 	beq	r2,zero,4005798 <cos+0xd4>
 4005728:	d9800317 	ldw	r6,12(sp)
 400572c:	d9c00417 	ldw	r7,16(sp)
 4005730:	d9000117 	ldw	r4,4(sp)
 4005734:	d9400217 	ldw	r5,8(sp)
 4005738:	d8c00015 	stw	r3,0(sp)
 400573c:	40077ec0 	call	40077ec <__kernel_sin>
 4005740:	003fee06 	br	40056fc <__alt_data_end+0xfc0056fc>
 4005744:	000d883a 	mov	r6,zero
 4005748:	000f883a 	mov	r7,zero
 400574c:	40065b00 	call	40065b0 <__kernel_cos>
 4005750:	dfc00517 	ldw	ra,20(sp)
 4005754:	dec00604 	addi	sp,sp,24
 4005758:	f800283a 	ret
 400575c:	d9800317 	ldw	r6,12(sp)
 4005760:	d9c00417 	ldw	r7,16(sp)
 4005764:	d9000117 	ldw	r4,4(sp)
 4005768:	d9400217 	ldw	r5,8(sp)
 400576c:	40065b00 	call	40065b0 <__kernel_cos>
 4005770:	18e0003c 	xorhi	r3,r3,32768
 4005774:	003fe106 	br	40056fc <__alt_data_end+0xfc0056fc>
 4005778:	d9800317 	ldw	r6,12(sp)
 400577c:	d9c00417 	ldw	r7,16(sp)
 4005780:	d9000117 	ldw	r4,4(sp)
 4005784:	d9400217 	ldw	r5,8(sp)
 4005788:	d8800015 	stw	r2,0(sp)
 400578c:	40077ec0 	call	40077ec <__kernel_sin>
 4005790:	18e0003c 	xorhi	r3,r3,32768
 4005794:	003fd906 	br	40056fc <__alt_data_end+0xfc0056fc>
 4005798:	d9800317 	ldw	r6,12(sp)
 400579c:	d9c00417 	ldw	r7,16(sp)
 40057a0:	d9000117 	ldw	r4,4(sp)
 40057a4:	d9400217 	ldw	r5,8(sp)
 40057a8:	40065b00 	call	40065b0 <__kernel_cos>
 40057ac:	003fd306 	br	40056fc <__alt_data_end+0xfc0056fc>

040057b0 <floor>:
 40057b0:	2811d53a 	srai	r8,r5,20
 40057b4:	defffa04 	addi	sp,sp,-24
 40057b8:	dcc00315 	stw	r19,12(sp)
 40057bc:	4201ffcc 	andi	r8,r8,2047
 40057c0:	dc800215 	stw	r18,8(sp)
 40057c4:	dc400115 	stw	r17,4(sp)
 40057c8:	dc000015 	stw	r16,0(sp)
 40057cc:	dfc00515 	stw	ra,20(sp)
 40057d0:	dd000415 	stw	r20,16(sp)
 40057d4:	44bf0044 	addi	r18,r8,-1023
 40057d8:	018004c4 	movi	r6,19
 40057dc:	2821883a 	mov	r16,r5
 40057e0:	2005883a 	mov	r2,r4
 40057e4:	280f883a 	mov	r7,r5
 40057e8:	2827883a 	mov	r19,r5
 40057ec:	2023883a 	mov	r17,r4
 40057f0:	34801916 	blt	r6,r18,4005858 <floor+0xa8>
 40057f4:	90003c16 	blt	r18,zero,40058e8 <floor+0x138>
 40057f8:	05000434 	movhi	r20,16
 40057fc:	a53fffc4 	addi	r20,r20,-1
 4005800:	a4a9d83a 	sra	r20,r20,r18
 4005804:	2d0c703a 	and	r6,r5,r20
 4005808:	310cb03a 	or	r6,r6,r4
 400580c:	30001626 	beq	r6,zero,4005868 <floor+0xb8>
 4005810:	01a20034 	movhi	r6,34816
 4005814:	01df8e34 	movhi	r7,32312
 4005818:	319d6704 	addi	r6,r6,30108
 400581c:	39f90f04 	addi	r7,r7,-7108
 4005820:	4008da80 	call	4008da8 <__adddf3>
 4005824:	000d883a 	mov	r6,zero
 4005828:	000f883a 	mov	r7,zero
 400582c:	1009883a 	mov	r4,r2
 4005830:	180b883a 	mov	r5,r3
 4005834:	400a0ac0 	call	400a0ac <__gedf2>
 4005838:	0080040e 	bge	zero,r2,400584c <floor+0x9c>
 400583c:	80003c16 	blt	r16,zero,4005930 <floor+0x180>
 4005840:	0520303a 	nor	r16,zero,r20
 4005844:	84e0703a 	and	r16,r16,r19
 4005848:	0023883a 	mov	r17,zero
 400584c:	8805883a 	mov	r2,r17
 4005850:	8007883a 	mov	r3,r16
 4005854:	00000506 	br	400586c <floor+0xbc>
 4005858:	01800cc4 	movi	r6,51
 400585c:	34800b0e 	bge	r6,r18,400588c <floor+0xdc>
 4005860:	01810004 	movi	r6,1024
 4005864:	91802f26 	beq	r18,r6,4005924 <floor+0x174>
 4005868:	3807883a 	mov	r3,r7
 400586c:	dfc00517 	ldw	ra,20(sp)
 4005870:	dd000417 	ldw	r20,16(sp)
 4005874:	dcc00317 	ldw	r19,12(sp)
 4005878:	dc800217 	ldw	r18,8(sp)
 400587c:	dc400117 	ldw	r17,4(sp)
 4005880:	dc000017 	ldw	r16,0(sp)
 4005884:	dec00604 	addi	sp,sp,24
 4005888:	f800283a 	ret
 400588c:	423efb44 	addi	r8,r8,-1043
 4005890:	053fffc4 	movi	r20,-1
 4005894:	a228d83a 	srl	r20,r20,r8
 4005898:	250c703a 	and	r6,r4,r20
 400589c:	303ff226 	beq	r6,zero,4005868 <__alt_data_end+0xfc005868>
 40058a0:	01a20034 	movhi	r6,34816
 40058a4:	01df8e34 	movhi	r7,32312
 40058a8:	319d6704 	addi	r6,r6,30108
 40058ac:	39f90f04 	addi	r7,r7,-7108
 40058b0:	4008da80 	call	4008da8 <__adddf3>
 40058b4:	000d883a 	mov	r6,zero
 40058b8:	000f883a 	mov	r7,zero
 40058bc:	1009883a 	mov	r4,r2
 40058c0:	180b883a 	mov	r5,r3
 40058c4:	400a0ac0 	call	400a0ac <__gedf2>
 40058c8:	00bfe00e 	bge	zero,r2,400584c <__alt_data_end+0xfc00584c>
 40058cc:	80001c16 	blt	r16,zero,4005940 <floor+0x190>
 40058d0:	0510303a 	nor	r8,zero,r20
 40058d4:	9821883a 	mov	r16,r19
 40058d8:	8a22703a 	and	r17,r17,r8
 40058dc:	8805883a 	mov	r2,r17
 40058e0:	8007883a 	mov	r3,r16
 40058e4:	003fe106 	br	400586c <__alt_data_end+0xfc00586c>
 40058e8:	01a20034 	movhi	r6,34816
 40058ec:	01df8e34 	movhi	r7,32312
 40058f0:	319d6704 	addi	r6,r6,30108
 40058f4:	39f90f04 	addi	r7,r7,-7108
 40058f8:	4008da80 	call	4008da8 <__adddf3>
 40058fc:	000d883a 	mov	r6,zero
 4005900:	000f883a 	mov	r7,zero
 4005904:	1009883a 	mov	r4,r2
 4005908:	180b883a 	mov	r5,r3
 400590c:	400a0ac0 	call	400a0ac <__gedf2>
 4005910:	00bfce0e 	bge	zero,r2,400584c <__alt_data_end+0xfc00584c>
 4005914:	80001516 	blt	r16,zero,400596c <floor+0x1bc>
 4005918:	0023883a 	mov	r17,zero
 400591c:	0021883a 	mov	r16,zero
 4005920:	003fca06 	br	400584c <__alt_data_end+0xfc00584c>
 4005924:	200d883a 	mov	r6,r4
 4005928:	4008da80 	call	4008da8 <__adddf3>
 400592c:	003fcf06 	br	400586c <__alt_data_end+0xfc00586c>
 4005930:	00800434 	movhi	r2,16
 4005934:	14a5d83a 	sra	r18,r2,r18
 4005938:	84a7883a 	add	r19,r16,r18
 400593c:	003fc006 	br	4005840 <__alt_data_end+0xfc005840>
 4005940:	00800504 	movi	r2,20
 4005944:	90801326 	beq	r18,r2,4005994 <floor+0x1e4>
 4005948:	00800d04 	movi	r2,52
 400594c:	14a5c83a 	sub	r18,r2,r18
 4005950:	00800044 	movi	r2,1
 4005954:	1484983a 	sll	r2,r2,r18
 4005958:	1445883a 	add	r2,r2,r17
 400595c:	14400b2e 	bgeu	r2,r17,400598c <floor+0x1dc>
 4005960:	84c00044 	addi	r19,r16,1
 4005964:	1023883a 	mov	r17,r2
 4005968:	003fd906 	br	40058d0 <__alt_data_end+0xfc0058d0>
 400596c:	00a00034 	movhi	r2,32768
 4005970:	10bfffc4 	addi	r2,r2,-1
 4005974:	8084703a 	and	r2,r16,r2
 4005978:	1462b03a 	or	r17,r2,r17
 400597c:	883fb326 	beq	r17,zero,400584c <__alt_data_end+0xfc00584c>
 4005980:	0023883a 	mov	r17,zero
 4005984:	042ffc34 	movhi	r16,49136
 4005988:	003fb006 	br	400584c <__alt_data_end+0xfc00584c>
 400598c:	1023883a 	mov	r17,r2
 4005990:	003fcf06 	br	40058d0 <__alt_data_end+0xfc0058d0>
 4005994:	84c00044 	addi	r19,r16,1
 4005998:	003fcd06 	br	40058d0 <__alt_data_end+0xfc0058d0>

0400599c <sin>:
 400599c:	00a00034 	movhi	r2,32768
 40059a0:	defffa04 	addi	sp,sp,-24
 40059a4:	10bfffc4 	addi	r2,r2,-1
 40059a8:	00cffa74 	movhi	r3,16361
 40059ac:	dfc00515 	stw	ra,20(sp)
 40059b0:	2884703a 	and	r2,r5,r2
 40059b4:	18c87ec4 	addi	r3,r3,8699
 40059b8:	1880180e 	bge	r3,r2,4005a1c <sin+0x80>
 40059bc:	00dffc34 	movhi	r3,32752
 40059c0:	18ffffc4 	addi	r3,r3,-1
 40059c4:	1880060e 	bge	r3,r2,40059e0 <sin+0x44>
 40059c8:	280f883a 	mov	r7,r5
 40059cc:	200d883a 	mov	r6,r4
 40059d0:	400aae80 	call	400aae8 <__subdf3>
 40059d4:	dfc00517 	ldw	ra,20(sp)
 40059d8:	dec00604 	addi	sp,sp,24
 40059dc:	f800283a 	ret
 40059e0:	d9800104 	addi	r6,sp,4
 40059e4:	4005bbc0 	call	4005bbc <__ieee754_rem_pio2>
 40059e8:	108000cc 	andi	r2,r2,3
 40059ec:	00c00044 	movi	r3,1
 40059f0:	10c01926 	beq	r2,r3,4005a58 <sin+0xbc>
 40059f4:	01000084 	movi	r4,2
 40059f8:	11000f26 	beq	r2,r4,4005a38 <sin+0x9c>
 40059fc:	10001c26 	beq	r2,zero,4005a70 <sin+0xd4>
 4005a00:	d9800317 	ldw	r6,12(sp)
 4005a04:	d9c00417 	ldw	r7,16(sp)
 4005a08:	d9000117 	ldw	r4,4(sp)
 4005a0c:	d9400217 	ldw	r5,8(sp)
 4005a10:	40065b00 	call	40065b0 <__kernel_cos>
 4005a14:	18e0003c 	xorhi	r3,r3,32768
 4005a18:	003fee06 	br	40059d4 <__alt_data_end+0xfc0059d4>
 4005a1c:	d8000015 	stw	zero,0(sp)
 4005a20:	000d883a 	mov	r6,zero
 4005a24:	000f883a 	mov	r7,zero
 4005a28:	40077ec0 	call	40077ec <__kernel_sin>
 4005a2c:	dfc00517 	ldw	ra,20(sp)
 4005a30:	dec00604 	addi	sp,sp,24
 4005a34:	f800283a 	ret
 4005a38:	d9800317 	ldw	r6,12(sp)
 4005a3c:	d9c00417 	ldw	r7,16(sp)
 4005a40:	d9000117 	ldw	r4,4(sp)
 4005a44:	d9400217 	ldw	r5,8(sp)
 4005a48:	d8c00015 	stw	r3,0(sp)
 4005a4c:	40077ec0 	call	40077ec <__kernel_sin>
 4005a50:	18e0003c 	xorhi	r3,r3,32768
 4005a54:	003fdf06 	br	40059d4 <__alt_data_end+0xfc0059d4>
 4005a58:	d9800317 	ldw	r6,12(sp)
 4005a5c:	d9c00417 	ldw	r7,16(sp)
 4005a60:	d9000117 	ldw	r4,4(sp)
 4005a64:	d9400217 	ldw	r5,8(sp)
 4005a68:	40065b00 	call	40065b0 <__kernel_cos>
 4005a6c:	003fd906 	br	40059d4 <__alt_data_end+0xfc0059d4>
 4005a70:	d9800317 	ldw	r6,12(sp)
 4005a74:	d9c00417 	ldw	r7,16(sp)
 4005a78:	d9000117 	ldw	r4,4(sp)
 4005a7c:	d9400217 	ldw	r5,8(sp)
 4005a80:	d8c00015 	stw	r3,0(sp)
 4005a84:	40077ec0 	call	40077ec <__kernel_sin>
 4005a88:	003fd206 	br	40059d4 <__alt_data_end+0xfc0059d4>

04005a8c <sqrt>:
 4005a8c:	defff104 	addi	sp,sp,-60
 4005a90:	dd000d15 	stw	r20,52(sp)
 4005a94:	050100b4 	movhi	r20,1026
 4005a98:	dcc00c15 	stw	r19,48(sp)
 4005a9c:	dc800b15 	stw	r18,44(sp)
 4005aa0:	dc400a15 	stw	r17,40(sp)
 4005aa4:	dc000915 	stw	r16,36(sp)
 4005aa8:	dfc00e15 	stw	ra,56(sp)
 4005aac:	a532db04 	addi	r20,r20,-13460
 4005ab0:	2027883a 	mov	r19,r4
 4005ab4:	2825883a 	mov	r18,r5
 4005ab8:	40063280 	call	4006328 <__ieee754_sqrt>
 4005abc:	1821883a 	mov	r16,r3
 4005ac0:	a0c00017 	ldw	r3,0(r20)
 4005ac4:	1023883a 	mov	r17,r2
 4005ac8:	00bfffc4 	movi	r2,-1
 4005acc:	18800a26 	beq	r3,r2,4005af8 <sqrt+0x6c>
 4005ad0:	9809883a 	mov	r4,r19
 4005ad4:	900b883a 	mov	r5,r18
 4005ad8:	4007acc0 	call	4007acc <__fpclassifyd>
 4005adc:	10000626 	beq	r2,zero,4005af8 <sqrt+0x6c>
 4005ae0:	000d883a 	mov	r6,zero
 4005ae4:	000f883a 	mov	r7,zero
 4005ae8:	9809883a 	mov	r4,r19
 4005aec:	900b883a 	mov	r5,r18
 4005af0:	400a1880 	call	400a188 <__ledf2>
 4005af4:	10000a16 	blt	r2,zero,4005b20 <sqrt+0x94>
 4005af8:	8805883a 	mov	r2,r17
 4005afc:	8007883a 	mov	r3,r16
 4005b00:	dfc00e17 	ldw	ra,56(sp)
 4005b04:	dd000d17 	ldw	r20,52(sp)
 4005b08:	dcc00c17 	ldw	r19,48(sp)
 4005b0c:	dc800b17 	ldw	r18,44(sp)
 4005b10:	dc400a17 	ldw	r17,40(sp)
 4005b14:	dc000917 	ldw	r16,36(sp)
 4005b18:	dec00f04 	addi	sp,sp,60
 4005b1c:	f800283a 	ret
 4005b20:	00800044 	movi	r2,1
 4005b24:	d8800015 	stw	r2,0(sp)
 4005b28:	a4000017 	ldw	r16,0(r20)
 4005b2c:	008100b4 	movhi	r2,1026
 4005b30:	10aacf04 	addi	r2,r2,-21700
 4005b34:	d8800115 	stw	r2,4(sp)
 4005b38:	d8000815 	stw	zero,32(sp)
 4005b3c:	dcc00415 	stw	r19,16(sp)
 4005b40:	dc800515 	stw	r18,20(sp)
 4005b44:	dcc00215 	stw	r19,8(sp)
 4005b48:	dc800315 	stw	r18,12(sp)
 4005b4c:	80000a1e 	bne	r16,zero,4005b78 <sqrt+0xec>
 4005b50:	d8000615 	stw	zero,24(sp)
 4005b54:	d8000715 	stw	zero,28(sp)
 4005b58:	d809883a 	mov	r4,sp
 4005b5c:	4007b400 	call	4007b40 <matherr>
 4005b60:	10000e26 	beq	r2,zero,4005b9c <sqrt+0x110>
 4005b64:	d8800817 	ldw	r2,32(sp)
 4005b68:	1000101e 	bne	r2,zero,4005bac <sqrt+0x120>
 4005b6c:	d8800617 	ldw	r2,24(sp)
 4005b70:	d8c00717 	ldw	r3,28(sp)
 4005b74:	003fe206 	br	4005b00 <__alt_data_end+0xfc005b00>
 4005b78:	000d883a 	mov	r6,zero
 4005b7c:	000f883a 	mov	r7,zero
 4005b80:	0009883a 	mov	r4,zero
 4005b84:	000b883a 	mov	r5,zero
 4005b88:	40096540 	call	4009654 <__divdf3>
 4005b8c:	d8800615 	stw	r2,24(sp)
 4005b90:	d8c00715 	stw	r3,28(sp)
 4005b94:	00800084 	movi	r2,2
 4005b98:	80bfef1e 	bne	r16,r2,4005b58 <__alt_data_end+0xfc005b58>
 4005b9c:	400b85c0 	call	400b85c <__errno>
 4005ba0:	00c00844 	movi	r3,33
 4005ba4:	10c00015 	stw	r3,0(r2)
 4005ba8:	003fee06 	br	4005b64 <__alt_data_end+0xfc005b64>
 4005bac:	400b85c0 	call	400b85c <__errno>
 4005bb0:	d8c00817 	ldw	r3,32(sp)
 4005bb4:	10c00015 	stw	r3,0(r2)
 4005bb8:	003fec06 	br	4005b6c <__alt_data_end+0xfc005b6c>

04005bbc <__ieee754_rem_pio2>:
 4005bbc:	02200034 	movhi	r8,32768
 4005bc0:	deffea04 	addi	sp,sp,-88
 4005bc4:	423fffc4 	addi	r8,r8,-1
 4005bc8:	00cffa74 	movhi	r3,16361
 4005bcc:	ddc01315 	stw	r23,76(sp)
 4005bd0:	dc400d15 	stw	r17,52(sp)
 4005bd4:	dfc01515 	stw	ra,84(sp)
 4005bd8:	df001415 	stw	fp,80(sp)
 4005bdc:	dd801215 	stw	r22,72(sp)
 4005be0:	dd401115 	stw	r21,68(sp)
 4005be4:	dd001015 	stw	r20,64(sp)
 4005be8:	dcc00f15 	stw	r19,60(sp)
 4005bec:	dc800e15 	stw	r18,56(sp)
 4005bf0:	dc000c15 	stw	r16,48(sp)
 4005bf4:	2a2e703a 	and	r23,r5,r8
 4005bf8:	18c87ec4 	addi	r3,r3,8699
 4005bfc:	2823883a 	mov	r17,r5
 4005c00:	1dc0790e 	bge	r3,r23,4005de8 <__ieee754_rem_pio2+0x22c>
 4005c04:	009000f4 	movhi	r2,16387
 4005c08:	10b65ec4 	addi	r2,r2,-9861
 4005c0c:	3021883a 	mov	r16,r6
 4005c10:	2027883a 	mov	r19,r4
 4005c14:	15c02316 	blt	r2,r23,4005ca4 <__ieee754_rem_pio2+0xe8>
 4005c18:	01cffe74 	movhi	r7,16377
 4005c1c:	39c87ec4 	addi	r7,r7,8699
 4005c20:	01951034 	movhi	r6,21568
 4005c24:	01417a0e 	bge	zero,r5,4006210 <__ieee754_rem_pio2+0x654>
 4005c28:	400aae80 	call	400aae8 <__subdf3>
 4005c2c:	1025883a 	mov	r18,r2
 4005c30:	008ffe74 	movhi	r2,16377
 4005c34:	10887ec4 	addi	r2,r2,8699
 4005c38:	1823883a 	mov	r17,r3
 4005c3c:	b8808426 	beq	r23,r2,4005e50 <__ieee754_rem_pio2+0x294>
 4005c40:	018698b4 	movhi	r6,6754
 4005c44:	01cf7474 	movhi	r7,15825
 4005c48:	3198cc44 	addi	r6,r6,25393
 4005c4c:	39ed1844 	addi	r7,r7,-19359
 4005c50:	9009883a 	mov	r4,r18
 4005c54:	180b883a 	mov	r5,r3
 4005c58:	400aae80 	call	400aae8 <__subdf3>
 4005c5c:	100d883a 	mov	r6,r2
 4005c60:	180f883a 	mov	r7,r3
 4005c64:	9009883a 	mov	r4,r18
 4005c68:	880b883a 	mov	r5,r17
 4005c6c:	80800015 	stw	r2,0(r16)
 4005c70:	80c00115 	stw	r3,4(r16)
 4005c74:	400aae80 	call	400aae8 <__subdf3>
 4005c78:	018698b4 	movhi	r6,6754
 4005c7c:	01cf7474 	movhi	r7,15825
 4005c80:	3198cc44 	addi	r6,r6,25393
 4005c84:	39ed1844 	addi	r7,r7,-19359
 4005c88:	1009883a 	mov	r4,r2
 4005c8c:	180b883a 	mov	r5,r3
 4005c90:	400aae80 	call	400aae8 <__subdf3>
 4005c94:	80800215 	stw	r2,8(r16)
 4005c98:	80c00315 	stw	r3,12(r16)
 4005c9c:	00800044 	movi	r2,1
 4005ca0:	00005606 	br	4005dfc <__ieee754_rem_pio2+0x240>
 4005ca4:	00904e74 	movhi	r2,16697
 4005ca8:	10887ec4 	addi	r2,r2,8699
 4005cac:	15c0830e 	bge	r2,r23,4005ebc <__ieee754_rem_pio2+0x300>
 4005cb0:	009ffc34 	movhi	r2,32752
 4005cb4:	10bfffc4 	addi	r2,r2,-1
 4005cb8:	15c05c16 	blt	r2,r23,4005e2c <__ieee754_rem_pio2+0x270>
 4005cbc:	b829d53a 	srai	r20,r23,20
 4005cc0:	a53efa84 	addi	r20,r20,-1046
 4005cc4:	a024953a 	slli	r18,r20,20
 4005cc8:	bca5c83a 	sub	r18,r23,r18
 4005ccc:	900b883a 	mov	r5,r18
 4005cd0:	400b3e40 	call	400b3e4 <__fixdfsi>
 4005cd4:	1009883a 	mov	r4,r2
 4005cd8:	400b4640 	call	400b464 <__floatsidf>
 4005cdc:	9809883a 	mov	r4,r19
 4005ce0:	900b883a 	mov	r5,r18
 4005ce4:	100d883a 	mov	r6,r2
 4005ce8:	180f883a 	mov	r7,r3
 4005cec:	d8800215 	stw	r2,8(sp)
 4005cf0:	d8c00315 	stw	r3,12(sp)
 4005cf4:	400aae80 	call	400aae8 <__subdf3>
 4005cf8:	000d883a 	mov	r6,zero
 4005cfc:	01d05c34 	movhi	r7,16752
 4005d00:	1009883a 	mov	r4,r2
 4005d04:	180b883a 	mov	r5,r3
 4005d08:	400a27c0 	call	400a27c <__muldf3>
 4005d0c:	180b883a 	mov	r5,r3
 4005d10:	1009883a 	mov	r4,r2
 4005d14:	182b883a 	mov	r21,r3
 4005d18:	102d883a 	mov	r22,r2
 4005d1c:	400b3e40 	call	400b3e4 <__fixdfsi>
 4005d20:	1009883a 	mov	r4,r2
 4005d24:	400b4640 	call	400b464 <__floatsidf>
 4005d28:	100d883a 	mov	r6,r2
 4005d2c:	180f883a 	mov	r7,r3
 4005d30:	b009883a 	mov	r4,r22
 4005d34:	a80b883a 	mov	r5,r21
 4005d38:	1027883a 	mov	r19,r2
 4005d3c:	1825883a 	mov	r18,r3
 4005d40:	d8800415 	stw	r2,16(sp)
 4005d44:	d8c00515 	stw	r3,20(sp)
 4005d48:	400aae80 	call	400aae8 <__subdf3>
 4005d4c:	000d883a 	mov	r6,zero
 4005d50:	01d05c34 	movhi	r7,16752
 4005d54:	1009883a 	mov	r4,r2
 4005d58:	180b883a 	mov	r5,r3
 4005d5c:	400a27c0 	call	400a27c <__muldf3>
 4005d60:	000d883a 	mov	r6,zero
 4005d64:	000f883a 	mov	r7,zero
 4005d68:	1009883a 	mov	r4,r2
 4005d6c:	180b883a 	mov	r5,r3
 4005d70:	d8800615 	stw	r2,24(sp)
 4005d74:	d8c00715 	stw	r3,28(sp)
 4005d78:	400a0240 	call	400a024 <__eqdf2>
 4005d7c:	1001431e 	bne	r2,zero,400628c <__ieee754_rem_pio2+0x6d0>
 4005d80:	000f883a 	mov	r7,zero
 4005d84:	000d883a 	mov	r6,zero
 4005d88:	9809883a 	mov	r4,r19
 4005d8c:	900b883a 	mov	r5,r18
 4005d90:	400a0240 	call	400a024 <__eqdf2>
 4005d94:	100f003a 	cmpeq	r7,r2,zero
 4005d98:	00800084 	movi	r2,2
 4005d9c:	11cfc83a 	sub	r7,r2,r7
 4005da0:	00800084 	movi	r2,2
 4005da4:	d8800015 	stw	r2,0(sp)
 4005da8:	008100b4 	movhi	r2,1026
 4005dac:	10aaf104 	addi	r2,r2,-21564
 4005db0:	d8800115 	stw	r2,4(sp)
 4005db4:	a00d883a 	mov	r6,r20
 4005db8:	800b883a 	mov	r5,r16
 4005dbc:	d9000204 	addi	r4,sp,8
 4005dc0:	4006a540 	call	4006a54 <__kernel_rem_pio2>
 4005dc4:	88000d0e 	bge	r17,zero,4005dfc <__ieee754_rem_pio2+0x240>
 4005dc8:	81000117 	ldw	r4,4(r16)
 4005dcc:	80c00317 	ldw	r3,12(r16)
 4005dd0:	0085c83a 	sub	r2,zero,r2
 4005dd4:	2120003c 	xorhi	r4,r4,32768
 4005dd8:	18e0003c 	xorhi	r3,r3,32768
 4005ddc:	81000115 	stw	r4,4(r16)
 4005de0:	80c00315 	stw	r3,12(r16)
 4005de4:	00000506 	br	4005dfc <__ieee754_rem_pio2+0x240>
 4005de8:	31000015 	stw	r4,0(r6)
 4005dec:	31400115 	stw	r5,4(r6)
 4005df0:	30000215 	stw	zero,8(r6)
 4005df4:	30000315 	stw	zero,12(r6)
 4005df8:	0005883a 	mov	r2,zero
 4005dfc:	dfc01517 	ldw	ra,84(sp)
 4005e00:	df001417 	ldw	fp,80(sp)
 4005e04:	ddc01317 	ldw	r23,76(sp)
 4005e08:	dd801217 	ldw	r22,72(sp)
 4005e0c:	dd401117 	ldw	r21,68(sp)
 4005e10:	dd001017 	ldw	r20,64(sp)
 4005e14:	dcc00f17 	ldw	r19,60(sp)
 4005e18:	dc800e17 	ldw	r18,56(sp)
 4005e1c:	dc400d17 	ldw	r17,52(sp)
 4005e20:	dc000c17 	ldw	r16,48(sp)
 4005e24:	dec01604 	addi	sp,sp,88
 4005e28:	f800283a 	ret
 4005e2c:	200d883a 	mov	r6,r4
 4005e30:	280f883a 	mov	r7,r5
 4005e34:	400aae80 	call	400aae8 <__subdf3>
 4005e38:	80800215 	stw	r2,8(r16)
 4005e3c:	80800015 	stw	r2,0(r16)
 4005e40:	80c00315 	stw	r3,12(r16)
 4005e44:	80c00115 	stw	r3,4(r16)
 4005e48:	0005883a 	mov	r2,zero
 4005e4c:	003feb06 	br	4005dfc <__alt_data_end+0xfc005dfc>
 4005e50:	01cf7474 	movhi	r7,15825
 4005e54:	9009883a 	mov	r4,r18
 4005e58:	39ed1844 	addi	r7,r7,-19359
 4005e5c:	01869834 	movhi	r6,6752
 4005e60:	180b883a 	mov	r5,r3
 4005e64:	400aae80 	call	400aae8 <__subdf3>
 4005e68:	018b80f4 	movhi	r6,11779
 4005e6c:	01cee8f4 	movhi	r7,15267
 4005e70:	319c1cc4 	addi	r6,r6,28787
 4005e74:	39c66284 	addi	r7,r7,6538
 4005e78:	1009883a 	mov	r4,r2
 4005e7c:	180b883a 	mov	r5,r3
 4005e80:	1025883a 	mov	r18,r2
 4005e84:	1823883a 	mov	r17,r3
 4005e88:	400aae80 	call	400aae8 <__subdf3>
 4005e8c:	100d883a 	mov	r6,r2
 4005e90:	180f883a 	mov	r7,r3
 4005e94:	9009883a 	mov	r4,r18
 4005e98:	880b883a 	mov	r5,r17
 4005e9c:	80800015 	stw	r2,0(r16)
 4005ea0:	80c00115 	stw	r3,4(r16)
 4005ea4:	400aae80 	call	400aae8 <__subdf3>
 4005ea8:	018b80f4 	movhi	r6,11779
 4005eac:	01cee8f4 	movhi	r7,15267
 4005eb0:	319c1cc4 	addi	r6,r6,28787
 4005eb4:	39c66284 	addi	r7,r7,6538
 4005eb8:	003f7306 	br	4005c88 <__alt_data_end+0xfc005c88>
 4005ebc:	4007ab80 	call	4007ab8 <fabs>
 4005ec0:	019b72b4 	movhi	r6,28106
 4005ec4:	01cff934 	movhi	r7,16356
 4005ec8:	31b220c4 	addi	r6,r6,-14205
 4005ecc:	39d7cc04 	addi	r7,r7,24368
 4005ed0:	1009883a 	mov	r4,r2
 4005ed4:	180b883a 	mov	r5,r3
 4005ed8:	102d883a 	mov	r22,r2
 4005edc:	182b883a 	mov	r21,r3
 4005ee0:	400a27c0 	call	400a27c <__muldf3>
 4005ee4:	000d883a 	mov	r6,zero
 4005ee8:	01cff834 	movhi	r7,16352
 4005eec:	1009883a 	mov	r4,r2
 4005ef0:	180b883a 	mov	r5,r3
 4005ef4:	4008da80 	call	4008da8 <__adddf3>
 4005ef8:	180b883a 	mov	r5,r3
 4005efc:	1009883a 	mov	r4,r2
 4005f00:	400b3e40 	call	400b3e4 <__fixdfsi>
 4005f04:	1009883a 	mov	r4,r2
 4005f08:	1025883a 	mov	r18,r2
 4005f0c:	400b4640 	call	400b464 <__floatsidf>
 4005f10:	01cffe74 	movhi	r7,16377
 4005f14:	39c87ec4 	addi	r7,r7,8699
 4005f18:	01951034 	movhi	r6,21568
 4005f1c:	1009883a 	mov	r4,r2
 4005f20:	180b883a 	mov	r5,r3
 4005f24:	1029883a 	mov	r20,r2
 4005f28:	1827883a 	mov	r19,r3
 4005f2c:	400a27c0 	call	400a27c <__muldf3>
 4005f30:	b009883a 	mov	r4,r22
 4005f34:	a80b883a 	mov	r5,r21
 4005f38:	100d883a 	mov	r6,r2
 4005f3c:	180f883a 	mov	r7,r3
 4005f40:	400aae80 	call	400aae8 <__subdf3>
 4005f44:	018698b4 	movhi	r6,6754
 4005f48:	01cf7474 	movhi	r7,15825
 4005f4c:	a009883a 	mov	r4,r20
 4005f50:	3198cc44 	addi	r6,r6,25393
 4005f54:	39ed1844 	addi	r7,r7,-19359
 4005f58:	980b883a 	mov	r5,r19
 4005f5c:	1039883a 	mov	fp,r2
 4005f60:	d8c00815 	stw	r3,32(sp)
 4005f64:	400a27c0 	call	400a27c <__muldf3>
 4005f68:	010007c4 	movi	r4,31
 4005f6c:	e017883a 	mov	r11,fp
 4005f70:	da800817 	ldw	r10,32(sp)
 4005f74:	102d883a 	mov	r22,r2
 4005f78:	182b883a 	mov	r21,r3
 4005f7c:	24802816 	blt	r4,r18,4006020 <__ieee754_rem_pio2+0x464>
 4005f80:	913fffc4 	addi	r4,r18,-1
 4005f84:	2109883a 	add	r4,r4,r4
 4005f88:	014100b4 	movhi	r5,1026
 4005f8c:	2109883a 	add	r4,r4,r4
 4005f90:	296ad104 	addi	r5,r5,-21692
 4005f94:	2909883a 	add	r4,r5,r4
 4005f98:	21000017 	ldw	r4,0(r4)
 4005f9c:	b9002026 	beq	r23,r4,4006020 <__ieee754_rem_pio2+0x464>
 4005fa0:	100d883a 	mov	r6,r2
 4005fa4:	180f883a 	mov	r7,r3
 4005fa8:	e009883a 	mov	r4,fp
 4005fac:	500b883a 	mov	r5,r10
 4005fb0:	da800b15 	stw	r10,44(sp)
 4005fb4:	df000a15 	stw	fp,40(sp)
 4005fb8:	400aae80 	call	400aae8 <__subdf3>
 4005fbc:	da800b17 	ldw	r10,44(sp)
 4005fc0:	dac00a17 	ldw	r11,40(sp)
 4005fc4:	1019883a 	mov	r12,r2
 4005fc8:	1813883a 	mov	r9,r3
 4005fcc:	80800015 	stw	r2,0(r16)
 4005fd0:	80c00115 	stw	r3,4(r16)
 4005fd4:	600d883a 	mov	r6,r12
 4005fd8:	480f883a 	mov	r7,r9
 4005fdc:	5809883a 	mov	r4,r11
 4005fe0:	500b883a 	mov	r5,r10
 4005fe4:	da400b15 	stw	r9,44(sp)
 4005fe8:	db000a15 	stw	r12,40(sp)
 4005fec:	400aae80 	call	400aae8 <__subdf3>
 4005ff0:	b00d883a 	mov	r6,r22
 4005ff4:	a80f883a 	mov	r7,r21
 4005ff8:	1009883a 	mov	r4,r2
 4005ffc:	180b883a 	mov	r5,r3
 4006000:	400aae80 	call	400aae8 <__subdf3>
 4006004:	80800215 	stw	r2,8(r16)
 4006008:	80c00315 	stw	r3,12(r16)
 400600c:	da400b17 	ldw	r9,44(sp)
 4006010:	db000a17 	ldw	r12,40(sp)
 4006014:	88009f16 	blt	r17,zero,4006294 <__ieee754_rem_pio2+0x6d8>
 4006018:	9005883a 	mov	r2,r18
 400601c:	003f7706 	br	4005dfc <__alt_data_end+0xfc005dfc>
 4006020:	d9400817 	ldw	r5,32(sp)
 4006024:	100d883a 	mov	r6,r2
 4006028:	180f883a 	mov	r7,r3
 400602c:	e009883a 	mov	r4,fp
 4006030:	da800b15 	stw	r10,44(sp)
 4006034:	dac00a15 	stw	r11,40(sp)
 4006038:	400aae80 	call	400aae8 <__subdf3>
 400603c:	1019883a 	mov	r12,r2
 4006040:	1804d53a 	srli	r2,r3,20
 4006044:	b811d53a 	srai	r8,r23,20
 4006048:	1813883a 	mov	r9,r3
 400604c:	1081ffcc 	andi	r2,r2,2047
 4006050:	80c00115 	stw	r3,4(r16)
 4006054:	83000015 	stw	r12,0(r16)
 4006058:	4085c83a 	sub	r2,r8,r2
 400605c:	00c00404 	movi	r3,16
 4006060:	da800b17 	ldw	r10,44(sp)
 4006064:	dac00a17 	ldw	r11,40(sp)
 4006068:	18bfda0e 	bge	r3,r2,4005fd4 <__alt_data_end+0xfc005fd4>
 400606c:	01cf7474 	movhi	r7,15825
 4006070:	39ed1844 	addi	r7,r7,-19359
 4006074:	01869834 	movhi	r6,6752
 4006078:	a009883a 	mov	r4,r20
 400607c:	980b883a 	mov	r5,r19
 4006080:	da000a15 	stw	r8,40(sp)
 4006084:	400a27c0 	call	400a27c <__muldf3>
 4006088:	d9400817 	ldw	r5,32(sp)
 400608c:	100d883a 	mov	r6,r2
 4006090:	180f883a 	mov	r7,r3
 4006094:	e009883a 	mov	r4,fp
 4006098:	102d883a 	mov	r22,r2
 400609c:	182b883a 	mov	r21,r3
 40060a0:	400aae80 	call	400aae8 <__subdf3>
 40060a4:	d9400817 	ldw	r5,32(sp)
 40060a8:	100d883a 	mov	r6,r2
 40060ac:	180f883a 	mov	r7,r3
 40060b0:	e009883a 	mov	r4,fp
 40060b4:	182f883a 	mov	r23,r3
 40060b8:	d8800915 	stw	r2,36(sp)
 40060bc:	400aae80 	call	400aae8 <__subdf3>
 40060c0:	b00d883a 	mov	r6,r22
 40060c4:	a80f883a 	mov	r7,r21
 40060c8:	1009883a 	mov	r4,r2
 40060cc:	180b883a 	mov	r5,r3
 40060d0:	400aae80 	call	400aae8 <__subdf3>
 40060d4:	018b80f4 	movhi	r6,11779
 40060d8:	01cee8f4 	movhi	r7,15267
 40060dc:	319c1cc4 	addi	r6,r6,28787
 40060e0:	39c66284 	addi	r7,r7,6538
 40060e4:	a009883a 	mov	r4,r20
 40060e8:	980b883a 	mov	r5,r19
 40060ec:	102d883a 	mov	r22,r2
 40060f0:	182b883a 	mov	r21,r3
 40060f4:	400a27c0 	call	400a27c <__muldf3>
 40060f8:	b00d883a 	mov	r6,r22
 40060fc:	a80f883a 	mov	r7,r21
 4006100:	1009883a 	mov	r4,r2
 4006104:	180b883a 	mov	r5,r3
 4006108:	400aae80 	call	400aae8 <__subdf3>
 400610c:	d9000917 	ldw	r4,36(sp)
 4006110:	100d883a 	mov	r6,r2
 4006114:	180f883a 	mov	r7,r3
 4006118:	b80b883a 	mov	r5,r23
 400611c:	102d883a 	mov	r22,r2
 4006120:	182b883a 	mov	r21,r3
 4006124:	400aae80 	call	400aae8 <__subdf3>
 4006128:	1019883a 	mov	r12,r2
 400612c:	1804d53a 	srli	r2,r3,20
 4006130:	da000a17 	ldw	r8,40(sp)
 4006134:	83000015 	stw	r12,0(r16)
 4006138:	1081ffcc 	andi	r2,r2,2047
 400613c:	4091c83a 	sub	r8,r8,r2
 4006140:	80c00115 	stw	r3,4(r16)
 4006144:	00800c44 	movi	r2,49
 4006148:	1813883a 	mov	r9,r3
 400614c:	1200730e 	bge	r2,r8,400631c <__ieee754_rem_pio2+0x760>
 4006150:	01cee8f4 	movhi	r7,15267
 4006154:	39c66284 	addi	r7,r7,6538
 4006158:	018b8034 	movhi	r6,11776
 400615c:	a009883a 	mov	r4,r20
 4006160:	980b883a 	mov	r5,r19
 4006164:	400a27c0 	call	400a27c <__muldf3>
 4006168:	d9000917 	ldw	r4,36(sp)
 400616c:	100d883a 	mov	r6,r2
 4006170:	180f883a 	mov	r7,r3
 4006174:	b80b883a 	mov	r5,r23
 4006178:	102d883a 	mov	r22,r2
 400617c:	182b883a 	mov	r21,r3
 4006180:	400aae80 	call	400aae8 <__subdf3>
 4006184:	d9000917 	ldw	r4,36(sp)
 4006188:	100d883a 	mov	r6,r2
 400618c:	180f883a 	mov	r7,r3
 4006190:	b80b883a 	mov	r5,r23
 4006194:	d8c00b15 	stw	r3,44(sp)
 4006198:	d8800a15 	stw	r2,40(sp)
 400619c:	400aae80 	call	400aae8 <__subdf3>
 40061a0:	b00d883a 	mov	r6,r22
 40061a4:	a80f883a 	mov	r7,r21
 40061a8:	1009883a 	mov	r4,r2
 40061ac:	180b883a 	mov	r5,r3
 40061b0:	400aae80 	call	400aae8 <__subdf3>
 40061b4:	01894834 	movhi	r6,9504
 40061b8:	01ce5f34 	movhi	r7,14716
 40061bc:	31927044 	addi	r6,r6,18881
 40061c0:	39e0e684 	addi	r7,r7,-31846
 40061c4:	a009883a 	mov	r4,r20
 40061c8:	980b883a 	mov	r5,r19
 40061cc:	102d883a 	mov	r22,r2
 40061d0:	182b883a 	mov	r21,r3
 40061d4:	400a27c0 	call	400a27c <__muldf3>
 40061d8:	b00d883a 	mov	r6,r22
 40061dc:	a80f883a 	mov	r7,r21
 40061e0:	1009883a 	mov	r4,r2
 40061e4:	180b883a 	mov	r5,r3
 40061e8:	400aae80 	call	400aae8 <__subdf3>
 40061ec:	dac00a17 	ldw	r11,40(sp)
 40061f0:	da800b17 	ldw	r10,44(sp)
 40061f4:	102d883a 	mov	r22,r2
 40061f8:	182b883a 	mov	r21,r3
 40061fc:	100d883a 	mov	r6,r2
 4006200:	180f883a 	mov	r7,r3
 4006204:	5809883a 	mov	r4,r11
 4006208:	500b883a 	mov	r5,r10
 400620c:	003f6a06 	br	4005fb8 <__alt_data_end+0xfc005fb8>
 4006210:	4008da80 	call	4008da8 <__adddf3>
 4006214:	1025883a 	mov	r18,r2
 4006218:	008ffe74 	movhi	r2,16377
 400621c:	10887ec4 	addi	r2,r2,8699
 4006220:	1823883a 	mov	r17,r3
 4006224:	b8802226 	beq	r23,r2,40062b0 <__ieee754_rem_pio2+0x6f4>
 4006228:	018698b4 	movhi	r6,6754
 400622c:	01cf7474 	movhi	r7,15825
 4006230:	3198cc44 	addi	r6,r6,25393
 4006234:	39ed1844 	addi	r7,r7,-19359
 4006238:	9009883a 	mov	r4,r18
 400623c:	180b883a 	mov	r5,r3
 4006240:	4008da80 	call	4008da8 <__adddf3>
 4006244:	100d883a 	mov	r6,r2
 4006248:	180f883a 	mov	r7,r3
 400624c:	9009883a 	mov	r4,r18
 4006250:	880b883a 	mov	r5,r17
 4006254:	80800015 	stw	r2,0(r16)
 4006258:	80c00115 	stw	r3,4(r16)
 400625c:	400aae80 	call	400aae8 <__subdf3>
 4006260:	018698b4 	movhi	r6,6754
 4006264:	01cf7474 	movhi	r7,15825
 4006268:	3198cc44 	addi	r6,r6,25393
 400626c:	39ed1844 	addi	r7,r7,-19359
 4006270:	1009883a 	mov	r4,r2
 4006274:	180b883a 	mov	r5,r3
 4006278:	4008da80 	call	4008da8 <__adddf3>
 400627c:	80800215 	stw	r2,8(r16)
 4006280:	80c00315 	stw	r3,12(r16)
 4006284:	00bfffc4 	movi	r2,-1
 4006288:	003edc06 	br	4005dfc <__alt_data_end+0xfc005dfc>
 400628c:	01c000c4 	movi	r7,3
 4006290:	003ec306 	br	4005da0 <__alt_data_end+0xfc005da0>
 4006294:	4a60003c 	xorhi	r9,r9,32768
 4006298:	18e0003c 	xorhi	r3,r3,32768
 400629c:	83000015 	stw	r12,0(r16)
 40062a0:	82400115 	stw	r9,4(r16)
 40062a4:	80c00315 	stw	r3,12(r16)
 40062a8:	0485c83a 	sub	r2,zero,r18
 40062ac:	003ed306 	br	4005dfc <__alt_data_end+0xfc005dfc>
 40062b0:	01cf7474 	movhi	r7,15825
 40062b4:	9009883a 	mov	r4,r18
 40062b8:	39ed1844 	addi	r7,r7,-19359
 40062bc:	01869834 	movhi	r6,6752
 40062c0:	180b883a 	mov	r5,r3
 40062c4:	4008da80 	call	4008da8 <__adddf3>
 40062c8:	018b80f4 	movhi	r6,11779
 40062cc:	01cee8f4 	movhi	r7,15267
 40062d0:	319c1cc4 	addi	r6,r6,28787
 40062d4:	39c66284 	addi	r7,r7,6538
 40062d8:	1009883a 	mov	r4,r2
 40062dc:	180b883a 	mov	r5,r3
 40062e0:	1025883a 	mov	r18,r2
 40062e4:	1823883a 	mov	r17,r3
 40062e8:	4008da80 	call	4008da8 <__adddf3>
 40062ec:	100d883a 	mov	r6,r2
 40062f0:	180f883a 	mov	r7,r3
 40062f4:	9009883a 	mov	r4,r18
 40062f8:	880b883a 	mov	r5,r17
 40062fc:	80800015 	stw	r2,0(r16)
 4006300:	80c00115 	stw	r3,4(r16)
 4006304:	400aae80 	call	400aae8 <__subdf3>
 4006308:	018b80f4 	movhi	r6,11779
 400630c:	01cee8f4 	movhi	r7,15267
 4006310:	319c1cc4 	addi	r6,r6,28787
 4006314:	39c66284 	addi	r7,r7,6538
 4006318:	003fd506 	br	4006270 <__alt_data_end+0xfc006270>
 400631c:	dac00917 	ldw	r11,36(sp)
 4006320:	b815883a 	mov	r10,r23
 4006324:	003f2b06 	br	4005fd4 <__alt_data_end+0xfc005fd4>

04006328 <__ieee754_sqrt>:
 4006328:	defffd04 	addi	sp,sp,-12
 400632c:	dc400115 	stw	r17,4(sp)
 4006330:	dc000015 	stw	r16,0(sp)
 4006334:	dfc00215 	stw	ra,8(sp)
 4006338:	28dffc2c 	andhi	r3,r5,32752
 400633c:	009ffc34 	movhi	r2,32752
 4006340:	2821883a 	mov	r16,r5
 4006344:	2023883a 	mov	r17,r4
 4006348:	200d883a 	mov	r6,r4
 400634c:	18807b26 	beq	r3,r2,400653c <__ieee754_sqrt+0x214>
 4006350:	01405f0e 	bge	zero,r5,40064d0 <__ieee754_sqrt+0x1a8>
 4006354:	2815d53a 	srai	r10,r5,20
 4006358:	50006a26 	beq	r10,zero,4006504 <__ieee754_sqrt+0x1dc>
 400635c:	00c00434 	movhi	r3,16
 4006360:	52bf0044 	addi	r10,r10,-1023
 4006364:	18ffffc4 	addi	r3,r3,-1
 4006368:	80c6703a 	and	r3,r16,r3
 400636c:	5080004c 	andi	r2,r10,1
 4006370:	18c00434 	orhi	r3,r3,16
 4006374:	1000511e 	bne	r2,zero,40064bc <__ieee754_sqrt+0x194>
 4006378:	3004d7fa 	srli	r2,r6,31
 400637c:	5015d07a 	srai	r10,r10,1
 4006380:	18c7883a 	add	r3,r3,r3
 4006384:	10c5883a 	add	r2,r2,r3
 4006388:	01400584 	movi	r5,22
 400638c:	3187883a 	add	r3,r6,r6
 4006390:	0013883a 	mov	r9,zero
 4006394:	000f883a 	mov	r7,zero
 4006398:	01000834 	movhi	r4,32
 400639c:	390d883a 	add	r6,r7,r4
 40063a0:	1810d7fa 	srli	r8,r3,31
 40063a4:	297fffc4 	addi	r5,r5,-1
 40063a8:	11800316 	blt	r2,r6,40063b8 <__ieee754_sqrt+0x90>
 40063ac:	1185c83a 	sub	r2,r2,r6
 40063b0:	310f883a 	add	r7,r6,r4
 40063b4:	4913883a 	add	r9,r9,r4
 40063b8:	1085883a 	add	r2,r2,r2
 40063bc:	4085883a 	add	r2,r8,r2
 40063c0:	18c7883a 	add	r3,r3,r3
 40063c4:	2008d07a 	srli	r4,r4,1
 40063c8:	283ff41e 	bne	r5,zero,400639c <__alt_data_end+0xfc00639c>
 40063cc:	01200034 	movhi	r4,32768
 40063d0:	01800804 	movi	r6,32
 40063d4:	0011883a 	mov	r8,zero
 40063d8:	0019883a 	mov	r12,zero
 40063dc:	201b883a 	mov	r13,r4
 40063e0:	00000806 	br	4006404 <__ieee754_sqrt+0xdc>
 40063e4:	38801726 	beq	r7,r2,4006444 <__ieee754_sqrt+0x11c>
 40063e8:	180ad7fa 	srli	r5,r3,31
 40063ec:	1085883a 	add	r2,r2,r2
 40063f0:	31bfffc4 	addi	r6,r6,-1
 40063f4:	2885883a 	add	r2,r5,r2
 40063f8:	18c7883a 	add	r3,r3,r3
 40063fc:	2008d07a 	srli	r4,r4,1
 4006400:	30001726 	beq	r6,zero,4006460 <__ieee754_sqrt+0x138>
 4006404:	230b883a 	add	r5,r4,r12
 4006408:	38bff60e 	bge	r7,r2,40063e4 <__alt_data_end+0xfc0063e4>
 400640c:	2ae0002c 	andhi	r11,r5,32768
 4006410:	2919883a 	add	r12,r5,r4
 4006414:	5b400826 	beq	r11,r13,4006438 <__ieee754_sqrt+0x110>
 4006418:	3817883a 	mov	r11,r7
 400641c:	11c5c83a 	sub	r2,r2,r7
 4006420:	1940012e 	bgeu	r3,r5,4006428 <__ieee754_sqrt+0x100>
 4006424:	10bfffc4 	addi	r2,r2,-1
 4006428:	1947c83a 	sub	r3,r3,r5
 400642c:	4111883a 	add	r8,r8,r4
 4006430:	580f883a 	mov	r7,r11
 4006434:	003fec06 	br	40063e8 <__alt_data_end+0xfc0063e8>
 4006438:	603ff716 	blt	r12,zero,4006418 <__alt_data_end+0xfc006418>
 400643c:	3ac00044 	addi	r11,r7,1
 4006440:	003ff606 	br	400641c <__alt_data_end+0xfc00641c>
 4006444:	19401936 	bltu	r3,r5,40064ac <__ieee754_sqrt+0x184>
 4006448:	2ae0002c 	andhi	r11,r5,32768
 400644c:	2919883a 	add	r12,r5,r4
 4006450:	5b404526 	beq	r11,r13,4006568 <__ieee754_sqrt+0x240>
 4006454:	1017883a 	mov	r11,r2
 4006458:	0005883a 	mov	r2,zero
 400645c:	003ff206 	br	4006428 <__alt_data_end+0xfc006428>
 4006460:	10c4b03a 	or	r2,r2,r3
 4006464:	10000426 	beq	r2,zero,4006478 <__ieee754_sqrt+0x150>
 4006468:	00bfffc4 	movi	r2,-1
 400646c:	40804026 	beq	r8,r2,4006570 <__ieee754_sqrt+0x248>
 4006470:	4080004c 	andi	r2,r8,1
 4006474:	4091883a 	add	r8,r8,r2
 4006478:	4004d07a 	srli	r2,r8,1
 400647c:	4807d07a 	srai	r3,r9,1
 4006480:	010ff834 	movhi	r4,16352
 4006484:	4a40004c 	andi	r9,r9,1
 4006488:	1909883a 	add	r4,r3,r4
 400648c:	4800091e 	bne	r9,zero,40064b4 <__ieee754_sqrt+0x18c>
 4006490:	5006953a 	slli	r3,r10,20
 4006494:	1907883a 	add	r3,r3,r4
 4006498:	dfc00217 	ldw	ra,8(sp)
 400649c:	dc400117 	ldw	r17,4(sp)
 40064a0:	dc000017 	ldw	r16,0(sp)
 40064a4:	dec00304 	addi	sp,sp,12
 40064a8:	f800283a 	ret
 40064ac:	3805883a 	mov	r2,r7
 40064b0:	003fcd06 	br	40063e8 <__alt_data_end+0xfc0063e8>
 40064b4:	10a00034 	orhi	r2,r2,32768
 40064b8:	003ff506 	br	4006490 <__alt_data_end+0xfc006490>
 40064bc:	3004d7fa 	srli	r2,r6,31
 40064c0:	18c7883a 	add	r3,r3,r3
 40064c4:	318d883a 	add	r6,r6,r6
 40064c8:	10c7883a 	add	r3,r2,r3
 40064cc:	003faa06 	br	4006378 <__alt_data_end+0xfc006378>
 40064d0:	00a00034 	movhi	r2,32768
 40064d4:	10bfffc4 	addi	r2,r2,-1
 40064d8:	2884703a 	and	r2,r5,r2
 40064dc:	1104b03a 	or	r2,r2,r4
 40064e0:	10001e26 	beq	r2,zero,400655c <__ieee754_sqrt+0x234>
 40064e4:	2800291e 	bne	r5,zero,400658c <__ieee754_sqrt+0x264>
 40064e8:	0015883a 	mov	r10,zero
 40064ec:	3020d2fa 	srli	r16,r6,11
 40064f0:	52bffac4 	addi	r10,r10,-21
 40064f4:	300c957a 	slli	r6,r6,21
 40064f8:	803ffc26 	beq	r16,zero,40064ec <__alt_data_end+0xfc0064ec>
 40064fc:	8080042c 	andhi	r2,r16,16
 4006500:	10001e1e 	bne	r2,zero,400657c <__ieee754_sqrt+0x254>
 4006504:	0005883a 	mov	r2,zero
 4006508:	00000106 	br	4006510 <__ieee754_sqrt+0x1e8>
 400650c:	1805883a 	mov	r2,r3
 4006510:	8421883a 	add	r16,r16,r16
 4006514:	8100042c 	andhi	r4,r16,16
 4006518:	10c00044 	addi	r3,r2,1
 400651c:	203ffb26 	beq	r4,zero,400650c <__alt_data_end+0xfc00650c>
 4006520:	01000804 	movi	r4,32
 4006524:	20c9c83a 	sub	r4,r4,r3
 4006528:	3108d83a 	srl	r4,r6,r4
 400652c:	5095c83a 	sub	r10,r10,r2
 4006530:	30cc983a 	sll	r6,r6,r3
 4006534:	2420b03a 	or	r16,r4,r16
 4006538:	003f8806 	br	400635c <__alt_data_end+0xfc00635c>
 400653c:	280f883a 	mov	r7,r5
 4006540:	400a27c0 	call	400a27c <__muldf3>
 4006544:	880d883a 	mov	r6,r17
 4006548:	800f883a 	mov	r7,r16
 400654c:	1009883a 	mov	r4,r2
 4006550:	180b883a 	mov	r5,r3
 4006554:	4008da80 	call	4008da8 <__adddf3>
 4006558:	003fcf06 	br	4006498 <__alt_data_end+0xfc006498>
 400655c:	2005883a 	mov	r2,r4
 4006560:	2807883a 	mov	r3,r5
 4006564:	003fcc06 	br	4006498 <__alt_data_end+0xfc006498>
 4006568:	603fba16 	blt	r12,zero,4006454 <__alt_data_end+0xfc006454>
 400656c:	003fb306 	br	400643c <__alt_data_end+0xfc00643c>
 4006570:	4a400044 	addi	r9,r9,1
 4006574:	0005883a 	mov	r2,zero
 4006578:	003fc006 	br	400647c <__alt_data_end+0xfc00647c>
 400657c:	01000804 	movi	r4,32
 4006580:	00bfffc4 	movi	r2,-1
 4006584:	0007883a 	mov	r3,zero
 4006588:	003fe706 	br	4006528 <__alt_data_end+0xfc006528>
 400658c:	200d883a 	mov	r6,r4
 4006590:	280f883a 	mov	r7,r5
 4006594:	400aae80 	call	400aae8 <__subdf3>
 4006598:	100d883a 	mov	r6,r2
 400659c:	180f883a 	mov	r7,r3
 40065a0:	1009883a 	mov	r4,r2
 40065a4:	180b883a 	mov	r5,r3
 40065a8:	40096540 	call	4009654 <__divdf3>
 40065ac:	003fba06 	br	4006498 <__alt_data_end+0xfc006498>

040065b0 <__kernel_cos>:
 40065b0:	defff304 	addi	sp,sp,-52
 40065b4:	dc000315 	stw	r16,12(sp)
 40065b8:	04200034 	movhi	r16,32768
 40065bc:	843fffc4 	addi	r16,r16,-1
 40065c0:	008f9034 	movhi	r2,15936
 40065c4:	df000b15 	stw	fp,44(sp)
 40065c8:	ddc00a15 	stw	r23,40(sp)
 40065cc:	dd800915 	stw	r22,36(sp)
 40065d0:	dcc00615 	stw	r19,24(sp)
 40065d4:	dfc00c15 	stw	ra,48(sp)
 40065d8:	dd400815 	stw	r21,32(sp)
 40065dc:	dd000715 	stw	r20,28(sp)
 40065e0:	dc800515 	stw	r18,20(sp)
 40065e4:	dc400415 	stw	r17,16(sp)
 40065e8:	2c20703a 	and	r16,r5,r16
 40065ec:	10bfffc4 	addi	r2,r2,-1
 40065f0:	2827883a 	mov	r19,r5
 40065f4:	202d883a 	mov	r22,r4
 40065f8:	302f883a 	mov	r23,r6
 40065fc:	3839883a 	mov	fp,r7
 4006600:	14007516 	blt	r2,r16,40067d8 <__kernel_cos+0x228>
 4006604:	400b3e40 	call	400b3e4 <__fixdfsi>
 4006608:	10010f26 	beq	r2,zero,4006a48 <__kernel_cos+0x498>
 400660c:	b00d883a 	mov	r6,r22
 4006610:	980f883a 	mov	r7,r19
 4006614:	b009883a 	mov	r4,r22
 4006618:	980b883a 	mov	r5,r19
 400661c:	400a27c0 	call	400a27c <__muldf3>
 4006620:	01afa234 	movhi	r6,48776
 4006624:	01ef6a74 	movhi	r7,48553
 4006628:	318e3504 	addi	r6,r6,14548
 400662c:	39feba44 	addi	r7,r7,-1303
 4006630:	1009883a 	mov	r4,r2
 4006634:	180b883a 	mov	r5,r3
 4006638:	102b883a 	mov	r21,r2
 400663c:	1829883a 	mov	r20,r3
 4006640:	400a27c0 	call	400a27c <__muldf3>
 4006644:	01af6d74 	movhi	r6,48565
 4006648:	01cf88b4 	movhi	r7,15906
 400664c:	31ac7104 	addi	r6,r6,-20028
 4006650:	39fba784 	addi	r7,r7,-4450
 4006654:	1009883a 	mov	r4,r2
 4006658:	180b883a 	mov	r5,r3
 400665c:	4008da80 	call	4008da8 <__adddf3>
 4006660:	a80d883a 	mov	r6,r21
 4006664:	a00f883a 	mov	r7,r20
 4006668:	1009883a 	mov	r4,r2
 400666c:	180b883a 	mov	r5,r3
 4006670:	400a27c0 	call	400a27c <__muldf3>
 4006674:	01a02734 	movhi	r6,32924
 4006678:	01cfa4b4 	movhi	r7,16018
 400667c:	3194ab44 	addi	r6,r6,21165
 4006680:	39df93c4 	addi	r7,r7,32335
 4006684:	1009883a 	mov	r4,r2
 4006688:	180b883a 	mov	r5,r3
 400668c:	400aae80 	call	400aae8 <__subdf3>
 4006690:	a80d883a 	mov	r6,r21
 4006694:	a00f883a 	mov	r7,r20
 4006698:	1009883a 	mov	r4,r2
 400669c:	180b883a 	mov	r5,r3
 40066a0:	400a27c0 	call	400a27c <__muldf3>
 40066a4:	018672f4 	movhi	r6,6603
 40066a8:	01cfbeb4 	movhi	r7,16122
 40066ac:	31856404 	addi	r6,r6,5520
 40066b0:	39c06804 	addi	r7,r7,416
 40066b4:	1009883a 	mov	r4,r2
 40066b8:	180b883a 	mov	r5,r3
 40066bc:	4008da80 	call	4008da8 <__adddf3>
 40066c0:	a80d883a 	mov	r6,r21
 40066c4:	a00f883a 	mov	r7,r20
 40066c8:	1009883a 	mov	r4,r2
 40066cc:	180b883a 	mov	r5,r3
 40066d0:	400a27c0 	call	400a27c <__muldf3>
 40066d4:	0185b074 	movhi	r6,5825
 40066d8:	01cfd5f4 	movhi	r7,16215
 40066dc:	31945dc4 	addi	r6,r6,20855
 40066e0:	39f05b04 	addi	r7,r7,-16020
 40066e4:	1009883a 	mov	r4,r2
 40066e8:	180b883a 	mov	r5,r3
 40066ec:	400aae80 	call	400aae8 <__subdf3>
 40066f0:	a80d883a 	mov	r6,r21
 40066f4:	a00f883a 	mov	r7,r20
 40066f8:	1009883a 	mov	r4,r2
 40066fc:	180b883a 	mov	r5,r3
 4006700:	400a27c0 	call	400a27c <__muldf3>
 4006704:	01955574 	movhi	r6,21845
 4006708:	01cfe974 	movhi	r7,16293
 400670c:	31955304 	addi	r6,r6,21836
 4006710:	39d55544 	addi	r7,r7,21845
 4006714:	1009883a 	mov	r4,r2
 4006718:	180b883a 	mov	r5,r3
 400671c:	4008da80 	call	4008da8 <__adddf3>
 4006720:	a80d883a 	mov	r6,r21
 4006724:	a00f883a 	mov	r7,r20
 4006728:	1009883a 	mov	r4,r2
 400672c:	180b883a 	mov	r5,r3
 4006730:	400a27c0 	call	400a27c <__muldf3>
 4006734:	1017883a 	mov	r11,r2
 4006738:	1815883a 	mov	r10,r3
 400673c:	a809883a 	mov	r4,r21
 4006740:	a00b883a 	mov	r5,r20
 4006744:	000d883a 	mov	r6,zero
 4006748:	01cff834 	movhi	r7,16352
 400674c:	da800215 	stw	r10,8(sp)
 4006750:	dac00115 	stw	r11,4(sp)
 4006754:	400a27c0 	call	400a27c <__muldf3>
 4006758:	dac00117 	ldw	r11,4(sp)
 400675c:	da800217 	ldw	r10,8(sp)
 4006760:	a809883a 	mov	r4,r21
 4006764:	580d883a 	mov	r6,r11
 4006768:	500f883a 	mov	r7,r10
 400676c:	a00b883a 	mov	r5,r20
 4006770:	1023883a 	mov	r17,r2
 4006774:	1821883a 	mov	r16,r3
 4006778:	400a27c0 	call	400a27c <__muldf3>
 400677c:	b80d883a 	mov	r6,r23
 4006780:	e00f883a 	mov	r7,fp
 4006784:	b009883a 	mov	r4,r22
 4006788:	980b883a 	mov	r5,r19
 400678c:	1029883a 	mov	r20,r2
 4006790:	1825883a 	mov	r18,r3
 4006794:	400a27c0 	call	400a27c <__muldf3>
 4006798:	a009883a 	mov	r4,r20
 400679c:	900b883a 	mov	r5,r18
 40067a0:	100d883a 	mov	r6,r2
 40067a4:	180f883a 	mov	r7,r3
 40067a8:	400aae80 	call	400aae8 <__subdf3>
 40067ac:	8809883a 	mov	r4,r17
 40067b0:	800b883a 	mov	r5,r16
 40067b4:	100d883a 	mov	r6,r2
 40067b8:	180f883a 	mov	r7,r3
 40067bc:	400aae80 	call	400aae8 <__subdf3>
 40067c0:	100d883a 	mov	r6,r2
 40067c4:	180f883a 	mov	r7,r3
 40067c8:	0009883a 	mov	r4,zero
 40067cc:	014ffc34 	movhi	r5,16368
 40067d0:	400aae80 	call	400aae8 <__subdf3>
 40067d4:	00008b06 	br	4006a04 <__kernel_cos+0x454>
 40067d8:	200d883a 	mov	r6,r4
 40067dc:	280f883a 	mov	r7,r5
 40067e0:	400a27c0 	call	400a27c <__muldf3>
 40067e4:	01afa234 	movhi	r6,48776
 40067e8:	01ef6a74 	movhi	r7,48553
 40067ec:	318e3504 	addi	r6,r6,14548
 40067f0:	39feba44 	addi	r7,r7,-1303
 40067f4:	1009883a 	mov	r4,r2
 40067f8:	180b883a 	mov	r5,r3
 40067fc:	1025883a 	mov	r18,r2
 4006800:	1823883a 	mov	r17,r3
 4006804:	400a27c0 	call	400a27c <__muldf3>
 4006808:	01af6d74 	movhi	r6,48565
 400680c:	01cf88b4 	movhi	r7,15906
 4006810:	31ac7104 	addi	r6,r6,-20028
 4006814:	39fba784 	addi	r7,r7,-4450
 4006818:	1009883a 	mov	r4,r2
 400681c:	180b883a 	mov	r5,r3
 4006820:	4008da80 	call	4008da8 <__adddf3>
 4006824:	900d883a 	mov	r6,r18
 4006828:	880f883a 	mov	r7,r17
 400682c:	1009883a 	mov	r4,r2
 4006830:	180b883a 	mov	r5,r3
 4006834:	400a27c0 	call	400a27c <__muldf3>
 4006838:	01a02734 	movhi	r6,32924
 400683c:	01cfa4b4 	movhi	r7,16018
 4006840:	3194ab44 	addi	r6,r6,21165
 4006844:	39df93c4 	addi	r7,r7,32335
 4006848:	1009883a 	mov	r4,r2
 400684c:	180b883a 	mov	r5,r3
 4006850:	400aae80 	call	400aae8 <__subdf3>
 4006854:	900d883a 	mov	r6,r18
 4006858:	880f883a 	mov	r7,r17
 400685c:	1009883a 	mov	r4,r2
 4006860:	180b883a 	mov	r5,r3
 4006864:	400a27c0 	call	400a27c <__muldf3>
 4006868:	018672f4 	movhi	r6,6603
 400686c:	01cfbeb4 	movhi	r7,16122
 4006870:	31856404 	addi	r6,r6,5520
 4006874:	39c06804 	addi	r7,r7,416
 4006878:	1009883a 	mov	r4,r2
 400687c:	180b883a 	mov	r5,r3
 4006880:	4008da80 	call	4008da8 <__adddf3>
 4006884:	900d883a 	mov	r6,r18
 4006888:	880f883a 	mov	r7,r17
 400688c:	1009883a 	mov	r4,r2
 4006890:	180b883a 	mov	r5,r3
 4006894:	400a27c0 	call	400a27c <__muldf3>
 4006898:	0185b074 	movhi	r6,5825
 400689c:	01cfd5f4 	movhi	r7,16215
 40068a0:	31945dc4 	addi	r6,r6,20855
 40068a4:	39f05b04 	addi	r7,r7,-16020
 40068a8:	1009883a 	mov	r4,r2
 40068ac:	180b883a 	mov	r5,r3
 40068b0:	400aae80 	call	400aae8 <__subdf3>
 40068b4:	900d883a 	mov	r6,r18
 40068b8:	880f883a 	mov	r7,r17
 40068bc:	1009883a 	mov	r4,r2
 40068c0:	180b883a 	mov	r5,r3
 40068c4:	400a27c0 	call	400a27c <__muldf3>
 40068c8:	01955574 	movhi	r6,21845
 40068cc:	01cfe974 	movhi	r7,16293
 40068d0:	31955304 	addi	r6,r6,21836
 40068d4:	39d55544 	addi	r7,r7,21845
 40068d8:	1009883a 	mov	r4,r2
 40068dc:	180b883a 	mov	r5,r3
 40068e0:	4008da80 	call	4008da8 <__adddf3>
 40068e4:	900d883a 	mov	r6,r18
 40068e8:	880f883a 	mov	r7,r17
 40068ec:	1009883a 	mov	r4,r2
 40068f0:	180b883a 	mov	r5,r3
 40068f4:	400a27c0 	call	400a27c <__muldf3>
 40068f8:	1013883a 	mov	r9,r2
 40068fc:	1017883a 	mov	r11,r2
 4006900:	008ff4f4 	movhi	r2,16339
 4006904:	108ccc84 	addi	r2,r2,13106
 4006908:	1811883a 	mov	r8,r3
 400690c:	902b883a 	mov	r21,r18
 4006910:	8829883a 	mov	r20,r17
 4006914:	1815883a 	mov	r10,r3
 4006918:	143f880e 	bge	r2,r16,400673c <__alt_data_end+0xfc00673c>
 400691c:	008ffa74 	movhi	r2,16361
 4006920:	14004416 	blt	r2,r16,4006a34 <__kernel_cos+0x484>
 4006924:	00bff834 	movhi	r2,65504
 4006928:	80a1883a 	add	r16,r16,r2
 400692c:	000d883a 	mov	r6,zero
 4006930:	800f883a 	mov	r7,r16
 4006934:	0009883a 	mov	r4,zero
 4006938:	014ffc34 	movhi	r5,16368
 400693c:	da400115 	stw	r9,4(sp)
 4006940:	d8c00215 	stw	r3,8(sp)
 4006944:	400aae80 	call	400aae8 <__subdf3>
 4006948:	da000217 	ldw	r8,8(sp)
 400694c:	da400117 	ldw	r9,4(sp)
 4006950:	102b883a 	mov	r21,r2
 4006954:	d8c00015 	stw	r3,0(sp)
 4006958:	9009883a 	mov	r4,r18
 400695c:	880b883a 	mov	r5,r17
 4006960:	000d883a 	mov	r6,zero
 4006964:	01cff834 	movhi	r7,16352
 4006968:	da000215 	stw	r8,8(sp)
 400696c:	da400115 	stw	r9,4(sp)
 4006970:	400a27c0 	call	400a27c <__muldf3>
 4006974:	800f883a 	mov	r7,r16
 4006978:	000d883a 	mov	r6,zero
 400697c:	1009883a 	mov	r4,r2
 4006980:	180b883a 	mov	r5,r3
 4006984:	400aae80 	call	400aae8 <__subdf3>
 4006988:	da400117 	ldw	r9,4(sp)
 400698c:	da000217 	ldw	r8,8(sp)
 4006990:	9009883a 	mov	r4,r18
 4006994:	480d883a 	mov	r6,r9
 4006998:	400f883a 	mov	r7,r8
 400699c:	880b883a 	mov	r5,r17
 40069a0:	1029883a 	mov	r20,r2
 40069a4:	1821883a 	mov	r16,r3
 40069a8:	400a27c0 	call	400a27c <__muldf3>
 40069ac:	b80d883a 	mov	r6,r23
 40069b0:	e00f883a 	mov	r7,fp
 40069b4:	b009883a 	mov	r4,r22
 40069b8:	980b883a 	mov	r5,r19
 40069bc:	1025883a 	mov	r18,r2
 40069c0:	1823883a 	mov	r17,r3
 40069c4:	400a27c0 	call	400a27c <__muldf3>
 40069c8:	100d883a 	mov	r6,r2
 40069cc:	180f883a 	mov	r7,r3
 40069d0:	9009883a 	mov	r4,r18
 40069d4:	880b883a 	mov	r5,r17
 40069d8:	400aae80 	call	400aae8 <__subdf3>
 40069dc:	100d883a 	mov	r6,r2
 40069e0:	180f883a 	mov	r7,r3
 40069e4:	a009883a 	mov	r4,r20
 40069e8:	800b883a 	mov	r5,r16
 40069ec:	400aae80 	call	400aae8 <__subdf3>
 40069f0:	d9400017 	ldw	r5,0(sp)
 40069f4:	100d883a 	mov	r6,r2
 40069f8:	180f883a 	mov	r7,r3
 40069fc:	a809883a 	mov	r4,r21
 4006a00:	400aae80 	call	400aae8 <__subdf3>
 4006a04:	dfc00c17 	ldw	ra,48(sp)
 4006a08:	df000b17 	ldw	fp,44(sp)
 4006a0c:	ddc00a17 	ldw	r23,40(sp)
 4006a10:	dd800917 	ldw	r22,36(sp)
 4006a14:	dd400817 	ldw	r21,32(sp)
 4006a18:	dd000717 	ldw	r20,28(sp)
 4006a1c:	dcc00617 	ldw	r19,24(sp)
 4006a20:	dc800517 	ldw	r18,20(sp)
 4006a24:	dc400417 	ldw	r17,16(sp)
 4006a28:	dc000317 	ldw	r16,12(sp)
 4006a2c:	dec00d04 	addi	sp,sp,52
 4006a30:	f800283a 	ret
 4006a34:	008ff9f4 	movhi	r2,16359
 4006a38:	002b883a 	mov	r21,zero
 4006a3c:	d8800015 	stw	r2,0(sp)
 4006a40:	040ff4b4 	movhi	r16,16338
 4006a44:	003fc406 	br	4006958 <__alt_data_end+0xfc006958>
 4006a48:	0005883a 	mov	r2,zero
 4006a4c:	00cffc34 	movhi	r3,16368
 4006a50:	003fec06 	br	4006a04 <__alt_data_end+0xfc006a04>

04006a54 <__kernel_rem_pio2>:
 4006a54:	deff5a04 	addi	sp,sp,-664
 4006a58:	da00a617 	ldw	r8,664(sp)
 4006a5c:	00c100b4 	movhi	r3,1026
 4006a60:	18eb4304 	addi	r3,r3,-21236
 4006a64:	4205883a 	add	r2,r8,r8
 4006a68:	1085883a 	add	r2,r2,r2
 4006a6c:	1885883a 	add	r2,r3,r2
 4006a70:	d9008e15 	stw	r4,568(sp)
 4006a74:	d9408f15 	stw	r5,572(sp)
 4006a78:	313fff44 	addi	r4,r6,-3
 4006a7c:	01400604 	movi	r5,24
 4006a80:	dd80a215 	stw	r22,648(sp)
 4006a84:	dc009c15 	stw	r16,624(sp)
 4006a88:	dfc0a515 	stw	ra,660(sp)
 4006a8c:	df00a415 	stw	fp,656(sp)
 4006a90:	ddc0a315 	stw	r23,652(sp)
 4006a94:	dd40a115 	stw	r21,644(sp)
 4006a98:	dd00a015 	stw	r20,640(sp)
 4006a9c:	dcc09f15 	stw	r19,636(sp)
 4006aa0:	dc809e15 	stw	r18,632(sp)
 4006aa4:	dc409d15 	stw	r17,628(sp)
 4006aa8:	3021883a 	mov	r16,r6
 4006aac:	d9c09315 	stw	r7,588(sp)
 4006ab0:	15800017 	ldw	r22,0(r2)
 4006ab4:	4007d000 	call	4007d00 <__divsi3>
 4006ab8:	da009317 	ldw	r8,588(sp)
 4006abc:	d8809215 	stw	r2,584(sp)
 4006ac0:	423fffc4 	addi	r8,r8,-1
 4006ac4:	da008d15 	stw	r8,564(sp)
 4006ac8:	10033d16 	blt	r2,zero,40077c0 <__kernel_rem_pio2+0xd6c>
 4006acc:	da009217 	ldw	r8,584(sp)
 4006ad0:	017ffa04 	movi	r5,-24
 4006ad4:	42000044 	addi	r8,r8,1
 4006ad8:	4009883a 	mov	r4,r8
 4006adc:	da009515 	stw	r8,596(sp)
 4006ae0:	4007eb40 	call	4007eb4 <__mulsi3>
 4006ae4:	da008d17 	ldw	r8,564(sp)
 4006ae8:	1421883a 	add	r16,r2,r16
 4006aec:	d8809217 	ldw	r2,584(sp)
 4006af0:	b207883a 	add	r3,r22,r8
 4006af4:	dc009015 	stw	r16,576(sp)
 4006af8:	1223c83a 	sub	r17,r2,r8
 4006afc:	18001016 	blt	r3,zero,4006b40 <__kernel_rem_pio2+0xec>
 4006b00:	da00a717 	ldw	r8,668(sp)
 4006b04:	8c65883a 	add	r18,r17,r17
 4006b08:	94a5883a 	add	r18,r18,r18
 4006b0c:	1c47883a 	add	r3,r3,r17
 4006b10:	dcc05004 	addi	r19,sp,320
 4006b14:	44a5883a 	add	r18,r8,r18
 4006b18:	1c000044 	addi	r16,r3,1
 4006b1c:	88015316 	blt	r17,zero,400706c <__kernel_rem_pio2+0x618>
 4006b20:	91000017 	ldw	r4,0(r18)
 4006b24:	400b4640 	call	400b464 <__floatsidf>
 4006b28:	98800015 	stw	r2,0(r19)
 4006b2c:	98c00115 	stw	r3,4(r19)
 4006b30:	8c400044 	addi	r17,r17,1
 4006b34:	9cc00204 	addi	r19,r19,8
 4006b38:	94800104 	addi	r18,r18,4
 4006b3c:	8c3ff71e 	bne	r17,r16,4006b1c <__alt_data_end+0xfc006b1c>
 4006b40:	b0002816 	blt	r22,zero,4006be4 <__kernel_rem_pio2+0x190>
 4006b44:	da008d17 	ldw	r8,564(sp)
 4006b48:	b4c00044 	addi	r19,r22,1
 4006b4c:	982690fa 	slli	r19,r19,3
 4006b50:	402490fa 	slli	r18,r8,3
 4006b54:	da008e17 	ldw	r8,568(sp)
 4006b58:	d8805004 	addi	r2,sp,320
 4006b5c:	94000204 	addi	r16,r18,8
 4006b60:	d823883a 	mov	r17,sp
 4006b64:	14a5883a 	add	r18,r2,r18
 4006b68:	dcef883a 	add	r23,sp,r19
 4006b6c:	4421883a 	add	r16,r8,r16
 4006b70:	dd809115 	stw	r22,580(sp)
 4006b74:	4039883a 	mov	fp,r8
 4006b78:	da008d17 	ldw	r8,564(sp)
 4006b7c:	40016016 	blt	r8,zero,4007100 <__kernel_rem_pio2+0x6ac>
 4006b80:	e027883a 	mov	r19,fp
 4006b84:	9029883a 	mov	r20,r18
 4006b88:	002d883a 	mov	r22,zero
 4006b8c:	002b883a 	mov	r21,zero
 4006b90:	a1800017 	ldw	r6,0(r20)
 4006b94:	a1c00117 	ldw	r7,4(r20)
 4006b98:	99000017 	ldw	r4,0(r19)
 4006b9c:	99400117 	ldw	r5,4(r19)
 4006ba0:	9cc00204 	addi	r19,r19,8
 4006ba4:	a53ffe04 	addi	r20,r20,-8
 4006ba8:	400a27c0 	call	400a27c <__muldf3>
 4006bac:	b009883a 	mov	r4,r22
 4006bb0:	a80b883a 	mov	r5,r21
 4006bb4:	100d883a 	mov	r6,r2
 4006bb8:	180f883a 	mov	r7,r3
 4006bbc:	4008da80 	call	4008da8 <__adddf3>
 4006bc0:	102d883a 	mov	r22,r2
 4006bc4:	182b883a 	mov	r21,r3
 4006bc8:	9c3ff11e 	bne	r19,r16,4006b90 <__alt_data_end+0xfc006b90>
 4006bcc:	8d800015 	stw	r22,0(r17)
 4006bd0:	8d400115 	stw	r21,4(r17)
 4006bd4:	8c400204 	addi	r17,r17,8
 4006bd8:	94800204 	addi	r18,r18,8
 4006bdc:	8dffe61e 	bne	r17,r23,4006b78 <__alt_data_end+0xfc006b78>
 4006be0:	dd809117 	ldw	r22,580(sp)
 4006be4:	00d00034 	movhi	r3,16384
 4006be8:	da009317 	ldw	r8,588(sp)
 4006bec:	18ffff84 	addi	r3,r3,-2
 4006bf0:	b0c7883a 	add	r3,r22,r3
 4006bf4:	18c7883a 	add	r3,r3,r3
 4006bf8:	402090fa 	slli	r16,r8,3
 4006bfc:	18c7883a 	add	r3,r3,r3
 4006c00:	da007804 	addi	r8,sp,480
 4006c04:	40d1883a 	add	r8,r8,r3
 4006c08:	b0bfffc4 	addi	r2,r22,-1
 4006c0c:	da009615 	stw	r8,600(sp)
 4006c10:	da008e17 	ldw	r8,568(sp)
 4006c14:	1085883a 	add	r2,r2,r2
 4006c18:	1085883a 	add	r2,r2,r2
 4006c1c:	19000104 	addi	r4,r3,4
 4006c20:	d885883a 	add	r2,sp,r2
 4006c24:	4421883a 	add	r16,r8,r16
 4006c28:	da007804 	addi	r8,sp,480
 4006c2c:	4111883a 	add	r8,r8,r4
 4006c30:	10807804 	addi	r2,r2,480
 4006c34:	da009715 	stw	r8,604(sp)
 4006c38:	b025883a 	mov	r18,r22
 4006c3c:	d8809815 	stw	r2,608(sp)
 4006c40:	dd809415 	stw	r22,592(sp)
 4006c44:	900490fa 	slli	r2,r18,3
 4006c48:	d885883a 	add	r2,sp,r2
 4006c4c:	17000017 	ldw	fp,0(r2)
 4006c50:	15400117 	ldw	r21,4(r2)
 4006c54:	04802b0e 	bge	zero,r18,4006d04 <__kernel_rem_pio2+0x2b0>
 4006c58:	00880034 	movhi	r2,8192
 4006c5c:	10bfffc4 	addi	r2,r2,-1
 4006c60:	90a9883a 	add	r20,r18,r2
 4006c64:	a02890fa 	slli	r20,r20,3
 4006c68:	dc407804 	addi	r17,sp,480
 4006c6c:	dcfffe04 	addi	r19,sp,-8
 4006c70:	dd29883a 	add	r20,sp,r20
 4006c74:	000d883a 	mov	r6,zero
 4006c78:	01cf9c34 	movhi	r7,15984
 4006c7c:	e009883a 	mov	r4,fp
 4006c80:	a80b883a 	mov	r5,r21
 4006c84:	400a27c0 	call	400a27c <__muldf3>
 4006c88:	180b883a 	mov	r5,r3
 4006c8c:	1009883a 	mov	r4,r2
 4006c90:	400b3e40 	call	400b3e4 <__fixdfsi>
 4006c94:	1009883a 	mov	r4,r2
 4006c98:	400b4640 	call	400b464 <__floatsidf>
 4006c9c:	000d883a 	mov	r6,zero
 4006ca0:	01d05c34 	movhi	r7,16752
 4006ca4:	1009883a 	mov	r4,r2
 4006ca8:	180b883a 	mov	r5,r3
 4006cac:	102f883a 	mov	r23,r2
 4006cb0:	182d883a 	mov	r22,r3
 4006cb4:	400a27c0 	call	400a27c <__muldf3>
 4006cb8:	100d883a 	mov	r6,r2
 4006cbc:	180f883a 	mov	r7,r3
 4006cc0:	e009883a 	mov	r4,fp
 4006cc4:	a80b883a 	mov	r5,r21
 4006cc8:	400aae80 	call	400aae8 <__subdf3>
 4006ccc:	180b883a 	mov	r5,r3
 4006cd0:	1009883a 	mov	r4,r2
 4006cd4:	400b3e40 	call	400b3e4 <__fixdfsi>
 4006cd8:	a1800017 	ldw	r6,0(r20)
 4006cdc:	a1c00117 	ldw	r7,4(r20)
 4006ce0:	88800015 	stw	r2,0(r17)
 4006ce4:	b809883a 	mov	r4,r23
 4006ce8:	b00b883a 	mov	r5,r22
 4006cec:	4008da80 	call	4008da8 <__adddf3>
 4006cf0:	a53ffe04 	addi	r20,r20,-8
 4006cf4:	1039883a 	mov	fp,r2
 4006cf8:	182b883a 	mov	r21,r3
 4006cfc:	8c400104 	addi	r17,r17,4
 4006d00:	a4ffdc1e 	bne	r20,r19,4006c74 <__alt_data_end+0xfc006c74>
 4006d04:	d9809017 	ldw	r6,576(sp)
 4006d08:	a80b883a 	mov	r5,r21
 4006d0c:	e009883a 	mov	r4,fp
 4006d10:	4007b480 	call	4007b48 <scalbn>
 4006d14:	000d883a 	mov	r6,zero
 4006d18:	01cff034 	movhi	r7,16320
 4006d1c:	1009883a 	mov	r4,r2
 4006d20:	180b883a 	mov	r5,r3
 4006d24:	1027883a 	mov	r19,r2
 4006d28:	1823883a 	mov	r17,r3
 4006d2c:	400a27c0 	call	400a27c <__muldf3>
 4006d30:	1009883a 	mov	r4,r2
 4006d34:	180b883a 	mov	r5,r3
 4006d38:	40057b00 	call	40057b0 <floor>
 4006d3c:	000d883a 	mov	r6,zero
 4006d40:	01d00834 	movhi	r7,16416
 4006d44:	1009883a 	mov	r4,r2
 4006d48:	180b883a 	mov	r5,r3
 4006d4c:	400a27c0 	call	400a27c <__muldf3>
 4006d50:	100d883a 	mov	r6,r2
 4006d54:	180f883a 	mov	r7,r3
 4006d58:	9809883a 	mov	r4,r19
 4006d5c:	880b883a 	mov	r5,r17
 4006d60:	400aae80 	call	400aae8 <__subdf3>
 4006d64:	180b883a 	mov	r5,r3
 4006d68:	1009883a 	mov	r4,r2
 4006d6c:	1827883a 	mov	r19,r3
 4006d70:	1029883a 	mov	r20,r2
 4006d74:	400b3e40 	call	400b3e4 <__fixdfsi>
 4006d78:	1009883a 	mov	r4,r2
 4006d7c:	1023883a 	mov	r17,r2
 4006d80:	400b4640 	call	400b464 <__floatsidf>
 4006d84:	a009883a 	mov	r4,r20
 4006d88:	100d883a 	mov	r6,r2
 4006d8c:	180f883a 	mov	r7,r3
 4006d90:	980b883a 	mov	r5,r19
 4006d94:	400aae80 	call	400aae8 <__subdf3>
 4006d98:	d9009017 	ldw	r4,576(sp)
 4006d9c:	1013883a 	mov	r9,r2
 4006da0:	102b883a 	mov	r21,r2
 4006da4:	1811883a 	mov	r8,r3
 4006da8:	0100b30e 	bge	zero,r4,4007078 <__kernel_rem_pio2+0x624>
 4006dac:	90bfffc4 	addi	r2,r18,-1
 4006db0:	1085883a 	add	r2,r2,r2
 4006db4:	1085883a 	add	r2,r2,r2
 4006db8:	d885883a 	add	r2,sp,r2
 4006dbc:	10807804 	addi	r2,r2,480
 4006dc0:	d9809017 	ldw	r6,576(sp)
 4006dc4:	11400017 	ldw	r5,0(r2)
 4006dc8:	01000604 	movi	r4,24
 4006dcc:	2189c83a 	sub	r4,r4,r6
 4006dd0:	290dd83a 	sra	r6,r5,r4
 4006dd4:	d9c09017 	ldw	r7,576(sp)
 4006dd8:	04c005c4 	movi	r19,23
 4006ddc:	3108983a 	sll	r4,r6,r4
 4006de0:	99e7c83a 	sub	r19,r19,r7
 4006de4:	89a3883a 	add	r17,r17,r6
 4006de8:	2909c83a 	sub	r4,r5,r4
 4006dec:	24e7d83a 	sra	r19,r4,r19
 4006df0:	11000015 	stw	r4,0(r2)
 4006df4:	04c02a0e 	bge	zero,r19,4006ea0 <__kernel_rem_pio2+0x44c>
 4006df8:	8c400044 	addi	r17,r17,1
 4006dfc:	0481570e 	bge	zero,r18,400735c <__kernel_rem_pio2+0x908>
 4006e00:	02804034 	movhi	r10,256
 4006e04:	52bfffc4 	addi	r10,r10,-1
 4006e08:	d8807804 	addi	r2,sp,480
 4006e0c:	000b883a 	mov	r5,zero
 4006e10:	0029883a 	mov	r20,zero
 4006e14:	01c04034 	movhi	r7,256
 4006e18:	00000706 	br	4006e38 <__kernel_rem_pio2+0x3e4>
 4006e1c:	390dc83a 	sub	r6,r7,r4
 4006e20:	20000226 	beq	r4,zero,4006e2c <__kernel_rem_pio2+0x3d8>
 4006e24:	11800015 	stw	r6,0(r2)
 4006e28:	05000044 	movi	r20,1
 4006e2c:	29400044 	addi	r5,r5,1
 4006e30:	10800104 	addi	r2,r2,4
 4006e34:	2c80080e 	bge	r5,r18,4006e58 <__kernel_rem_pio2+0x404>
 4006e38:	11000017 	ldw	r4,0(r2)
 4006e3c:	a03ff726 	beq	r20,zero,4006e1c <__alt_data_end+0xfc006e1c>
 4006e40:	5109c83a 	sub	r4,r10,r4
 4006e44:	11000015 	stw	r4,0(r2)
 4006e48:	29400044 	addi	r5,r5,1
 4006e4c:	05000044 	movi	r20,1
 4006e50:	10800104 	addi	r2,r2,4
 4006e54:	2cbff816 	blt	r5,r18,4006e38 <__alt_data_end+0xfc006e38>
 4006e58:	d9009017 	ldw	r4,576(sp)
 4006e5c:	01000e0e 	bge	zero,r4,4006e98 <__kernel_rem_pio2+0x444>
 4006e60:	00800044 	movi	r2,1
 4006e64:	20808d26 	beq	r4,r2,400709c <__kernel_rem_pio2+0x648>
 4006e68:	00800084 	movi	r2,2
 4006e6c:	20800a1e 	bne	r4,r2,4006e98 <__kernel_rem_pio2+0x444>
 4006e70:	90bfffc4 	addi	r2,r18,-1
 4006e74:	1085883a 	add	r2,r2,r2
 4006e78:	1085883a 	add	r2,r2,r2
 4006e7c:	d885883a 	add	r2,sp,r2
 4006e80:	10807804 	addi	r2,r2,480
 4006e84:	11400017 	ldw	r5,0(r2)
 4006e88:	01001034 	movhi	r4,64
 4006e8c:	213fffc4 	addi	r4,r4,-1
 4006e90:	2908703a 	and	r4,r5,r4
 4006e94:	11000015 	stw	r4,0(r2)
 4006e98:	00800084 	movi	r2,2
 4006e9c:	98805d26 	beq	r19,r2,4007014 <__kernel_rem_pio2+0x5c0>
 4006ea0:	400b883a 	mov	r5,r8
 4006ea4:	000d883a 	mov	r6,zero
 4006ea8:	000f883a 	mov	r7,zero
 4006eac:	a809883a 	mov	r4,r21
 4006eb0:	da009b15 	stw	r8,620(sp)
 4006eb4:	400a0240 	call	400a024 <__eqdf2>
 4006eb8:	da009b17 	ldw	r8,620(sp)
 4006ebc:	10012b1e 	bne	r2,zero,400736c <__kernel_rem_pio2+0x918>
 4006ec0:	da009417 	ldw	r8,592(sp)
 4006ec4:	917fffc4 	addi	r5,r18,-1
 4006ec8:	2a000e16 	blt	r5,r8,4006f04 <__kernel_rem_pio2+0x4b0>
 4006ecc:	00900034 	movhi	r2,16384
 4006ed0:	10bfffc4 	addi	r2,r2,-1
 4006ed4:	9085883a 	add	r2,r18,r2
 4006ed8:	1085883a 	add	r2,r2,r2
 4006edc:	d9809717 	ldw	r6,604(sp)
 4006ee0:	1085883a 	add	r2,r2,r2
 4006ee4:	d9007804 	addi	r4,sp,480
 4006ee8:	0007883a 	mov	r3,zero
 4006eec:	2085883a 	add	r2,r4,r2
 4006ef0:	11000017 	ldw	r4,0(r2)
 4006ef4:	10bfff04 	addi	r2,r2,-4
 4006ef8:	1906b03a 	or	r3,r3,r4
 4006efc:	11bffc1e 	bne	r2,r6,4006ef0 <__alt_data_end+0xfc006ef0>
 4006f00:	1800821e 	bne	r3,zero,400710c <__kernel_rem_pio2+0x6b8>
 4006f04:	da009817 	ldw	r8,608(sp)
 4006f08:	40800017 	ldw	r2,0(r8)
 4006f0c:	1001151e 	bne	r2,zero,4007364 <__kernel_rem_pio2+0x910>
 4006f10:	d8809617 	ldw	r2,600(sp)
 4006f14:	05000044 	movi	r20,1
 4006f18:	10bfff04 	addi	r2,r2,-4
 4006f1c:	10c00117 	ldw	r3,4(r2)
 4006f20:	a5000044 	addi	r20,r20,1
 4006f24:	183ffc26 	beq	r3,zero,4006f18 <__alt_data_end+0xfc006f18>
 4006f28:	9529883a 	add	r20,r18,r20
 4006f2c:	90800044 	addi	r2,r18,1
 4006f30:	dd009115 	stw	r20,580(sp)
 4006f34:	a0803216 	blt	r20,r2,4007000 <__kernel_rem_pio2+0x5ac>
 4006f38:	da009317 	ldw	r8,588(sp)
 4006f3c:	d8c09117 	ldw	r3,580(sp)
 4006f40:	44a3883a 	add	r17,r8,r18
 4006f44:	da009217 	ldw	r8,584(sp)
 4006f48:	882290fa 	slli	r17,r17,3
 4006f4c:	40a5883a 	add	r18,r8,r2
 4006f50:	da009517 	ldw	r8,596(sp)
 4006f54:	100490fa 	slli	r2,r2,3
 4006f58:	94a5883a 	add	r18,r18,r18
 4006f5c:	40eb883a 	add	r21,r8,r3
 4006f60:	da00a717 	ldw	r8,668(sp)
 4006f64:	ad6b883a 	add	r21,r21,r21
 4006f68:	94a5883a 	add	r18,r18,r18
 4006f6c:	ad6b883a 	add	r21,r21,r21
 4006f70:	d8c05004 	addi	r3,sp,320
 4006f74:	44a5883a 	add	r18,r8,r18
 4006f78:	1c63883a 	add	r17,r3,r17
 4006f7c:	d8a7883a 	add	r19,sp,r2
 4006f80:	456b883a 	add	r21,r8,r21
 4006f84:	91000017 	ldw	r4,0(r18)
 4006f88:	400b4640 	call	400b464 <__floatsidf>
 4006f8c:	da008d17 	ldw	r8,564(sp)
 4006f90:	88800015 	stw	r2,0(r17)
 4006f94:	88c00115 	stw	r3,4(r17)
 4006f98:	40001b16 	blt	r8,zero,4007008 <__kernel_rem_pio2+0x5b4>
 4006f9c:	dd008e17 	ldw	r20,568(sp)
 4006fa0:	882d883a 	mov	r22,r17
 4006fa4:	002f883a 	mov	r23,zero
 4006fa8:	0039883a 	mov	fp,zero
 4006fac:	b1800017 	ldw	r6,0(r22)
 4006fb0:	b1c00117 	ldw	r7,4(r22)
 4006fb4:	a1000017 	ldw	r4,0(r20)
 4006fb8:	a1400117 	ldw	r5,4(r20)
 4006fbc:	a5000204 	addi	r20,r20,8
 4006fc0:	b5bffe04 	addi	r22,r22,-8
 4006fc4:	400a27c0 	call	400a27c <__muldf3>
 4006fc8:	b809883a 	mov	r4,r23
 4006fcc:	e00b883a 	mov	r5,fp
 4006fd0:	100d883a 	mov	r6,r2
 4006fd4:	180f883a 	mov	r7,r3
 4006fd8:	4008da80 	call	4008da8 <__adddf3>
 4006fdc:	102f883a 	mov	r23,r2
 4006fe0:	1839883a 	mov	fp,r3
 4006fe4:	a43ff11e 	bne	r20,r16,4006fac <__alt_data_end+0xfc006fac>
 4006fe8:	9dc00015 	stw	r23,0(r19)
 4006fec:	9f000115 	stw	fp,4(r19)
 4006ff0:	94800104 	addi	r18,r18,4
 4006ff4:	8c400204 	addi	r17,r17,8
 4006ff8:	9cc00204 	addi	r19,r19,8
 4006ffc:	957fe11e 	bne	r18,r21,4006f84 <__alt_data_end+0xfc006f84>
 4007000:	dc809117 	ldw	r18,580(sp)
 4007004:	003f0f06 	br	4006c44 <__alt_data_end+0xfc006c44>
 4007008:	002f883a 	mov	r23,zero
 400700c:	0039883a 	mov	fp,zero
 4007010:	003ff506 	br	4006fe8 <__alt_data_end+0xfc006fe8>
 4007014:	480d883a 	mov	r6,r9
 4007018:	180f883a 	mov	r7,r3
 400701c:	0009883a 	mov	r4,zero
 4007020:	014ffc34 	movhi	r5,16368
 4007024:	400aae80 	call	400aae8 <__subdf3>
 4007028:	102b883a 	mov	r21,r2
 400702c:	1811883a 	mov	r8,r3
 4007030:	a03f9b26 	beq	r20,zero,4006ea0 <__alt_data_end+0xfc006ea0>
 4007034:	d9809017 	ldw	r6,576(sp)
 4007038:	0009883a 	mov	r4,zero
 400703c:	014ffc34 	movhi	r5,16368
 4007040:	d8c09b15 	stw	r3,620(sp)
 4007044:	4007b480 	call	4007b48 <scalbn>
 4007048:	da009b17 	ldw	r8,620(sp)
 400704c:	a809883a 	mov	r4,r21
 4007050:	100d883a 	mov	r6,r2
 4007054:	400b883a 	mov	r5,r8
 4007058:	180f883a 	mov	r7,r3
 400705c:	400aae80 	call	400aae8 <__subdf3>
 4007060:	102b883a 	mov	r21,r2
 4007064:	1811883a 	mov	r8,r3
 4007068:	003f8d06 	br	4006ea0 <__alt_data_end+0xfc006ea0>
 400706c:	0005883a 	mov	r2,zero
 4007070:	0007883a 	mov	r3,zero
 4007074:	003eac06 	br	4006b28 <__alt_data_end+0xfc006b28>
 4007078:	d8809017 	ldw	r2,576(sp)
 400707c:	1000121e 	bne	r2,zero,40070c8 <__kernel_rem_pio2+0x674>
 4007080:	90bfffc4 	addi	r2,r18,-1
 4007084:	1085883a 	add	r2,r2,r2
 4007088:	1085883a 	add	r2,r2,r2
 400708c:	d885883a 	add	r2,sp,r2
 4007090:	14c07817 	ldw	r19,480(r2)
 4007094:	9827d5fa 	srai	r19,r19,23
 4007098:	003f5606 	br	4006df4 <__alt_data_end+0xfc006df4>
 400709c:	90bfffc4 	addi	r2,r18,-1
 40070a0:	1085883a 	add	r2,r2,r2
 40070a4:	1085883a 	add	r2,r2,r2
 40070a8:	d885883a 	add	r2,sp,r2
 40070ac:	10807804 	addi	r2,r2,480
 40070b0:	11000017 	ldw	r4,0(r2)
 40070b4:	01402034 	movhi	r5,128
 40070b8:	297fffc4 	addi	r5,r5,-1
 40070bc:	2148703a 	and	r4,r4,r5
 40070c0:	11000015 	stw	r4,0(r2)
 40070c4:	003f7406 	br	4006e98 <__alt_data_end+0xfc006e98>
 40070c8:	4809883a 	mov	r4,r9
 40070cc:	180b883a 	mov	r5,r3
 40070d0:	000d883a 	mov	r6,zero
 40070d4:	01cff834 	movhi	r7,16352
 40070d8:	d8c09a15 	stw	r3,616(sp)
 40070dc:	d8c09b15 	stw	r3,620(sp)
 40070e0:	da409915 	stw	r9,612(sp)
 40070e4:	400a0ac0 	call	400a0ac <__gedf2>
 40070e8:	d8c09a17 	ldw	r3,616(sp)
 40070ec:	da009b17 	ldw	r8,620(sp)
 40070f0:	da409917 	ldw	r9,612(sp)
 40070f4:	1000920e 	bge	r2,zero,4007340 <__kernel_rem_pio2+0x8ec>
 40070f8:	0027883a 	mov	r19,zero
 40070fc:	003f6806 	br	4006ea0 <__alt_data_end+0xfc006ea0>
 4007100:	002d883a 	mov	r22,zero
 4007104:	002b883a 	mov	r21,zero
 4007108:	003eb006 	br	4006bcc <__alt_data_end+0xfc006bcc>
 400710c:	2945883a 	add	r2,r5,r5
 4007110:	da009017 	ldw	r8,576(sp)
 4007114:	1085883a 	add	r2,r2,r2
 4007118:	d885883a 	add	r2,sp,r2
 400711c:	10807817 	ldw	r2,480(r2)
 4007120:	423ffa04 	addi	r8,r8,-24
 4007124:	dc409115 	stw	r17,580(sp)
 4007128:	dcc08d15 	stw	r19,564(sp)
 400712c:	da009015 	stw	r8,576(sp)
 4007130:	dd809417 	ldw	r22,592(sp)
 4007134:	2823883a 	mov	r17,r5
 4007138:	10000e1e 	bne	r2,zero,4007174 <__kernel_rem_pio2+0x720>
 400713c:	00900034 	movhi	r2,16384
 4007140:	10bfffc4 	addi	r2,r2,-1
 4007144:	2885883a 	add	r2,r5,r2
 4007148:	1085883a 	add	r2,r2,r2
 400714c:	d8c07804 	addi	r3,sp,480
 4007150:	1085883a 	add	r2,r2,r2
 4007154:	1885883a 	add	r2,r3,r2
 4007158:	4007883a 	mov	r3,r8
 400715c:	10bfff04 	addi	r2,r2,-4
 4007160:	11000117 	ldw	r4,4(r2)
 4007164:	8c7fffc4 	addi	r17,r17,-1
 4007168:	18fffa04 	addi	r3,r3,-24
 400716c:	203ffb26 	beq	r4,zero,400715c <__alt_data_end+0xfc00715c>
 4007170:	d8c09015 	stw	r3,576(sp)
 4007174:	d9809017 	ldw	r6,576(sp)
 4007178:	0009883a 	mov	r4,zero
 400717c:	014ffc34 	movhi	r5,16368
 4007180:	4007b480 	call	4007b48 <scalbn>
 4007184:	1029883a 	mov	r20,r2
 4007188:	182b883a 	mov	r21,r3
 400718c:	88018416 	blt	r17,zero,40077a0 <__kernel_rem_pio2+0xd4c>
 4007190:	881090fa 	slli	r8,r17,3
 4007194:	d8c07804 	addi	r3,sp,480
 4007198:	da008e15 	stw	r8,568(sp)
 400719c:	d8808e17 	ldw	r2,568(sp)
 40071a0:	8c51883a 	add	r8,r17,r17
 40071a4:	4211883a 	add	r8,r8,r8
 40071a8:	d8a1883a 	add	r16,sp,r2
 40071ac:	1a25883a 	add	r18,r3,r8
 40071b0:	da3ffe04 	addi	r8,sp,-8
 40071b4:	da008c15 	stw	r8,560(sp)
 40071b8:	8039883a 	mov	fp,r16
 40071bc:	91000017 	ldw	r4,0(r18)
 40071c0:	e73ffe04 	addi	fp,fp,-8
 40071c4:	94bfff04 	addi	r18,r18,-4
 40071c8:	400b4640 	call	400b464 <__floatsidf>
 40071cc:	a00d883a 	mov	r6,r20
 40071d0:	a80f883a 	mov	r7,r21
 40071d4:	1009883a 	mov	r4,r2
 40071d8:	180b883a 	mov	r5,r3
 40071dc:	400a27c0 	call	400a27c <__muldf3>
 40071e0:	a009883a 	mov	r4,r20
 40071e4:	a80b883a 	mov	r5,r21
 40071e8:	e0800215 	stw	r2,8(fp)
 40071ec:	e0c00315 	stw	r3,12(fp)
 40071f0:	000d883a 	mov	r6,zero
 40071f4:	01cf9c34 	movhi	r7,15984
 40071f8:	400a27c0 	call	400a27c <__muldf3>
 40071fc:	da008c17 	ldw	r8,560(sp)
 4007200:	1029883a 	mov	r20,r2
 4007204:	182b883a 	mov	r21,r3
 4007208:	e23fec1e 	bne	fp,r8,40071bc <__alt_data_end+0xfc0071bc>
 400720c:	0029883a 	mov	r20,zero
 4007210:	b0004f16 	blt	r22,zero,4007350 <__kernel_rem_pio2+0x8fc>
 4007214:	054100b4 	movhi	r21,1026
 4007218:	014ffe74 	movhi	r5,16377
 400721c:	ad6b3504 	addi	r21,r21,-21292
 4007220:	8027883a 	mov	r19,r16
 4007224:	01100034 	movhi	r4,16384
 4007228:	29487ec4 	addi	r5,r5,8699
 400722c:	0039883a 	mov	fp,zero
 4007230:	002f883a 	mov	r23,zero
 4007234:	0025883a 	mov	r18,zero
 4007238:	00000506 	br	4007250 <__kernel_rem_pio2+0x7fc>
 400723c:	9cc00204 	addi	r19,r19,8
 4007240:	a4800f16 	blt	r20,r18,4007280 <__kernel_rem_pio2+0x82c>
 4007244:	a9000017 	ldw	r4,0(r21)
 4007248:	a9400117 	ldw	r5,4(r21)
 400724c:	ad400204 	addi	r21,r21,8
 4007250:	99800017 	ldw	r6,0(r19)
 4007254:	99c00117 	ldw	r7,4(r19)
 4007258:	94800044 	addi	r18,r18,1
 400725c:	400a27c0 	call	400a27c <__muldf3>
 4007260:	e009883a 	mov	r4,fp
 4007264:	b80b883a 	mov	r5,r23
 4007268:	100d883a 	mov	r6,r2
 400726c:	180f883a 	mov	r7,r3
 4007270:	4008da80 	call	4008da8 <__adddf3>
 4007274:	1039883a 	mov	fp,r2
 4007278:	182f883a 	mov	r23,r3
 400727c:	b4bfef0e 	bge	r22,r18,400723c <__alt_data_end+0xfc00723c>
 4007280:	a00490fa 	slli	r2,r20,3
 4007284:	da008c17 	ldw	r8,560(sp)
 4007288:	843ffe04 	addi	r16,r16,-8
 400728c:	d885883a 	add	r2,sp,r2
 4007290:	10802804 	addi	r2,r2,160
 4007294:	17000015 	stw	fp,0(r2)
 4007298:	15c00115 	stw	r23,4(r2)
 400729c:	a5000044 	addi	r20,r20,1
 40072a0:	823fdb1e 	bne	r16,r8,4007210 <__alt_data_end+0xfc007210>
 40072a4:	da00a617 	ldw	r8,664(sp)
 40072a8:	00800084 	movi	r2,2
 40072ac:	12006616 	blt	r2,r8,4007448 <__kernel_rem_pio2+0x9f4>
 40072b0:	0200de16 	blt	zero,r8,400762c <__kernel_rem_pio2+0xbd8>
 40072b4:	4000141e 	bne	r8,zero,4007308 <__kernel_rem_pio2+0x8b4>
 40072b8:	da008e17 	ldw	r8,568(sp)
 40072bc:	d8802804 	addi	r2,sp,160
 40072c0:	0007883a 	mov	r3,zero
 40072c4:	1225883a 	add	r18,r2,r8
 40072c8:	043fffc4 	movi	r16,-1
 40072cc:	0005883a 	mov	r2,zero
 40072d0:	91800017 	ldw	r6,0(r18)
 40072d4:	91c00117 	ldw	r7,4(r18)
 40072d8:	1009883a 	mov	r4,r2
 40072dc:	180b883a 	mov	r5,r3
 40072e0:	8c7fffc4 	addi	r17,r17,-1
 40072e4:	4008da80 	call	4008da8 <__adddf3>
 40072e8:	94bffe04 	addi	r18,r18,-8
 40072ec:	8c3ff81e 	bne	r17,r16,40072d0 <__alt_data_end+0xfc0072d0>
 40072f0:	da008d17 	ldw	r8,564(sp)
 40072f4:	40000126 	beq	r8,zero,40072fc <__kernel_rem_pio2+0x8a8>
 40072f8:	18e0003c 	xorhi	r3,r3,32768
 40072fc:	da008f17 	ldw	r8,572(sp)
 4007300:	40800015 	stw	r2,0(r8)
 4007304:	40c00115 	stw	r3,4(r8)
 4007308:	da009117 	ldw	r8,580(sp)
 400730c:	408001cc 	andi	r2,r8,7
 4007310:	dfc0a517 	ldw	ra,660(sp)
 4007314:	df00a417 	ldw	fp,656(sp)
 4007318:	ddc0a317 	ldw	r23,652(sp)
 400731c:	dd80a217 	ldw	r22,648(sp)
 4007320:	dd40a117 	ldw	r21,644(sp)
 4007324:	dd00a017 	ldw	r20,640(sp)
 4007328:	dcc09f17 	ldw	r19,636(sp)
 400732c:	dc809e17 	ldw	r18,632(sp)
 4007330:	dc409d17 	ldw	r17,628(sp)
 4007334:	dc009c17 	ldw	r16,624(sp)
 4007338:	dec0a604 	addi	sp,sp,664
 400733c:	f800283a 	ret
 4007340:	8c400044 	addi	r17,r17,1
 4007344:	04810d0e 	bge	zero,r18,400777c <__kernel_rem_pio2+0xd28>
 4007348:	04c00084 	movi	r19,2
 400734c:	003eac06 	br	4006e00 <__alt_data_end+0xfc006e00>
 4007350:	0039883a 	mov	fp,zero
 4007354:	002f883a 	mov	r23,zero
 4007358:	003fc906 	br	4007280 <__alt_data_end+0xfc007280>
 400735c:	0029883a 	mov	r20,zero
 4007360:	003ebd06 	br	4006e58 <__alt_data_end+0xfc006e58>
 4007364:	05000044 	movi	r20,1
 4007368:	003eef06 	br	4006f28 <__alt_data_end+0xfc006f28>
 400736c:	4029883a 	mov	r20,r8
 4007370:	da009017 	ldw	r8,576(sp)
 4007374:	a809883a 	mov	r4,r21
 4007378:	a00b883a 	mov	r5,r20
 400737c:	020dc83a 	sub	r6,zero,r8
 4007380:	dc409115 	stw	r17,580(sp)
 4007384:	dd809417 	ldw	r22,592(sp)
 4007388:	dcc08d15 	stw	r19,564(sp)
 400738c:	4007b480 	call	4007b48 <scalbn>
 4007390:	000d883a 	mov	r6,zero
 4007394:	01d05c34 	movhi	r7,16752
 4007398:	1009883a 	mov	r4,r2
 400739c:	180b883a 	mov	r5,r3
 40073a0:	102b883a 	mov	r21,r2
 40073a4:	1823883a 	mov	r17,r3
 40073a8:	400a0ac0 	call	400a0ac <__gedf2>
 40073ac:	1000e916 	blt	r2,zero,4007754 <__kernel_rem_pio2+0xd00>
 40073b0:	000d883a 	mov	r6,zero
 40073b4:	01cf9c34 	movhi	r7,15984
 40073b8:	880b883a 	mov	r5,r17
 40073bc:	a809883a 	mov	r4,r21
 40073c0:	400a27c0 	call	400a27c <__muldf3>
 40073c4:	180b883a 	mov	r5,r3
 40073c8:	1009883a 	mov	r4,r2
 40073cc:	400b3e40 	call	400b3e4 <__fixdfsi>
 40073d0:	1029883a 	mov	r20,r2
 40073d4:	9485883a 	add	r2,r18,r18
 40073d8:	1085883a 	add	r2,r2,r2
 40073dc:	a009883a 	mov	r4,r20
 40073e0:	d8a1883a 	add	r16,sp,r2
 40073e4:	400b4640 	call	400b464 <__floatsidf>
 40073e8:	000d883a 	mov	r6,zero
 40073ec:	01d05c34 	movhi	r7,16752
 40073f0:	1009883a 	mov	r4,r2
 40073f4:	180b883a 	mov	r5,r3
 40073f8:	400a27c0 	call	400a27c <__muldf3>
 40073fc:	880b883a 	mov	r5,r17
 4007400:	100d883a 	mov	r6,r2
 4007404:	180f883a 	mov	r7,r3
 4007408:	a809883a 	mov	r4,r21
 400740c:	400aae80 	call	400aae8 <__subdf3>
 4007410:	180b883a 	mov	r5,r3
 4007414:	1009883a 	mov	r4,r2
 4007418:	400b3e40 	call	400b3e4 <__fixdfsi>
 400741c:	da009017 	ldw	r8,576(sp)
 4007420:	94400044 	addi	r17,r18,1
 4007424:	8c47883a 	add	r3,r17,r17
 4007428:	84007804 	addi	r16,r16,480
 400742c:	18c7883a 	add	r3,r3,r3
 4007430:	80800015 	stw	r2,0(r16)
 4007434:	d8c7883a 	add	r3,sp,r3
 4007438:	42000604 	addi	r8,r8,24
 400743c:	da009015 	stw	r8,576(sp)
 4007440:	1d007815 	stw	r20,480(r3)
 4007444:	003f4b06 	br	4007174 <__alt_data_end+0xfc007174>
 4007448:	da00a617 	ldw	r8,664(sp)
 400744c:	008000c4 	movi	r2,3
 4007450:	40bfad1e 	bne	r8,r2,4007308 <__alt_data_end+0xfc007308>
 4007454:	0440bc0e 	bge	zero,r17,4007748 <__kernel_rem_pio2+0xcf4>
 4007458:	da008e17 	ldw	r8,568(sp)
 400745c:	882090fa 	slli	r16,r17,3
 4007460:	dd402804 	addi	r21,sp,160
 4007464:	da05883a 	add	r2,sp,r8
 4007468:	10802804 	addi	r2,r2,160
 400746c:	15c00017 	ldw	r23,0(r2)
 4007470:	15800117 	ldw	r22,4(r2)
 4007474:	8029883a 	mov	r20,r16
 4007478:	843ffe04 	addi	r16,r16,-8
 400747c:	ac21883a 	add	r16,r21,r16
 4007480:	ad29883a 	add	r20,r21,r20
 4007484:	dac02604 	addi	r11,sp,152
 4007488:	8811883a 	mov	r8,r17
 400748c:	84400017 	ldw	r17,0(r16)
 4007490:	87000117 	ldw	fp,4(r16)
 4007494:	b80d883a 	mov	r6,r23
 4007498:	b00f883a 	mov	r7,r22
 400749c:	8809883a 	mov	r4,r17
 40074a0:	e00b883a 	mov	r5,fp
 40074a4:	da009b15 	stw	r8,620(sp)
 40074a8:	dac09915 	stw	r11,612(sp)
 40074ac:	4008da80 	call	4008da8 <__adddf3>
 40074b0:	100d883a 	mov	r6,r2
 40074b4:	180f883a 	mov	r7,r3
 40074b8:	8809883a 	mov	r4,r17
 40074bc:	e00b883a 	mov	r5,fp
 40074c0:	1027883a 	mov	r19,r2
 40074c4:	1825883a 	mov	r18,r3
 40074c8:	400aae80 	call	400aae8 <__subdf3>
 40074cc:	b80d883a 	mov	r6,r23
 40074d0:	b00f883a 	mov	r7,r22
 40074d4:	1009883a 	mov	r4,r2
 40074d8:	180b883a 	mov	r5,r3
 40074dc:	4008da80 	call	4008da8 <__adddf3>
 40074e0:	dac09917 	ldw	r11,612(sp)
 40074e4:	a0800015 	stw	r2,0(r20)
 40074e8:	a0c00115 	stw	r3,4(r20)
 40074ec:	84c00015 	stw	r19,0(r16)
 40074f0:	84800115 	stw	r18,4(r16)
 40074f4:	843ffe04 	addi	r16,r16,-8
 40074f8:	a53ffe04 	addi	r20,r20,-8
 40074fc:	982f883a 	mov	r23,r19
 4007500:	902d883a 	mov	r22,r18
 4007504:	da009b17 	ldw	r8,620(sp)
 4007508:	5c3fe01e 	bne	r11,r16,400748c <__alt_data_end+0xfc00748c>
 400750c:	00800044 	movi	r2,1
 4007510:	12008d0e 	bge	r2,r8,4007748 <__kernel_rem_pio2+0xcf4>
 4007514:	402090fa 	slli	r16,r8,3
 4007518:	da008e17 	ldw	r8,568(sp)
 400751c:	8023883a 	mov	r17,r16
 4007520:	da05883a 	add	r2,sp,r8
 4007524:	10802804 	addi	r2,r2,160
 4007528:	15800017 	ldw	r22,0(r2)
 400752c:	15000117 	ldw	r20,4(r2)
 4007530:	ac63883a 	add	r17,r21,r17
 4007534:	843ffe04 	addi	r16,r16,-8
 4007538:	ac21883a 	add	r16,r21,r16
 400753c:	8825883a 	mov	r18,r17
 4007540:	8811883a 	mov	r8,r17
 4007544:	84400017 	ldw	r17,0(r16)
 4007548:	87000117 	ldw	fp,4(r16)
 400754c:	b009883a 	mov	r4,r22
 4007550:	a00b883a 	mov	r5,r20
 4007554:	880d883a 	mov	r6,r17
 4007558:	e00f883a 	mov	r7,fp
 400755c:	da009b15 	stw	r8,620(sp)
 4007560:	4008da80 	call	4008da8 <__adddf3>
 4007564:	100d883a 	mov	r6,r2
 4007568:	180f883a 	mov	r7,r3
 400756c:	8809883a 	mov	r4,r17
 4007570:	e00b883a 	mov	r5,fp
 4007574:	102f883a 	mov	r23,r2
 4007578:	1827883a 	mov	r19,r3
 400757c:	400aae80 	call	400aae8 <__subdf3>
 4007580:	b00d883a 	mov	r6,r22
 4007584:	a00f883a 	mov	r7,r20
 4007588:	1009883a 	mov	r4,r2
 400758c:	180b883a 	mov	r5,r3
 4007590:	4008da80 	call	4008da8 <__adddf3>
 4007594:	90800015 	stw	r2,0(r18)
 4007598:	90c00115 	stw	r3,4(r18)
 400759c:	85c00015 	stw	r23,0(r16)
 40075a0:	84c00115 	stw	r19,4(r16)
 40075a4:	843ffe04 	addi	r16,r16,-8
 40075a8:	94bffe04 	addi	r18,r18,-8
 40075ac:	b82d883a 	mov	r22,r23
 40075b0:	9829883a 	mov	r20,r19
 40075b4:	da009b17 	ldw	r8,620(sp)
 40075b8:	ac3fe21e 	bne	r21,r16,4007544 <__alt_data_end+0xfc007544>
 40075bc:	4023883a 	mov	r17,r8
 40075c0:	dc002a04 	addi	r16,sp,168
 40075c4:	0005883a 	mov	r2,zero
 40075c8:	0007883a 	mov	r3,zero
 40075cc:	89800017 	ldw	r6,0(r17)
 40075d0:	89c00117 	ldw	r7,4(r17)
 40075d4:	1009883a 	mov	r4,r2
 40075d8:	8c7ffe04 	addi	r17,r17,-8
 40075dc:	180b883a 	mov	r5,r3
 40075e0:	4008da80 	call	4008da8 <__adddf3>
 40075e4:	847ff91e 	bne	r16,r17,40075cc <__alt_data_end+0xfc0075cc>
 40075e8:	da008d17 	ldw	r8,564(sp)
 40075ec:	40004726 	beq	r8,zero,400770c <__kernel_rem_pio2+0xcb8>
 40075f0:	d9002b17 	ldw	r4,172(sp)
 40075f4:	d9402917 	ldw	r5,164(sp)
 40075f8:	d9802a17 	ldw	r6,168(sp)
 40075fc:	da008f17 	ldw	r8,572(sp)
 4007600:	d9c02817 	ldw	r7,160(sp)
 4007604:	2960003c 	xorhi	r5,r5,32768
 4007608:	2120003c 	xorhi	r4,r4,32768
 400760c:	18e0003c 	xorhi	r3,r3,32768
 4007610:	41c00015 	stw	r7,0(r8)
 4007614:	41400115 	stw	r5,4(r8)
 4007618:	41800215 	stw	r6,8(r8)
 400761c:	41000315 	stw	r4,12(r8)
 4007620:	40800415 	stw	r2,16(r8)
 4007624:	40c00515 	stw	r3,20(r8)
 4007628:	003f3706 	br	4007308 <__alt_data_end+0xfc007308>
 400762c:	da008e17 	ldw	r8,568(sp)
 4007630:	d8802804 	addi	r2,sp,160
 4007634:	dc002604 	addi	r16,sp,152
 4007638:	1225883a 	add	r18,r2,r8
 400763c:	0007883a 	mov	r3,zero
 4007640:	0005883a 	mov	r2,zero
 4007644:	91800017 	ldw	r6,0(r18)
 4007648:	91c00117 	ldw	r7,4(r18)
 400764c:	1009883a 	mov	r4,r2
 4007650:	94bffe04 	addi	r18,r18,-8
 4007654:	180b883a 	mov	r5,r3
 4007658:	4008da80 	call	4008da8 <__adddf3>
 400765c:	943ff91e 	bne	r18,r16,4007644 <__alt_data_end+0xfc007644>
 4007660:	da008d17 	ldw	r8,564(sp)
 4007664:	d9002817 	ldw	r4,160(sp)
 4007668:	d9402917 	ldw	r5,164(sp)
 400766c:	40001a26 	beq	r8,zero,40076d8 <__kernel_rem_pio2+0xc84>
 4007670:	da008f17 	ldw	r8,572(sp)
 4007674:	19a0003c 	xorhi	r6,r3,32768
 4007678:	180f883a 	mov	r7,r3
 400767c:	41800115 	stw	r6,4(r8)
 4007680:	40800015 	stw	r2,0(r8)
 4007684:	100d883a 	mov	r6,r2
 4007688:	400aae80 	call	400aae8 <__subdf3>
 400768c:	04400c0e 	bge	zero,r17,40076c0 <__kernel_rem_pio2+0xc6c>
 4007690:	dc002a04 	addi	r16,sp,168
 4007694:	04800044 	movi	r18,1
 4007698:	81800017 	ldw	r6,0(r16)
 400769c:	81c00117 	ldw	r7,4(r16)
 40076a0:	1009883a 	mov	r4,r2
 40076a4:	180b883a 	mov	r5,r3
 40076a8:	94800044 	addi	r18,r18,1
 40076ac:	4008da80 	call	4008da8 <__adddf3>
 40076b0:	84000204 	addi	r16,r16,8
 40076b4:	8cbff80e 	bge	r17,r18,4007698 <__alt_data_end+0xfc007698>
 40076b8:	da008d17 	ldw	r8,564(sp)
 40076bc:	40004226 	beq	r8,zero,40077c8 <__kernel_rem_pio2+0xd74>
 40076c0:	da008f17 	ldw	r8,572(sp)
 40076c4:	1009883a 	mov	r4,r2
 40076c8:	18a0003c 	xorhi	r2,r3,32768
 40076cc:	41000215 	stw	r4,8(r8)
 40076d0:	40800315 	stw	r2,12(r8)
 40076d4:	003f0c06 	br	4007308 <__alt_data_end+0xfc007308>
 40076d8:	da008f17 	ldw	r8,572(sp)
 40076dc:	100d883a 	mov	r6,r2
 40076e0:	180f883a 	mov	r7,r3
 40076e4:	40800015 	stw	r2,0(r8)
 40076e8:	40c00115 	stw	r3,4(r8)
 40076ec:	400aae80 	call	400aae8 <__subdf3>
 40076f0:	047fe716 	blt	zero,r17,4007690 <__alt_data_end+0xfc007690>
 40076f4:	da008f17 	ldw	r8,572(sp)
 40076f8:	1009883a 	mov	r4,r2
 40076fc:	1805883a 	mov	r2,r3
 4007700:	41000215 	stw	r4,8(r8)
 4007704:	40800315 	stw	r2,12(r8)
 4007708:	003eff06 	br	4007308 <__alt_data_end+0xfc007308>
 400770c:	da008f17 	ldw	r8,572(sp)
 4007710:	d9802817 	ldw	r6,160(sp)
 4007714:	d9402a17 	ldw	r5,168(sp)
 4007718:	d9002b17 	ldw	r4,172(sp)
 400771c:	41800015 	stw	r6,0(r8)
 4007720:	d9802917 	ldw	r6,164(sp)
 4007724:	41400215 	stw	r5,8(r8)
 4007728:	41000315 	stw	r4,12(r8)
 400772c:	41800115 	stw	r6,4(r8)
 4007730:	40800415 	stw	r2,16(r8)
 4007734:	40c00515 	stw	r3,20(r8)
 4007738:	003ef306 	br	4007308 <__alt_data_end+0xfc007308>
 400773c:	da00a617 	ldw	r8,664(sp)
 4007740:	008000c4 	movi	r2,3
 4007744:	40bef01e 	bne	r8,r2,4007308 <__alt_data_end+0xfc007308>
 4007748:	0005883a 	mov	r2,zero
 400774c:	0007883a 	mov	r3,zero
 4007750:	003fa506 	br	40075e8 <__alt_data_end+0xfc0075e8>
 4007754:	9485883a 	add	r2,r18,r18
 4007758:	1085883a 	add	r2,r2,r2
 400775c:	d8a1883a 	add	r16,sp,r2
 4007760:	880b883a 	mov	r5,r17
 4007764:	a809883a 	mov	r4,r21
 4007768:	84007804 	addi	r16,r16,480
 400776c:	400b3e40 	call	400b3e4 <__fixdfsi>
 4007770:	80800015 	stw	r2,0(r16)
 4007774:	9023883a 	mov	r17,r18
 4007778:	003e7e06 	br	4007174 <__alt_data_end+0xfc007174>
 400777c:	a80d883a 	mov	r6,r21
 4007780:	400f883a 	mov	r7,r8
 4007784:	0009883a 	mov	r4,zero
 4007788:	014ffc34 	movhi	r5,16368
 400778c:	400aae80 	call	400aae8 <__subdf3>
 4007790:	102b883a 	mov	r21,r2
 4007794:	1811883a 	mov	r8,r3
 4007798:	04c00084 	movi	r19,2
 400779c:	003dc006 	br	4006ea0 <__alt_data_end+0xfc006ea0>
 40077a0:	da00a617 	ldw	r8,664(sp)
 40077a4:	00800084 	movi	r2,2
 40077a8:	123fe416 	blt	r2,r8,400773c <__alt_data_end+0xfc00773c>
 40077ac:	02000c16 	blt	zero,r8,40077e0 <__kernel_rem_pio2+0xd8c>
 40077b0:	403ed51e 	bne	r8,zero,4007308 <__alt_data_end+0xfc007308>
 40077b4:	0005883a 	mov	r2,zero
 40077b8:	0007883a 	mov	r3,zero
 40077bc:	003ecc06 	br	40072f0 <__alt_data_end+0xfc0072f0>
 40077c0:	d8009215 	stw	zero,584(sp)
 40077c4:	003cc106 	br	4006acc <__alt_data_end+0xfc006acc>
 40077c8:	da008f17 	ldw	r8,572(sp)
 40077cc:	1009883a 	mov	r4,r2
 40077d0:	1805883a 	mov	r2,r3
 40077d4:	41000215 	stw	r4,8(r8)
 40077d8:	40800315 	stw	r2,12(r8)
 40077dc:	003eca06 	br	4007308 <__alt_data_end+0xfc007308>
 40077e0:	0005883a 	mov	r2,zero
 40077e4:	0007883a 	mov	r3,zero
 40077e8:	003f9d06 	br	4007660 <__alt_data_end+0xfc007660>

040077ec <__kernel_sin>:
 40077ec:	00a00034 	movhi	r2,32768
 40077f0:	defff404 	addi	sp,sp,-48
 40077f4:	10bfffc4 	addi	r2,r2,-1
 40077f8:	00cf9034 	movhi	r3,15936
 40077fc:	ddc00915 	stw	r23,36(sp)
 4007800:	dd800815 	stw	r22,32(sp)
 4007804:	dc400315 	stw	r17,12(sp)
 4007808:	dc000215 	stw	r16,8(sp)
 400780c:	dfc00b15 	stw	ra,44(sp)
 4007810:	df000a15 	stw	fp,40(sp)
 4007814:	dd400715 	stw	r21,28(sp)
 4007818:	dd000615 	stw	r20,24(sp)
 400781c:	dcc00515 	stw	r19,20(sp)
 4007820:	dc800415 	stw	r18,16(sp)
 4007824:	2884703a 	and	r2,r5,r2
 4007828:	18ffffc4 	addi	r3,r3,-1
 400782c:	2821883a 	mov	r16,r5
 4007830:	2023883a 	mov	r17,r4
 4007834:	302f883a 	mov	r23,r6
 4007838:	382d883a 	mov	r22,r7
 400783c:	18800216 	blt	r3,r2,4007848 <__kernel_sin+0x5c>
 4007840:	400b3e40 	call	400b3e4 <__fixdfsi>
 4007844:	10009926 	beq	r2,zero,4007aac <__kernel_sin+0x2c0>
 4007848:	880d883a 	mov	r6,r17
 400784c:	800f883a 	mov	r7,r16
 4007850:	8809883a 	mov	r4,r17
 4007854:	800b883a 	mov	r5,r16
 4007858:	400a27c0 	call	400a27c <__muldf3>
 400785c:	100d883a 	mov	r6,r2
 4007860:	180f883a 	mov	r7,r3
 4007864:	8809883a 	mov	r4,r17
 4007868:	800b883a 	mov	r5,r16
 400786c:	1027883a 	mov	r19,r2
 4007870:	1825883a 	mov	r18,r3
 4007874:	400a27c0 	call	400a27c <__muldf3>
 4007878:	0196b434 	movhi	r6,23248
 400787c:	01cf79b4 	movhi	r7,15846
 4007880:	31b55f04 	addi	r6,r6,-10884
 4007884:	39f64e84 	addi	r7,r7,-9926
 4007888:	9809883a 	mov	r4,r19
 400788c:	900b883a 	mov	r5,r18
 4007890:	102b883a 	mov	r21,r2
 4007894:	1829883a 	mov	r20,r3
 4007898:	400a27c0 	call	400a27c <__muldf3>
 400789c:	01a28b34 	movhi	r6,35372
 40078a0:	01cf96f4 	movhi	r7,15963
 40078a4:	31a73ac4 	addi	r6,r6,-25365
 40078a8:	39f97984 	addi	r7,r7,-6682
 40078ac:	1009883a 	mov	r4,r2
 40078b0:	180b883a 	mov	r5,r3
 40078b4:	400aae80 	call	400aae8 <__subdf3>
 40078b8:	980d883a 	mov	r6,r19
 40078bc:	900f883a 	mov	r7,r18
 40078c0:	1009883a 	mov	r4,r2
 40078c4:	180b883a 	mov	r5,r3
 40078c8:	400a27c0 	call	400a27c <__muldf3>
 40078cc:	0195ecb4 	movhi	r6,22450
 40078d0:	01cfb1f4 	movhi	r7,16071
 40078d4:	31bf9f44 	addi	r6,r6,-387
 40078d8:	39c778c4 	addi	r7,r7,7651
 40078dc:	1009883a 	mov	r4,r2
 40078e0:	180b883a 	mov	r5,r3
 40078e4:	4008da80 	call	4008da8 <__adddf3>
 40078e8:	980d883a 	mov	r6,r19
 40078ec:	900f883a 	mov	r7,r18
 40078f0:	1009883a 	mov	r4,r2
 40078f4:	180b883a 	mov	r5,r3
 40078f8:	400a27c0 	call	400a27c <__muldf3>
 40078fc:	01867074 	movhi	r6,6593
 4007900:	01cfcab4 	movhi	r7,16170
 4007904:	31987544 	addi	r6,r6,25045
 4007908:	39c06804 	addi	r7,r7,416
 400790c:	1009883a 	mov	r4,r2
 4007910:	180b883a 	mov	r5,r3
 4007914:	400aae80 	call	400aae8 <__subdf3>
 4007918:	980d883a 	mov	r6,r19
 400791c:	900f883a 	mov	r7,r18
 4007920:	1009883a 	mov	r4,r2
 4007924:	180b883a 	mov	r5,r3
 4007928:	400a27c0 	call	400a27c <__muldf3>
 400792c:	01844474 	movhi	r6,4369
 4007930:	01cfe074 	movhi	r7,16257
 4007934:	31be2984 	addi	r6,r6,-1882
 4007938:	39c44444 	addi	r7,r7,4369
 400793c:	1009883a 	mov	r4,r2
 4007940:	180b883a 	mov	r5,r3
 4007944:	4008da80 	call	4008da8 <__adddf3>
 4007948:	1011883a 	mov	r8,r2
 400794c:	d8800c17 	ldw	r2,48(sp)
 4007950:	1839883a 	mov	fp,r3
 4007954:	10003e26 	beq	r2,zero,4007a50 <__kernel_sin+0x264>
 4007958:	000d883a 	mov	r6,zero
 400795c:	01cff834 	movhi	r7,16352
 4007960:	b809883a 	mov	r4,r23
 4007964:	b00b883a 	mov	r5,r22
 4007968:	da000015 	stw	r8,0(sp)
 400796c:	400a27c0 	call	400a27c <__muldf3>
 4007970:	da000017 	ldw	r8,0(sp)
 4007974:	e00f883a 	mov	r7,fp
 4007978:	a809883a 	mov	r4,r21
 400797c:	400d883a 	mov	r6,r8
 4007980:	a00b883a 	mov	r5,r20
 4007984:	d8c00115 	stw	r3,4(sp)
 4007988:	d8800015 	stw	r2,0(sp)
 400798c:	400a27c0 	call	400a27c <__muldf3>
 4007990:	da800017 	ldw	r10,0(sp)
 4007994:	da400117 	ldw	r9,4(sp)
 4007998:	100d883a 	mov	r6,r2
 400799c:	5009883a 	mov	r4,r10
 40079a0:	480b883a 	mov	r5,r9
 40079a4:	180f883a 	mov	r7,r3
 40079a8:	400aae80 	call	400aae8 <__subdf3>
 40079ac:	980d883a 	mov	r6,r19
 40079b0:	900f883a 	mov	r7,r18
 40079b4:	1009883a 	mov	r4,r2
 40079b8:	180b883a 	mov	r5,r3
 40079bc:	400a27c0 	call	400a27c <__muldf3>
 40079c0:	b80d883a 	mov	r6,r23
 40079c4:	b00f883a 	mov	r7,r22
 40079c8:	1009883a 	mov	r4,r2
 40079cc:	180b883a 	mov	r5,r3
 40079d0:	400aae80 	call	400aae8 <__subdf3>
 40079d4:	01955574 	movhi	r6,21845
 40079d8:	01cff174 	movhi	r7,16325
 40079dc:	31955244 	addi	r6,r6,21833
 40079e0:	39d55544 	addi	r7,r7,21845
 40079e4:	a809883a 	mov	r4,r21
 40079e8:	a00b883a 	mov	r5,r20
 40079ec:	1027883a 	mov	r19,r2
 40079f0:	1825883a 	mov	r18,r3
 40079f4:	400a27c0 	call	400a27c <__muldf3>
 40079f8:	100d883a 	mov	r6,r2
 40079fc:	180f883a 	mov	r7,r3
 4007a00:	9809883a 	mov	r4,r19
 4007a04:	900b883a 	mov	r5,r18
 4007a08:	4008da80 	call	4008da8 <__adddf3>
 4007a0c:	100d883a 	mov	r6,r2
 4007a10:	180f883a 	mov	r7,r3
 4007a14:	8809883a 	mov	r4,r17
 4007a18:	800b883a 	mov	r5,r16
 4007a1c:	400aae80 	call	400aae8 <__subdf3>
 4007a20:	dfc00b17 	ldw	ra,44(sp)
 4007a24:	df000a17 	ldw	fp,40(sp)
 4007a28:	ddc00917 	ldw	r23,36(sp)
 4007a2c:	dd800817 	ldw	r22,32(sp)
 4007a30:	dd400717 	ldw	r21,28(sp)
 4007a34:	dd000617 	ldw	r20,24(sp)
 4007a38:	dcc00517 	ldw	r19,20(sp)
 4007a3c:	dc800417 	ldw	r18,16(sp)
 4007a40:	dc400317 	ldw	r17,12(sp)
 4007a44:	dc000217 	ldw	r16,8(sp)
 4007a48:	dec00c04 	addi	sp,sp,48
 4007a4c:	f800283a 	ret
 4007a50:	400d883a 	mov	r6,r8
 4007a54:	9809883a 	mov	r4,r19
 4007a58:	900b883a 	mov	r5,r18
 4007a5c:	180f883a 	mov	r7,r3
 4007a60:	400a27c0 	call	400a27c <__muldf3>
 4007a64:	01955574 	movhi	r6,21845
 4007a68:	01cff174 	movhi	r7,16325
 4007a6c:	31955244 	addi	r6,r6,21833
 4007a70:	39d55544 	addi	r7,r7,21845
 4007a74:	1009883a 	mov	r4,r2
 4007a78:	180b883a 	mov	r5,r3
 4007a7c:	400aae80 	call	400aae8 <__subdf3>
 4007a80:	a80d883a 	mov	r6,r21
 4007a84:	a00f883a 	mov	r7,r20
 4007a88:	1009883a 	mov	r4,r2
 4007a8c:	180b883a 	mov	r5,r3
 4007a90:	400a27c0 	call	400a27c <__muldf3>
 4007a94:	880d883a 	mov	r6,r17
 4007a98:	800f883a 	mov	r7,r16
 4007a9c:	1009883a 	mov	r4,r2
 4007aa0:	180b883a 	mov	r5,r3
 4007aa4:	4008da80 	call	4008da8 <__adddf3>
 4007aa8:	003fdd06 	br	4007a20 <__alt_data_end+0xfc007a20>
 4007aac:	8805883a 	mov	r2,r17
 4007ab0:	8007883a 	mov	r3,r16
 4007ab4:	003fda06 	br	4007a20 <__alt_data_end+0xfc007a20>

04007ab8 <fabs>:
 4007ab8:	00e00034 	movhi	r3,32768
 4007abc:	18ffffc4 	addi	r3,r3,-1
 4007ac0:	2005883a 	mov	r2,r4
 4007ac4:	28c6703a 	and	r3,r5,r3
 4007ac8:	f800283a 	ret

04007acc <__fpclassifyd>:
 4007acc:	00a00034 	movhi	r2,32768
 4007ad0:	10bfffc4 	addi	r2,r2,-1
 4007ad4:	2884703a 	and	r2,r5,r2
 4007ad8:	10000726 	beq	r2,zero,4007af8 <__fpclassifyd+0x2c>
 4007adc:	00fffc34 	movhi	r3,65520
 4007ae0:	019ff834 	movhi	r6,32736
 4007ae4:	28c7883a 	add	r3,r5,r3
 4007ae8:	31bfffc4 	addi	r6,r6,-1
 4007aec:	30c00536 	bltu	r6,r3,4007b04 <__fpclassifyd+0x38>
 4007af0:	00800104 	movi	r2,4
 4007af4:	f800283a 	ret
 4007af8:	2000021e 	bne	r4,zero,4007b04 <__fpclassifyd+0x38>
 4007afc:	00800084 	movi	r2,2
 4007b00:	f800283a 	ret
 4007b04:	00dffc34 	movhi	r3,32752
 4007b08:	019ff834 	movhi	r6,32736
 4007b0c:	28cb883a 	add	r5,r5,r3
 4007b10:	31bfffc4 	addi	r6,r6,-1
 4007b14:	317ff62e 	bgeu	r6,r5,4007af0 <__alt_data_end+0xfc007af0>
 4007b18:	01400434 	movhi	r5,16
 4007b1c:	297fffc4 	addi	r5,r5,-1
 4007b20:	28800236 	bltu	r5,r2,4007b2c <__fpclassifyd+0x60>
 4007b24:	008000c4 	movi	r2,3
 4007b28:	f800283a 	ret
 4007b2c:	10c00226 	beq	r2,r3,4007b38 <__fpclassifyd+0x6c>
 4007b30:	0005883a 	mov	r2,zero
 4007b34:	f800283a 	ret
 4007b38:	2005003a 	cmpeq	r2,r4,zero
 4007b3c:	f800283a 	ret

04007b40 <matherr>:
 4007b40:	0005883a 	mov	r2,zero
 4007b44:	f800283a 	ret

04007b48 <scalbn>:
 4007b48:	2a1ffc2c 	andhi	r8,r5,32752
 4007b4c:	4011d53a 	srai	r8,r8,20
 4007b50:	defffe04 	addi	sp,sp,-8
 4007b54:	dc000015 	stw	r16,0(sp)
 4007b58:	dfc00115 	stw	ra,4(sp)
 4007b5c:	280f883a 	mov	r7,r5
 4007b60:	2015883a 	mov	r10,r4
 4007b64:	3021883a 	mov	r16,r6
 4007b68:	40001e1e 	bne	r8,zero,4007be4 <scalbn+0x9c>
 4007b6c:	00a00034 	movhi	r2,32768
 4007b70:	10bfffc4 	addi	r2,r2,-1
 4007b74:	2884703a 	and	r2,r5,r2
 4007b78:	1104b03a 	or	r2,r2,r4
 4007b7c:	10002226 	beq	r2,zero,4007c08 <scalbn+0xc0>
 4007b80:	01d0d434 	movhi	r7,17232
 4007b84:	000d883a 	mov	r6,zero
 4007b88:	400a27c0 	call	400a27c <__muldf3>
 4007b8c:	013ffff4 	movhi	r4,65535
 4007b90:	210f2c04 	addi	r4,r4,15536
 4007b94:	1015883a 	mov	r10,r2
 4007b98:	180f883a 	mov	r7,r3
 4007b9c:	81002a16 	blt	r16,r4,4007c48 <scalbn+0x100>
 4007ba0:	191ffc2c 	andhi	r4,r3,32752
 4007ba4:	2009d53a 	srai	r4,r4,20
 4007ba8:	223ff284 	addi	r8,r4,-54
 4007bac:	8211883a 	add	r8,r16,r8
 4007bb0:	0081ff84 	movi	r2,2046
 4007bb4:	12002f16 	blt	r2,r8,4007c74 <scalbn+0x12c>
 4007bb8:	0200190e 	bge	zero,r8,4007c20 <scalbn+0xd8>
 4007bbc:	4010953a 	slli	r8,r8,20
 4007bc0:	01600434 	movhi	r5,32784
 4007bc4:	297fffc4 	addi	r5,r5,-1
 4007bc8:	194e703a 	and	r7,r3,r5
 4007bcc:	5005883a 	mov	r2,r10
 4007bd0:	3a06b03a 	or	r3,r7,r8
 4007bd4:	dfc00117 	ldw	ra,4(sp)
 4007bd8:	dc000017 	ldw	r16,0(sp)
 4007bdc:	dec00204 	addi	sp,sp,8
 4007be0:	f800283a 	ret
 4007be4:	0081ffc4 	movi	r2,2047
 4007be8:	2807883a 	mov	r3,r5
 4007bec:	40bfef1e 	bne	r8,r2,4007bac <__alt_data_end+0xfc007bac>
 4007bf0:	200d883a 	mov	r6,r4
 4007bf4:	4008da80 	call	4008da8 <__adddf3>
 4007bf8:	dfc00117 	ldw	ra,4(sp)
 4007bfc:	dc000017 	ldw	r16,0(sp)
 4007c00:	dec00204 	addi	sp,sp,8
 4007c04:	f800283a 	ret
 4007c08:	2005883a 	mov	r2,r4
 4007c0c:	2807883a 	mov	r3,r5
 4007c10:	dfc00117 	ldw	ra,4(sp)
 4007c14:	dc000017 	ldw	r16,0(sp)
 4007c18:	dec00204 	addi	sp,sp,8
 4007c1c:	f800283a 	ret
 4007c20:	00bff2c4 	movi	r2,-53
 4007c24:	4080240e 	bge	r8,r2,4007cb8 <scalbn+0x170>
 4007c28:	00b0d414 	movui	r2,50000
 4007c2c:	14001116 	blt	r2,r16,4007c74 <scalbn+0x12c>
 4007c30:	0130be74 	movhi	r4,49913
 4007c34:	01406974 	movhi	r5,421
 4007c38:	213cd644 	addi	r4,r4,-3239
 4007c3c:	295b87c4 	addi	r5,r5,28191
 4007c40:	500d883a 	mov	r6,r10
 4007c44:	4007ce40 	call	4007ce4 <copysign>
 4007c48:	01b0be74 	movhi	r6,49913
 4007c4c:	01c06974 	movhi	r7,421
 4007c50:	31bcd644 	addi	r6,r6,-3239
 4007c54:	39db87c4 	addi	r7,r7,28191
 4007c58:	1009883a 	mov	r4,r2
 4007c5c:	180b883a 	mov	r5,r3
 4007c60:	400a27c0 	call	400a27c <__muldf3>
 4007c64:	dfc00117 	ldw	ra,4(sp)
 4007c68:	dc000017 	ldw	r16,0(sp)
 4007c6c:	dec00204 	addi	sp,sp,8
 4007c70:	f800283a 	ret
 4007c74:	01220034 	movhi	r4,34816
 4007c78:	015f8e34 	movhi	r5,32312
 4007c7c:	500d883a 	mov	r6,r10
 4007c80:	211d6704 	addi	r4,r4,30108
 4007c84:	29790f04 	addi	r5,r5,-7108
 4007c88:	4007ce40 	call	4007ce4 <copysign>
 4007c8c:	01a20034 	movhi	r6,34816
 4007c90:	01df8e34 	movhi	r7,32312
 4007c94:	319d6704 	addi	r6,r6,30108
 4007c98:	39f90f04 	addi	r7,r7,-7108
 4007c9c:	1009883a 	mov	r4,r2
 4007ca0:	180b883a 	mov	r5,r3
 4007ca4:	400a27c0 	call	400a27c <__muldf3>
 4007ca8:	dfc00117 	ldw	ra,4(sp)
 4007cac:	dc000017 	ldw	r16,0(sp)
 4007cb0:	dec00204 	addi	sp,sp,8
 4007cb4:	f800283a 	ret
 4007cb8:	42000d84 	addi	r8,r8,54
 4007cbc:	4012953a 	slli	r9,r8,20
 4007cc0:	01e00434 	movhi	r7,32784
 4007cc4:	39ffffc4 	addi	r7,r7,-1
 4007cc8:	19ca703a 	and	r5,r3,r7
 4007ccc:	000d883a 	mov	r6,zero
 4007cd0:	01cf2434 	movhi	r7,15504
 4007cd4:	5009883a 	mov	r4,r10
 4007cd8:	494ab03a 	or	r5,r9,r5
 4007cdc:	400a27c0 	call	400a27c <__muldf3>
 4007ce0:	003fbc06 	br	4007bd4 <__alt_data_end+0xfc007bd4>

04007ce4 <copysign>:
 4007ce4:	2005883a 	mov	r2,r4
 4007ce8:	01200034 	movhi	r4,32768
 4007cec:	213fffc4 	addi	r4,r4,-1
 4007cf0:	38e0002c 	andhi	r3,r7,32768
 4007cf4:	290a703a 	and	r5,r5,r4
 4007cf8:	28c6b03a 	or	r3,r5,r3
 4007cfc:	f800283a 	ret

04007d00 <__divsi3>:
 4007d00:	20001b16 	blt	r4,zero,4007d70 <__divsi3+0x70>
 4007d04:	000f883a 	mov	r7,zero
 4007d08:	28001616 	blt	r5,zero,4007d64 <__divsi3+0x64>
 4007d0c:	200d883a 	mov	r6,r4
 4007d10:	29001a2e 	bgeu	r5,r4,4007d7c <__divsi3+0x7c>
 4007d14:	00800804 	movi	r2,32
 4007d18:	00c00044 	movi	r3,1
 4007d1c:	00000106 	br	4007d24 <__divsi3+0x24>
 4007d20:	10000d26 	beq	r2,zero,4007d58 <__divsi3+0x58>
 4007d24:	294b883a 	add	r5,r5,r5
 4007d28:	10bfffc4 	addi	r2,r2,-1
 4007d2c:	18c7883a 	add	r3,r3,r3
 4007d30:	293ffb36 	bltu	r5,r4,4007d20 <__alt_data_end+0xfc007d20>
 4007d34:	0005883a 	mov	r2,zero
 4007d38:	18000726 	beq	r3,zero,4007d58 <__divsi3+0x58>
 4007d3c:	0005883a 	mov	r2,zero
 4007d40:	31400236 	bltu	r6,r5,4007d4c <__divsi3+0x4c>
 4007d44:	314dc83a 	sub	r6,r6,r5
 4007d48:	10c4b03a 	or	r2,r2,r3
 4007d4c:	1806d07a 	srli	r3,r3,1
 4007d50:	280ad07a 	srli	r5,r5,1
 4007d54:	183ffa1e 	bne	r3,zero,4007d40 <__alt_data_end+0xfc007d40>
 4007d58:	38000126 	beq	r7,zero,4007d60 <__divsi3+0x60>
 4007d5c:	0085c83a 	sub	r2,zero,r2
 4007d60:	f800283a 	ret
 4007d64:	014bc83a 	sub	r5,zero,r5
 4007d68:	39c0005c 	xori	r7,r7,1
 4007d6c:	003fe706 	br	4007d0c <__alt_data_end+0xfc007d0c>
 4007d70:	0109c83a 	sub	r4,zero,r4
 4007d74:	01c00044 	movi	r7,1
 4007d78:	003fe306 	br	4007d08 <__alt_data_end+0xfc007d08>
 4007d7c:	00c00044 	movi	r3,1
 4007d80:	003fee06 	br	4007d3c <__alt_data_end+0xfc007d3c>

04007d84 <__modsi3>:
 4007d84:	20001716 	blt	r4,zero,4007de4 <__modsi3+0x60>
 4007d88:	000f883a 	mov	r7,zero
 4007d8c:	2005883a 	mov	r2,r4
 4007d90:	28001216 	blt	r5,zero,4007ddc <__modsi3+0x58>
 4007d94:	2900162e 	bgeu	r5,r4,4007df0 <__modsi3+0x6c>
 4007d98:	01800804 	movi	r6,32
 4007d9c:	00c00044 	movi	r3,1
 4007da0:	00000106 	br	4007da8 <__modsi3+0x24>
 4007da4:	30000a26 	beq	r6,zero,4007dd0 <__modsi3+0x4c>
 4007da8:	294b883a 	add	r5,r5,r5
 4007dac:	31bfffc4 	addi	r6,r6,-1
 4007db0:	18c7883a 	add	r3,r3,r3
 4007db4:	293ffb36 	bltu	r5,r4,4007da4 <__alt_data_end+0xfc007da4>
 4007db8:	18000526 	beq	r3,zero,4007dd0 <__modsi3+0x4c>
 4007dbc:	1806d07a 	srli	r3,r3,1
 4007dc0:	11400136 	bltu	r2,r5,4007dc8 <__modsi3+0x44>
 4007dc4:	1145c83a 	sub	r2,r2,r5
 4007dc8:	280ad07a 	srli	r5,r5,1
 4007dcc:	183ffb1e 	bne	r3,zero,4007dbc <__alt_data_end+0xfc007dbc>
 4007dd0:	38000126 	beq	r7,zero,4007dd8 <__modsi3+0x54>
 4007dd4:	0085c83a 	sub	r2,zero,r2
 4007dd8:	f800283a 	ret
 4007ddc:	014bc83a 	sub	r5,zero,r5
 4007de0:	003fec06 	br	4007d94 <__alt_data_end+0xfc007d94>
 4007de4:	0109c83a 	sub	r4,zero,r4
 4007de8:	01c00044 	movi	r7,1
 4007dec:	003fe706 	br	4007d8c <__alt_data_end+0xfc007d8c>
 4007df0:	00c00044 	movi	r3,1
 4007df4:	003ff106 	br	4007dbc <__alt_data_end+0xfc007dbc>

04007df8 <__udivsi3>:
 4007df8:	200d883a 	mov	r6,r4
 4007dfc:	2900152e 	bgeu	r5,r4,4007e54 <__udivsi3+0x5c>
 4007e00:	28001416 	blt	r5,zero,4007e54 <__udivsi3+0x5c>
 4007e04:	00800804 	movi	r2,32
 4007e08:	00c00044 	movi	r3,1
 4007e0c:	00000206 	br	4007e18 <__udivsi3+0x20>
 4007e10:	10000e26 	beq	r2,zero,4007e4c <__udivsi3+0x54>
 4007e14:	28000516 	blt	r5,zero,4007e2c <__udivsi3+0x34>
 4007e18:	294b883a 	add	r5,r5,r5
 4007e1c:	10bfffc4 	addi	r2,r2,-1
 4007e20:	18c7883a 	add	r3,r3,r3
 4007e24:	293ffa36 	bltu	r5,r4,4007e10 <__alt_data_end+0xfc007e10>
 4007e28:	18000826 	beq	r3,zero,4007e4c <__udivsi3+0x54>
 4007e2c:	0005883a 	mov	r2,zero
 4007e30:	31400236 	bltu	r6,r5,4007e3c <__udivsi3+0x44>
 4007e34:	314dc83a 	sub	r6,r6,r5
 4007e38:	10c4b03a 	or	r2,r2,r3
 4007e3c:	1806d07a 	srli	r3,r3,1
 4007e40:	280ad07a 	srli	r5,r5,1
 4007e44:	183ffa1e 	bne	r3,zero,4007e30 <__alt_data_end+0xfc007e30>
 4007e48:	f800283a 	ret
 4007e4c:	0005883a 	mov	r2,zero
 4007e50:	f800283a 	ret
 4007e54:	00c00044 	movi	r3,1
 4007e58:	003ff406 	br	4007e2c <__alt_data_end+0xfc007e2c>

04007e5c <__umodsi3>:
 4007e5c:	2005883a 	mov	r2,r4
 4007e60:	2900122e 	bgeu	r5,r4,4007eac <__umodsi3+0x50>
 4007e64:	28001116 	blt	r5,zero,4007eac <__umodsi3+0x50>
 4007e68:	01800804 	movi	r6,32
 4007e6c:	00c00044 	movi	r3,1
 4007e70:	00000206 	br	4007e7c <__umodsi3+0x20>
 4007e74:	30000c26 	beq	r6,zero,4007ea8 <__umodsi3+0x4c>
 4007e78:	28000516 	blt	r5,zero,4007e90 <__umodsi3+0x34>
 4007e7c:	294b883a 	add	r5,r5,r5
 4007e80:	31bfffc4 	addi	r6,r6,-1
 4007e84:	18c7883a 	add	r3,r3,r3
 4007e88:	293ffa36 	bltu	r5,r4,4007e74 <__alt_data_end+0xfc007e74>
 4007e8c:	18000626 	beq	r3,zero,4007ea8 <__umodsi3+0x4c>
 4007e90:	1806d07a 	srli	r3,r3,1
 4007e94:	11400136 	bltu	r2,r5,4007e9c <__umodsi3+0x40>
 4007e98:	1145c83a 	sub	r2,r2,r5
 4007e9c:	280ad07a 	srli	r5,r5,1
 4007ea0:	183ffb1e 	bne	r3,zero,4007e90 <__alt_data_end+0xfc007e90>
 4007ea4:	f800283a 	ret
 4007ea8:	f800283a 	ret
 4007eac:	00c00044 	movi	r3,1
 4007eb0:	003ff706 	br	4007e90 <__alt_data_end+0xfc007e90>

04007eb4 <__mulsi3>:
 4007eb4:	0005883a 	mov	r2,zero
 4007eb8:	20000726 	beq	r4,zero,4007ed8 <__mulsi3+0x24>
 4007ebc:	20c0004c 	andi	r3,r4,1
 4007ec0:	2008d07a 	srli	r4,r4,1
 4007ec4:	18000126 	beq	r3,zero,4007ecc <__mulsi3+0x18>
 4007ec8:	1145883a 	add	r2,r2,r5
 4007ecc:	294b883a 	add	r5,r5,r5
 4007ed0:	203ffa1e 	bne	r4,zero,4007ebc <__alt_data_end+0xfc007ebc>
 4007ed4:	f800283a 	ret
 4007ed8:	f800283a 	ret

04007edc <__addsf3>:
 4007edc:	defffc04 	addi	sp,sp,-16
 4007ee0:	2004d7fa 	srli	r2,r4,31
 4007ee4:	280cd5fa 	srli	r6,r5,23
 4007ee8:	dc000015 	stw	r16,0(sp)
 4007eec:	00c02034 	movhi	r3,128
 4007ef0:	2020d5fa 	srli	r16,r4,23
 4007ef4:	280ed7fa 	srli	r7,r5,31
 4007ef8:	18ffffc4 	addi	r3,r3,-1
 4007efc:	dc400115 	stw	r17,4(sp)
 4007f00:	1908703a 	and	r4,r3,r4
 4007f04:	194a703a 	and	r5,r3,r5
 4007f08:	dfc00315 	stw	ra,12(sp)
 4007f0c:	dc800215 	stw	r18,8(sp)
 4007f10:	14403fcc 	andi	r17,r2,255
 4007f14:	84003fcc 	andi	r16,r16,255
 4007f18:	200890fa 	slli	r4,r4,3
 4007f1c:	31803fcc 	andi	r6,r6,255
 4007f20:	280a90fa 	slli	r5,r5,3
 4007f24:	89c05026 	beq	r17,r7,4008068 <__addsf3+0x18c>
 4007f28:	8185c83a 	sub	r2,r16,r6
 4007f2c:	00807a0e 	bge	zero,r2,4008118 <__addsf3+0x23c>
 4007f30:	30001e1e 	bne	r6,zero,4007fac <__addsf3+0xd0>
 4007f34:	28006d1e 	bne	r5,zero,40080ec <__addsf3+0x210>
 4007f38:	208001cc 	andi	r2,r4,7
 4007f3c:	10000426 	beq	r2,zero,4007f50 <__addsf3+0x74>
 4007f40:	208003cc 	andi	r2,r4,15
 4007f44:	00c00104 	movi	r3,4
 4007f48:	10c00126 	beq	r2,r3,4007f50 <__addsf3+0x74>
 4007f4c:	20c9883a 	add	r4,r4,r3
 4007f50:	2081002c 	andhi	r2,r4,1024
 4007f54:	10003926 	beq	r2,zero,400803c <__addsf3+0x160>
 4007f58:	84000044 	addi	r16,r16,1
 4007f5c:	00803fc4 	movi	r2,255
 4007f60:	80807826 	beq	r16,r2,4008144 <__addsf3+0x268>
 4007f64:	200891ba 	slli	r4,r4,6
 4007f68:	8805883a 	mov	r2,r17
 4007f6c:	2008d27a 	srli	r4,r4,9
 4007f70:	84003fcc 	andi	r16,r16,255
 4007f74:	800695fa 	slli	r3,r16,23
 4007f78:	10803fcc 	andi	r2,r2,255
 4007f7c:	04002034 	movhi	r16,128
 4007f80:	843fffc4 	addi	r16,r16,-1
 4007f84:	100497fa 	slli	r2,r2,31
 4007f88:	2408703a 	and	r4,r4,r16
 4007f8c:	20e0b03a 	or	r16,r4,r3
 4007f90:	8084b03a 	or	r2,r16,r2
 4007f94:	dfc00317 	ldw	ra,12(sp)
 4007f98:	dc800217 	ldw	r18,8(sp)
 4007f9c:	dc400117 	ldw	r17,4(sp)
 4007fa0:	dc000017 	ldw	r16,0(sp)
 4007fa4:	dec00404 	addi	sp,sp,16
 4007fa8:	f800283a 	ret
 4007fac:	00c03fc4 	movi	r3,255
 4007fb0:	80ffe126 	beq	r16,r3,4007f38 <__alt_data_end+0xfc007f38>
 4007fb4:	29410034 	orhi	r5,r5,1024
 4007fb8:	00c006c4 	movi	r3,27
 4007fbc:	18807516 	blt	r3,r2,4008194 <__addsf3+0x2b8>
 4007fc0:	00c00804 	movi	r3,32
 4007fc4:	1887c83a 	sub	r3,r3,r2
 4007fc8:	28c6983a 	sll	r3,r5,r3
 4007fcc:	288ad83a 	srl	r5,r5,r2
 4007fd0:	1804c03a 	cmpne	r2,r3,zero
 4007fd4:	288ab03a 	or	r5,r5,r2
 4007fd8:	2149c83a 	sub	r4,r4,r5
 4007fdc:	2081002c 	andhi	r2,r4,1024
 4007fe0:	10001426 	beq	r2,zero,4008034 <__addsf3+0x158>
 4007fe4:	04810034 	movhi	r18,1024
 4007fe8:	94bfffc4 	addi	r18,r18,-1
 4007fec:	24a4703a 	and	r18,r4,r18
 4007ff0:	9009883a 	mov	r4,r18
 4007ff4:	400b7f80 	call	400b7f8 <__clzsi2>
 4007ff8:	10bffec4 	addi	r2,r2,-5
 4007ffc:	90a4983a 	sll	r18,r18,r2
 4008000:	14005416 	blt	r2,r16,4008154 <__addsf3+0x278>
 4008004:	1405c83a 	sub	r2,r2,r16
 4008008:	11000044 	addi	r4,r2,1
 400800c:	00800804 	movi	r2,32
 4008010:	1105c83a 	sub	r2,r2,r4
 4008014:	9084983a 	sll	r2,r18,r2
 4008018:	9124d83a 	srl	r18,r18,r4
 400801c:	0021883a 	mov	r16,zero
 4008020:	1008c03a 	cmpne	r4,r2,zero
 4008024:	9108b03a 	or	r4,r18,r4
 4008028:	003fc306 	br	4007f38 <__alt_data_end+0xfc007f38>
 400802c:	1000db26 	beq	r2,zero,400839c <__addsf3+0x4c0>
 4008030:	1009883a 	mov	r4,r2
 4008034:	208001cc 	andi	r2,r4,7
 4008038:	103fc11e 	bne	r2,zero,4007f40 <__alt_data_end+0xfc007f40>
 400803c:	2006d0fa 	srli	r3,r4,3
 4008040:	01003fc4 	movi	r4,255
 4008044:	8805883a 	mov	r2,r17
 4008048:	8100241e 	bne	r16,r4,40080dc <__addsf3+0x200>
 400804c:	18006e26 	beq	r3,zero,4008208 <__addsf3+0x32c>
 4008050:	19001034 	orhi	r4,r3,64
 4008054:	00c02034 	movhi	r3,128
 4008058:	18ffffc4 	addi	r3,r3,-1
 400805c:	043fffc4 	movi	r16,-1
 4008060:	20c8703a 	and	r4,r4,r3
 4008064:	003fc206 	br	4007f70 <__alt_data_end+0xfc007f70>
 4008068:	8187c83a 	sub	r3,r16,r6
 400806c:	00c03e0e 	bge	zero,r3,4008168 <__addsf3+0x28c>
 4008070:	30002326 	beq	r6,zero,4008100 <__addsf3+0x224>
 4008074:	01803fc4 	movi	r6,255
 4008078:	81bfaf26 	beq	r16,r6,4007f38 <__alt_data_end+0xfc007f38>
 400807c:	29410034 	orhi	r5,r5,1024
 4008080:	018006c4 	movi	r6,27
 4008084:	30c07416 	blt	r6,r3,4008258 <__addsf3+0x37c>
 4008088:	01800804 	movi	r6,32
 400808c:	30cdc83a 	sub	r6,r6,r3
 4008090:	298c983a 	sll	r6,r5,r6
 4008094:	28cad83a 	srl	r5,r5,r3
 4008098:	3006c03a 	cmpne	r3,r6,zero
 400809c:	28cab03a 	or	r5,r5,r3
 40080a0:	2149883a 	add	r4,r4,r5
 40080a4:	20c1002c 	andhi	r3,r4,1024
 40080a8:	183fe226 	beq	r3,zero,4008034 <__alt_data_end+0xfc008034>
 40080ac:	84000044 	addi	r16,r16,1
 40080b0:	00c03fc4 	movi	r3,255
 40080b4:	80c05426 	beq	r16,r3,4008208 <__addsf3+0x32c>
 40080b8:	00bf0034 	movhi	r2,64512
 40080bc:	10bfffc4 	addi	r2,r2,-1
 40080c0:	20c0004c 	andi	r3,r4,1
 40080c4:	2088703a 	and	r4,r4,r2
 40080c8:	2008d07a 	srli	r4,r4,1
 40080cc:	20c8b03a 	or	r4,r4,r3
 40080d0:	003f9906 	br	4007f38 <__alt_data_end+0xfc007f38>
 40080d4:	0007883a 	mov	r3,zero
 40080d8:	0005883a 	mov	r2,zero
 40080dc:	01002034 	movhi	r4,128
 40080e0:	213fffc4 	addi	r4,r4,-1
 40080e4:	1908703a 	and	r4,r3,r4
 40080e8:	003fa106 	br	4007f70 <__alt_data_end+0xfc007f70>
 40080ec:	10bfffc4 	addi	r2,r2,-1
 40080f0:	103fb926 	beq	r2,zero,4007fd8 <__alt_data_end+0xfc007fd8>
 40080f4:	00c03fc4 	movi	r3,255
 40080f8:	80ffaf1e 	bne	r16,r3,4007fb8 <__alt_data_end+0xfc007fb8>
 40080fc:	003f8e06 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008100:	283f8d26 	beq	r5,zero,4007f38 <__alt_data_end+0xfc007f38>
 4008104:	18ffffc4 	addi	r3,r3,-1
 4008108:	183fe526 	beq	r3,zero,40080a0 <__alt_data_end+0xfc0080a0>
 400810c:	01803fc4 	movi	r6,255
 4008110:	81bfdb1e 	bne	r16,r6,4008080 <__alt_data_end+0xfc008080>
 4008114:	003f8806 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008118:	1000201e 	bne	r2,zero,400819c <__addsf3+0x2c0>
 400811c:	80800044 	addi	r2,r16,1
 4008120:	10803fcc 	andi	r2,r2,255
 4008124:	01800044 	movi	r6,1
 4008128:	3080450e 	bge	r6,r2,4008240 <__addsf3+0x364>
 400812c:	2165c83a 	sub	r18,r4,r5
 4008130:	90c1002c 	andhi	r3,r18,1024
 4008134:	18002b26 	beq	r3,zero,40081e4 <__addsf3+0x308>
 4008138:	2925c83a 	sub	r18,r5,r4
 400813c:	3823883a 	mov	r17,r7
 4008140:	003fab06 	br	4007ff0 <__alt_data_end+0xfc007ff0>
 4008144:	8805883a 	mov	r2,r17
 4008148:	043fffc4 	movi	r16,-1
 400814c:	0009883a 	mov	r4,zero
 4008150:	003f8706 	br	4007f70 <__alt_data_end+0xfc007f70>
 4008154:	013f0034 	movhi	r4,64512
 4008158:	213fffc4 	addi	r4,r4,-1
 400815c:	80a1c83a 	sub	r16,r16,r2
 4008160:	9108703a 	and	r4,r18,r4
 4008164:	003f7406 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008168:	1800411e 	bne	r3,zero,4008270 <__addsf3+0x394>
 400816c:	80c00044 	addi	r3,r16,1
 4008170:	19c03fcc 	andi	r7,r3,255
 4008174:	01800044 	movi	r6,1
 4008178:	31c0260e 	bge	r6,r7,4008214 <__addsf3+0x338>
 400817c:	01803fc4 	movi	r6,255
 4008180:	19802126 	beq	r3,r6,4008208 <__addsf3+0x32c>
 4008184:	2149883a 	add	r4,r4,r5
 4008188:	2008d07a 	srli	r4,r4,1
 400818c:	1821883a 	mov	r16,r3
 4008190:	003f6906 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008194:	01400044 	movi	r5,1
 4008198:	003f8f06 	br	4007fd8 <__alt_data_end+0xfc007fd8>
 400819c:	8000151e 	bne	r16,zero,40081f4 <__addsf3+0x318>
 40081a0:	20002f26 	beq	r4,zero,4008260 <__addsf3+0x384>
 40081a4:	0084303a 	nor	r2,zero,r2
 40081a8:	10000a26 	beq	r2,zero,40081d4 <__addsf3+0x2f8>
 40081ac:	00c03fc4 	movi	r3,255
 40081b0:	30c02b26 	beq	r6,r3,4008260 <__addsf3+0x384>
 40081b4:	00c006c4 	movi	r3,27
 40081b8:	18806d16 	blt	r3,r2,4008370 <__addsf3+0x494>
 40081bc:	00c00804 	movi	r3,32
 40081c0:	1887c83a 	sub	r3,r3,r2
 40081c4:	20c6983a 	sll	r3,r4,r3
 40081c8:	2084d83a 	srl	r2,r4,r2
 40081cc:	1808c03a 	cmpne	r4,r3,zero
 40081d0:	1108b03a 	or	r4,r2,r4
 40081d4:	2909c83a 	sub	r4,r5,r4
 40081d8:	3021883a 	mov	r16,r6
 40081dc:	3823883a 	mov	r17,r7
 40081e0:	003f7e06 	br	4007fdc <__alt_data_end+0xfc007fdc>
 40081e4:	903f821e 	bne	r18,zero,4007ff0 <__alt_data_end+0xfc007ff0>
 40081e8:	0005883a 	mov	r2,zero
 40081ec:	0021883a 	mov	r16,zero
 40081f0:	003fba06 	br	40080dc <__alt_data_end+0xfc0080dc>
 40081f4:	00c03fc4 	movi	r3,255
 40081f8:	30c01926 	beq	r6,r3,4008260 <__addsf3+0x384>
 40081fc:	0085c83a 	sub	r2,zero,r2
 4008200:	21010034 	orhi	r4,r4,1024
 4008204:	003feb06 	br	40081b4 <__alt_data_end+0xfc0081b4>
 4008208:	043fffc4 	movi	r16,-1
 400820c:	0009883a 	mov	r4,zero
 4008210:	003f5706 	br	4007f70 <__alt_data_end+0xfc007f70>
 4008214:	80004a1e 	bne	r16,zero,4008340 <__addsf3+0x464>
 4008218:	20005926 	beq	r4,zero,4008380 <__addsf3+0x4a4>
 400821c:	283f4626 	beq	r5,zero,4007f38 <__alt_data_end+0xfc007f38>
 4008220:	2149883a 	add	r4,r4,r5
 4008224:	2081002c 	andhi	r2,r4,1024
 4008228:	103f8226 	beq	r2,zero,4008034 <__alt_data_end+0xfc008034>
 400822c:	00bf0034 	movhi	r2,64512
 4008230:	10bfffc4 	addi	r2,r2,-1
 4008234:	3021883a 	mov	r16,r6
 4008238:	2088703a 	and	r4,r4,r2
 400823c:	003f3e06 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008240:	8000121e 	bne	r16,zero,400828c <__addsf3+0x3b0>
 4008244:	2000261e 	bne	r4,zero,40082e0 <__addsf3+0x404>
 4008248:	283fa226 	beq	r5,zero,40080d4 <__alt_data_end+0xfc0080d4>
 400824c:	2809883a 	mov	r4,r5
 4008250:	3823883a 	mov	r17,r7
 4008254:	003f3806 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008258:	01400044 	movi	r5,1
 400825c:	003f9006 	br	40080a0 <__alt_data_end+0xfc0080a0>
 4008260:	2809883a 	mov	r4,r5
 4008264:	3021883a 	mov	r16,r6
 4008268:	3823883a 	mov	r17,r7
 400826c:	003f3206 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008270:	80000c1e 	bne	r16,zero,40082a4 <__addsf3+0x3c8>
 4008274:	20002f26 	beq	r4,zero,4008334 <__addsf3+0x458>
 4008278:	00c6303a 	nor	r3,zero,r3
 400827c:	18002b1e 	bne	r3,zero,400832c <__addsf3+0x450>
 4008280:	2149883a 	add	r4,r4,r5
 4008284:	3021883a 	mov	r16,r6
 4008288:	003f8606 	br	40080a4 <__alt_data_end+0xfc0080a4>
 400828c:	20001b1e 	bne	r4,zero,40082fc <__addsf3+0x420>
 4008290:	28003926 	beq	r5,zero,4008378 <__addsf3+0x49c>
 4008294:	2809883a 	mov	r4,r5
 4008298:	3823883a 	mov	r17,r7
 400829c:	04003fc4 	movi	r16,255
 40082a0:	003f2506 	br	4007f38 <__alt_data_end+0xfc007f38>
 40082a4:	01c03fc4 	movi	r7,255
 40082a8:	31c02226 	beq	r6,r7,4008334 <__addsf3+0x458>
 40082ac:	00c7c83a 	sub	r3,zero,r3
 40082b0:	21010034 	orhi	r4,r4,1024
 40082b4:	01c006c4 	movi	r7,27
 40082b8:	38c03616 	blt	r7,r3,4008394 <__addsf3+0x4b8>
 40082bc:	01c00804 	movi	r7,32
 40082c0:	38cfc83a 	sub	r7,r7,r3
 40082c4:	21ce983a 	sll	r7,r4,r7
 40082c8:	20c6d83a 	srl	r3,r4,r3
 40082cc:	3808c03a 	cmpne	r4,r7,zero
 40082d0:	1906b03a 	or	r3,r3,r4
 40082d4:	1949883a 	add	r4,r3,r5
 40082d8:	3021883a 	mov	r16,r6
 40082dc:	003f7106 	br	40080a4 <__alt_data_end+0xfc0080a4>
 40082e0:	283f1526 	beq	r5,zero,4007f38 <__alt_data_end+0xfc007f38>
 40082e4:	2145c83a 	sub	r2,r4,r5
 40082e8:	10c1002c 	andhi	r3,r2,1024
 40082ec:	183f4f26 	beq	r3,zero,400802c <__alt_data_end+0xfc00802c>
 40082f0:	2909c83a 	sub	r4,r5,r4
 40082f4:	3823883a 	mov	r17,r7
 40082f8:	003f0f06 	br	4007f38 <__alt_data_end+0xfc007f38>
 40082fc:	28001a26 	beq	r5,zero,4008368 <__addsf3+0x48c>
 4008300:	2008d0fa 	srli	r4,r4,3
 4008304:	2080102c 	andhi	r2,r4,64
 4008308:	10000526 	beq	r2,zero,4008320 <__addsf3+0x444>
 400830c:	280ad0fa 	srli	r5,r5,3
 4008310:	2880102c 	andhi	r2,r5,64
 4008314:	1000021e 	bne	r2,zero,4008320 <__addsf3+0x444>
 4008318:	2809883a 	mov	r4,r5
 400831c:	3823883a 	mov	r17,r7
 4008320:	200890fa 	slli	r4,r4,3
 4008324:	04003fc4 	movi	r16,255
 4008328:	003f0306 	br	4007f38 <__alt_data_end+0xfc007f38>
 400832c:	01c03fc4 	movi	r7,255
 4008330:	31ffe01e 	bne	r6,r7,40082b4 <__alt_data_end+0xfc0082b4>
 4008334:	2809883a 	mov	r4,r5
 4008338:	3021883a 	mov	r16,r6
 400833c:	003efe06 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008340:	20001126 	beq	r4,zero,4008388 <__addsf3+0x4ac>
 4008344:	28000826 	beq	r5,zero,4008368 <__addsf3+0x48c>
 4008348:	2008d0fa 	srli	r4,r4,3
 400834c:	2080102c 	andhi	r2,r4,64
 4008350:	103ff326 	beq	r2,zero,4008320 <__alt_data_end+0xfc008320>
 4008354:	280ad0fa 	srli	r5,r5,3
 4008358:	2880102c 	andhi	r2,r5,64
 400835c:	103ff01e 	bne	r2,zero,4008320 <__alt_data_end+0xfc008320>
 4008360:	2809883a 	mov	r4,r5
 4008364:	003fee06 	br	4008320 <__alt_data_end+0xfc008320>
 4008368:	04003fc4 	movi	r16,255
 400836c:	003ef206 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008370:	01000044 	movi	r4,1
 4008374:	003f9706 	br	40081d4 <__alt_data_end+0xfc0081d4>
 4008378:	0005883a 	mov	r2,zero
 400837c:	003f3406 	br	4008050 <__alt_data_end+0xfc008050>
 4008380:	2809883a 	mov	r4,r5
 4008384:	003eec06 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008388:	2809883a 	mov	r4,r5
 400838c:	04003fc4 	movi	r16,255
 4008390:	003ee906 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008394:	00c00044 	movi	r3,1
 4008398:	003fce06 	br	40082d4 <__alt_data_end+0xfc0082d4>
 400839c:	0005883a 	mov	r2,zero
 40083a0:	003f4e06 	br	40080dc <__alt_data_end+0xfc0080dc>

040083a4 <__mulsf3>:
 40083a4:	defff504 	addi	sp,sp,-44
 40083a8:	dc000115 	stw	r16,4(sp)
 40083ac:	2020d5fa 	srli	r16,r4,23
 40083b0:	dd400615 	stw	r21,24(sp)
 40083b4:	202ad7fa 	srli	r21,r4,31
 40083b8:	dc800315 	stw	r18,12(sp)
 40083bc:	04802034 	movhi	r18,128
 40083c0:	df000915 	stw	fp,36(sp)
 40083c4:	dd000515 	stw	r20,20(sp)
 40083c8:	94bfffc4 	addi	r18,r18,-1
 40083cc:	dfc00a15 	stw	ra,40(sp)
 40083d0:	ddc00815 	stw	r23,32(sp)
 40083d4:	dd800715 	stw	r22,28(sp)
 40083d8:	dcc00415 	stw	r19,16(sp)
 40083dc:	dc400215 	stw	r17,8(sp)
 40083e0:	84003fcc 	andi	r16,r16,255
 40083e4:	9124703a 	and	r18,r18,r4
 40083e8:	a829883a 	mov	r20,r21
 40083ec:	af003fcc 	andi	fp,r21,255
 40083f0:	80005426 	beq	r16,zero,4008544 <__mulsf3+0x1a0>
 40083f4:	00803fc4 	movi	r2,255
 40083f8:	80802f26 	beq	r16,r2,40084b8 <__mulsf3+0x114>
 40083fc:	91002034 	orhi	r4,r18,128
 4008400:	202490fa 	slli	r18,r4,3
 4008404:	843fe044 	addi	r16,r16,-127
 4008408:	0023883a 	mov	r17,zero
 400840c:	002f883a 	mov	r23,zero
 4008410:	2804d5fa 	srli	r2,r5,23
 4008414:	282cd7fa 	srli	r22,r5,31
 4008418:	01002034 	movhi	r4,128
 400841c:	213fffc4 	addi	r4,r4,-1
 4008420:	10803fcc 	andi	r2,r2,255
 4008424:	2166703a 	and	r19,r4,r5
 4008428:	b1803fcc 	andi	r6,r22,255
 400842c:	10004c26 	beq	r2,zero,4008560 <__mulsf3+0x1bc>
 4008430:	00c03fc4 	movi	r3,255
 4008434:	10c04726 	beq	r2,r3,4008554 <__mulsf3+0x1b0>
 4008438:	99002034 	orhi	r4,r19,128
 400843c:	202690fa 	slli	r19,r4,3
 4008440:	10bfe044 	addi	r2,r2,-127
 4008444:	0007883a 	mov	r3,zero
 4008448:	80a1883a 	add	r16,r16,r2
 400844c:	010003c4 	movi	r4,15
 4008450:	1c44b03a 	or	r2,r3,r17
 4008454:	b56af03a 	xor	r21,r22,r21
 4008458:	81c00044 	addi	r7,r16,1
 400845c:	20806b36 	bltu	r4,r2,400860c <__mulsf3+0x268>
 4008460:	100490ba 	slli	r2,r2,2
 4008464:	01010074 	movhi	r4,1025
 4008468:	21211e04 	addi	r4,r4,-31624
 400846c:	1105883a 	add	r2,r2,r4
 4008470:	10800017 	ldw	r2,0(r2)
 4008474:	1000683a 	jmp	r2
 4008478:	0400860c 	andi	r16,zero,536
 400847c:	040084cc 	andi	r16,zero,531
 4008480:	040084cc 	andi	r16,zero,531
 4008484:	040084c8 	cmpgei	r16,zero,531
 4008488:	040085f0 	cmpltui	r16,zero,535
 400848c:	040085f0 	cmpltui	r16,zero,535
 4008490:	040085dc 	xori	r16,zero,535
 4008494:	040084c8 	cmpgei	r16,zero,531
 4008498:	040085f0 	cmpltui	r16,zero,535
 400849c:	040085dc 	xori	r16,zero,535
 40084a0:	040085f0 	cmpltui	r16,zero,535
 40084a4:	040084c8 	cmpgei	r16,zero,531
 40084a8:	040085fc 	xorhi	r16,zero,535
 40084ac:	040085fc 	xorhi	r16,zero,535
 40084b0:	040085fc 	xorhi	r16,zero,535
 40084b4:	0400870c 	andi	r16,zero,540
 40084b8:	90003b1e 	bne	r18,zero,40085a8 <__mulsf3+0x204>
 40084bc:	04400204 	movi	r17,8
 40084c0:	05c00084 	movi	r23,2
 40084c4:	003fd206 	br	4008410 <__alt_data_end+0xfc008410>
 40084c8:	302b883a 	mov	r21,r6
 40084cc:	00800084 	movi	r2,2
 40084d0:	18802626 	beq	r3,r2,400856c <__mulsf3+0x1c8>
 40084d4:	008000c4 	movi	r2,3
 40084d8:	1880b826 	beq	r3,r2,40087bc <__mulsf3+0x418>
 40084dc:	00800044 	movi	r2,1
 40084e0:	1880af1e 	bne	r3,r2,40087a0 <__mulsf3+0x3fc>
 40084e4:	a829883a 	mov	r20,r21
 40084e8:	0007883a 	mov	r3,zero
 40084ec:	0009883a 	mov	r4,zero
 40084f0:	18803fcc 	andi	r2,r3,255
 40084f4:	100695fa 	slli	r3,r2,23
 40084f8:	a0803fcc 	andi	r2,r20,255
 40084fc:	100a97fa 	slli	r5,r2,31
 4008500:	00802034 	movhi	r2,128
 4008504:	10bfffc4 	addi	r2,r2,-1
 4008508:	2084703a 	and	r2,r4,r2
 400850c:	10c4b03a 	or	r2,r2,r3
 4008510:	1144b03a 	or	r2,r2,r5
 4008514:	dfc00a17 	ldw	ra,40(sp)
 4008518:	df000917 	ldw	fp,36(sp)
 400851c:	ddc00817 	ldw	r23,32(sp)
 4008520:	dd800717 	ldw	r22,28(sp)
 4008524:	dd400617 	ldw	r21,24(sp)
 4008528:	dd000517 	ldw	r20,20(sp)
 400852c:	dcc00417 	ldw	r19,16(sp)
 4008530:	dc800317 	ldw	r18,12(sp)
 4008534:	dc400217 	ldw	r17,8(sp)
 4008538:	dc000117 	ldw	r16,4(sp)
 400853c:	dec00b04 	addi	sp,sp,44
 4008540:	f800283a 	ret
 4008544:	90000d1e 	bne	r18,zero,400857c <__mulsf3+0x1d8>
 4008548:	04400104 	movi	r17,4
 400854c:	05c00044 	movi	r23,1
 4008550:	003faf06 	br	4008410 <__alt_data_end+0xfc008410>
 4008554:	9806c03a 	cmpne	r3,r19,zero
 4008558:	18c00084 	addi	r3,r3,2
 400855c:	003fba06 	br	4008448 <__alt_data_end+0xfc008448>
 4008560:	9800141e 	bne	r19,zero,40085b4 <__mulsf3+0x210>
 4008564:	00c00044 	movi	r3,1
 4008568:	003fb706 	br	4008448 <__alt_data_end+0xfc008448>
 400856c:	a829883a 	mov	r20,r21
 4008570:	00ffffc4 	movi	r3,-1
 4008574:	0009883a 	mov	r4,zero
 4008578:	003fdd06 	br	40084f0 <__alt_data_end+0xfc0084f0>
 400857c:	9009883a 	mov	r4,r18
 4008580:	d9400015 	stw	r5,0(sp)
 4008584:	400b7f80 	call	400b7f8 <__clzsi2>
 4008588:	10fffec4 	addi	r3,r2,-5
 400858c:	10801d84 	addi	r2,r2,118
 4008590:	90e4983a 	sll	r18,r18,r3
 4008594:	00a1c83a 	sub	r16,zero,r2
 4008598:	0023883a 	mov	r17,zero
 400859c:	002f883a 	mov	r23,zero
 40085a0:	d9400017 	ldw	r5,0(sp)
 40085a4:	003f9a06 	br	4008410 <__alt_data_end+0xfc008410>
 40085a8:	04400304 	movi	r17,12
 40085ac:	05c000c4 	movi	r23,3
 40085b0:	003f9706 	br	4008410 <__alt_data_end+0xfc008410>
 40085b4:	9809883a 	mov	r4,r19
 40085b8:	d9800015 	stw	r6,0(sp)
 40085bc:	400b7f80 	call	400b7f8 <__clzsi2>
 40085c0:	10fffec4 	addi	r3,r2,-5
 40085c4:	10801d84 	addi	r2,r2,118
 40085c8:	98e6983a 	sll	r19,r19,r3
 40085cc:	0085c83a 	sub	r2,zero,r2
 40085d0:	0007883a 	mov	r3,zero
 40085d4:	d9800017 	ldw	r6,0(sp)
 40085d8:	003f9b06 	br	4008448 <__alt_data_end+0xfc008448>
 40085dc:	01002034 	movhi	r4,128
 40085e0:	0029883a 	mov	r20,zero
 40085e4:	213fffc4 	addi	r4,r4,-1
 40085e8:	00ffffc4 	movi	r3,-1
 40085ec:	003fc006 	br	40084f0 <__alt_data_end+0xfc0084f0>
 40085f0:	9027883a 	mov	r19,r18
 40085f4:	b807883a 	mov	r3,r23
 40085f8:	003fb406 	br	40084cc <__alt_data_end+0xfc0084cc>
 40085fc:	9027883a 	mov	r19,r18
 4008600:	e02b883a 	mov	r21,fp
 4008604:	b807883a 	mov	r3,r23
 4008608:	003fb006 	br	40084cc <__alt_data_end+0xfc0084cc>
 400860c:	9028d43a 	srli	r20,r18,16
 4008610:	982cd43a 	srli	r22,r19,16
 4008614:	94bfffcc 	andi	r18,r18,65535
 4008618:	9cffffcc 	andi	r19,r19,65535
 400861c:	980b883a 	mov	r5,r19
 4008620:	9009883a 	mov	r4,r18
 4008624:	d9c00015 	stw	r7,0(sp)
 4008628:	4007eb40 	call	4007eb4 <__mulsi3>
 400862c:	a00b883a 	mov	r5,r20
 4008630:	9809883a 	mov	r4,r19
 4008634:	1023883a 	mov	r17,r2
 4008638:	4007eb40 	call	4007eb4 <__mulsi3>
 400863c:	a009883a 	mov	r4,r20
 4008640:	b00b883a 	mov	r5,r22
 4008644:	1027883a 	mov	r19,r2
 4008648:	4007eb40 	call	4007eb4 <__mulsi3>
 400864c:	b00b883a 	mov	r5,r22
 4008650:	9009883a 	mov	r4,r18
 4008654:	1029883a 	mov	r20,r2
 4008658:	4007eb40 	call	4007eb4 <__mulsi3>
 400865c:	8806d43a 	srli	r3,r17,16
 4008660:	14c5883a 	add	r2,r2,r19
 4008664:	d9c00017 	ldw	r7,0(sp)
 4008668:	1885883a 	add	r2,r3,r2
 400866c:	14c0022e 	bgeu	r2,r19,4008678 <__mulsf3+0x2d4>
 4008670:	00c00074 	movhi	r3,1
 4008674:	a0e9883a 	add	r20,r20,r3
 4008678:	1026943a 	slli	r19,r2,16
 400867c:	8c7fffcc 	andi	r17,r17,65535
 4008680:	1004d43a 	srli	r2,r2,16
 4008684:	9c63883a 	add	r17,r19,r17
 4008688:	882691ba 	slli	r19,r17,6
 400868c:	1505883a 	add	r2,r2,r20
 4008690:	8822d6ba 	srli	r17,r17,26
 4008694:	100891ba 	slli	r4,r2,6
 4008698:	9826c03a 	cmpne	r19,r19,zero
 400869c:	9c62b03a 	or	r17,r19,r17
 40086a0:	8926b03a 	or	r19,r17,r4
 40086a4:	9882002c 	andhi	r2,r19,2048
 40086a8:	10000426 	beq	r2,zero,40086bc <__mulsf3+0x318>
 40086ac:	9804d07a 	srli	r2,r19,1
 40086b0:	9900004c 	andi	r4,r19,1
 40086b4:	3821883a 	mov	r16,r7
 40086b8:	1126b03a 	or	r19,r2,r4
 40086bc:	80c01fc4 	addi	r3,r16,127
 40086c0:	00c0210e 	bge	zero,r3,4008748 <__mulsf3+0x3a4>
 40086c4:	988001cc 	andi	r2,r19,7
 40086c8:	10000426 	beq	r2,zero,40086dc <__mulsf3+0x338>
 40086cc:	988003cc 	andi	r2,r19,15
 40086d0:	01000104 	movi	r4,4
 40086d4:	11000126 	beq	r2,r4,40086dc <__mulsf3+0x338>
 40086d8:	9927883a 	add	r19,r19,r4
 40086dc:	9882002c 	andhi	r2,r19,2048
 40086e0:	10000426 	beq	r2,zero,40086f4 <__mulsf3+0x350>
 40086e4:	00be0034 	movhi	r2,63488
 40086e8:	10bfffc4 	addi	r2,r2,-1
 40086ec:	80c02004 	addi	r3,r16,128
 40086f0:	98a6703a 	and	r19,r19,r2
 40086f4:	00803f84 	movi	r2,254
 40086f8:	10ff9c16 	blt	r2,r3,400856c <__alt_data_end+0xfc00856c>
 40086fc:	980891ba 	slli	r4,r19,6
 4008700:	a829883a 	mov	r20,r21
 4008704:	2008d27a 	srli	r4,r4,9
 4008708:	003f7906 	br	40084f0 <__alt_data_end+0xfc0084f0>
 400870c:	9080102c 	andhi	r2,r18,64
 4008710:	10000826 	beq	r2,zero,4008734 <__mulsf3+0x390>
 4008714:	9880102c 	andhi	r2,r19,64
 4008718:	1000061e 	bne	r2,zero,4008734 <__mulsf3+0x390>
 400871c:	00802034 	movhi	r2,128
 4008720:	99001034 	orhi	r4,r19,64
 4008724:	10bfffc4 	addi	r2,r2,-1
 4008728:	b029883a 	mov	r20,r22
 400872c:	2088703a 	and	r4,r4,r2
 4008730:	003fad06 	br	40085e8 <__alt_data_end+0xfc0085e8>
 4008734:	00802034 	movhi	r2,128
 4008738:	91001034 	orhi	r4,r18,64
 400873c:	10bfffc4 	addi	r2,r2,-1
 4008740:	2088703a 	and	r4,r4,r2
 4008744:	003fa806 	br	40085e8 <__alt_data_end+0xfc0085e8>
 4008748:	00800044 	movi	r2,1
 400874c:	10c7c83a 	sub	r3,r2,r3
 4008750:	008006c4 	movi	r2,27
 4008754:	10ff6316 	blt	r2,r3,40084e4 <__alt_data_end+0xfc0084e4>
 4008758:	00800804 	movi	r2,32
 400875c:	10c5c83a 	sub	r2,r2,r3
 4008760:	9884983a 	sll	r2,r19,r2
 4008764:	98c6d83a 	srl	r3,r19,r3
 4008768:	1004c03a 	cmpne	r2,r2,zero
 400876c:	1884b03a 	or	r2,r3,r2
 4008770:	10c001cc 	andi	r3,r2,7
 4008774:	18000426 	beq	r3,zero,4008788 <__mulsf3+0x3e4>
 4008778:	10c003cc 	andi	r3,r2,15
 400877c:	01000104 	movi	r4,4
 4008780:	19000126 	beq	r3,r4,4008788 <__mulsf3+0x3e4>
 4008784:	1105883a 	add	r2,r2,r4
 4008788:	10c1002c 	andhi	r3,r2,1024
 400878c:	18000626 	beq	r3,zero,40087a8 <__mulsf3+0x404>
 4008790:	a829883a 	mov	r20,r21
 4008794:	00c00044 	movi	r3,1
 4008798:	0009883a 	mov	r4,zero
 400879c:	003f5406 	br	40084f0 <__alt_data_end+0xfc0084f0>
 40087a0:	3821883a 	mov	r16,r7
 40087a4:	003fc506 	br	40086bc <__alt_data_end+0xfc0086bc>
 40087a8:	100491ba 	slli	r2,r2,6
 40087ac:	a829883a 	mov	r20,r21
 40087b0:	0007883a 	mov	r3,zero
 40087b4:	1008d27a 	srli	r4,r2,9
 40087b8:	003f4d06 	br	40084f0 <__alt_data_end+0xfc0084f0>
 40087bc:	00802034 	movhi	r2,128
 40087c0:	99001034 	orhi	r4,r19,64
 40087c4:	10bfffc4 	addi	r2,r2,-1
 40087c8:	a829883a 	mov	r20,r21
 40087cc:	2088703a 	and	r4,r4,r2
 40087d0:	003f8506 	br	40085e8 <__alt_data_end+0xfc0085e8>

040087d4 <__subsf3>:
 40087d4:	defffc04 	addi	sp,sp,-16
 40087d8:	280cd5fa 	srli	r6,r5,23
 40087dc:	dc000015 	stw	r16,0(sp)
 40087e0:	01c02034 	movhi	r7,128
 40087e4:	2020d5fa 	srli	r16,r4,23
 40087e8:	39ffffc4 	addi	r7,r7,-1
 40087ec:	3906703a 	and	r3,r7,r4
 40087f0:	dc400115 	stw	r17,4(sp)
 40087f4:	394e703a 	and	r7,r7,r5
 40087f8:	2022d7fa 	srli	r17,r4,31
 40087fc:	dfc00315 	stw	ra,12(sp)
 4008800:	dc800215 	stw	r18,8(sp)
 4008804:	31803fcc 	andi	r6,r6,255
 4008808:	01003fc4 	movi	r4,255
 400880c:	84003fcc 	andi	r16,r16,255
 4008810:	180690fa 	slli	r3,r3,3
 4008814:	2804d7fa 	srli	r2,r5,31
 4008818:	380e90fa 	slli	r7,r7,3
 400881c:	31006d26 	beq	r6,r4,40089d4 <__subsf3+0x200>
 4008820:	1080005c 	xori	r2,r2,1
 4008824:	8189c83a 	sub	r4,r16,r6
 4008828:	14404f26 	beq	r2,r17,4008968 <__subsf3+0x194>
 400882c:	0100770e 	bge	zero,r4,4008a0c <__subsf3+0x238>
 4008830:	30001e1e 	bne	r6,zero,40088ac <__subsf3+0xd8>
 4008834:	38006a1e 	bne	r7,zero,40089e0 <__subsf3+0x20c>
 4008838:	188001cc 	andi	r2,r3,7
 400883c:	10000426 	beq	r2,zero,4008850 <__subsf3+0x7c>
 4008840:	188003cc 	andi	r2,r3,15
 4008844:	01000104 	movi	r4,4
 4008848:	11000126 	beq	r2,r4,4008850 <__subsf3+0x7c>
 400884c:	1907883a 	add	r3,r3,r4
 4008850:	1881002c 	andhi	r2,r3,1024
 4008854:	10003926 	beq	r2,zero,400893c <__subsf3+0x168>
 4008858:	84000044 	addi	r16,r16,1
 400885c:	00803fc4 	movi	r2,255
 4008860:	80807526 	beq	r16,r2,4008a38 <__subsf3+0x264>
 4008864:	180691ba 	slli	r3,r3,6
 4008868:	8880004c 	andi	r2,r17,1
 400886c:	180ad27a 	srli	r5,r3,9
 4008870:	84003fcc 	andi	r16,r16,255
 4008874:	800695fa 	slli	r3,r16,23
 4008878:	10803fcc 	andi	r2,r2,255
 400887c:	01002034 	movhi	r4,128
 4008880:	213fffc4 	addi	r4,r4,-1
 4008884:	100497fa 	slli	r2,r2,31
 4008888:	2920703a 	and	r16,r5,r4
 400888c:	80e0b03a 	or	r16,r16,r3
 4008890:	8084b03a 	or	r2,r16,r2
 4008894:	dfc00317 	ldw	ra,12(sp)
 4008898:	dc800217 	ldw	r18,8(sp)
 400889c:	dc400117 	ldw	r17,4(sp)
 40088a0:	dc000017 	ldw	r16,0(sp)
 40088a4:	dec00404 	addi	sp,sp,16
 40088a8:	f800283a 	ret
 40088ac:	00803fc4 	movi	r2,255
 40088b0:	80bfe126 	beq	r16,r2,4008838 <__alt_data_end+0xfc008838>
 40088b4:	39c10034 	orhi	r7,r7,1024
 40088b8:	008006c4 	movi	r2,27
 40088bc:	11007416 	blt	r2,r4,4008a90 <__subsf3+0x2bc>
 40088c0:	00800804 	movi	r2,32
 40088c4:	1105c83a 	sub	r2,r2,r4
 40088c8:	3884983a 	sll	r2,r7,r2
 40088cc:	390ed83a 	srl	r7,r7,r4
 40088d0:	1008c03a 	cmpne	r4,r2,zero
 40088d4:	390eb03a 	or	r7,r7,r4
 40088d8:	19c7c83a 	sub	r3,r3,r7
 40088dc:	1881002c 	andhi	r2,r3,1024
 40088e0:	10001426 	beq	r2,zero,4008934 <__subsf3+0x160>
 40088e4:	04810034 	movhi	r18,1024
 40088e8:	94bfffc4 	addi	r18,r18,-1
 40088ec:	1ca4703a 	and	r18,r3,r18
 40088f0:	9009883a 	mov	r4,r18
 40088f4:	400b7f80 	call	400b7f8 <__clzsi2>
 40088f8:	10bffec4 	addi	r2,r2,-5
 40088fc:	90a4983a 	sll	r18,r18,r2
 4008900:	14005116 	blt	r2,r16,4008a48 <__subsf3+0x274>
 4008904:	1405c83a 	sub	r2,r2,r16
 4008908:	10c00044 	addi	r3,r2,1
 400890c:	00800804 	movi	r2,32
 4008910:	10c5c83a 	sub	r2,r2,r3
 4008914:	9084983a 	sll	r2,r18,r2
 4008918:	90e4d83a 	srl	r18,r18,r3
 400891c:	0021883a 	mov	r16,zero
 4008920:	1006c03a 	cmpne	r3,r2,zero
 4008924:	90c6b03a 	or	r3,r18,r3
 4008928:	003fc306 	br	4008838 <__alt_data_end+0xfc008838>
 400892c:	2000e026 	beq	r4,zero,4008cb0 <__subsf3+0x4dc>
 4008930:	2007883a 	mov	r3,r4
 4008934:	188001cc 	andi	r2,r3,7
 4008938:	103fc11e 	bne	r2,zero,4008840 <__alt_data_end+0xfc008840>
 400893c:	180ad0fa 	srli	r5,r3,3
 4008940:	00c03fc4 	movi	r3,255
 4008944:	8880004c 	andi	r2,r17,1
 4008948:	80c0031e 	bne	r16,r3,4008958 <__subsf3+0x184>
 400894c:	28006d26 	beq	r5,zero,4008b04 <__subsf3+0x330>
 4008950:	29401034 	orhi	r5,r5,64
 4008954:	043fffc4 	movi	r16,-1
 4008958:	00c02034 	movhi	r3,128
 400895c:	18ffffc4 	addi	r3,r3,-1
 4008960:	28ca703a 	and	r5,r5,r3
 4008964:	003fc206 	br	4008870 <__alt_data_end+0xfc008870>
 4008968:	01003c0e 	bge	zero,r4,4008a5c <__subsf3+0x288>
 400896c:	30002126 	beq	r6,zero,40089f4 <__subsf3+0x220>
 4008970:	01403fc4 	movi	r5,255
 4008974:	817fb026 	beq	r16,r5,4008838 <__alt_data_end+0xfc008838>
 4008978:	39c10034 	orhi	r7,r7,1024
 400897c:	014006c4 	movi	r5,27
 4008980:	29007416 	blt	r5,r4,4008b54 <__subsf3+0x380>
 4008984:	01400804 	movi	r5,32
 4008988:	290bc83a 	sub	r5,r5,r4
 400898c:	394a983a 	sll	r5,r7,r5
 4008990:	390ed83a 	srl	r7,r7,r4
 4008994:	2808c03a 	cmpne	r4,r5,zero
 4008998:	390eb03a 	or	r7,r7,r4
 400899c:	19c7883a 	add	r3,r3,r7
 40089a0:	1901002c 	andhi	r4,r3,1024
 40089a4:	20003826 	beq	r4,zero,4008a88 <__subsf3+0x2b4>
 40089a8:	84000044 	addi	r16,r16,1
 40089ac:	01003fc4 	movi	r4,255
 40089b0:	81005426 	beq	r16,r4,4008b04 <__subsf3+0x330>
 40089b4:	1023883a 	mov	r17,r2
 40089b8:	00bf0034 	movhi	r2,64512
 40089bc:	10bfffc4 	addi	r2,r2,-1
 40089c0:	1900004c 	andi	r4,r3,1
 40089c4:	1886703a 	and	r3,r3,r2
 40089c8:	1806d07a 	srli	r3,r3,1
 40089cc:	1906b03a 	or	r3,r3,r4
 40089d0:	003f9906 	br	4008838 <__alt_data_end+0xfc008838>
 40089d4:	383f9226 	beq	r7,zero,4008820 <__alt_data_end+0xfc008820>
 40089d8:	10803fcc 	andi	r2,r2,255
 40089dc:	003f9106 	br	4008824 <__alt_data_end+0xfc008824>
 40089e0:	213fffc4 	addi	r4,r4,-1
 40089e4:	203fbc26 	beq	r4,zero,40088d8 <__alt_data_end+0xfc0088d8>
 40089e8:	00803fc4 	movi	r2,255
 40089ec:	80bfb21e 	bne	r16,r2,40088b8 <__alt_data_end+0xfc0088b8>
 40089f0:	003f9106 	br	4008838 <__alt_data_end+0xfc008838>
 40089f4:	383f9026 	beq	r7,zero,4008838 <__alt_data_end+0xfc008838>
 40089f8:	213fffc4 	addi	r4,r4,-1
 40089fc:	203fe726 	beq	r4,zero,400899c <__alt_data_end+0xfc00899c>
 4008a00:	01403fc4 	movi	r5,255
 4008a04:	817fdd1e 	bne	r16,r5,400897c <__alt_data_end+0xfc00897c>
 4008a08:	003f8b06 	br	4008838 <__alt_data_end+0xfc008838>
 4008a0c:	2000221e 	bne	r4,zero,4008a98 <__subsf3+0x2c4>
 4008a10:	81000044 	addi	r4,r16,1
 4008a14:	21003fcc 	andi	r4,r4,255
 4008a18:	01400044 	movi	r5,1
 4008a1c:	2900470e 	bge	r5,r4,4008b3c <__subsf3+0x368>
 4008a20:	19e5c83a 	sub	r18,r3,r7
 4008a24:	9141002c 	andhi	r5,r18,1024
 4008a28:	28002d26 	beq	r5,zero,4008ae0 <__subsf3+0x30c>
 4008a2c:	38e5c83a 	sub	r18,r7,r3
 4008a30:	1023883a 	mov	r17,r2
 4008a34:	003fae06 	br	40088f0 <__alt_data_end+0xfc0088f0>
 4008a38:	8880004c 	andi	r2,r17,1
 4008a3c:	043fffc4 	movi	r16,-1
 4008a40:	000b883a 	mov	r5,zero
 4008a44:	003f8a06 	br	4008870 <__alt_data_end+0xfc008870>
 4008a48:	00ff0034 	movhi	r3,64512
 4008a4c:	18ffffc4 	addi	r3,r3,-1
 4008a50:	80a1c83a 	sub	r16,r16,r2
 4008a54:	90c6703a 	and	r3,r18,r3
 4008a58:	003f7706 	br	4008838 <__alt_data_end+0xfc008838>
 4008a5c:	2000431e 	bne	r4,zero,4008b6c <__subsf3+0x398>
 4008a60:	81000044 	addi	r4,r16,1
 4008a64:	21803fcc 	andi	r6,r4,255
 4008a68:	01400044 	movi	r5,1
 4008a6c:	2980280e 	bge	r5,r6,4008b10 <__subsf3+0x33c>
 4008a70:	01403fc4 	movi	r5,255
 4008a74:	21402326 	beq	r4,r5,4008b04 <__subsf3+0x330>
 4008a78:	19c7883a 	add	r3,r3,r7
 4008a7c:	1806d07a 	srli	r3,r3,1
 4008a80:	2021883a 	mov	r16,r4
 4008a84:	003f6c06 	br	4008838 <__alt_data_end+0xfc008838>
 4008a88:	1023883a 	mov	r17,r2
 4008a8c:	003fa906 	br	4008934 <__alt_data_end+0xfc008934>
 4008a90:	01c00044 	movi	r7,1
 4008a94:	003f9006 	br	40088d8 <__alt_data_end+0xfc0088d8>
 4008a98:	8000151e 	bne	r16,zero,4008af0 <__subsf3+0x31c>
 4008a9c:	18002f26 	beq	r3,zero,4008b5c <__subsf3+0x388>
 4008aa0:	0108303a 	nor	r4,zero,r4
 4008aa4:	20000a26 	beq	r4,zero,4008ad0 <__subsf3+0x2fc>
 4008aa8:	01403fc4 	movi	r5,255
 4008aac:	31402b26 	beq	r6,r5,4008b5c <__subsf3+0x388>
 4008ab0:	014006c4 	movi	r5,27
 4008ab4:	29006e16 	blt	r5,r4,4008c70 <__subsf3+0x49c>
 4008ab8:	01400804 	movi	r5,32
 4008abc:	290bc83a 	sub	r5,r5,r4
 4008ac0:	194a983a 	sll	r5,r3,r5
 4008ac4:	1908d83a 	srl	r4,r3,r4
 4008ac8:	2806c03a 	cmpne	r3,r5,zero
 4008acc:	20c6b03a 	or	r3,r4,r3
 4008ad0:	38c7c83a 	sub	r3,r7,r3
 4008ad4:	3021883a 	mov	r16,r6
 4008ad8:	1023883a 	mov	r17,r2
 4008adc:	003f7f06 	br	40088dc <__alt_data_end+0xfc0088dc>
 4008ae0:	903f831e 	bne	r18,zero,40088f0 <__alt_data_end+0xfc0088f0>
 4008ae4:	0005883a 	mov	r2,zero
 4008ae8:	0021883a 	mov	r16,zero
 4008aec:	003f9a06 	br	4008958 <__alt_data_end+0xfc008958>
 4008af0:	01403fc4 	movi	r5,255
 4008af4:	31401926 	beq	r6,r5,4008b5c <__subsf3+0x388>
 4008af8:	0109c83a 	sub	r4,zero,r4
 4008afc:	18c10034 	orhi	r3,r3,1024
 4008b00:	003feb06 	br	4008ab0 <__alt_data_end+0xfc008ab0>
 4008b04:	043fffc4 	movi	r16,-1
 4008b08:	000b883a 	mov	r5,zero
 4008b0c:	003f5806 	br	4008870 <__alt_data_end+0xfc008870>
 4008b10:	8000481e 	bne	r16,zero,4008c34 <__subsf3+0x460>
 4008b14:	18006226 	beq	r3,zero,4008ca0 <__subsf3+0x4cc>
 4008b18:	383f4726 	beq	r7,zero,4008838 <__alt_data_end+0xfc008838>
 4008b1c:	19c7883a 	add	r3,r3,r7
 4008b20:	1881002c 	andhi	r2,r3,1024
 4008b24:	103f8326 	beq	r2,zero,4008934 <__alt_data_end+0xfc008934>
 4008b28:	00bf0034 	movhi	r2,64512
 4008b2c:	10bfffc4 	addi	r2,r2,-1
 4008b30:	2821883a 	mov	r16,r5
 4008b34:	1886703a 	and	r3,r3,r2
 4008b38:	003f3f06 	br	4008838 <__alt_data_end+0xfc008838>
 4008b3c:	80001c1e 	bne	r16,zero,4008bb0 <__subsf3+0x3dc>
 4008b40:	1800261e 	bne	r3,zero,4008bdc <__subsf3+0x408>
 4008b44:	38004c26 	beq	r7,zero,4008c78 <__subsf3+0x4a4>
 4008b48:	3807883a 	mov	r3,r7
 4008b4c:	1023883a 	mov	r17,r2
 4008b50:	003f3906 	br	4008838 <__alt_data_end+0xfc008838>
 4008b54:	01c00044 	movi	r7,1
 4008b58:	003f9006 	br	400899c <__alt_data_end+0xfc00899c>
 4008b5c:	3807883a 	mov	r3,r7
 4008b60:	3021883a 	mov	r16,r6
 4008b64:	1023883a 	mov	r17,r2
 4008b68:	003f3306 	br	4008838 <__alt_data_end+0xfc008838>
 4008b6c:	8000161e 	bne	r16,zero,4008bc8 <__subsf3+0x3f4>
 4008b70:	18002d26 	beq	r3,zero,4008c28 <__subsf3+0x454>
 4008b74:	0108303a 	nor	r4,zero,r4
 4008b78:	20000a26 	beq	r4,zero,4008ba4 <__subsf3+0x3d0>
 4008b7c:	01403fc4 	movi	r5,255
 4008b80:	31402926 	beq	r6,r5,4008c28 <__subsf3+0x454>
 4008b84:	014006c4 	movi	r5,27
 4008b88:	29004716 	blt	r5,r4,4008ca8 <__subsf3+0x4d4>
 4008b8c:	01400804 	movi	r5,32
 4008b90:	290bc83a 	sub	r5,r5,r4
 4008b94:	194a983a 	sll	r5,r3,r5
 4008b98:	1908d83a 	srl	r4,r3,r4
 4008b9c:	2806c03a 	cmpne	r3,r5,zero
 4008ba0:	20c6b03a 	or	r3,r4,r3
 4008ba4:	19c7883a 	add	r3,r3,r7
 4008ba8:	3021883a 	mov	r16,r6
 4008bac:	003f7c06 	br	40089a0 <__alt_data_end+0xfc0089a0>
 4008bb0:	1800111e 	bne	r3,zero,4008bf8 <__subsf3+0x424>
 4008bb4:	38003326 	beq	r7,zero,4008c84 <__subsf3+0x4b0>
 4008bb8:	3807883a 	mov	r3,r7
 4008bbc:	1023883a 	mov	r17,r2
 4008bc0:	04003fc4 	movi	r16,255
 4008bc4:	003f1c06 	br	4008838 <__alt_data_end+0xfc008838>
 4008bc8:	01403fc4 	movi	r5,255
 4008bcc:	31401626 	beq	r6,r5,4008c28 <__subsf3+0x454>
 4008bd0:	0109c83a 	sub	r4,zero,r4
 4008bd4:	18c10034 	orhi	r3,r3,1024
 4008bd8:	003fea06 	br	4008b84 <__alt_data_end+0xfc008b84>
 4008bdc:	383f1626 	beq	r7,zero,4008838 <__alt_data_end+0xfc008838>
 4008be0:	19c9c83a 	sub	r4,r3,r7
 4008be4:	2141002c 	andhi	r5,r4,1024
 4008be8:	283f5026 	beq	r5,zero,400892c <__alt_data_end+0xfc00892c>
 4008bec:	38c7c83a 	sub	r3,r7,r3
 4008bf0:	1023883a 	mov	r17,r2
 4008bf4:	003f1006 	br	4008838 <__alt_data_end+0xfc008838>
 4008bf8:	38001b26 	beq	r7,zero,4008c68 <__subsf3+0x494>
 4008bfc:	1806d0fa 	srli	r3,r3,3
 4008c00:	1900102c 	andhi	r4,r3,64
 4008c04:	20000526 	beq	r4,zero,4008c1c <__subsf3+0x448>
 4008c08:	380ed0fa 	srli	r7,r7,3
 4008c0c:	3900102c 	andhi	r4,r7,64
 4008c10:	2000021e 	bne	r4,zero,4008c1c <__subsf3+0x448>
 4008c14:	3807883a 	mov	r3,r7
 4008c18:	1023883a 	mov	r17,r2
 4008c1c:	180690fa 	slli	r3,r3,3
 4008c20:	04003fc4 	movi	r16,255
 4008c24:	003f0406 	br	4008838 <__alt_data_end+0xfc008838>
 4008c28:	3807883a 	mov	r3,r7
 4008c2c:	3021883a 	mov	r16,r6
 4008c30:	003f0106 	br	4008838 <__alt_data_end+0xfc008838>
 4008c34:	18001726 	beq	r3,zero,4008c94 <__subsf3+0x4c0>
 4008c38:	38000b26 	beq	r7,zero,4008c68 <__subsf3+0x494>
 4008c3c:	1806d0fa 	srli	r3,r3,3
 4008c40:	1900102c 	andhi	r4,r3,64
 4008c44:	20000426 	beq	r4,zero,4008c58 <__subsf3+0x484>
 4008c48:	380ed0fa 	srli	r7,r7,3
 4008c4c:	3900102c 	andhi	r4,r7,64
 4008c50:	2000011e 	bne	r4,zero,4008c58 <__subsf3+0x484>
 4008c54:	3807883a 	mov	r3,r7
 4008c58:	180690fa 	slli	r3,r3,3
 4008c5c:	1023883a 	mov	r17,r2
 4008c60:	04003fc4 	movi	r16,255
 4008c64:	003ef406 	br	4008838 <__alt_data_end+0xfc008838>
 4008c68:	04003fc4 	movi	r16,255
 4008c6c:	003ef206 	br	4008838 <__alt_data_end+0xfc008838>
 4008c70:	00c00044 	movi	r3,1
 4008c74:	003f9606 	br	4008ad0 <__alt_data_end+0xfc008ad0>
 4008c78:	000b883a 	mov	r5,zero
 4008c7c:	0005883a 	mov	r2,zero
 4008c80:	003f3506 	br	4008958 <__alt_data_end+0xfc008958>
 4008c84:	01402034 	movhi	r5,128
 4008c88:	297fffc4 	addi	r5,r5,-1
 4008c8c:	0005883a 	mov	r2,zero
 4008c90:	003f2f06 	br	4008950 <__alt_data_end+0xfc008950>
 4008c94:	3807883a 	mov	r3,r7
 4008c98:	04003fc4 	movi	r16,255
 4008c9c:	003ee606 	br	4008838 <__alt_data_end+0xfc008838>
 4008ca0:	3807883a 	mov	r3,r7
 4008ca4:	003ee406 	br	4008838 <__alt_data_end+0xfc008838>
 4008ca8:	00c00044 	movi	r3,1
 4008cac:	003fbd06 	br	4008ba4 <__alt_data_end+0xfc008ba4>
 4008cb0:	0005883a 	mov	r2,zero
 4008cb4:	003f2806 	br	4008958 <__alt_data_end+0xfc008958>

04008cb8 <__floatunsisf>:
 4008cb8:	defffe04 	addi	sp,sp,-8
 4008cbc:	dfc00115 	stw	ra,4(sp)
 4008cc0:	dc000015 	stw	r16,0(sp)
 4008cc4:	20002c26 	beq	r4,zero,4008d78 <__floatunsisf+0xc0>
 4008cc8:	2021883a 	mov	r16,r4
 4008ccc:	400b7f80 	call	400b7f8 <__clzsi2>
 4008cd0:	00c02784 	movi	r3,158
 4008cd4:	1887c83a 	sub	r3,r3,r2
 4008cd8:	01002584 	movi	r4,150
 4008cdc:	20c00f16 	blt	r4,r3,4008d1c <__floatunsisf+0x64>
 4008ce0:	20c9c83a 	sub	r4,r4,r3
 4008ce4:	8108983a 	sll	r4,r16,r4
 4008ce8:	00802034 	movhi	r2,128
 4008cec:	10bfffc4 	addi	r2,r2,-1
 4008cf0:	2088703a 	and	r4,r4,r2
 4008cf4:	18803fcc 	andi	r2,r3,255
 4008cf8:	100695fa 	slli	r3,r2,23
 4008cfc:	00802034 	movhi	r2,128
 4008d00:	10bfffc4 	addi	r2,r2,-1
 4008d04:	2084703a 	and	r2,r4,r2
 4008d08:	10c4b03a 	or	r2,r2,r3
 4008d0c:	dfc00117 	ldw	ra,4(sp)
 4008d10:	dc000017 	ldw	r16,0(sp)
 4008d14:	dec00204 	addi	sp,sp,8
 4008d18:	f800283a 	ret
 4008d1c:	01002644 	movi	r4,153
 4008d20:	20c01816 	blt	r4,r3,4008d84 <__floatunsisf+0xcc>
 4008d24:	20c9c83a 	sub	r4,r4,r3
 4008d28:	8108983a 	sll	r4,r16,r4
 4008d2c:	017f0034 	movhi	r5,64512
 4008d30:	297fffc4 	addi	r5,r5,-1
 4008d34:	218001cc 	andi	r6,r4,7
 4008d38:	214a703a 	and	r5,r4,r5
 4008d3c:	30000426 	beq	r6,zero,4008d50 <__floatunsisf+0x98>
 4008d40:	210003cc 	andi	r4,r4,15
 4008d44:	01800104 	movi	r6,4
 4008d48:	21800126 	beq	r4,r6,4008d50 <__floatunsisf+0x98>
 4008d4c:	298b883a 	add	r5,r5,r6
 4008d50:	2901002c 	andhi	r4,r5,1024
 4008d54:	20000526 	beq	r4,zero,4008d6c <__floatunsisf+0xb4>
 4008d58:	00c027c4 	movi	r3,159
 4008d5c:	1887c83a 	sub	r3,r3,r2
 4008d60:	00bf0034 	movhi	r2,64512
 4008d64:	10bfffc4 	addi	r2,r2,-1
 4008d68:	288a703a 	and	r5,r5,r2
 4008d6c:	280891ba 	slli	r4,r5,6
 4008d70:	2008d27a 	srli	r4,r4,9
 4008d74:	003fdf06 	br	4008cf4 <__alt_data_end+0xfc008cf4>
 4008d78:	0007883a 	mov	r3,zero
 4008d7c:	0009883a 	mov	r4,zero
 4008d80:	003fdc06 	br	4008cf4 <__alt_data_end+0xfc008cf4>
 4008d84:	01402e44 	movi	r5,185
 4008d88:	28cbc83a 	sub	r5,r5,r3
 4008d8c:	01000144 	movi	r4,5
 4008d90:	2089c83a 	sub	r4,r4,r2
 4008d94:	814a983a 	sll	r5,r16,r5
 4008d98:	8108d83a 	srl	r4,r16,r4
 4008d9c:	2820c03a 	cmpne	r16,r5,zero
 4008da0:	2408b03a 	or	r4,r4,r16
 4008da4:	003fe106 	br	4008d2c <__alt_data_end+0xfc008d2c>

04008da8 <__adddf3>:
 4008da8:	02c00434 	movhi	r11,16
 4008dac:	5affffc4 	addi	r11,r11,-1
 4008db0:	2806d7fa 	srli	r3,r5,31
 4008db4:	2ad4703a 	and	r10,r5,r11
 4008db8:	3ad2703a 	and	r9,r7,r11
 4008dbc:	3804d53a 	srli	r2,r7,20
 4008dc0:	3018d77a 	srli	r12,r6,29
 4008dc4:	280ad53a 	srli	r5,r5,20
 4008dc8:	501490fa 	slli	r10,r10,3
 4008dcc:	2010d77a 	srli	r8,r4,29
 4008dd0:	481290fa 	slli	r9,r9,3
 4008dd4:	380ed7fa 	srli	r7,r7,31
 4008dd8:	defffb04 	addi	sp,sp,-20
 4008ddc:	dc800215 	stw	r18,8(sp)
 4008de0:	dc400115 	stw	r17,4(sp)
 4008de4:	dc000015 	stw	r16,0(sp)
 4008de8:	dfc00415 	stw	ra,16(sp)
 4008dec:	dcc00315 	stw	r19,12(sp)
 4008df0:	1c803fcc 	andi	r18,r3,255
 4008df4:	2c01ffcc 	andi	r16,r5,2047
 4008df8:	5210b03a 	or	r8,r10,r8
 4008dfc:	202290fa 	slli	r17,r4,3
 4008e00:	1081ffcc 	andi	r2,r2,2047
 4008e04:	4b12b03a 	or	r9,r9,r12
 4008e08:	300c90fa 	slli	r6,r6,3
 4008e0c:	91c07526 	beq	r18,r7,4008fe4 <__adddf3+0x23c>
 4008e10:	8087c83a 	sub	r3,r16,r2
 4008e14:	00c0ab0e 	bge	zero,r3,40090c4 <__adddf3+0x31c>
 4008e18:	10002a1e 	bne	r2,zero,4008ec4 <__adddf3+0x11c>
 4008e1c:	4984b03a 	or	r2,r9,r6
 4008e20:	1000961e 	bne	r2,zero,400907c <__adddf3+0x2d4>
 4008e24:	888001cc 	andi	r2,r17,7
 4008e28:	10000726 	beq	r2,zero,4008e48 <__adddf3+0xa0>
 4008e2c:	888003cc 	andi	r2,r17,15
 4008e30:	00c00104 	movi	r3,4
 4008e34:	10c00426 	beq	r2,r3,4008e48 <__adddf3+0xa0>
 4008e38:	88c7883a 	add	r3,r17,r3
 4008e3c:	1c63803a 	cmpltu	r17,r3,r17
 4008e40:	4451883a 	add	r8,r8,r17
 4008e44:	1823883a 	mov	r17,r3
 4008e48:	4080202c 	andhi	r2,r8,128
 4008e4c:	10005926 	beq	r2,zero,4008fb4 <__adddf3+0x20c>
 4008e50:	84000044 	addi	r16,r16,1
 4008e54:	0081ffc4 	movi	r2,2047
 4008e58:	8080ba26 	beq	r16,r2,4009144 <__adddf3+0x39c>
 4008e5c:	00bfe034 	movhi	r2,65408
 4008e60:	10bfffc4 	addi	r2,r2,-1
 4008e64:	4090703a 	and	r8,r8,r2
 4008e68:	4004977a 	slli	r2,r8,29
 4008e6c:	4010927a 	slli	r8,r8,9
 4008e70:	8822d0fa 	srli	r17,r17,3
 4008e74:	8401ffcc 	andi	r16,r16,2047
 4008e78:	4010d33a 	srli	r8,r8,12
 4008e7c:	9007883a 	mov	r3,r18
 4008e80:	1444b03a 	or	r2,r2,r17
 4008e84:	8401ffcc 	andi	r16,r16,2047
 4008e88:	8020953a 	slli	r16,r16,20
 4008e8c:	18c03fcc 	andi	r3,r3,255
 4008e90:	01000434 	movhi	r4,16
 4008e94:	213fffc4 	addi	r4,r4,-1
 4008e98:	180697fa 	slli	r3,r3,31
 4008e9c:	4110703a 	and	r8,r8,r4
 4008ea0:	4410b03a 	or	r8,r8,r16
 4008ea4:	40c6b03a 	or	r3,r8,r3
 4008ea8:	dfc00417 	ldw	ra,16(sp)
 4008eac:	dcc00317 	ldw	r19,12(sp)
 4008eb0:	dc800217 	ldw	r18,8(sp)
 4008eb4:	dc400117 	ldw	r17,4(sp)
 4008eb8:	dc000017 	ldw	r16,0(sp)
 4008ebc:	dec00504 	addi	sp,sp,20
 4008ec0:	f800283a 	ret
 4008ec4:	0081ffc4 	movi	r2,2047
 4008ec8:	80bfd626 	beq	r16,r2,4008e24 <__alt_data_end+0xfc008e24>
 4008ecc:	4a402034 	orhi	r9,r9,128
 4008ed0:	00800e04 	movi	r2,56
 4008ed4:	10c09f16 	blt	r2,r3,4009154 <__adddf3+0x3ac>
 4008ed8:	008007c4 	movi	r2,31
 4008edc:	10c0c216 	blt	r2,r3,40091e8 <__adddf3+0x440>
 4008ee0:	00800804 	movi	r2,32
 4008ee4:	10c5c83a 	sub	r2,r2,r3
 4008ee8:	488a983a 	sll	r5,r9,r2
 4008eec:	30c8d83a 	srl	r4,r6,r3
 4008ef0:	3084983a 	sll	r2,r6,r2
 4008ef4:	48c6d83a 	srl	r3,r9,r3
 4008ef8:	290cb03a 	or	r6,r5,r4
 4008efc:	1004c03a 	cmpne	r2,r2,zero
 4008f00:	308cb03a 	or	r6,r6,r2
 4008f04:	898dc83a 	sub	r6,r17,r6
 4008f08:	89a3803a 	cmpltu	r17,r17,r6
 4008f0c:	40d1c83a 	sub	r8,r8,r3
 4008f10:	4451c83a 	sub	r8,r8,r17
 4008f14:	3023883a 	mov	r17,r6
 4008f18:	4080202c 	andhi	r2,r8,128
 4008f1c:	10002326 	beq	r2,zero,4008fac <__adddf3+0x204>
 4008f20:	04c02034 	movhi	r19,128
 4008f24:	9cffffc4 	addi	r19,r19,-1
 4008f28:	44e6703a 	and	r19,r8,r19
 4008f2c:	98007626 	beq	r19,zero,4009108 <__adddf3+0x360>
 4008f30:	9809883a 	mov	r4,r19
 4008f34:	400b7f80 	call	400b7f8 <__clzsi2>
 4008f38:	10fffe04 	addi	r3,r2,-8
 4008f3c:	010007c4 	movi	r4,31
 4008f40:	20c07716 	blt	r4,r3,4009120 <__adddf3+0x378>
 4008f44:	00800804 	movi	r2,32
 4008f48:	10c5c83a 	sub	r2,r2,r3
 4008f4c:	8884d83a 	srl	r2,r17,r2
 4008f50:	98d0983a 	sll	r8,r19,r3
 4008f54:	88e2983a 	sll	r17,r17,r3
 4008f58:	1204b03a 	or	r2,r2,r8
 4008f5c:	1c007416 	blt	r3,r16,4009130 <__adddf3+0x388>
 4008f60:	1c21c83a 	sub	r16,r3,r16
 4008f64:	82000044 	addi	r8,r16,1
 4008f68:	00c007c4 	movi	r3,31
 4008f6c:	1a009116 	blt	r3,r8,40091b4 <__adddf3+0x40c>
 4008f70:	00c00804 	movi	r3,32
 4008f74:	1a07c83a 	sub	r3,r3,r8
 4008f78:	8a08d83a 	srl	r4,r17,r8
 4008f7c:	88e2983a 	sll	r17,r17,r3
 4008f80:	10c6983a 	sll	r3,r2,r3
 4008f84:	1210d83a 	srl	r8,r2,r8
 4008f88:	8804c03a 	cmpne	r2,r17,zero
 4008f8c:	1906b03a 	or	r3,r3,r4
 4008f90:	18a2b03a 	or	r17,r3,r2
 4008f94:	0021883a 	mov	r16,zero
 4008f98:	003fa206 	br	4008e24 <__alt_data_end+0xfc008e24>
 4008f9c:	1890b03a 	or	r8,r3,r2
 4008fa0:	40017d26 	beq	r8,zero,4009598 <__adddf3+0x7f0>
 4008fa4:	1011883a 	mov	r8,r2
 4008fa8:	1823883a 	mov	r17,r3
 4008fac:	888001cc 	andi	r2,r17,7
 4008fb0:	103f9e1e 	bne	r2,zero,4008e2c <__alt_data_end+0xfc008e2c>
 4008fb4:	4004977a 	slli	r2,r8,29
 4008fb8:	8822d0fa 	srli	r17,r17,3
 4008fbc:	4010d0fa 	srli	r8,r8,3
 4008fc0:	9007883a 	mov	r3,r18
 4008fc4:	1444b03a 	or	r2,r2,r17
 4008fc8:	0101ffc4 	movi	r4,2047
 4008fcc:	81002426 	beq	r16,r4,4009060 <__adddf3+0x2b8>
 4008fd0:	8120703a 	and	r16,r16,r4
 4008fd4:	01000434 	movhi	r4,16
 4008fd8:	213fffc4 	addi	r4,r4,-1
 4008fdc:	4110703a 	and	r8,r8,r4
 4008fe0:	003fa806 	br	4008e84 <__alt_data_end+0xfc008e84>
 4008fe4:	8089c83a 	sub	r4,r16,r2
 4008fe8:	01005e0e 	bge	zero,r4,4009164 <__adddf3+0x3bc>
 4008fec:	10002b26 	beq	r2,zero,400909c <__adddf3+0x2f4>
 4008ff0:	0081ffc4 	movi	r2,2047
 4008ff4:	80bf8b26 	beq	r16,r2,4008e24 <__alt_data_end+0xfc008e24>
 4008ff8:	4a402034 	orhi	r9,r9,128
 4008ffc:	00800e04 	movi	r2,56
 4009000:	1100a40e 	bge	r2,r4,4009294 <__adddf3+0x4ec>
 4009004:	498cb03a 	or	r6,r9,r6
 4009008:	300ac03a 	cmpne	r5,r6,zero
 400900c:	0013883a 	mov	r9,zero
 4009010:	2c4b883a 	add	r5,r5,r17
 4009014:	2c63803a 	cmpltu	r17,r5,r17
 4009018:	4a11883a 	add	r8,r9,r8
 400901c:	8a11883a 	add	r8,r17,r8
 4009020:	2823883a 	mov	r17,r5
 4009024:	4080202c 	andhi	r2,r8,128
 4009028:	103fe026 	beq	r2,zero,4008fac <__alt_data_end+0xfc008fac>
 400902c:	84000044 	addi	r16,r16,1
 4009030:	0081ffc4 	movi	r2,2047
 4009034:	8080d226 	beq	r16,r2,4009380 <__adddf3+0x5d8>
 4009038:	00bfe034 	movhi	r2,65408
 400903c:	10bfffc4 	addi	r2,r2,-1
 4009040:	4090703a 	and	r8,r8,r2
 4009044:	880ad07a 	srli	r5,r17,1
 4009048:	400897fa 	slli	r4,r8,31
 400904c:	88c0004c 	andi	r3,r17,1
 4009050:	28e2b03a 	or	r17,r5,r3
 4009054:	4010d07a 	srli	r8,r8,1
 4009058:	2462b03a 	or	r17,r4,r17
 400905c:	003f7106 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009060:	4088b03a 	or	r4,r8,r2
 4009064:	20014526 	beq	r4,zero,400957c <__adddf3+0x7d4>
 4009068:	01000434 	movhi	r4,16
 400906c:	42000234 	orhi	r8,r8,8
 4009070:	213fffc4 	addi	r4,r4,-1
 4009074:	4110703a 	and	r8,r8,r4
 4009078:	003f8206 	br	4008e84 <__alt_data_end+0xfc008e84>
 400907c:	18ffffc4 	addi	r3,r3,-1
 4009080:	1800491e 	bne	r3,zero,40091a8 <__adddf3+0x400>
 4009084:	898bc83a 	sub	r5,r17,r6
 4009088:	8963803a 	cmpltu	r17,r17,r5
 400908c:	4251c83a 	sub	r8,r8,r9
 4009090:	4451c83a 	sub	r8,r8,r17
 4009094:	2823883a 	mov	r17,r5
 4009098:	003f9f06 	br	4008f18 <__alt_data_end+0xfc008f18>
 400909c:	4984b03a 	or	r2,r9,r6
 40090a0:	103f6026 	beq	r2,zero,4008e24 <__alt_data_end+0xfc008e24>
 40090a4:	213fffc4 	addi	r4,r4,-1
 40090a8:	2000931e 	bne	r4,zero,40092f8 <__adddf3+0x550>
 40090ac:	898d883a 	add	r6,r17,r6
 40090b0:	3463803a 	cmpltu	r17,r6,r17
 40090b4:	4251883a 	add	r8,r8,r9
 40090b8:	8a11883a 	add	r8,r17,r8
 40090bc:	3023883a 	mov	r17,r6
 40090c0:	003fd806 	br	4009024 <__alt_data_end+0xfc009024>
 40090c4:	1800541e 	bne	r3,zero,4009218 <__adddf3+0x470>
 40090c8:	80800044 	addi	r2,r16,1
 40090cc:	1081ffcc 	andi	r2,r2,2047
 40090d0:	00c00044 	movi	r3,1
 40090d4:	1880a00e 	bge	r3,r2,4009358 <__adddf3+0x5b0>
 40090d8:	8989c83a 	sub	r4,r17,r6
 40090dc:	8905803a 	cmpltu	r2,r17,r4
 40090e0:	4267c83a 	sub	r19,r8,r9
 40090e4:	98a7c83a 	sub	r19,r19,r2
 40090e8:	9880202c 	andhi	r2,r19,128
 40090ec:	10006326 	beq	r2,zero,400927c <__adddf3+0x4d4>
 40090f0:	3463c83a 	sub	r17,r6,r17
 40090f4:	4a07c83a 	sub	r3,r9,r8
 40090f8:	344d803a 	cmpltu	r6,r6,r17
 40090fc:	19a7c83a 	sub	r19,r3,r6
 4009100:	3825883a 	mov	r18,r7
 4009104:	983f8a1e 	bne	r19,zero,4008f30 <__alt_data_end+0xfc008f30>
 4009108:	8809883a 	mov	r4,r17
 400910c:	400b7f80 	call	400b7f8 <__clzsi2>
 4009110:	10800804 	addi	r2,r2,32
 4009114:	10fffe04 	addi	r3,r2,-8
 4009118:	010007c4 	movi	r4,31
 400911c:	20ff890e 	bge	r4,r3,4008f44 <__alt_data_end+0xfc008f44>
 4009120:	10bff604 	addi	r2,r2,-40
 4009124:	8884983a 	sll	r2,r17,r2
 4009128:	0023883a 	mov	r17,zero
 400912c:	1c3f8c0e 	bge	r3,r16,4008f60 <__alt_data_end+0xfc008f60>
 4009130:	023fe034 	movhi	r8,65408
 4009134:	423fffc4 	addi	r8,r8,-1
 4009138:	80e1c83a 	sub	r16,r16,r3
 400913c:	1210703a 	and	r8,r2,r8
 4009140:	003f3806 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009144:	9007883a 	mov	r3,r18
 4009148:	0011883a 	mov	r8,zero
 400914c:	0005883a 	mov	r2,zero
 4009150:	003f4c06 	br	4008e84 <__alt_data_end+0xfc008e84>
 4009154:	498cb03a 	or	r6,r9,r6
 4009158:	300cc03a 	cmpne	r6,r6,zero
 400915c:	0007883a 	mov	r3,zero
 4009160:	003f6806 	br	4008f04 <__alt_data_end+0xfc008f04>
 4009164:	20009c1e 	bne	r4,zero,40093d8 <__adddf3+0x630>
 4009168:	80800044 	addi	r2,r16,1
 400916c:	1141ffcc 	andi	r5,r2,2047
 4009170:	01000044 	movi	r4,1
 4009174:	2140670e 	bge	r4,r5,4009314 <__adddf3+0x56c>
 4009178:	0101ffc4 	movi	r4,2047
 400917c:	11007f26 	beq	r2,r4,400937c <__adddf3+0x5d4>
 4009180:	898d883a 	add	r6,r17,r6
 4009184:	4247883a 	add	r3,r8,r9
 4009188:	3451803a 	cmpltu	r8,r6,r17
 400918c:	40d1883a 	add	r8,r8,r3
 4009190:	402297fa 	slli	r17,r8,31
 4009194:	300cd07a 	srli	r6,r6,1
 4009198:	4010d07a 	srli	r8,r8,1
 400919c:	1021883a 	mov	r16,r2
 40091a0:	89a2b03a 	or	r17,r17,r6
 40091a4:	003f1f06 	br	4008e24 <__alt_data_end+0xfc008e24>
 40091a8:	0081ffc4 	movi	r2,2047
 40091ac:	80bf481e 	bne	r16,r2,4008ed0 <__alt_data_end+0xfc008ed0>
 40091b0:	003f1c06 	br	4008e24 <__alt_data_end+0xfc008e24>
 40091b4:	843ff844 	addi	r16,r16,-31
 40091b8:	01000804 	movi	r4,32
 40091bc:	1406d83a 	srl	r3,r2,r16
 40091c0:	41005026 	beq	r8,r4,4009304 <__adddf3+0x55c>
 40091c4:	01001004 	movi	r4,64
 40091c8:	2211c83a 	sub	r8,r4,r8
 40091cc:	1204983a 	sll	r2,r2,r8
 40091d0:	88a2b03a 	or	r17,r17,r2
 40091d4:	8822c03a 	cmpne	r17,r17,zero
 40091d8:	1c62b03a 	or	r17,r3,r17
 40091dc:	0011883a 	mov	r8,zero
 40091e0:	0021883a 	mov	r16,zero
 40091e4:	003f7106 	br	4008fac <__alt_data_end+0xfc008fac>
 40091e8:	193ff804 	addi	r4,r3,-32
 40091ec:	00800804 	movi	r2,32
 40091f0:	4908d83a 	srl	r4,r9,r4
 40091f4:	18804526 	beq	r3,r2,400930c <__adddf3+0x564>
 40091f8:	00801004 	movi	r2,64
 40091fc:	10c5c83a 	sub	r2,r2,r3
 4009200:	4886983a 	sll	r3,r9,r2
 4009204:	198cb03a 	or	r6,r3,r6
 4009208:	300cc03a 	cmpne	r6,r6,zero
 400920c:	218cb03a 	or	r6,r4,r6
 4009210:	0007883a 	mov	r3,zero
 4009214:	003f3b06 	br	4008f04 <__alt_data_end+0xfc008f04>
 4009218:	80002a26 	beq	r16,zero,40092c4 <__adddf3+0x51c>
 400921c:	0101ffc4 	movi	r4,2047
 4009220:	11006826 	beq	r2,r4,40093c4 <__adddf3+0x61c>
 4009224:	00c7c83a 	sub	r3,zero,r3
 4009228:	42002034 	orhi	r8,r8,128
 400922c:	01000e04 	movi	r4,56
 4009230:	20c07c16 	blt	r4,r3,4009424 <__adddf3+0x67c>
 4009234:	010007c4 	movi	r4,31
 4009238:	20c0da16 	blt	r4,r3,40095a4 <__adddf3+0x7fc>
 400923c:	01000804 	movi	r4,32
 4009240:	20c9c83a 	sub	r4,r4,r3
 4009244:	4114983a 	sll	r10,r8,r4
 4009248:	88cad83a 	srl	r5,r17,r3
 400924c:	8908983a 	sll	r4,r17,r4
 4009250:	40c6d83a 	srl	r3,r8,r3
 4009254:	5162b03a 	or	r17,r10,r5
 4009258:	2008c03a 	cmpne	r4,r4,zero
 400925c:	8922b03a 	or	r17,r17,r4
 4009260:	3463c83a 	sub	r17,r6,r17
 4009264:	48c7c83a 	sub	r3,r9,r3
 4009268:	344d803a 	cmpltu	r6,r6,r17
 400926c:	1991c83a 	sub	r8,r3,r6
 4009270:	1021883a 	mov	r16,r2
 4009274:	3825883a 	mov	r18,r7
 4009278:	003f2706 	br	4008f18 <__alt_data_end+0xfc008f18>
 400927c:	24d0b03a 	or	r8,r4,r19
 4009280:	40001b1e 	bne	r8,zero,40092f0 <__adddf3+0x548>
 4009284:	0005883a 	mov	r2,zero
 4009288:	0007883a 	mov	r3,zero
 400928c:	0021883a 	mov	r16,zero
 4009290:	003f4d06 	br	4008fc8 <__alt_data_end+0xfc008fc8>
 4009294:	008007c4 	movi	r2,31
 4009298:	11003c16 	blt	r2,r4,400938c <__adddf3+0x5e4>
 400929c:	00800804 	movi	r2,32
 40092a0:	1105c83a 	sub	r2,r2,r4
 40092a4:	488e983a 	sll	r7,r9,r2
 40092a8:	310ad83a 	srl	r5,r6,r4
 40092ac:	3084983a 	sll	r2,r6,r2
 40092b0:	4912d83a 	srl	r9,r9,r4
 40092b4:	394ab03a 	or	r5,r7,r5
 40092b8:	1004c03a 	cmpne	r2,r2,zero
 40092bc:	288ab03a 	or	r5,r5,r2
 40092c0:	003f5306 	br	4009010 <__alt_data_end+0xfc009010>
 40092c4:	4448b03a 	or	r4,r8,r17
 40092c8:	20003e26 	beq	r4,zero,40093c4 <__adddf3+0x61c>
 40092cc:	00c6303a 	nor	r3,zero,r3
 40092d0:	18003a1e 	bne	r3,zero,40093bc <__adddf3+0x614>
 40092d4:	3463c83a 	sub	r17,r6,r17
 40092d8:	4a07c83a 	sub	r3,r9,r8
 40092dc:	344d803a 	cmpltu	r6,r6,r17
 40092e0:	1991c83a 	sub	r8,r3,r6
 40092e4:	1021883a 	mov	r16,r2
 40092e8:	3825883a 	mov	r18,r7
 40092ec:	003f0a06 	br	4008f18 <__alt_data_end+0xfc008f18>
 40092f0:	2023883a 	mov	r17,r4
 40092f4:	003f0d06 	br	4008f2c <__alt_data_end+0xfc008f2c>
 40092f8:	0081ffc4 	movi	r2,2047
 40092fc:	80bf3f1e 	bne	r16,r2,4008ffc <__alt_data_end+0xfc008ffc>
 4009300:	003ec806 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009304:	0005883a 	mov	r2,zero
 4009308:	003fb106 	br	40091d0 <__alt_data_end+0xfc0091d0>
 400930c:	0007883a 	mov	r3,zero
 4009310:	003fbc06 	br	4009204 <__alt_data_end+0xfc009204>
 4009314:	4444b03a 	or	r2,r8,r17
 4009318:	8000871e 	bne	r16,zero,4009538 <__adddf3+0x790>
 400931c:	1000ba26 	beq	r2,zero,4009608 <__adddf3+0x860>
 4009320:	4984b03a 	or	r2,r9,r6
 4009324:	103ebf26 	beq	r2,zero,4008e24 <__alt_data_end+0xfc008e24>
 4009328:	8985883a 	add	r2,r17,r6
 400932c:	4247883a 	add	r3,r8,r9
 4009330:	1451803a 	cmpltu	r8,r2,r17
 4009334:	40d1883a 	add	r8,r8,r3
 4009338:	40c0202c 	andhi	r3,r8,128
 400933c:	1023883a 	mov	r17,r2
 4009340:	183f1a26 	beq	r3,zero,4008fac <__alt_data_end+0xfc008fac>
 4009344:	00bfe034 	movhi	r2,65408
 4009348:	10bfffc4 	addi	r2,r2,-1
 400934c:	2021883a 	mov	r16,r4
 4009350:	4090703a 	and	r8,r8,r2
 4009354:	003eb306 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009358:	4444b03a 	or	r2,r8,r17
 400935c:	8000291e 	bne	r16,zero,4009404 <__adddf3+0x65c>
 4009360:	10004b1e 	bne	r2,zero,4009490 <__adddf3+0x6e8>
 4009364:	4990b03a 	or	r8,r9,r6
 4009368:	40008b26 	beq	r8,zero,4009598 <__adddf3+0x7f0>
 400936c:	4811883a 	mov	r8,r9
 4009370:	3023883a 	mov	r17,r6
 4009374:	3825883a 	mov	r18,r7
 4009378:	003eaa06 	br	4008e24 <__alt_data_end+0xfc008e24>
 400937c:	1021883a 	mov	r16,r2
 4009380:	0011883a 	mov	r8,zero
 4009384:	0005883a 	mov	r2,zero
 4009388:	003f0f06 	br	4008fc8 <__alt_data_end+0xfc008fc8>
 400938c:	217ff804 	addi	r5,r4,-32
 4009390:	00800804 	movi	r2,32
 4009394:	494ad83a 	srl	r5,r9,r5
 4009398:	20807d26 	beq	r4,r2,4009590 <__adddf3+0x7e8>
 400939c:	00801004 	movi	r2,64
 40093a0:	1109c83a 	sub	r4,r2,r4
 40093a4:	4912983a 	sll	r9,r9,r4
 40093a8:	498cb03a 	or	r6,r9,r6
 40093ac:	300cc03a 	cmpne	r6,r6,zero
 40093b0:	298ab03a 	or	r5,r5,r6
 40093b4:	0013883a 	mov	r9,zero
 40093b8:	003f1506 	br	4009010 <__alt_data_end+0xfc009010>
 40093bc:	0101ffc4 	movi	r4,2047
 40093c0:	113f9a1e 	bne	r2,r4,400922c <__alt_data_end+0xfc00922c>
 40093c4:	4811883a 	mov	r8,r9
 40093c8:	3023883a 	mov	r17,r6
 40093cc:	1021883a 	mov	r16,r2
 40093d0:	3825883a 	mov	r18,r7
 40093d4:	003e9306 	br	4008e24 <__alt_data_end+0xfc008e24>
 40093d8:	8000161e 	bne	r16,zero,4009434 <__adddf3+0x68c>
 40093dc:	444ab03a 	or	r5,r8,r17
 40093e0:	28005126 	beq	r5,zero,4009528 <__adddf3+0x780>
 40093e4:	0108303a 	nor	r4,zero,r4
 40093e8:	20004d1e 	bne	r4,zero,4009520 <__adddf3+0x778>
 40093ec:	89a3883a 	add	r17,r17,r6
 40093f0:	4253883a 	add	r9,r8,r9
 40093f4:	898d803a 	cmpltu	r6,r17,r6
 40093f8:	3251883a 	add	r8,r6,r9
 40093fc:	1021883a 	mov	r16,r2
 4009400:	003f0806 	br	4009024 <__alt_data_end+0xfc009024>
 4009404:	1000301e 	bne	r2,zero,40094c8 <__adddf3+0x720>
 4009408:	4984b03a 	or	r2,r9,r6
 400940c:	10007126 	beq	r2,zero,40095d4 <__adddf3+0x82c>
 4009410:	4811883a 	mov	r8,r9
 4009414:	3023883a 	mov	r17,r6
 4009418:	3825883a 	mov	r18,r7
 400941c:	0401ffc4 	movi	r16,2047
 4009420:	003e8006 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009424:	4462b03a 	or	r17,r8,r17
 4009428:	8822c03a 	cmpne	r17,r17,zero
 400942c:	0007883a 	mov	r3,zero
 4009430:	003f8b06 	br	4009260 <__alt_data_end+0xfc009260>
 4009434:	0141ffc4 	movi	r5,2047
 4009438:	11403b26 	beq	r2,r5,4009528 <__adddf3+0x780>
 400943c:	0109c83a 	sub	r4,zero,r4
 4009440:	42002034 	orhi	r8,r8,128
 4009444:	01400e04 	movi	r5,56
 4009448:	29006716 	blt	r5,r4,40095e8 <__adddf3+0x840>
 400944c:	014007c4 	movi	r5,31
 4009450:	29007016 	blt	r5,r4,4009614 <__adddf3+0x86c>
 4009454:	01400804 	movi	r5,32
 4009458:	290bc83a 	sub	r5,r5,r4
 400945c:	4154983a 	sll	r10,r8,r5
 4009460:	890ed83a 	srl	r7,r17,r4
 4009464:	894a983a 	sll	r5,r17,r5
 4009468:	4108d83a 	srl	r4,r8,r4
 400946c:	51e2b03a 	or	r17,r10,r7
 4009470:	280ac03a 	cmpne	r5,r5,zero
 4009474:	8962b03a 	or	r17,r17,r5
 4009478:	89a3883a 	add	r17,r17,r6
 400947c:	2253883a 	add	r9,r4,r9
 4009480:	898d803a 	cmpltu	r6,r17,r6
 4009484:	3251883a 	add	r8,r6,r9
 4009488:	1021883a 	mov	r16,r2
 400948c:	003ee506 	br	4009024 <__alt_data_end+0xfc009024>
 4009490:	4984b03a 	or	r2,r9,r6
 4009494:	103e6326 	beq	r2,zero,4008e24 <__alt_data_end+0xfc008e24>
 4009498:	8987c83a 	sub	r3,r17,r6
 400949c:	88c9803a 	cmpltu	r4,r17,r3
 40094a0:	4245c83a 	sub	r2,r8,r9
 40094a4:	1105c83a 	sub	r2,r2,r4
 40094a8:	1100202c 	andhi	r4,r2,128
 40094ac:	203ebb26 	beq	r4,zero,4008f9c <__alt_data_end+0xfc008f9c>
 40094b0:	3463c83a 	sub	r17,r6,r17
 40094b4:	4a07c83a 	sub	r3,r9,r8
 40094b8:	344d803a 	cmpltu	r6,r6,r17
 40094bc:	1991c83a 	sub	r8,r3,r6
 40094c0:	3825883a 	mov	r18,r7
 40094c4:	003e5706 	br	4008e24 <__alt_data_end+0xfc008e24>
 40094c8:	4984b03a 	or	r2,r9,r6
 40094cc:	10002e26 	beq	r2,zero,4009588 <__adddf3+0x7e0>
 40094d0:	4004d0fa 	srli	r2,r8,3
 40094d4:	8822d0fa 	srli	r17,r17,3
 40094d8:	4010977a 	slli	r8,r8,29
 40094dc:	10c0022c 	andhi	r3,r2,8
 40094e0:	4462b03a 	or	r17,r8,r17
 40094e4:	18000826 	beq	r3,zero,4009508 <__adddf3+0x760>
 40094e8:	4808d0fa 	srli	r4,r9,3
 40094ec:	20c0022c 	andhi	r3,r4,8
 40094f0:	1800051e 	bne	r3,zero,4009508 <__adddf3+0x760>
 40094f4:	300cd0fa 	srli	r6,r6,3
 40094f8:	4806977a 	slli	r3,r9,29
 40094fc:	2005883a 	mov	r2,r4
 4009500:	3825883a 	mov	r18,r7
 4009504:	19a2b03a 	or	r17,r3,r6
 4009508:	8810d77a 	srli	r8,r17,29
 400950c:	100490fa 	slli	r2,r2,3
 4009510:	882290fa 	slli	r17,r17,3
 4009514:	0401ffc4 	movi	r16,2047
 4009518:	4090b03a 	or	r8,r8,r2
 400951c:	003e4106 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009520:	0141ffc4 	movi	r5,2047
 4009524:	117fc71e 	bne	r2,r5,4009444 <__alt_data_end+0xfc009444>
 4009528:	4811883a 	mov	r8,r9
 400952c:	3023883a 	mov	r17,r6
 4009530:	1021883a 	mov	r16,r2
 4009534:	003e3b06 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009538:	10002f26 	beq	r2,zero,40095f8 <__adddf3+0x850>
 400953c:	4984b03a 	or	r2,r9,r6
 4009540:	10001126 	beq	r2,zero,4009588 <__adddf3+0x7e0>
 4009544:	4004d0fa 	srli	r2,r8,3
 4009548:	8822d0fa 	srli	r17,r17,3
 400954c:	4010977a 	slli	r8,r8,29
 4009550:	10c0022c 	andhi	r3,r2,8
 4009554:	4462b03a 	or	r17,r8,r17
 4009558:	183feb26 	beq	r3,zero,4009508 <__alt_data_end+0xfc009508>
 400955c:	4808d0fa 	srli	r4,r9,3
 4009560:	20c0022c 	andhi	r3,r4,8
 4009564:	183fe81e 	bne	r3,zero,4009508 <__alt_data_end+0xfc009508>
 4009568:	300cd0fa 	srli	r6,r6,3
 400956c:	4806977a 	slli	r3,r9,29
 4009570:	2005883a 	mov	r2,r4
 4009574:	19a2b03a 	or	r17,r3,r6
 4009578:	003fe306 	br	4009508 <__alt_data_end+0xfc009508>
 400957c:	0011883a 	mov	r8,zero
 4009580:	0005883a 	mov	r2,zero
 4009584:	003e3f06 	br	4008e84 <__alt_data_end+0xfc008e84>
 4009588:	0401ffc4 	movi	r16,2047
 400958c:	003e2506 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009590:	0013883a 	mov	r9,zero
 4009594:	003f8406 	br	40093a8 <__alt_data_end+0xfc0093a8>
 4009598:	0005883a 	mov	r2,zero
 400959c:	0007883a 	mov	r3,zero
 40095a0:	003e8906 	br	4008fc8 <__alt_data_end+0xfc008fc8>
 40095a4:	197ff804 	addi	r5,r3,-32
 40095a8:	01000804 	movi	r4,32
 40095ac:	414ad83a 	srl	r5,r8,r5
 40095b0:	19002426 	beq	r3,r4,4009644 <__adddf3+0x89c>
 40095b4:	01001004 	movi	r4,64
 40095b8:	20c7c83a 	sub	r3,r4,r3
 40095bc:	40c6983a 	sll	r3,r8,r3
 40095c0:	1c46b03a 	or	r3,r3,r17
 40095c4:	1806c03a 	cmpne	r3,r3,zero
 40095c8:	28e2b03a 	or	r17,r5,r3
 40095cc:	0007883a 	mov	r3,zero
 40095d0:	003f2306 	br	4009260 <__alt_data_end+0xfc009260>
 40095d4:	0007883a 	mov	r3,zero
 40095d8:	5811883a 	mov	r8,r11
 40095dc:	00bfffc4 	movi	r2,-1
 40095e0:	0401ffc4 	movi	r16,2047
 40095e4:	003e7806 	br	4008fc8 <__alt_data_end+0xfc008fc8>
 40095e8:	4462b03a 	or	r17,r8,r17
 40095ec:	8822c03a 	cmpne	r17,r17,zero
 40095f0:	0009883a 	mov	r4,zero
 40095f4:	003fa006 	br	4009478 <__alt_data_end+0xfc009478>
 40095f8:	4811883a 	mov	r8,r9
 40095fc:	3023883a 	mov	r17,r6
 4009600:	0401ffc4 	movi	r16,2047
 4009604:	003e0706 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009608:	4811883a 	mov	r8,r9
 400960c:	3023883a 	mov	r17,r6
 4009610:	003e0406 	br	4008e24 <__alt_data_end+0xfc008e24>
 4009614:	21fff804 	addi	r7,r4,-32
 4009618:	01400804 	movi	r5,32
 400961c:	41ced83a 	srl	r7,r8,r7
 4009620:	21400a26 	beq	r4,r5,400964c <__adddf3+0x8a4>
 4009624:	01401004 	movi	r5,64
 4009628:	2909c83a 	sub	r4,r5,r4
 400962c:	4108983a 	sll	r4,r8,r4
 4009630:	2448b03a 	or	r4,r4,r17
 4009634:	2008c03a 	cmpne	r4,r4,zero
 4009638:	3922b03a 	or	r17,r7,r4
 400963c:	0009883a 	mov	r4,zero
 4009640:	003f8d06 	br	4009478 <__alt_data_end+0xfc009478>
 4009644:	0007883a 	mov	r3,zero
 4009648:	003fdd06 	br	40095c0 <__alt_data_end+0xfc0095c0>
 400964c:	0009883a 	mov	r4,zero
 4009650:	003ff706 	br	4009630 <__alt_data_end+0xfc009630>

04009654 <__divdf3>:
 4009654:	defff004 	addi	sp,sp,-64
 4009658:	dc800815 	stw	r18,32(sp)
 400965c:	2824d53a 	srli	r18,r5,20
 4009660:	dd800c15 	stw	r22,48(sp)
 4009664:	282cd7fa 	srli	r22,r5,31
 4009668:	dc000615 	stw	r16,24(sp)
 400966c:	04000434 	movhi	r16,16
 4009670:	843fffc4 	addi	r16,r16,-1
 4009674:	dfc00f15 	stw	ra,60(sp)
 4009678:	df000e15 	stw	fp,56(sp)
 400967c:	ddc00d15 	stw	r23,52(sp)
 4009680:	dd400b15 	stw	r21,44(sp)
 4009684:	dd000a15 	stw	r20,40(sp)
 4009688:	dcc00915 	stw	r19,36(sp)
 400968c:	dc400715 	stw	r17,28(sp)
 4009690:	9481ffcc 	andi	r18,r18,2047
 4009694:	2c20703a 	and	r16,r5,r16
 4009698:	b2003fcc 	andi	r8,r22,255
 400969c:	90006126 	beq	r18,zero,4009824 <__divdf3+0x1d0>
 40096a0:	0081ffc4 	movi	r2,2047
 40096a4:	202b883a 	mov	r21,r4
 40096a8:	90803726 	beq	r18,r2,4009788 <__divdf3+0x134>
 40096ac:	80800434 	orhi	r2,r16,16
 40096b0:	100490fa 	slli	r2,r2,3
 40096b4:	2020d77a 	srli	r16,r4,29
 40096b8:	202a90fa 	slli	r21,r4,3
 40096bc:	94bf0044 	addi	r18,r18,-1023
 40096c0:	80a0b03a 	or	r16,r16,r2
 40096c4:	0013883a 	mov	r9,zero
 40096c8:	000b883a 	mov	r5,zero
 40096cc:	3806d53a 	srli	r3,r7,20
 40096d0:	382ed7fa 	srli	r23,r7,31
 40096d4:	04400434 	movhi	r17,16
 40096d8:	8c7fffc4 	addi	r17,r17,-1
 40096dc:	18c1ffcc 	andi	r3,r3,2047
 40096e0:	3029883a 	mov	r20,r6
 40096e4:	3c62703a 	and	r17,r7,r17
 40096e8:	bf003fcc 	andi	fp,r23,255
 40096ec:	18006e26 	beq	r3,zero,40098a8 <__divdf3+0x254>
 40096f0:	0081ffc4 	movi	r2,2047
 40096f4:	18806626 	beq	r3,r2,4009890 <__divdf3+0x23c>
 40096f8:	88800434 	orhi	r2,r17,16
 40096fc:	100490fa 	slli	r2,r2,3
 4009700:	3022d77a 	srli	r17,r6,29
 4009704:	302890fa 	slli	r20,r6,3
 4009708:	18ff0044 	addi	r3,r3,-1023
 400970c:	88a2b03a 	or	r17,r17,r2
 4009710:	000f883a 	mov	r7,zero
 4009714:	b5e6f03a 	xor	r19,r22,r23
 4009718:	3a4cb03a 	or	r6,r7,r9
 400971c:	008003c4 	movi	r2,15
 4009720:	9809883a 	mov	r4,r19
 4009724:	90c7c83a 	sub	r3,r18,r3
 4009728:	9cc03fcc 	andi	r19,r19,255
 400972c:	11809636 	bltu	r2,r6,4009988 <__divdf3+0x334>
 4009730:	300c90ba 	slli	r6,r6,2
 4009734:	00810074 	movhi	r2,1025
 4009738:	10a5d204 	addi	r2,r2,-26808
 400973c:	308d883a 	add	r6,r6,r2
 4009740:	30800017 	ldw	r2,0(r6)
 4009744:	1000683a 	jmp	r2
 4009748:	04009988 	cmpgei	r16,zero,614
 400974c:	040097c0 	call	40097c <__alt_mem_sdram-0x3bff684>
 4009750:	04009978 	rdprs	r16,zero,613
 4009754:	040097b4 	movhi	r16,606
 4009758:	04009978 	rdprs	r16,zero,613
 400975c:	0400994c 	andi	r16,zero,613
 4009760:	04009978 	rdprs	r16,zero,613
 4009764:	040097b4 	movhi	r16,606
 4009768:	040097c0 	call	40097c <__alt_mem_sdram-0x3bff684>
 400976c:	040097c0 	call	40097c <__alt_mem_sdram-0x3bff684>
 4009770:	0400994c 	andi	r16,zero,613
 4009774:	040097b4 	movhi	r16,606
 4009778:	040097a4 	muli	r16,zero,606
 400977c:	040097a4 	muli	r16,zero,606
 4009780:	040097a4 	muli	r16,zero,606
 4009784:	04009d10 	cmplti	r16,zero,628
 4009788:	2404b03a 	or	r2,r4,r16
 400978c:	10006c1e 	bne	r2,zero,4009940 <__divdf3+0x2ec>
 4009790:	02400204 	movi	r9,8
 4009794:	0021883a 	mov	r16,zero
 4009798:	002b883a 	mov	r21,zero
 400979c:	01400084 	movi	r5,2
 40097a0:	003fca06 	br	40096cc <__alt_data_end+0xfc0096cc>
 40097a4:	8023883a 	mov	r17,r16
 40097a8:	a829883a 	mov	r20,r21
 40097ac:	4039883a 	mov	fp,r8
 40097b0:	280f883a 	mov	r7,r5
 40097b4:	00800084 	movi	r2,2
 40097b8:	3881601e 	bne	r7,r2,4009d3c <__divdf3+0x6e8>
 40097bc:	e027883a 	mov	r19,fp
 40097c0:	9900004c 	andi	r4,r19,1
 40097c4:	0081ffc4 	movi	r2,2047
 40097c8:	0021883a 	mov	r16,zero
 40097cc:	002b883a 	mov	r21,zero
 40097d0:	1004953a 	slli	r2,r2,20
 40097d4:	20c03fcc 	andi	r3,r4,255
 40097d8:	01400434 	movhi	r5,16
 40097dc:	297fffc4 	addi	r5,r5,-1
 40097e0:	180697fa 	slli	r3,r3,31
 40097e4:	8160703a 	and	r16,r16,r5
 40097e8:	80a0b03a 	or	r16,r16,r2
 40097ec:	80c6b03a 	or	r3,r16,r3
 40097f0:	a805883a 	mov	r2,r21
 40097f4:	dfc00f17 	ldw	ra,60(sp)
 40097f8:	df000e17 	ldw	fp,56(sp)
 40097fc:	ddc00d17 	ldw	r23,52(sp)
 4009800:	dd800c17 	ldw	r22,48(sp)
 4009804:	dd400b17 	ldw	r21,44(sp)
 4009808:	dd000a17 	ldw	r20,40(sp)
 400980c:	dcc00917 	ldw	r19,36(sp)
 4009810:	dc800817 	ldw	r18,32(sp)
 4009814:	dc400717 	ldw	r17,28(sp)
 4009818:	dc000617 	ldw	r16,24(sp)
 400981c:	dec01004 	addi	sp,sp,64
 4009820:	f800283a 	ret
 4009824:	2404b03a 	or	r2,r4,r16
 4009828:	2023883a 	mov	r17,r4
 400982c:	10003f26 	beq	r2,zero,400992c <__divdf3+0x2d8>
 4009830:	80015e26 	beq	r16,zero,4009dac <__divdf3+0x758>
 4009834:	8009883a 	mov	r4,r16
 4009838:	d9800215 	stw	r6,8(sp)
 400983c:	d9c00515 	stw	r7,20(sp)
 4009840:	da000415 	stw	r8,16(sp)
 4009844:	400b7f80 	call	400b7f8 <__clzsi2>
 4009848:	d9800217 	ldw	r6,8(sp)
 400984c:	d9c00517 	ldw	r7,20(sp)
 4009850:	da000417 	ldw	r8,16(sp)
 4009854:	113ffd44 	addi	r4,r2,-11
 4009858:	00c00704 	movi	r3,28
 400985c:	19014f16 	blt	r3,r4,4009d9c <__divdf3+0x748>
 4009860:	00c00744 	movi	r3,29
 4009864:	157ffe04 	addi	r21,r2,-8
 4009868:	1907c83a 	sub	r3,r3,r4
 400986c:	8560983a 	sll	r16,r16,r21
 4009870:	88c6d83a 	srl	r3,r17,r3
 4009874:	8d6a983a 	sll	r21,r17,r21
 4009878:	1c20b03a 	or	r16,r3,r16
 400987c:	1080fcc4 	addi	r2,r2,1011
 4009880:	00a5c83a 	sub	r18,zero,r2
 4009884:	0013883a 	mov	r9,zero
 4009888:	000b883a 	mov	r5,zero
 400988c:	003f8f06 	br	40096cc <__alt_data_end+0xfc0096cc>
 4009890:	3444b03a 	or	r2,r6,r17
 4009894:	1000231e 	bne	r2,zero,4009924 <__divdf3+0x2d0>
 4009898:	0023883a 	mov	r17,zero
 400989c:	0029883a 	mov	r20,zero
 40098a0:	01c00084 	movi	r7,2
 40098a4:	003f9b06 	br	4009714 <__alt_data_end+0xfc009714>
 40098a8:	3444b03a 	or	r2,r6,r17
 40098ac:	10001926 	beq	r2,zero,4009914 <__divdf3+0x2c0>
 40098b0:	88014b26 	beq	r17,zero,4009de0 <__divdf3+0x78c>
 40098b4:	8809883a 	mov	r4,r17
 40098b8:	d9400115 	stw	r5,4(sp)
 40098bc:	d9800215 	stw	r6,8(sp)
 40098c0:	da000415 	stw	r8,16(sp)
 40098c4:	da400315 	stw	r9,12(sp)
 40098c8:	400b7f80 	call	400b7f8 <__clzsi2>
 40098cc:	d9400117 	ldw	r5,4(sp)
 40098d0:	d9800217 	ldw	r6,8(sp)
 40098d4:	da000417 	ldw	r8,16(sp)
 40098d8:	da400317 	ldw	r9,12(sp)
 40098dc:	113ffd44 	addi	r4,r2,-11
 40098e0:	00c00704 	movi	r3,28
 40098e4:	19013a16 	blt	r3,r4,4009dd0 <__divdf3+0x77c>
 40098e8:	00c00744 	movi	r3,29
 40098ec:	153ffe04 	addi	r20,r2,-8
 40098f0:	1907c83a 	sub	r3,r3,r4
 40098f4:	8d22983a 	sll	r17,r17,r20
 40098f8:	30c6d83a 	srl	r3,r6,r3
 40098fc:	3528983a 	sll	r20,r6,r20
 4009900:	1c62b03a 	or	r17,r3,r17
 4009904:	1080fcc4 	addi	r2,r2,1011
 4009908:	0087c83a 	sub	r3,zero,r2
 400990c:	000f883a 	mov	r7,zero
 4009910:	003f8006 	br	4009714 <__alt_data_end+0xfc009714>
 4009914:	0023883a 	mov	r17,zero
 4009918:	0029883a 	mov	r20,zero
 400991c:	01c00044 	movi	r7,1
 4009920:	003f7c06 	br	4009714 <__alt_data_end+0xfc009714>
 4009924:	01c000c4 	movi	r7,3
 4009928:	003f7a06 	br	4009714 <__alt_data_end+0xfc009714>
 400992c:	02400104 	movi	r9,4
 4009930:	0021883a 	mov	r16,zero
 4009934:	002b883a 	mov	r21,zero
 4009938:	01400044 	movi	r5,1
 400993c:	003f6306 	br	40096cc <__alt_data_end+0xfc0096cc>
 4009940:	02400304 	movi	r9,12
 4009944:	014000c4 	movi	r5,3
 4009948:	003f6006 	br	40096cc <__alt_data_end+0xfc0096cc>
 400994c:	04000434 	movhi	r16,16
 4009950:	0009883a 	mov	r4,zero
 4009954:	843fffc4 	addi	r16,r16,-1
 4009958:	057fffc4 	movi	r21,-1
 400995c:	0081ffc4 	movi	r2,2047
 4009960:	003f9b06 	br	40097d0 <__alt_data_end+0xfc0097d0>
 4009964:	00c00044 	movi	r3,1
 4009968:	1887c83a 	sub	r3,r3,r2
 400996c:	01000e04 	movi	r4,56
 4009970:	20c1530e 	bge	r4,r3,4009ec0 <__divdf3+0x86c>
 4009974:	9900004c 	andi	r4,r19,1
 4009978:	0005883a 	mov	r2,zero
 400997c:	0021883a 	mov	r16,zero
 4009980:	002b883a 	mov	r21,zero
 4009984:	003f9206 	br	40097d0 <__alt_data_end+0xfc0097d0>
 4009988:	8c012e36 	bltu	r17,r16,4009e44 <__divdf3+0x7f0>
 400998c:	84412c26 	beq	r16,r17,4009e40 <__divdf3+0x7ec>
 4009990:	a82f883a 	mov	r23,r21
 4009994:	18ffffc4 	addi	r3,r3,-1
 4009998:	002b883a 	mov	r21,zero
 400999c:	a004d63a 	srli	r2,r20,24
 40099a0:	8822923a 	slli	r17,r17,8
 40099a4:	a028923a 	slli	r20,r20,8
 40099a8:	8009883a 	mov	r4,r16
 40099ac:	88acb03a 	or	r22,r17,r2
 40099b0:	dd000015 	stw	r20,0(sp)
 40099b4:	b028d43a 	srli	r20,r22,16
 40099b8:	d8c00215 	stw	r3,8(sp)
 40099bc:	b4bfffcc 	andi	r18,r22,65535
 40099c0:	a00b883a 	mov	r5,r20
 40099c4:	4007df80 	call	4007df8 <__udivsi3>
 40099c8:	100b883a 	mov	r5,r2
 40099cc:	9009883a 	mov	r4,r18
 40099d0:	1023883a 	mov	r17,r2
 40099d4:	4007eb40 	call	4007eb4 <__mulsi3>
 40099d8:	8009883a 	mov	r4,r16
 40099dc:	a00b883a 	mov	r5,r20
 40099e0:	1039883a 	mov	fp,r2
 40099e4:	4007e5c0 	call	4007e5c <__umodsi3>
 40099e8:	1004943a 	slli	r2,r2,16
 40099ec:	b808d43a 	srli	r4,r23,16
 40099f0:	d8c00217 	ldw	r3,8(sp)
 40099f4:	2084b03a 	or	r2,r4,r2
 40099f8:	1700062e 	bgeu	r2,fp,4009a14 <__divdf3+0x3c0>
 40099fc:	1585883a 	add	r2,r2,r22
 4009a00:	893fffc4 	addi	r4,r17,-1
 4009a04:	15811d36 	bltu	r2,r22,4009e7c <__divdf3+0x828>
 4009a08:	17011c2e 	bgeu	r2,fp,4009e7c <__divdf3+0x828>
 4009a0c:	8c7fff84 	addi	r17,r17,-2
 4009a10:	1585883a 	add	r2,r2,r22
 4009a14:	1739c83a 	sub	fp,r2,fp
 4009a18:	a00b883a 	mov	r5,r20
 4009a1c:	e009883a 	mov	r4,fp
 4009a20:	d8c00215 	stw	r3,8(sp)
 4009a24:	4007df80 	call	4007df8 <__udivsi3>
 4009a28:	100b883a 	mov	r5,r2
 4009a2c:	9009883a 	mov	r4,r18
 4009a30:	1021883a 	mov	r16,r2
 4009a34:	4007eb40 	call	4007eb4 <__mulsi3>
 4009a38:	a00b883a 	mov	r5,r20
 4009a3c:	e009883a 	mov	r4,fp
 4009a40:	d8800415 	stw	r2,16(sp)
 4009a44:	4007e5c0 	call	4007e5c <__umodsi3>
 4009a48:	1004943a 	slli	r2,r2,16
 4009a4c:	da000417 	ldw	r8,16(sp)
 4009a50:	bdffffcc 	andi	r23,r23,65535
 4009a54:	b884b03a 	or	r2,r23,r2
 4009a58:	d8c00217 	ldw	r3,8(sp)
 4009a5c:	1200062e 	bgeu	r2,r8,4009a78 <__divdf3+0x424>
 4009a60:	1585883a 	add	r2,r2,r22
 4009a64:	813fffc4 	addi	r4,r16,-1
 4009a68:	15810236 	bltu	r2,r22,4009e74 <__divdf3+0x820>
 4009a6c:	1201012e 	bgeu	r2,r8,4009e74 <__divdf3+0x820>
 4009a70:	843fff84 	addi	r16,r16,-2
 4009a74:	1585883a 	add	r2,r2,r22
 4009a78:	8822943a 	slli	r17,r17,16
 4009a7c:	d9800017 	ldw	r6,0(sp)
 4009a80:	1211c83a 	sub	r8,r2,r8
 4009a84:	8c22b03a 	or	r17,r17,r16
 4009a88:	373fffcc 	andi	fp,r6,65535
 4009a8c:	8abfffcc 	andi	r10,r17,65535
 4009a90:	8820d43a 	srli	r16,r17,16
 4009a94:	5009883a 	mov	r4,r10
 4009a98:	e00b883a 	mov	r5,fp
 4009a9c:	302ed43a 	srli	r23,r6,16
 4009aa0:	d8c00215 	stw	r3,8(sp)
 4009aa4:	da000415 	stw	r8,16(sp)
 4009aa8:	da800115 	stw	r10,4(sp)
 4009aac:	4007eb40 	call	4007eb4 <__mulsi3>
 4009ab0:	800b883a 	mov	r5,r16
 4009ab4:	e009883a 	mov	r4,fp
 4009ab8:	d8800515 	stw	r2,20(sp)
 4009abc:	4007eb40 	call	4007eb4 <__mulsi3>
 4009ac0:	8009883a 	mov	r4,r16
 4009ac4:	b80b883a 	mov	r5,r23
 4009ac8:	d8800315 	stw	r2,12(sp)
 4009acc:	4007eb40 	call	4007eb4 <__mulsi3>
 4009ad0:	da800117 	ldw	r10,4(sp)
 4009ad4:	b80b883a 	mov	r5,r23
 4009ad8:	1021883a 	mov	r16,r2
 4009adc:	5009883a 	mov	r4,r10
 4009ae0:	4007eb40 	call	4007eb4 <__mulsi3>
 4009ae4:	d9c00517 	ldw	r7,20(sp)
 4009ae8:	da400317 	ldw	r9,12(sp)
 4009aec:	d8c00217 	ldw	r3,8(sp)
 4009af0:	3808d43a 	srli	r4,r7,16
 4009af4:	1245883a 	add	r2,r2,r9
 4009af8:	da000417 	ldw	r8,16(sp)
 4009afc:	2085883a 	add	r2,r4,r2
 4009b00:	1240022e 	bgeu	r2,r9,4009b0c <__divdf3+0x4b8>
 4009b04:	01000074 	movhi	r4,1
 4009b08:	8121883a 	add	r16,r16,r4
 4009b0c:	1008d43a 	srli	r4,r2,16
 4009b10:	1004943a 	slli	r2,r2,16
 4009b14:	39ffffcc 	andi	r7,r7,65535
 4009b18:	2409883a 	add	r4,r4,r16
 4009b1c:	11c5883a 	add	r2,r2,r7
 4009b20:	4100bb36 	bltu	r8,r4,4009e10 <__divdf3+0x7bc>
 4009b24:	4100d726 	beq	r8,r4,4009e84 <__divdf3+0x830>
 4009b28:	4109c83a 	sub	r4,r8,r4
 4009b2c:	a8a1c83a 	sub	r16,r21,r2
 4009b30:	ac2b803a 	cmpltu	r21,r21,r16
 4009b34:	256bc83a 	sub	r21,r4,r21
 4009b38:	b540d926 	beq	r22,r21,4009ea0 <__divdf3+0x84c>
 4009b3c:	a00b883a 	mov	r5,r20
 4009b40:	a809883a 	mov	r4,r21
 4009b44:	d8c00215 	stw	r3,8(sp)
 4009b48:	4007df80 	call	4007df8 <__udivsi3>
 4009b4c:	100b883a 	mov	r5,r2
 4009b50:	9009883a 	mov	r4,r18
 4009b54:	d8800515 	stw	r2,20(sp)
 4009b58:	4007eb40 	call	4007eb4 <__mulsi3>
 4009b5c:	a809883a 	mov	r4,r21
 4009b60:	a00b883a 	mov	r5,r20
 4009b64:	d8800415 	stw	r2,16(sp)
 4009b68:	4007e5c0 	call	4007e5c <__umodsi3>
 4009b6c:	1004943a 	slli	r2,r2,16
 4009b70:	8008d43a 	srli	r4,r16,16
 4009b74:	da000417 	ldw	r8,16(sp)
 4009b78:	d8c00217 	ldw	r3,8(sp)
 4009b7c:	2084b03a 	or	r2,r4,r2
 4009b80:	d9c00517 	ldw	r7,20(sp)
 4009b84:	1200062e 	bgeu	r2,r8,4009ba0 <__divdf3+0x54c>
 4009b88:	1585883a 	add	r2,r2,r22
 4009b8c:	393fffc4 	addi	r4,r7,-1
 4009b90:	1580c536 	bltu	r2,r22,4009ea8 <__divdf3+0x854>
 4009b94:	1200c42e 	bgeu	r2,r8,4009ea8 <__divdf3+0x854>
 4009b98:	39ffff84 	addi	r7,r7,-2
 4009b9c:	1585883a 	add	r2,r2,r22
 4009ba0:	122bc83a 	sub	r21,r2,r8
 4009ba4:	a00b883a 	mov	r5,r20
 4009ba8:	a809883a 	mov	r4,r21
 4009bac:	d8c00215 	stw	r3,8(sp)
 4009bb0:	d9c00515 	stw	r7,20(sp)
 4009bb4:	4007df80 	call	4007df8 <__udivsi3>
 4009bb8:	9009883a 	mov	r4,r18
 4009bbc:	100b883a 	mov	r5,r2
 4009bc0:	d8800415 	stw	r2,16(sp)
 4009bc4:	4007eb40 	call	4007eb4 <__mulsi3>
 4009bc8:	a809883a 	mov	r4,r21
 4009bcc:	a00b883a 	mov	r5,r20
 4009bd0:	1025883a 	mov	r18,r2
 4009bd4:	4007e5c0 	call	4007e5c <__umodsi3>
 4009bd8:	1004943a 	slli	r2,r2,16
 4009bdc:	813fffcc 	andi	r4,r16,65535
 4009be0:	d8c00217 	ldw	r3,8(sp)
 4009be4:	20a0b03a 	or	r16,r4,r2
 4009be8:	d9c00517 	ldw	r7,20(sp)
 4009bec:	da000417 	ldw	r8,16(sp)
 4009bf0:	8480062e 	bgeu	r16,r18,4009c0c <__divdf3+0x5b8>
 4009bf4:	85a1883a 	add	r16,r16,r22
 4009bf8:	40bfffc4 	addi	r2,r8,-1
 4009bfc:	8580ac36 	bltu	r16,r22,4009eb0 <__divdf3+0x85c>
 4009c00:	8480ab2e 	bgeu	r16,r18,4009eb0 <__divdf3+0x85c>
 4009c04:	423fff84 	addi	r8,r8,-2
 4009c08:	85a1883a 	add	r16,r16,r22
 4009c0c:	3804943a 	slli	r2,r7,16
 4009c10:	84a1c83a 	sub	r16,r16,r18
 4009c14:	e009883a 	mov	r4,fp
 4009c18:	1228b03a 	or	r20,r2,r8
 4009c1c:	a1ffffcc 	andi	r7,r20,65535
 4009c20:	a024d43a 	srli	r18,r20,16
 4009c24:	380b883a 	mov	r5,r7
 4009c28:	d8c00215 	stw	r3,8(sp)
 4009c2c:	d9c00515 	stw	r7,20(sp)
 4009c30:	4007eb40 	call	4007eb4 <__mulsi3>
 4009c34:	900b883a 	mov	r5,r18
 4009c38:	e009883a 	mov	r4,fp
 4009c3c:	102b883a 	mov	r21,r2
 4009c40:	4007eb40 	call	4007eb4 <__mulsi3>
 4009c44:	900b883a 	mov	r5,r18
 4009c48:	b809883a 	mov	r4,r23
 4009c4c:	1039883a 	mov	fp,r2
 4009c50:	4007eb40 	call	4007eb4 <__mulsi3>
 4009c54:	d9c00517 	ldw	r7,20(sp)
 4009c58:	b80b883a 	mov	r5,r23
 4009c5c:	1025883a 	mov	r18,r2
 4009c60:	3809883a 	mov	r4,r7
 4009c64:	4007eb40 	call	4007eb4 <__mulsi3>
 4009c68:	a808d43a 	srli	r4,r21,16
 4009c6c:	1705883a 	add	r2,r2,fp
 4009c70:	d8c00217 	ldw	r3,8(sp)
 4009c74:	2085883a 	add	r2,r4,r2
 4009c78:	1700022e 	bgeu	r2,fp,4009c84 <__divdf3+0x630>
 4009c7c:	01000074 	movhi	r4,1
 4009c80:	9125883a 	add	r18,r18,r4
 4009c84:	1008d43a 	srli	r4,r2,16
 4009c88:	1004943a 	slli	r2,r2,16
 4009c8c:	ad7fffcc 	andi	r21,r21,65535
 4009c90:	2489883a 	add	r4,r4,r18
 4009c94:	1545883a 	add	r2,r2,r21
 4009c98:	81003836 	bltu	r16,r4,4009d7c <__divdf3+0x728>
 4009c9c:	81003626 	beq	r16,r4,4009d78 <__divdf3+0x724>
 4009ca0:	a5000054 	ori	r20,r20,1
 4009ca4:	1880ffc4 	addi	r2,r3,1023
 4009ca8:	00bf2e0e 	bge	zero,r2,4009964 <__alt_data_end+0xfc009964>
 4009cac:	a10001cc 	andi	r4,r20,7
 4009cb0:	20000726 	beq	r4,zero,4009cd0 <__divdf3+0x67c>
 4009cb4:	a10003cc 	andi	r4,r20,15
 4009cb8:	01400104 	movi	r5,4
 4009cbc:	21400426 	beq	r4,r5,4009cd0 <__divdf3+0x67c>
 4009cc0:	a149883a 	add	r4,r20,r5
 4009cc4:	2529803a 	cmpltu	r20,r4,r20
 4009cc8:	8d23883a 	add	r17,r17,r20
 4009ccc:	2029883a 	mov	r20,r4
 4009cd0:	8900402c 	andhi	r4,r17,256
 4009cd4:	20000426 	beq	r4,zero,4009ce8 <__divdf3+0x694>
 4009cd8:	18810004 	addi	r2,r3,1024
 4009cdc:	00ffc034 	movhi	r3,65280
 4009ce0:	18ffffc4 	addi	r3,r3,-1
 4009ce4:	88e2703a 	and	r17,r17,r3
 4009ce8:	00c1ff84 	movi	r3,2046
 4009cec:	18beb416 	blt	r3,r2,40097c0 <__alt_data_end+0xfc0097c0>
 4009cf0:	a028d0fa 	srli	r20,r20,3
 4009cf4:	882a977a 	slli	r21,r17,29
 4009cf8:	8820927a 	slli	r16,r17,9
 4009cfc:	1081ffcc 	andi	r2,r2,2047
 4009d00:	ad2ab03a 	or	r21,r21,r20
 4009d04:	8020d33a 	srli	r16,r16,12
 4009d08:	9900004c 	andi	r4,r19,1
 4009d0c:	003eb006 	br	40097d0 <__alt_data_end+0xfc0097d0>
 4009d10:	8080022c 	andhi	r2,r16,8
 4009d14:	10001226 	beq	r2,zero,4009d60 <__divdf3+0x70c>
 4009d18:	8880022c 	andhi	r2,r17,8
 4009d1c:	1000101e 	bne	r2,zero,4009d60 <__divdf3+0x70c>
 4009d20:	00800434 	movhi	r2,16
 4009d24:	8c000234 	orhi	r16,r17,8
 4009d28:	10bfffc4 	addi	r2,r2,-1
 4009d2c:	b809883a 	mov	r4,r23
 4009d30:	80a0703a 	and	r16,r16,r2
 4009d34:	a02b883a 	mov	r21,r20
 4009d38:	003f0806 	br	400995c <__alt_data_end+0xfc00995c>
 4009d3c:	008000c4 	movi	r2,3
 4009d40:	3880b126 	beq	r7,r2,400a008 <__divdf3+0x9b4>
 4009d44:	00800044 	movi	r2,1
 4009d48:	38805b1e 	bne	r7,r2,4009eb8 <__divdf3+0x864>
 4009d4c:	e009883a 	mov	r4,fp
 4009d50:	0005883a 	mov	r2,zero
 4009d54:	0021883a 	mov	r16,zero
 4009d58:	002b883a 	mov	r21,zero
 4009d5c:	003e9c06 	br	40097d0 <__alt_data_end+0xfc0097d0>
 4009d60:	00800434 	movhi	r2,16
 4009d64:	84000234 	orhi	r16,r16,8
 4009d68:	10bfffc4 	addi	r2,r2,-1
 4009d6c:	b009883a 	mov	r4,r22
 4009d70:	80a0703a 	and	r16,r16,r2
 4009d74:	003ef906 	br	400995c <__alt_data_end+0xfc00995c>
 4009d78:	103fca26 	beq	r2,zero,4009ca4 <__alt_data_end+0xfc009ca4>
 4009d7c:	b421883a 	add	r16,r22,r16
 4009d80:	a17fffc4 	addi	r5,r20,-1
 4009d84:	8580422e 	bgeu	r16,r22,4009e90 <__divdf3+0x83c>
 4009d88:	2829883a 	mov	r20,r5
 4009d8c:	813fc41e 	bne	r16,r4,4009ca0 <__alt_data_end+0xfc009ca0>
 4009d90:	d9800017 	ldw	r6,0(sp)
 4009d94:	30bfc21e 	bne	r6,r2,4009ca0 <__alt_data_end+0xfc009ca0>
 4009d98:	003fc206 	br	4009ca4 <__alt_data_end+0xfc009ca4>
 4009d9c:	143ff604 	addi	r16,r2,-40
 4009da0:	8c20983a 	sll	r16,r17,r16
 4009da4:	002b883a 	mov	r21,zero
 4009da8:	003eb406 	br	400987c <__alt_data_end+0xfc00987c>
 4009dac:	d9800215 	stw	r6,8(sp)
 4009db0:	d9c00515 	stw	r7,20(sp)
 4009db4:	da000415 	stw	r8,16(sp)
 4009db8:	400b7f80 	call	400b7f8 <__clzsi2>
 4009dbc:	10800804 	addi	r2,r2,32
 4009dc0:	da000417 	ldw	r8,16(sp)
 4009dc4:	d9c00517 	ldw	r7,20(sp)
 4009dc8:	d9800217 	ldw	r6,8(sp)
 4009dcc:	003ea106 	br	4009854 <__alt_data_end+0xfc009854>
 4009dd0:	147ff604 	addi	r17,r2,-40
 4009dd4:	3462983a 	sll	r17,r6,r17
 4009dd8:	0029883a 	mov	r20,zero
 4009ddc:	003ec906 	br	4009904 <__alt_data_end+0xfc009904>
 4009de0:	3009883a 	mov	r4,r6
 4009de4:	d9400115 	stw	r5,4(sp)
 4009de8:	d9800215 	stw	r6,8(sp)
 4009dec:	da000415 	stw	r8,16(sp)
 4009df0:	da400315 	stw	r9,12(sp)
 4009df4:	400b7f80 	call	400b7f8 <__clzsi2>
 4009df8:	10800804 	addi	r2,r2,32
 4009dfc:	da400317 	ldw	r9,12(sp)
 4009e00:	da000417 	ldw	r8,16(sp)
 4009e04:	d9800217 	ldw	r6,8(sp)
 4009e08:	d9400117 	ldw	r5,4(sp)
 4009e0c:	003eb306 	br	40098dc <__alt_data_end+0xfc0098dc>
 4009e10:	d9800017 	ldw	r6,0(sp)
 4009e14:	a9ab883a 	add	r21,r21,r6
 4009e18:	a98b803a 	cmpltu	r5,r21,r6
 4009e1c:	2d8b883a 	add	r5,r5,r22
 4009e20:	2a11883a 	add	r8,r5,r8
 4009e24:	897fffc4 	addi	r5,r17,-1
 4009e28:	b2000c2e 	bgeu	r22,r8,4009e5c <__divdf3+0x808>
 4009e2c:	41003f36 	bltu	r8,r4,4009f2c <__divdf3+0x8d8>
 4009e30:	22006c26 	beq	r4,r8,4009fe4 <__divdf3+0x990>
 4009e34:	4109c83a 	sub	r4,r8,r4
 4009e38:	2823883a 	mov	r17,r5
 4009e3c:	003f3b06 	br	4009b2c <__alt_data_end+0xfc009b2c>
 4009e40:	ad3ed336 	bltu	r21,r20,4009990 <__alt_data_end+0xfc009990>
 4009e44:	a804d07a 	srli	r2,r21,1
 4009e48:	802e97fa 	slli	r23,r16,31
 4009e4c:	a82a97fa 	slli	r21,r21,31
 4009e50:	8020d07a 	srli	r16,r16,1
 4009e54:	b8aeb03a 	or	r23,r23,r2
 4009e58:	003ed006 	br	400999c <__alt_data_end+0xfc00999c>
 4009e5c:	b23ff51e 	bne	r22,r8,4009e34 <__alt_data_end+0xfc009e34>
 4009e60:	d9800017 	ldw	r6,0(sp)
 4009e64:	a9bff12e 	bgeu	r21,r6,4009e2c <__alt_data_end+0xfc009e2c>
 4009e68:	b109c83a 	sub	r4,r22,r4
 4009e6c:	2823883a 	mov	r17,r5
 4009e70:	003f2e06 	br	4009b2c <__alt_data_end+0xfc009b2c>
 4009e74:	2021883a 	mov	r16,r4
 4009e78:	003eff06 	br	4009a78 <__alt_data_end+0xfc009a78>
 4009e7c:	2023883a 	mov	r17,r4
 4009e80:	003ee406 	br	4009a14 <__alt_data_end+0xfc009a14>
 4009e84:	a8bfe236 	bltu	r21,r2,4009e10 <__alt_data_end+0xfc009e10>
 4009e88:	0009883a 	mov	r4,zero
 4009e8c:	003f2706 	br	4009b2c <__alt_data_end+0xfc009b2c>
 4009e90:	81002d36 	bltu	r16,r4,4009f48 <__divdf3+0x8f4>
 4009e94:	24005626 	beq	r4,r16,4009ff0 <__divdf3+0x99c>
 4009e98:	2829883a 	mov	r20,r5
 4009e9c:	003f8006 	br	4009ca0 <__alt_data_end+0xfc009ca0>
 4009ea0:	053fffc4 	movi	r20,-1
 4009ea4:	003f7f06 	br	4009ca4 <__alt_data_end+0xfc009ca4>
 4009ea8:	200f883a 	mov	r7,r4
 4009eac:	003f3c06 	br	4009ba0 <__alt_data_end+0xfc009ba0>
 4009eb0:	1011883a 	mov	r8,r2
 4009eb4:	003f5506 	br	4009c0c <__alt_data_end+0xfc009c0c>
 4009eb8:	e027883a 	mov	r19,fp
 4009ebc:	003f7906 	br	4009ca4 <__alt_data_end+0xfc009ca4>
 4009ec0:	010007c4 	movi	r4,31
 4009ec4:	20c02816 	blt	r4,r3,4009f68 <__divdf3+0x914>
 4009ec8:	00800804 	movi	r2,32
 4009ecc:	10c5c83a 	sub	r2,r2,r3
 4009ed0:	888a983a 	sll	r5,r17,r2
 4009ed4:	a0c8d83a 	srl	r4,r20,r3
 4009ed8:	a084983a 	sll	r2,r20,r2
 4009edc:	88e2d83a 	srl	r17,r17,r3
 4009ee0:	2906b03a 	or	r3,r5,r4
 4009ee4:	1004c03a 	cmpne	r2,r2,zero
 4009ee8:	1886b03a 	or	r3,r3,r2
 4009eec:	188001cc 	andi	r2,r3,7
 4009ef0:	10000726 	beq	r2,zero,4009f10 <__divdf3+0x8bc>
 4009ef4:	188003cc 	andi	r2,r3,15
 4009ef8:	01000104 	movi	r4,4
 4009efc:	11000426 	beq	r2,r4,4009f10 <__divdf3+0x8bc>
 4009f00:	1805883a 	mov	r2,r3
 4009f04:	10c00104 	addi	r3,r2,4
 4009f08:	1885803a 	cmpltu	r2,r3,r2
 4009f0c:	88a3883a 	add	r17,r17,r2
 4009f10:	8880202c 	andhi	r2,r17,128
 4009f14:	10002926 	beq	r2,zero,4009fbc <__divdf3+0x968>
 4009f18:	9900004c 	andi	r4,r19,1
 4009f1c:	00800044 	movi	r2,1
 4009f20:	0021883a 	mov	r16,zero
 4009f24:	002b883a 	mov	r21,zero
 4009f28:	003e2906 	br	40097d0 <__alt_data_end+0xfc0097d0>
 4009f2c:	d9800017 	ldw	r6,0(sp)
 4009f30:	8c7fff84 	addi	r17,r17,-2
 4009f34:	a9ab883a 	add	r21,r21,r6
 4009f38:	a98b803a 	cmpltu	r5,r21,r6
 4009f3c:	2d8b883a 	add	r5,r5,r22
 4009f40:	2a11883a 	add	r8,r5,r8
 4009f44:	003ef806 	br	4009b28 <__alt_data_end+0xfc009b28>
 4009f48:	d9800017 	ldw	r6,0(sp)
 4009f4c:	318f883a 	add	r7,r6,r6
 4009f50:	398b803a 	cmpltu	r5,r7,r6
 4009f54:	2d8d883a 	add	r6,r5,r22
 4009f58:	81a1883a 	add	r16,r16,r6
 4009f5c:	a17fff84 	addi	r5,r20,-2
 4009f60:	d9c00015 	stw	r7,0(sp)
 4009f64:	003f8806 	br	4009d88 <__alt_data_end+0xfc009d88>
 4009f68:	013ff844 	movi	r4,-31
 4009f6c:	2085c83a 	sub	r2,r4,r2
 4009f70:	8888d83a 	srl	r4,r17,r2
 4009f74:	00800804 	movi	r2,32
 4009f78:	18802126 	beq	r3,r2,400a000 <__divdf3+0x9ac>
 4009f7c:	04001004 	movi	r16,64
 4009f80:	80c7c83a 	sub	r3,r16,r3
 4009f84:	88e0983a 	sll	r16,r17,r3
 4009f88:	8504b03a 	or	r2,r16,r20
 4009f8c:	1004c03a 	cmpne	r2,r2,zero
 4009f90:	2084b03a 	or	r2,r4,r2
 4009f94:	144001cc 	andi	r17,r2,7
 4009f98:	88000d1e 	bne	r17,zero,4009fd0 <__divdf3+0x97c>
 4009f9c:	0021883a 	mov	r16,zero
 4009fa0:	102ad0fa 	srli	r21,r2,3
 4009fa4:	9900004c 	andi	r4,r19,1
 4009fa8:	0005883a 	mov	r2,zero
 4009fac:	ac6ab03a 	or	r21,r21,r17
 4009fb0:	003e0706 	br	40097d0 <__alt_data_end+0xfc0097d0>
 4009fb4:	1007883a 	mov	r3,r2
 4009fb8:	0023883a 	mov	r17,zero
 4009fbc:	8820927a 	slli	r16,r17,9
 4009fc0:	1805883a 	mov	r2,r3
 4009fc4:	8822977a 	slli	r17,r17,29
 4009fc8:	8020d33a 	srli	r16,r16,12
 4009fcc:	003ff406 	br	4009fa0 <__alt_data_end+0xfc009fa0>
 4009fd0:	10c003cc 	andi	r3,r2,15
 4009fd4:	01000104 	movi	r4,4
 4009fd8:	193ff626 	beq	r3,r4,4009fb4 <__alt_data_end+0xfc009fb4>
 4009fdc:	0023883a 	mov	r17,zero
 4009fe0:	003fc806 	br	4009f04 <__alt_data_end+0xfc009f04>
 4009fe4:	a8bfd136 	bltu	r21,r2,4009f2c <__alt_data_end+0xfc009f2c>
 4009fe8:	2823883a 	mov	r17,r5
 4009fec:	003fa606 	br	4009e88 <__alt_data_end+0xfc009e88>
 4009ff0:	d9800017 	ldw	r6,0(sp)
 4009ff4:	30bfd436 	bltu	r6,r2,4009f48 <__alt_data_end+0xfc009f48>
 4009ff8:	2829883a 	mov	r20,r5
 4009ffc:	003f6406 	br	4009d90 <__alt_data_end+0xfc009d90>
 400a000:	0021883a 	mov	r16,zero
 400a004:	003fe006 	br	4009f88 <__alt_data_end+0xfc009f88>
 400a008:	00800434 	movhi	r2,16
 400a00c:	8c000234 	orhi	r16,r17,8
 400a010:	10bfffc4 	addi	r2,r2,-1
 400a014:	e009883a 	mov	r4,fp
 400a018:	80a0703a 	and	r16,r16,r2
 400a01c:	a02b883a 	mov	r21,r20
 400a020:	003e4e06 	br	400995c <__alt_data_end+0xfc00995c>

0400a024 <__eqdf2>:
 400a024:	2804d53a 	srli	r2,r5,20
 400a028:	3806d53a 	srli	r3,r7,20
 400a02c:	02000434 	movhi	r8,16
 400a030:	423fffc4 	addi	r8,r8,-1
 400a034:	1081ffcc 	andi	r2,r2,2047
 400a038:	0281ffc4 	movi	r10,2047
 400a03c:	2a12703a 	and	r9,r5,r8
 400a040:	18c1ffcc 	andi	r3,r3,2047
 400a044:	3a10703a 	and	r8,r7,r8
 400a048:	280ad7fa 	srli	r5,r5,31
 400a04c:	380ed7fa 	srli	r7,r7,31
 400a050:	12801026 	beq	r2,r10,400a094 <__eqdf2+0x70>
 400a054:	0281ffc4 	movi	r10,2047
 400a058:	1a800a26 	beq	r3,r10,400a084 <__eqdf2+0x60>
 400a05c:	10c00226 	beq	r2,r3,400a068 <__eqdf2+0x44>
 400a060:	00800044 	movi	r2,1
 400a064:	f800283a 	ret
 400a068:	4a3ffd1e 	bne	r9,r8,400a060 <__alt_data_end+0xfc00a060>
 400a06c:	21bffc1e 	bne	r4,r6,400a060 <__alt_data_end+0xfc00a060>
 400a070:	29c00c26 	beq	r5,r7,400a0a4 <__eqdf2+0x80>
 400a074:	103ffa1e 	bne	r2,zero,400a060 <__alt_data_end+0xfc00a060>
 400a078:	2244b03a 	or	r2,r4,r9
 400a07c:	1004c03a 	cmpne	r2,r2,zero
 400a080:	f800283a 	ret
 400a084:	3214b03a 	or	r10,r6,r8
 400a088:	503ff426 	beq	r10,zero,400a05c <__alt_data_end+0xfc00a05c>
 400a08c:	00800044 	movi	r2,1
 400a090:	f800283a 	ret
 400a094:	2254b03a 	or	r10,r4,r9
 400a098:	503fee26 	beq	r10,zero,400a054 <__alt_data_end+0xfc00a054>
 400a09c:	00800044 	movi	r2,1
 400a0a0:	f800283a 	ret
 400a0a4:	0005883a 	mov	r2,zero
 400a0a8:	f800283a 	ret

0400a0ac <__gedf2>:
 400a0ac:	2804d53a 	srli	r2,r5,20
 400a0b0:	3806d53a 	srli	r3,r7,20
 400a0b4:	02000434 	movhi	r8,16
 400a0b8:	423fffc4 	addi	r8,r8,-1
 400a0bc:	1081ffcc 	andi	r2,r2,2047
 400a0c0:	0241ffc4 	movi	r9,2047
 400a0c4:	2a14703a 	and	r10,r5,r8
 400a0c8:	18c1ffcc 	andi	r3,r3,2047
 400a0cc:	3a10703a 	and	r8,r7,r8
 400a0d0:	280ad7fa 	srli	r5,r5,31
 400a0d4:	380ed7fa 	srli	r7,r7,31
 400a0d8:	12401d26 	beq	r2,r9,400a150 <__gedf2+0xa4>
 400a0dc:	0241ffc4 	movi	r9,2047
 400a0e0:	1a401226 	beq	r3,r9,400a12c <__gedf2+0x80>
 400a0e4:	1000081e 	bne	r2,zero,400a108 <__gedf2+0x5c>
 400a0e8:	2296b03a 	or	r11,r4,r10
 400a0ec:	5813003a 	cmpeq	r9,r11,zero
 400a0f0:	1800091e 	bne	r3,zero,400a118 <__gedf2+0x6c>
 400a0f4:	3218b03a 	or	r12,r6,r8
 400a0f8:	6000071e 	bne	r12,zero,400a118 <__gedf2+0x6c>
 400a0fc:	0005883a 	mov	r2,zero
 400a100:	5800101e 	bne	r11,zero,400a144 <__gedf2+0x98>
 400a104:	f800283a 	ret
 400a108:	18000c1e 	bne	r3,zero,400a13c <__gedf2+0x90>
 400a10c:	3212b03a 	or	r9,r6,r8
 400a110:	48000c26 	beq	r9,zero,400a144 <__gedf2+0x98>
 400a114:	0013883a 	mov	r9,zero
 400a118:	39c03fcc 	andi	r7,r7,255
 400a11c:	48000826 	beq	r9,zero,400a140 <__gedf2+0x94>
 400a120:	38000926 	beq	r7,zero,400a148 <__gedf2+0x9c>
 400a124:	00800044 	movi	r2,1
 400a128:	f800283a 	ret
 400a12c:	3212b03a 	or	r9,r6,r8
 400a130:	483fec26 	beq	r9,zero,400a0e4 <__alt_data_end+0xfc00a0e4>
 400a134:	00bfff84 	movi	r2,-2
 400a138:	f800283a 	ret
 400a13c:	39c03fcc 	andi	r7,r7,255
 400a140:	29c00626 	beq	r5,r7,400a15c <__gedf2+0xb0>
 400a144:	283ff726 	beq	r5,zero,400a124 <__alt_data_end+0xfc00a124>
 400a148:	00bfffc4 	movi	r2,-1
 400a14c:	f800283a 	ret
 400a150:	2292b03a 	or	r9,r4,r10
 400a154:	483fe126 	beq	r9,zero,400a0dc <__alt_data_end+0xfc00a0dc>
 400a158:	003ff606 	br	400a134 <__alt_data_end+0xfc00a134>
 400a15c:	18bff916 	blt	r3,r2,400a144 <__alt_data_end+0xfc00a144>
 400a160:	10c00316 	blt	r2,r3,400a170 <__gedf2+0xc4>
 400a164:	42bff736 	bltu	r8,r10,400a144 <__alt_data_end+0xfc00a144>
 400a168:	52000326 	beq	r10,r8,400a178 <__gedf2+0xcc>
 400a16c:	5200042e 	bgeu	r10,r8,400a180 <__gedf2+0xd4>
 400a170:	283fec1e 	bne	r5,zero,400a124 <__alt_data_end+0xfc00a124>
 400a174:	003ff406 	br	400a148 <__alt_data_end+0xfc00a148>
 400a178:	313ff236 	bltu	r6,r4,400a144 <__alt_data_end+0xfc00a144>
 400a17c:	21bffc36 	bltu	r4,r6,400a170 <__alt_data_end+0xfc00a170>
 400a180:	0005883a 	mov	r2,zero
 400a184:	f800283a 	ret

0400a188 <__ledf2>:
 400a188:	2804d53a 	srli	r2,r5,20
 400a18c:	3810d53a 	srli	r8,r7,20
 400a190:	00c00434 	movhi	r3,16
 400a194:	18ffffc4 	addi	r3,r3,-1
 400a198:	1081ffcc 	andi	r2,r2,2047
 400a19c:	0241ffc4 	movi	r9,2047
 400a1a0:	28d4703a 	and	r10,r5,r3
 400a1a4:	4201ffcc 	andi	r8,r8,2047
 400a1a8:	38c6703a 	and	r3,r7,r3
 400a1ac:	280ad7fa 	srli	r5,r5,31
 400a1b0:	380ed7fa 	srli	r7,r7,31
 400a1b4:	12401f26 	beq	r2,r9,400a234 <__ledf2+0xac>
 400a1b8:	0241ffc4 	movi	r9,2047
 400a1bc:	42401426 	beq	r8,r9,400a210 <__ledf2+0x88>
 400a1c0:	1000091e 	bne	r2,zero,400a1e8 <__ledf2+0x60>
 400a1c4:	2296b03a 	or	r11,r4,r10
 400a1c8:	5813003a 	cmpeq	r9,r11,zero
 400a1cc:	29403fcc 	andi	r5,r5,255
 400a1d0:	40000a1e 	bne	r8,zero,400a1fc <__ledf2+0x74>
 400a1d4:	30d8b03a 	or	r12,r6,r3
 400a1d8:	6000081e 	bne	r12,zero,400a1fc <__ledf2+0x74>
 400a1dc:	0005883a 	mov	r2,zero
 400a1e0:	5800111e 	bne	r11,zero,400a228 <__ledf2+0xa0>
 400a1e4:	f800283a 	ret
 400a1e8:	29403fcc 	andi	r5,r5,255
 400a1ec:	40000c1e 	bne	r8,zero,400a220 <__ledf2+0x98>
 400a1f0:	30d2b03a 	or	r9,r6,r3
 400a1f4:	48000c26 	beq	r9,zero,400a228 <__ledf2+0xa0>
 400a1f8:	0013883a 	mov	r9,zero
 400a1fc:	39c03fcc 	andi	r7,r7,255
 400a200:	48000826 	beq	r9,zero,400a224 <__ledf2+0x9c>
 400a204:	38001126 	beq	r7,zero,400a24c <__ledf2+0xc4>
 400a208:	00800044 	movi	r2,1
 400a20c:	f800283a 	ret
 400a210:	30d2b03a 	or	r9,r6,r3
 400a214:	483fea26 	beq	r9,zero,400a1c0 <__alt_data_end+0xfc00a1c0>
 400a218:	00800084 	movi	r2,2
 400a21c:	f800283a 	ret
 400a220:	39c03fcc 	andi	r7,r7,255
 400a224:	39400726 	beq	r7,r5,400a244 <__ledf2+0xbc>
 400a228:	2800081e 	bne	r5,zero,400a24c <__ledf2+0xc4>
 400a22c:	00800044 	movi	r2,1
 400a230:	f800283a 	ret
 400a234:	2292b03a 	or	r9,r4,r10
 400a238:	483fdf26 	beq	r9,zero,400a1b8 <__alt_data_end+0xfc00a1b8>
 400a23c:	00800084 	movi	r2,2
 400a240:	f800283a 	ret
 400a244:	4080030e 	bge	r8,r2,400a254 <__ledf2+0xcc>
 400a248:	383fef26 	beq	r7,zero,400a208 <__alt_data_end+0xfc00a208>
 400a24c:	00bfffc4 	movi	r2,-1
 400a250:	f800283a 	ret
 400a254:	123feb16 	blt	r2,r8,400a204 <__alt_data_end+0xfc00a204>
 400a258:	1abff336 	bltu	r3,r10,400a228 <__alt_data_end+0xfc00a228>
 400a25c:	50c00326 	beq	r10,r3,400a26c <__ledf2+0xe4>
 400a260:	50c0042e 	bgeu	r10,r3,400a274 <__ledf2+0xec>
 400a264:	283fe81e 	bne	r5,zero,400a208 <__alt_data_end+0xfc00a208>
 400a268:	003ff806 	br	400a24c <__alt_data_end+0xfc00a24c>
 400a26c:	313fee36 	bltu	r6,r4,400a228 <__alt_data_end+0xfc00a228>
 400a270:	21bffc36 	bltu	r4,r6,400a264 <__alt_data_end+0xfc00a264>
 400a274:	0005883a 	mov	r2,zero
 400a278:	f800283a 	ret

0400a27c <__muldf3>:
 400a27c:	deffee04 	addi	sp,sp,-72
 400a280:	dd000c15 	stw	r20,48(sp)
 400a284:	2828d53a 	srli	r20,r5,20
 400a288:	ddc00f15 	stw	r23,60(sp)
 400a28c:	282ed7fa 	srli	r23,r5,31
 400a290:	dc000815 	stw	r16,32(sp)
 400a294:	04000434 	movhi	r16,16
 400a298:	dcc00b15 	stw	r19,44(sp)
 400a29c:	843fffc4 	addi	r16,r16,-1
 400a2a0:	dfc01115 	stw	ra,68(sp)
 400a2a4:	df001015 	stw	fp,64(sp)
 400a2a8:	dd800e15 	stw	r22,56(sp)
 400a2ac:	dd400d15 	stw	r21,52(sp)
 400a2b0:	dc800a15 	stw	r18,40(sp)
 400a2b4:	dc400915 	stw	r17,36(sp)
 400a2b8:	a501ffcc 	andi	r20,r20,2047
 400a2bc:	2c20703a 	and	r16,r5,r16
 400a2c0:	b827883a 	mov	r19,r23
 400a2c4:	ba403fcc 	andi	r9,r23,255
 400a2c8:	a0006026 	beq	r20,zero,400a44c <__muldf3+0x1d0>
 400a2cc:	0081ffc4 	movi	r2,2047
 400a2d0:	202d883a 	mov	r22,r4
 400a2d4:	a0803626 	beq	r20,r2,400a3b0 <__muldf3+0x134>
 400a2d8:	84000434 	orhi	r16,r16,16
 400a2dc:	200ad77a 	srli	r5,r4,29
 400a2e0:	800490fa 	slli	r2,r16,3
 400a2e4:	202c90fa 	slli	r22,r4,3
 400a2e8:	a53f0044 	addi	r20,r20,-1023
 400a2ec:	28a0b03a 	or	r16,r5,r2
 400a2f0:	002b883a 	mov	r21,zero
 400a2f4:	000b883a 	mov	r5,zero
 400a2f8:	3804d53a 	srli	r2,r7,20
 400a2fc:	3838d7fa 	srli	fp,r7,31
 400a300:	04400434 	movhi	r17,16
 400a304:	8c7fffc4 	addi	r17,r17,-1
 400a308:	1081ffcc 	andi	r2,r2,2047
 400a30c:	3025883a 	mov	r18,r6
 400a310:	3c62703a 	and	r17,r7,r17
 400a314:	e2803fcc 	andi	r10,fp,255
 400a318:	10006d26 	beq	r2,zero,400a4d0 <__muldf3+0x254>
 400a31c:	00c1ffc4 	movi	r3,2047
 400a320:	10c06526 	beq	r2,r3,400a4b8 <__muldf3+0x23c>
 400a324:	8c400434 	orhi	r17,r17,16
 400a328:	300ed77a 	srli	r7,r6,29
 400a32c:	880690fa 	slli	r3,r17,3
 400a330:	302490fa 	slli	r18,r6,3
 400a334:	10bf0044 	addi	r2,r2,-1023
 400a338:	38e2b03a 	or	r17,r7,r3
 400a33c:	000f883a 	mov	r7,zero
 400a340:	a087883a 	add	r3,r20,r2
 400a344:	010003c4 	movi	r4,15
 400a348:	3d44b03a 	or	r2,r7,r21
 400a34c:	e5ccf03a 	xor	r6,fp,r23
 400a350:	1a000044 	addi	r8,r3,1
 400a354:	20809b36 	bltu	r4,r2,400a5c4 <__muldf3+0x348>
 400a358:	100490ba 	slli	r2,r2,2
 400a35c:	01010074 	movhi	r4,1025
 400a360:	2128dc04 	addi	r4,r4,-23696
 400a364:	1105883a 	add	r2,r2,r4
 400a368:	10800017 	ldw	r2,0(r2)
 400a36c:	1000683a 	jmp	r2
 400a370:	0400a5c4 	movi	r16,663
 400a374:	0400a3d0 	cmplti	r16,zero,655
 400a378:	0400a3d0 	cmplti	r16,zero,655
 400a37c:	0400a3cc 	andi	r16,zero,655
 400a380:	0400a5a0 	cmpeqi	r16,zero,662
 400a384:	0400a5a0 	cmpeqi	r16,zero,662
 400a388:	0400a588 	cmpgei	r16,zero,662
 400a38c:	0400a3cc 	andi	r16,zero,655
 400a390:	0400a5a0 	cmpeqi	r16,zero,662
 400a394:	0400a588 	cmpgei	r16,zero,662
 400a398:	0400a5a0 	cmpeqi	r16,zero,662
 400a39c:	0400a3cc 	andi	r16,zero,655
 400a3a0:	0400a5b0 	cmpltui	r16,zero,662
 400a3a4:	0400a5b0 	cmpltui	r16,zero,662
 400a3a8:	0400a5b0 	cmpltui	r16,zero,662
 400a3ac:	0400a910 	cmplti	r16,zero,676
 400a3b0:	2404b03a 	or	r2,r4,r16
 400a3b4:	1000711e 	bne	r2,zero,400a57c <__muldf3+0x300>
 400a3b8:	05400204 	movi	r21,8
 400a3bc:	0021883a 	mov	r16,zero
 400a3c0:	002d883a 	mov	r22,zero
 400a3c4:	01400084 	movi	r5,2
 400a3c8:	003fcb06 	br	400a2f8 <__alt_data_end+0xfc00a2f8>
 400a3cc:	500d883a 	mov	r6,r10
 400a3d0:	00800084 	movi	r2,2
 400a3d4:	38805926 	beq	r7,r2,400a53c <__muldf3+0x2c0>
 400a3d8:	008000c4 	movi	r2,3
 400a3dc:	3881bb26 	beq	r7,r2,400aacc <__muldf3+0x850>
 400a3e0:	00800044 	movi	r2,1
 400a3e4:	3881961e 	bne	r7,r2,400aa40 <__muldf3+0x7c4>
 400a3e8:	3027883a 	mov	r19,r6
 400a3ec:	0005883a 	mov	r2,zero
 400a3f0:	0021883a 	mov	r16,zero
 400a3f4:	002d883a 	mov	r22,zero
 400a3f8:	1004953a 	slli	r2,r2,20
 400a3fc:	98c03fcc 	andi	r3,r19,255
 400a400:	04400434 	movhi	r17,16
 400a404:	8c7fffc4 	addi	r17,r17,-1
 400a408:	180697fa 	slli	r3,r3,31
 400a40c:	8460703a 	and	r16,r16,r17
 400a410:	80a0b03a 	or	r16,r16,r2
 400a414:	80c6b03a 	or	r3,r16,r3
 400a418:	b005883a 	mov	r2,r22
 400a41c:	dfc01117 	ldw	ra,68(sp)
 400a420:	df001017 	ldw	fp,64(sp)
 400a424:	ddc00f17 	ldw	r23,60(sp)
 400a428:	dd800e17 	ldw	r22,56(sp)
 400a42c:	dd400d17 	ldw	r21,52(sp)
 400a430:	dd000c17 	ldw	r20,48(sp)
 400a434:	dcc00b17 	ldw	r19,44(sp)
 400a438:	dc800a17 	ldw	r18,40(sp)
 400a43c:	dc400917 	ldw	r17,36(sp)
 400a440:	dc000817 	ldw	r16,32(sp)
 400a444:	dec01204 	addi	sp,sp,72
 400a448:	f800283a 	ret
 400a44c:	2404b03a 	or	r2,r4,r16
 400a450:	202b883a 	mov	r21,r4
 400a454:	10004426 	beq	r2,zero,400a568 <__muldf3+0x2ec>
 400a458:	80015126 	beq	r16,zero,400a9a0 <__muldf3+0x724>
 400a45c:	8009883a 	mov	r4,r16
 400a460:	d9800715 	stw	r6,28(sp)
 400a464:	d9c00215 	stw	r7,8(sp)
 400a468:	da400415 	stw	r9,16(sp)
 400a46c:	400b7f80 	call	400b7f8 <__clzsi2>
 400a470:	d9800717 	ldw	r6,28(sp)
 400a474:	d9c00217 	ldw	r7,8(sp)
 400a478:	da400417 	ldw	r9,16(sp)
 400a47c:	113ffd44 	addi	r4,r2,-11
 400a480:	00c00704 	movi	r3,28
 400a484:	19014216 	blt	r3,r4,400a990 <__muldf3+0x714>
 400a488:	00c00744 	movi	r3,29
 400a48c:	15bffe04 	addi	r22,r2,-8
 400a490:	1907c83a 	sub	r3,r3,r4
 400a494:	85a0983a 	sll	r16,r16,r22
 400a498:	a8c6d83a 	srl	r3,r21,r3
 400a49c:	adac983a 	sll	r22,r21,r22
 400a4a0:	1c20b03a 	or	r16,r3,r16
 400a4a4:	1080fcc4 	addi	r2,r2,1011
 400a4a8:	00a9c83a 	sub	r20,zero,r2
 400a4ac:	002b883a 	mov	r21,zero
 400a4b0:	000b883a 	mov	r5,zero
 400a4b4:	003f9006 	br	400a2f8 <__alt_data_end+0xfc00a2f8>
 400a4b8:	3446b03a 	or	r3,r6,r17
 400a4bc:	1800281e 	bne	r3,zero,400a560 <__muldf3+0x2e4>
 400a4c0:	0023883a 	mov	r17,zero
 400a4c4:	0025883a 	mov	r18,zero
 400a4c8:	01c00084 	movi	r7,2
 400a4cc:	003f9c06 	br	400a340 <__alt_data_end+0xfc00a340>
 400a4d0:	3446b03a 	or	r3,r6,r17
 400a4d4:	18001e26 	beq	r3,zero,400a550 <__muldf3+0x2d4>
 400a4d8:	88012126 	beq	r17,zero,400a960 <__muldf3+0x6e4>
 400a4dc:	8809883a 	mov	r4,r17
 400a4e0:	d9400215 	stw	r5,8(sp)
 400a4e4:	d9800715 	stw	r6,28(sp)
 400a4e8:	da400415 	stw	r9,16(sp)
 400a4ec:	da800315 	stw	r10,12(sp)
 400a4f0:	400b7f80 	call	400b7f8 <__clzsi2>
 400a4f4:	d9400217 	ldw	r5,8(sp)
 400a4f8:	d9800717 	ldw	r6,28(sp)
 400a4fc:	da400417 	ldw	r9,16(sp)
 400a500:	da800317 	ldw	r10,12(sp)
 400a504:	113ffd44 	addi	r4,r2,-11
 400a508:	00c00704 	movi	r3,28
 400a50c:	19011016 	blt	r3,r4,400a950 <__muldf3+0x6d4>
 400a510:	00c00744 	movi	r3,29
 400a514:	14bffe04 	addi	r18,r2,-8
 400a518:	1907c83a 	sub	r3,r3,r4
 400a51c:	8ca2983a 	sll	r17,r17,r18
 400a520:	30c6d83a 	srl	r3,r6,r3
 400a524:	34a4983a 	sll	r18,r6,r18
 400a528:	1c62b03a 	or	r17,r3,r17
 400a52c:	1080fcc4 	addi	r2,r2,1011
 400a530:	0085c83a 	sub	r2,zero,r2
 400a534:	000f883a 	mov	r7,zero
 400a538:	003f8106 	br	400a340 <__alt_data_end+0xfc00a340>
 400a53c:	3027883a 	mov	r19,r6
 400a540:	0081ffc4 	movi	r2,2047
 400a544:	0021883a 	mov	r16,zero
 400a548:	002d883a 	mov	r22,zero
 400a54c:	003faa06 	br	400a3f8 <__alt_data_end+0xfc00a3f8>
 400a550:	0023883a 	mov	r17,zero
 400a554:	0025883a 	mov	r18,zero
 400a558:	01c00044 	movi	r7,1
 400a55c:	003f7806 	br	400a340 <__alt_data_end+0xfc00a340>
 400a560:	01c000c4 	movi	r7,3
 400a564:	003f7606 	br	400a340 <__alt_data_end+0xfc00a340>
 400a568:	05400104 	movi	r21,4
 400a56c:	0021883a 	mov	r16,zero
 400a570:	002d883a 	mov	r22,zero
 400a574:	01400044 	movi	r5,1
 400a578:	003f5f06 	br	400a2f8 <__alt_data_end+0xfc00a2f8>
 400a57c:	05400304 	movi	r21,12
 400a580:	014000c4 	movi	r5,3
 400a584:	003f5c06 	br	400a2f8 <__alt_data_end+0xfc00a2f8>
 400a588:	04000434 	movhi	r16,16
 400a58c:	0027883a 	mov	r19,zero
 400a590:	843fffc4 	addi	r16,r16,-1
 400a594:	05bfffc4 	movi	r22,-1
 400a598:	0081ffc4 	movi	r2,2047
 400a59c:	003f9606 	br	400a3f8 <__alt_data_end+0xfc00a3f8>
 400a5a0:	8023883a 	mov	r17,r16
 400a5a4:	b025883a 	mov	r18,r22
 400a5a8:	280f883a 	mov	r7,r5
 400a5ac:	003f8806 	br	400a3d0 <__alt_data_end+0xfc00a3d0>
 400a5b0:	8023883a 	mov	r17,r16
 400a5b4:	b025883a 	mov	r18,r22
 400a5b8:	480d883a 	mov	r6,r9
 400a5bc:	280f883a 	mov	r7,r5
 400a5c0:	003f8306 	br	400a3d0 <__alt_data_end+0xfc00a3d0>
 400a5c4:	b026d43a 	srli	r19,r22,16
 400a5c8:	902ed43a 	srli	r23,r18,16
 400a5cc:	b5bfffcc 	andi	r22,r22,65535
 400a5d0:	94bfffcc 	andi	r18,r18,65535
 400a5d4:	b00b883a 	mov	r5,r22
 400a5d8:	9009883a 	mov	r4,r18
 400a5dc:	d8c00515 	stw	r3,20(sp)
 400a5e0:	d9800715 	stw	r6,28(sp)
 400a5e4:	da000615 	stw	r8,24(sp)
 400a5e8:	4007eb40 	call	4007eb4 <__mulsi3>
 400a5ec:	980b883a 	mov	r5,r19
 400a5f0:	9009883a 	mov	r4,r18
 400a5f4:	1029883a 	mov	r20,r2
 400a5f8:	4007eb40 	call	4007eb4 <__mulsi3>
 400a5fc:	b80b883a 	mov	r5,r23
 400a600:	9809883a 	mov	r4,r19
 400a604:	102b883a 	mov	r21,r2
 400a608:	4007eb40 	call	4007eb4 <__mulsi3>
 400a60c:	b809883a 	mov	r4,r23
 400a610:	b00b883a 	mov	r5,r22
 400a614:	1039883a 	mov	fp,r2
 400a618:	4007eb40 	call	4007eb4 <__mulsi3>
 400a61c:	a008d43a 	srli	r4,r20,16
 400a620:	1545883a 	add	r2,r2,r21
 400a624:	d8c00517 	ldw	r3,20(sp)
 400a628:	2085883a 	add	r2,r4,r2
 400a62c:	d9800717 	ldw	r6,28(sp)
 400a630:	da000617 	ldw	r8,24(sp)
 400a634:	1540022e 	bgeu	r2,r21,400a640 <__muldf3+0x3c4>
 400a638:	01000074 	movhi	r4,1
 400a63c:	e139883a 	add	fp,fp,r4
 400a640:	100e943a 	slli	r7,r2,16
 400a644:	1004d43a 	srli	r2,r2,16
 400a648:	882ad43a 	srli	r21,r17,16
 400a64c:	a53fffcc 	andi	r20,r20,65535
 400a650:	8c7fffcc 	andi	r17,r17,65535
 400a654:	3d29883a 	add	r20,r7,r20
 400a658:	b00b883a 	mov	r5,r22
 400a65c:	8809883a 	mov	r4,r17
 400a660:	d8c00515 	stw	r3,20(sp)
 400a664:	d9800715 	stw	r6,28(sp)
 400a668:	da000615 	stw	r8,24(sp)
 400a66c:	dd000115 	stw	r20,4(sp)
 400a670:	d8800015 	stw	r2,0(sp)
 400a674:	4007eb40 	call	4007eb4 <__mulsi3>
 400a678:	980b883a 	mov	r5,r19
 400a67c:	8809883a 	mov	r4,r17
 400a680:	d8800215 	stw	r2,8(sp)
 400a684:	4007eb40 	call	4007eb4 <__mulsi3>
 400a688:	9809883a 	mov	r4,r19
 400a68c:	a80b883a 	mov	r5,r21
 400a690:	1029883a 	mov	r20,r2
 400a694:	4007eb40 	call	4007eb4 <__mulsi3>
 400a698:	b00b883a 	mov	r5,r22
 400a69c:	a809883a 	mov	r4,r21
 400a6a0:	d8800415 	stw	r2,16(sp)
 400a6a4:	4007eb40 	call	4007eb4 <__mulsi3>
 400a6a8:	d9c00217 	ldw	r7,8(sp)
 400a6ac:	1505883a 	add	r2,r2,r20
 400a6b0:	d8c00517 	ldw	r3,20(sp)
 400a6b4:	3826d43a 	srli	r19,r7,16
 400a6b8:	d9800717 	ldw	r6,28(sp)
 400a6bc:	da000617 	ldw	r8,24(sp)
 400a6c0:	9885883a 	add	r2,r19,r2
 400a6c4:	da400417 	ldw	r9,16(sp)
 400a6c8:	1500022e 	bgeu	r2,r20,400a6d4 <__muldf3+0x458>
 400a6cc:	01000074 	movhi	r4,1
 400a6d0:	4913883a 	add	r9,r9,r4
 400a6d4:	1028d43a 	srli	r20,r2,16
 400a6d8:	1004943a 	slli	r2,r2,16
 400a6dc:	802cd43a 	srli	r22,r16,16
 400a6e0:	843fffcc 	andi	r16,r16,65535
 400a6e4:	3cffffcc 	andi	r19,r7,65535
 400a6e8:	9009883a 	mov	r4,r18
 400a6ec:	800b883a 	mov	r5,r16
 400a6f0:	a269883a 	add	r20,r20,r9
 400a6f4:	d8c00515 	stw	r3,20(sp)
 400a6f8:	d9800715 	stw	r6,28(sp)
 400a6fc:	da000615 	stw	r8,24(sp)
 400a700:	14e7883a 	add	r19,r2,r19
 400a704:	4007eb40 	call	4007eb4 <__mulsi3>
 400a708:	9009883a 	mov	r4,r18
 400a70c:	b00b883a 	mov	r5,r22
 400a710:	d8800315 	stw	r2,12(sp)
 400a714:	4007eb40 	call	4007eb4 <__mulsi3>
 400a718:	b809883a 	mov	r4,r23
 400a71c:	b00b883a 	mov	r5,r22
 400a720:	d8800215 	stw	r2,8(sp)
 400a724:	4007eb40 	call	4007eb4 <__mulsi3>
 400a728:	b80b883a 	mov	r5,r23
 400a72c:	8009883a 	mov	r4,r16
 400a730:	d8800415 	stw	r2,16(sp)
 400a734:	4007eb40 	call	4007eb4 <__mulsi3>
 400a738:	da800317 	ldw	r10,12(sp)
 400a73c:	d9c00217 	ldw	r7,8(sp)
 400a740:	d9000017 	ldw	r4,0(sp)
 400a744:	502ed43a 	srli	r23,r10,16
 400a748:	11c5883a 	add	r2,r2,r7
 400a74c:	24e5883a 	add	r18,r4,r19
 400a750:	b885883a 	add	r2,r23,r2
 400a754:	d8c00517 	ldw	r3,20(sp)
 400a758:	d9800717 	ldw	r6,28(sp)
 400a75c:	da000617 	ldw	r8,24(sp)
 400a760:	da400417 	ldw	r9,16(sp)
 400a764:	11c0022e 	bgeu	r2,r7,400a770 <__muldf3+0x4f4>
 400a768:	01000074 	movhi	r4,1
 400a76c:	4913883a 	add	r9,r9,r4
 400a770:	100ed43a 	srli	r7,r2,16
 400a774:	1004943a 	slli	r2,r2,16
 400a778:	55ffffcc 	andi	r23,r10,65535
 400a77c:	3a53883a 	add	r9,r7,r9
 400a780:	8809883a 	mov	r4,r17
 400a784:	800b883a 	mov	r5,r16
 400a788:	d8c00515 	stw	r3,20(sp)
 400a78c:	d9800715 	stw	r6,28(sp)
 400a790:	da000615 	stw	r8,24(sp)
 400a794:	da400415 	stw	r9,16(sp)
 400a798:	15ef883a 	add	r23,r2,r23
 400a79c:	4007eb40 	call	4007eb4 <__mulsi3>
 400a7a0:	8809883a 	mov	r4,r17
 400a7a4:	b00b883a 	mov	r5,r22
 400a7a8:	d8800215 	stw	r2,8(sp)
 400a7ac:	4007eb40 	call	4007eb4 <__mulsi3>
 400a7b0:	b00b883a 	mov	r5,r22
 400a7b4:	a809883a 	mov	r4,r21
 400a7b8:	d8800315 	stw	r2,12(sp)
 400a7bc:	4007eb40 	call	4007eb4 <__mulsi3>
 400a7c0:	8009883a 	mov	r4,r16
 400a7c4:	a80b883a 	mov	r5,r21
 400a7c8:	1023883a 	mov	r17,r2
 400a7cc:	4007eb40 	call	4007eb4 <__mulsi3>
 400a7d0:	d9c00217 	ldw	r7,8(sp)
 400a7d4:	da800317 	ldw	r10,12(sp)
 400a7d8:	d8c00517 	ldw	r3,20(sp)
 400a7dc:	3808d43a 	srli	r4,r7,16
 400a7e0:	1285883a 	add	r2,r2,r10
 400a7e4:	d9800717 	ldw	r6,28(sp)
 400a7e8:	2085883a 	add	r2,r4,r2
 400a7ec:	da000617 	ldw	r8,24(sp)
 400a7f0:	da400417 	ldw	r9,16(sp)
 400a7f4:	1280022e 	bgeu	r2,r10,400a800 <__muldf3+0x584>
 400a7f8:	01000074 	movhi	r4,1
 400a7fc:	8923883a 	add	r17,r17,r4
 400a800:	1008943a 	slli	r4,r2,16
 400a804:	39ffffcc 	andi	r7,r7,65535
 400a808:	e4b9883a 	add	fp,fp,r18
 400a80c:	21cf883a 	add	r7,r4,r7
 400a810:	e4e7803a 	cmpltu	r19,fp,r19
 400a814:	3d0f883a 	add	r7,r7,r20
 400a818:	bf39883a 	add	fp,r23,fp
 400a81c:	99c9883a 	add	r4,r19,r7
 400a820:	e5ef803a 	cmpltu	r23,fp,r23
 400a824:	490b883a 	add	r5,r9,r4
 400a828:	1004d43a 	srli	r2,r2,16
 400a82c:	b965883a 	add	r18,r23,r5
 400a830:	24c9803a 	cmpltu	r4,r4,r19
 400a834:	3d29803a 	cmpltu	r20,r7,r20
 400a838:	a128b03a 	or	r20,r20,r4
 400a83c:	95ef803a 	cmpltu	r23,r18,r23
 400a840:	2a53803a 	cmpltu	r9,r5,r9
 400a844:	a0a9883a 	add	r20,r20,r2
 400a848:	4deeb03a 	or	r23,r9,r23
 400a84c:	a5ef883a 	add	r23,r20,r23
 400a850:	bc63883a 	add	r17,r23,r17
 400a854:	e004927a 	slli	r2,fp,9
 400a858:	d9000117 	ldw	r4,4(sp)
 400a85c:	882e927a 	slli	r23,r17,9
 400a860:	9022d5fa 	srli	r17,r18,23
 400a864:	e038d5fa 	srli	fp,fp,23
 400a868:	1104b03a 	or	r2,r2,r4
 400a86c:	9024927a 	slli	r18,r18,9
 400a870:	1004c03a 	cmpne	r2,r2,zero
 400a874:	bc62b03a 	or	r17,r23,r17
 400a878:	1738b03a 	or	fp,r2,fp
 400a87c:	8880402c 	andhi	r2,r17,256
 400a880:	e4a4b03a 	or	r18,fp,r18
 400a884:	10000726 	beq	r2,zero,400a8a4 <__muldf3+0x628>
 400a888:	9006d07a 	srli	r3,r18,1
 400a88c:	880497fa 	slli	r2,r17,31
 400a890:	9480004c 	andi	r18,r18,1
 400a894:	8822d07a 	srli	r17,r17,1
 400a898:	1ca4b03a 	or	r18,r3,r18
 400a89c:	14a4b03a 	or	r18,r2,r18
 400a8a0:	4007883a 	mov	r3,r8
 400a8a4:	1880ffc4 	addi	r2,r3,1023
 400a8a8:	0080460e 	bge	zero,r2,400a9c4 <__muldf3+0x748>
 400a8ac:	910001cc 	andi	r4,r18,7
 400a8b0:	20000726 	beq	r4,zero,400a8d0 <__muldf3+0x654>
 400a8b4:	910003cc 	andi	r4,r18,15
 400a8b8:	01400104 	movi	r5,4
 400a8bc:	21400426 	beq	r4,r5,400a8d0 <__muldf3+0x654>
 400a8c0:	9149883a 	add	r4,r18,r5
 400a8c4:	24a5803a 	cmpltu	r18,r4,r18
 400a8c8:	8ca3883a 	add	r17,r17,r18
 400a8cc:	2025883a 	mov	r18,r4
 400a8d0:	8900402c 	andhi	r4,r17,256
 400a8d4:	20000426 	beq	r4,zero,400a8e8 <__muldf3+0x66c>
 400a8d8:	18810004 	addi	r2,r3,1024
 400a8dc:	00ffc034 	movhi	r3,65280
 400a8e0:	18ffffc4 	addi	r3,r3,-1
 400a8e4:	88e2703a 	and	r17,r17,r3
 400a8e8:	00c1ff84 	movi	r3,2046
 400a8ec:	18bf1316 	blt	r3,r2,400a53c <__alt_data_end+0xfc00a53c>
 400a8f0:	882c977a 	slli	r22,r17,29
 400a8f4:	9024d0fa 	srli	r18,r18,3
 400a8f8:	8822927a 	slli	r17,r17,9
 400a8fc:	1081ffcc 	andi	r2,r2,2047
 400a900:	b4acb03a 	or	r22,r22,r18
 400a904:	8820d33a 	srli	r16,r17,12
 400a908:	3027883a 	mov	r19,r6
 400a90c:	003eba06 	br	400a3f8 <__alt_data_end+0xfc00a3f8>
 400a910:	8080022c 	andhi	r2,r16,8
 400a914:	10000926 	beq	r2,zero,400a93c <__muldf3+0x6c0>
 400a918:	8880022c 	andhi	r2,r17,8
 400a91c:	1000071e 	bne	r2,zero,400a93c <__muldf3+0x6c0>
 400a920:	00800434 	movhi	r2,16
 400a924:	8c000234 	orhi	r16,r17,8
 400a928:	10bfffc4 	addi	r2,r2,-1
 400a92c:	e027883a 	mov	r19,fp
 400a930:	80a0703a 	and	r16,r16,r2
 400a934:	902d883a 	mov	r22,r18
 400a938:	003f1706 	br	400a598 <__alt_data_end+0xfc00a598>
 400a93c:	00800434 	movhi	r2,16
 400a940:	84000234 	orhi	r16,r16,8
 400a944:	10bfffc4 	addi	r2,r2,-1
 400a948:	80a0703a 	and	r16,r16,r2
 400a94c:	003f1206 	br	400a598 <__alt_data_end+0xfc00a598>
 400a950:	147ff604 	addi	r17,r2,-40
 400a954:	3462983a 	sll	r17,r6,r17
 400a958:	0025883a 	mov	r18,zero
 400a95c:	003ef306 	br	400a52c <__alt_data_end+0xfc00a52c>
 400a960:	3009883a 	mov	r4,r6
 400a964:	d9400215 	stw	r5,8(sp)
 400a968:	d9800715 	stw	r6,28(sp)
 400a96c:	da400415 	stw	r9,16(sp)
 400a970:	da800315 	stw	r10,12(sp)
 400a974:	400b7f80 	call	400b7f8 <__clzsi2>
 400a978:	10800804 	addi	r2,r2,32
 400a97c:	da800317 	ldw	r10,12(sp)
 400a980:	da400417 	ldw	r9,16(sp)
 400a984:	d9800717 	ldw	r6,28(sp)
 400a988:	d9400217 	ldw	r5,8(sp)
 400a98c:	003edd06 	br	400a504 <__alt_data_end+0xfc00a504>
 400a990:	143ff604 	addi	r16,r2,-40
 400a994:	ac20983a 	sll	r16,r21,r16
 400a998:	002d883a 	mov	r22,zero
 400a99c:	003ec106 	br	400a4a4 <__alt_data_end+0xfc00a4a4>
 400a9a0:	d9800715 	stw	r6,28(sp)
 400a9a4:	d9c00215 	stw	r7,8(sp)
 400a9a8:	da400415 	stw	r9,16(sp)
 400a9ac:	400b7f80 	call	400b7f8 <__clzsi2>
 400a9b0:	10800804 	addi	r2,r2,32
 400a9b4:	da400417 	ldw	r9,16(sp)
 400a9b8:	d9c00217 	ldw	r7,8(sp)
 400a9bc:	d9800717 	ldw	r6,28(sp)
 400a9c0:	003eae06 	br	400a47c <__alt_data_end+0xfc00a47c>
 400a9c4:	00c00044 	movi	r3,1
 400a9c8:	1887c83a 	sub	r3,r3,r2
 400a9cc:	01000e04 	movi	r4,56
 400a9d0:	20fe8516 	blt	r4,r3,400a3e8 <__alt_data_end+0xfc00a3e8>
 400a9d4:	010007c4 	movi	r4,31
 400a9d8:	20c01b16 	blt	r4,r3,400aa48 <__muldf3+0x7cc>
 400a9dc:	00800804 	movi	r2,32
 400a9e0:	10c5c83a 	sub	r2,r2,r3
 400a9e4:	888a983a 	sll	r5,r17,r2
 400a9e8:	90c8d83a 	srl	r4,r18,r3
 400a9ec:	9084983a 	sll	r2,r18,r2
 400a9f0:	88e2d83a 	srl	r17,r17,r3
 400a9f4:	2906b03a 	or	r3,r5,r4
 400a9f8:	1004c03a 	cmpne	r2,r2,zero
 400a9fc:	1886b03a 	or	r3,r3,r2
 400aa00:	188001cc 	andi	r2,r3,7
 400aa04:	10000726 	beq	r2,zero,400aa24 <__muldf3+0x7a8>
 400aa08:	188003cc 	andi	r2,r3,15
 400aa0c:	01000104 	movi	r4,4
 400aa10:	11000426 	beq	r2,r4,400aa24 <__muldf3+0x7a8>
 400aa14:	1805883a 	mov	r2,r3
 400aa18:	10c00104 	addi	r3,r2,4
 400aa1c:	1885803a 	cmpltu	r2,r3,r2
 400aa20:	88a3883a 	add	r17,r17,r2
 400aa24:	8880202c 	andhi	r2,r17,128
 400aa28:	10001c26 	beq	r2,zero,400aa9c <__muldf3+0x820>
 400aa2c:	3027883a 	mov	r19,r6
 400aa30:	00800044 	movi	r2,1
 400aa34:	0021883a 	mov	r16,zero
 400aa38:	002d883a 	mov	r22,zero
 400aa3c:	003e6e06 	br	400a3f8 <__alt_data_end+0xfc00a3f8>
 400aa40:	4007883a 	mov	r3,r8
 400aa44:	003f9706 	br	400a8a4 <__alt_data_end+0xfc00a8a4>
 400aa48:	017ff844 	movi	r5,-31
 400aa4c:	2885c83a 	sub	r2,r5,r2
 400aa50:	888ad83a 	srl	r5,r17,r2
 400aa54:	00800804 	movi	r2,32
 400aa58:	18801a26 	beq	r3,r2,400aac4 <__muldf3+0x848>
 400aa5c:	01001004 	movi	r4,64
 400aa60:	20c7c83a 	sub	r3,r4,r3
 400aa64:	88e2983a 	sll	r17,r17,r3
 400aa68:	8ca4b03a 	or	r18,r17,r18
 400aa6c:	9004c03a 	cmpne	r2,r18,zero
 400aa70:	2884b03a 	or	r2,r5,r2
 400aa74:	144001cc 	andi	r17,r2,7
 400aa78:	88000d1e 	bne	r17,zero,400aab0 <__muldf3+0x834>
 400aa7c:	0021883a 	mov	r16,zero
 400aa80:	102cd0fa 	srli	r22,r2,3
 400aa84:	3027883a 	mov	r19,r6
 400aa88:	0005883a 	mov	r2,zero
 400aa8c:	b46cb03a 	or	r22,r22,r17
 400aa90:	003e5906 	br	400a3f8 <__alt_data_end+0xfc00a3f8>
 400aa94:	1007883a 	mov	r3,r2
 400aa98:	0023883a 	mov	r17,zero
 400aa9c:	8820927a 	slli	r16,r17,9
 400aaa0:	1805883a 	mov	r2,r3
 400aaa4:	8822977a 	slli	r17,r17,29
 400aaa8:	8020d33a 	srli	r16,r16,12
 400aaac:	003ff406 	br	400aa80 <__alt_data_end+0xfc00aa80>
 400aab0:	10c003cc 	andi	r3,r2,15
 400aab4:	01000104 	movi	r4,4
 400aab8:	193ff626 	beq	r3,r4,400aa94 <__alt_data_end+0xfc00aa94>
 400aabc:	0023883a 	mov	r17,zero
 400aac0:	003fd506 	br	400aa18 <__alt_data_end+0xfc00aa18>
 400aac4:	0023883a 	mov	r17,zero
 400aac8:	003fe706 	br	400aa68 <__alt_data_end+0xfc00aa68>
 400aacc:	00800434 	movhi	r2,16
 400aad0:	8c000234 	orhi	r16,r17,8
 400aad4:	10bfffc4 	addi	r2,r2,-1
 400aad8:	3027883a 	mov	r19,r6
 400aadc:	80a0703a 	and	r16,r16,r2
 400aae0:	902d883a 	mov	r22,r18
 400aae4:	003eac06 	br	400a598 <__alt_data_end+0xfc00a598>

0400aae8 <__subdf3>:
 400aae8:	02000434 	movhi	r8,16
 400aaec:	423fffc4 	addi	r8,r8,-1
 400aaf0:	defffb04 	addi	sp,sp,-20
 400aaf4:	2a14703a 	and	r10,r5,r8
 400aaf8:	3812d53a 	srli	r9,r7,20
 400aafc:	3a10703a 	and	r8,r7,r8
 400ab00:	2006d77a 	srli	r3,r4,29
 400ab04:	3004d77a 	srli	r2,r6,29
 400ab08:	dc000015 	stw	r16,0(sp)
 400ab0c:	501490fa 	slli	r10,r10,3
 400ab10:	2820d53a 	srli	r16,r5,20
 400ab14:	401090fa 	slli	r8,r8,3
 400ab18:	dc800215 	stw	r18,8(sp)
 400ab1c:	dc400115 	stw	r17,4(sp)
 400ab20:	dfc00415 	stw	ra,16(sp)
 400ab24:	202290fa 	slli	r17,r4,3
 400ab28:	dcc00315 	stw	r19,12(sp)
 400ab2c:	4a41ffcc 	andi	r9,r9,2047
 400ab30:	0101ffc4 	movi	r4,2047
 400ab34:	2824d7fa 	srli	r18,r5,31
 400ab38:	8401ffcc 	andi	r16,r16,2047
 400ab3c:	50c6b03a 	or	r3,r10,r3
 400ab40:	380ed7fa 	srli	r7,r7,31
 400ab44:	408ab03a 	or	r5,r8,r2
 400ab48:	300c90fa 	slli	r6,r6,3
 400ab4c:	49009626 	beq	r9,r4,400ada8 <__subdf3+0x2c0>
 400ab50:	39c0005c 	xori	r7,r7,1
 400ab54:	8245c83a 	sub	r2,r16,r9
 400ab58:	3c807426 	beq	r7,r18,400ad2c <__subdf3+0x244>
 400ab5c:	0080af0e 	bge	zero,r2,400ae1c <__subdf3+0x334>
 400ab60:	48002a1e 	bne	r9,zero,400ac0c <__subdf3+0x124>
 400ab64:	2988b03a 	or	r4,r5,r6
 400ab68:	20009a1e 	bne	r4,zero,400add4 <__subdf3+0x2ec>
 400ab6c:	888001cc 	andi	r2,r17,7
 400ab70:	10000726 	beq	r2,zero,400ab90 <__subdf3+0xa8>
 400ab74:	888003cc 	andi	r2,r17,15
 400ab78:	01000104 	movi	r4,4
 400ab7c:	11000426 	beq	r2,r4,400ab90 <__subdf3+0xa8>
 400ab80:	890b883a 	add	r5,r17,r4
 400ab84:	2c63803a 	cmpltu	r17,r5,r17
 400ab88:	1c47883a 	add	r3,r3,r17
 400ab8c:	2823883a 	mov	r17,r5
 400ab90:	1880202c 	andhi	r2,r3,128
 400ab94:	10005926 	beq	r2,zero,400acfc <__subdf3+0x214>
 400ab98:	84000044 	addi	r16,r16,1
 400ab9c:	0081ffc4 	movi	r2,2047
 400aba0:	8080be26 	beq	r16,r2,400ae9c <__subdf3+0x3b4>
 400aba4:	017fe034 	movhi	r5,65408
 400aba8:	297fffc4 	addi	r5,r5,-1
 400abac:	1946703a 	and	r3,r3,r5
 400abb0:	1804977a 	slli	r2,r3,29
 400abb4:	1806927a 	slli	r3,r3,9
 400abb8:	8822d0fa 	srli	r17,r17,3
 400abbc:	8401ffcc 	andi	r16,r16,2047
 400abc0:	180ad33a 	srli	r5,r3,12
 400abc4:	9100004c 	andi	r4,r18,1
 400abc8:	1444b03a 	or	r2,r2,r17
 400abcc:	80c1ffcc 	andi	r3,r16,2047
 400abd0:	1820953a 	slli	r16,r3,20
 400abd4:	20c03fcc 	andi	r3,r4,255
 400abd8:	180897fa 	slli	r4,r3,31
 400abdc:	00c00434 	movhi	r3,16
 400abe0:	18ffffc4 	addi	r3,r3,-1
 400abe4:	28c6703a 	and	r3,r5,r3
 400abe8:	1c06b03a 	or	r3,r3,r16
 400abec:	1906b03a 	or	r3,r3,r4
 400abf0:	dfc00417 	ldw	ra,16(sp)
 400abf4:	dcc00317 	ldw	r19,12(sp)
 400abf8:	dc800217 	ldw	r18,8(sp)
 400abfc:	dc400117 	ldw	r17,4(sp)
 400ac00:	dc000017 	ldw	r16,0(sp)
 400ac04:	dec00504 	addi	sp,sp,20
 400ac08:	f800283a 	ret
 400ac0c:	0101ffc4 	movi	r4,2047
 400ac10:	813fd626 	beq	r16,r4,400ab6c <__alt_data_end+0xfc00ab6c>
 400ac14:	29402034 	orhi	r5,r5,128
 400ac18:	01000e04 	movi	r4,56
 400ac1c:	2080a316 	blt	r4,r2,400aeac <__subdf3+0x3c4>
 400ac20:	010007c4 	movi	r4,31
 400ac24:	2080c616 	blt	r4,r2,400af40 <__subdf3+0x458>
 400ac28:	01000804 	movi	r4,32
 400ac2c:	2089c83a 	sub	r4,r4,r2
 400ac30:	2910983a 	sll	r8,r5,r4
 400ac34:	308ed83a 	srl	r7,r6,r2
 400ac38:	3108983a 	sll	r4,r6,r4
 400ac3c:	2884d83a 	srl	r2,r5,r2
 400ac40:	41ccb03a 	or	r6,r8,r7
 400ac44:	2008c03a 	cmpne	r4,r4,zero
 400ac48:	310cb03a 	or	r6,r6,r4
 400ac4c:	898dc83a 	sub	r6,r17,r6
 400ac50:	89a3803a 	cmpltu	r17,r17,r6
 400ac54:	1887c83a 	sub	r3,r3,r2
 400ac58:	1c47c83a 	sub	r3,r3,r17
 400ac5c:	3023883a 	mov	r17,r6
 400ac60:	1880202c 	andhi	r2,r3,128
 400ac64:	10002326 	beq	r2,zero,400acf4 <__subdf3+0x20c>
 400ac68:	04c02034 	movhi	r19,128
 400ac6c:	9cffffc4 	addi	r19,r19,-1
 400ac70:	1ce6703a 	and	r19,r3,r19
 400ac74:	98007a26 	beq	r19,zero,400ae60 <__subdf3+0x378>
 400ac78:	9809883a 	mov	r4,r19
 400ac7c:	400b7f80 	call	400b7f8 <__clzsi2>
 400ac80:	113ffe04 	addi	r4,r2,-8
 400ac84:	00c007c4 	movi	r3,31
 400ac88:	19007b16 	blt	r3,r4,400ae78 <__subdf3+0x390>
 400ac8c:	00800804 	movi	r2,32
 400ac90:	1105c83a 	sub	r2,r2,r4
 400ac94:	8884d83a 	srl	r2,r17,r2
 400ac98:	9906983a 	sll	r3,r19,r4
 400ac9c:	8922983a 	sll	r17,r17,r4
 400aca0:	10c4b03a 	or	r2,r2,r3
 400aca4:	24007816 	blt	r4,r16,400ae88 <__subdf3+0x3a0>
 400aca8:	2421c83a 	sub	r16,r4,r16
 400acac:	80c00044 	addi	r3,r16,1
 400acb0:	010007c4 	movi	r4,31
 400acb4:	20c09516 	blt	r4,r3,400af0c <__subdf3+0x424>
 400acb8:	01400804 	movi	r5,32
 400acbc:	28cbc83a 	sub	r5,r5,r3
 400acc0:	88c8d83a 	srl	r4,r17,r3
 400acc4:	8962983a 	sll	r17,r17,r5
 400acc8:	114a983a 	sll	r5,r2,r5
 400accc:	10c6d83a 	srl	r3,r2,r3
 400acd0:	8804c03a 	cmpne	r2,r17,zero
 400acd4:	290ab03a 	or	r5,r5,r4
 400acd8:	28a2b03a 	or	r17,r5,r2
 400acdc:	0021883a 	mov	r16,zero
 400ace0:	003fa206 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400ace4:	2090b03a 	or	r8,r4,r2
 400ace8:	40018e26 	beq	r8,zero,400b324 <__subdf3+0x83c>
 400acec:	1007883a 	mov	r3,r2
 400acf0:	2023883a 	mov	r17,r4
 400acf4:	888001cc 	andi	r2,r17,7
 400acf8:	103f9e1e 	bne	r2,zero,400ab74 <__alt_data_end+0xfc00ab74>
 400acfc:	1804977a 	slli	r2,r3,29
 400ad00:	8822d0fa 	srli	r17,r17,3
 400ad04:	1810d0fa 	srli	r8,r3,3
 400ad08:	9100004c 	andi	r4,r18,1
 400ad0c:	1444b03a 	or	r2,r2,r17
 400ad10:	00c1ffc4 	movi	r3,2047
 400ad14:	80c02826 	beq	r16,r3,400adb8 <__subdf3+0x2d0>
 400ad18:	01400434 	movhi	r5,16
 400ad1c:	297fffc4 	addi	r5,r5,-1
 400ad20:	80e0703a 	and	r16,r16,r3
 400ad24:	414a703a 	and	r5,r8,r5
 400ad28:	003fa806 	br	400abcc <__alt_data_end+0xfc00abcc>
 400ad2c:	0080630e 	bge	zero,r2,400aebc <__subdf3+0x3d4>
 400ad30:	48003026 	beq	r9,zero,400adf4 <__subdf3+0x30c>
 400ad34:	0101ffc4 	movi	r4,2047
 400ad38:	813f8c26 	beq	r16,r4,400ab6c <__alt_data_end+0xfc00ab6c>
 400ad3c:	29402034 	orhi	r5,r5,128
 400ad40:	01000e04 	movi	r4,56
 400ad44:	2080a90e 	bge	r4,r2,400afec <__subdf3+0x504>
 400ad48:	298cb03a 	or	r6,r5,r6
 400ad4c:	3012c03a 	cmpne	r9,r6,zero
 400ad50:	0005883a 	mov	r2,zero
 400ad54:	4c53883a 	add	r9,r9,r17
 400ad58:	4c63803a 	cmpltu	r17,r9,r17
 400ad5c:	10c7883a 	add	r3,r2,r3
 400ad60:	88c7883a 	add	r3,r17,r3
 400ad64:	4823883a 	mov	r17,r9
 400ad68:	1880202c 	andhi	r2,r3,128
 400ad6c:	1000d026 	beq	r2,zero,400b0b0 <__subdf3+0x5c8>
 400ad70:	84000044 	addi	r16,r16,1
 400ad74:	0081ffc4 	movi	r2,2047
 400ad78:	8080fe26 	beq	r16,r2,400b174 <__subdf3+0x68c>
 400ad7c:	00bfe034 	movhi	r2,65408
 400ad80:	10bfffc4 	addi	r2,r2,-1
 400ad84:	1886703a 	and	r3,r3,r2
 400ad88:	880ad07a 	srli	r5,r17,1
 400ad8c:	180497fa 	slli	r2,r3,31
 400ad90:	8900004c 	andi	r4,r17,1
 400ad94:	2922b03a 	or	r17,r5,r4
 400ad98:	1806d07a 	srli	r3,r3,1
 400ad9c:	1462b03a 	or	r17,r2,r17
 400ada0:	3825883a 	mov	r18,r7
 400ada4:	003f7106 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400ada8:	2984b03a 	or	r2,r5,r6
 400adac:	103f6826 	beq	r2,zero,400ab50 <__alt_data_end+0xfc00ab50>
 400adb0:	39c03fcc 	andi	r7,r7,255
 400adb4:	003f6706 	br	400ab54 <__alt_data_end+0xfc00ab54>
 400adb8:	4086b03a 	or	r3,r8,r2
 400adbc:	18015226 	beq	r3,zero,400b308 <__subdf3+0x820>
 400adc0:	00c00434 	movhi	r3,16
 400adc4:	41400234 	orhi	r5,r8,8
 400adc8:	18ffffc4 	addi	r3,r3,-1
 400adcc:	28ca703a 	and	r5,r5,r3
 400add0:	003f7e06 	br	400abcc <__alt_data_end+0xfc00abcc>
 400add4:	10bfffc4 	addi	r2,r2,-1
 400add8:	1000491e 	bne	r2,zero,400af00 <__subdf3+0x418>
 400addc:	898fc83a 	sub	r7,r17,r6
 400ade0:	89e3803a 	cmpltu	r17,r17,r7
 400ade4:	1947c83a 	sub	r3,r3,r5
 400ade8:	1c47c83a 	sub	r3,r3,r17
 400adec:	3823883a 	mov	r17,r7
 400adf0:	003f9b06 	br	400ac60 <__alt_data_end+0xfc00ac60>
 400adf4:	2988b03a 	or	r4,r5,r6
 400adf8:	203f5c26 	beq	r4,zero,400ab6c <__alt_data_end+0xfc00ab6c>
 400adfc:	10bfffc4 	addi	r2,r2,-1
 400ae00:	1000931e 	bne	r2,zero,400b050 <__subdf3+0x568>
 400ae04:	898d883a 	add	r6,r17,r6
 400ae08:	3463803a 	cmpltu	r17,r6,r17
 400ae0c:	1947883a 	add	r3,r3,r5
 400ae10:	88c7883a 	add	r3,r17,r3
 400ae14:	3023883a 	mov	r17,r6
 400ae18:	003fd306 	br	400ad68 <__alt_data_end+0xfc00ad68>
 400ae1c:	1000541e 	bne	r2,zero,400af70 <__subdf3+0x488>
 400ae20:	80800044 	addi	r2,r16,1
 400ae24:	1081ffcc 	andi	r2,r2,2047
 400ae28:	01000044 	movi	r4,1
 400ae2c:	2080a20e 	bge	r4,r2,400b0b8 <__subdf3+0x5d0>
 400ae30:	8989c83a 	sub	r4,r17,r6
 400ae34:	8905803a 	cmpltu	r2,r17,r4
 400ae38:	1967c83a 	sub	r19,r3,r5
 400ae3c:	98a7c83a 	sub	r19,r19,r2
 400ae40:	9880202c 	andhi	r2,r19,128
 400ae44:	10006326 	beq	r2,zero,400afd4 <__subdf3+0x4ec>
 400ae48:	3463c83a 	sub	r17,r6,r17
 400ae4c:	28c7c83a 	sub	r3,r5,r3
 400ae50:	344d803a 	cmpltu	r6,r6,r17
 400ae54:	19a7c83a 	sub	r19,r3,r6
 400ae58:	3825883a 	mov	r18,r7
 400ae5c:	983f861e 	bne	r19,zero,400ac78 <__alt_data_end+0xfc00ac78>
 400ae60:	8809883a 	mov	r4,r17
 400ae64:	400b7f80 	call	400b7f8 <__clzsi2>
 400ae68:	10800804 	addi	r2,r2,32
 400ae6c:	113ffe04 	addi	r4,r2,-8
 400ae70:	00c007c4 	movi	r3,31
 400ae74:	193f850e 	bge	r3,r4,400ac8c <__alt_data_end+0xfc00ac8c>
 400ae78:	10bff604 	addi	r2,r2,-40
 400ae7c:	8884983a 	sll	r2,r17,r2
 400ae80:	0023883a 	mov	r17,zero
 400ae84:	243f880e 	bge	r4,r16,400aca8 <__alt_data_end+0xfc00aca8>
 400ae88:	00ffe034 	movhi	r3,65408
 400ae8c:	18ffffc4 	addi	r3,r3,-1
 400ae90:	8121c83a 	sub	r16,r16,r4
 400ae94:	10c6703a 	and	r3,r2,r3
 400ae98:	003f3406 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400ae9c:	9100004c 	andi	r4,r18,1
 400aea0:	000b883a 	mov	r5,zero
 400aea4:	0005883a 	mov	r2,zero
 400aea8:	003f4806 	br	400abcc <__alt_data_end+0xfc00abcc>
 400aeac:	298cb03a 	or	r6,r5,r6
 400aeb0:	300cc03a 	cmpne	r6,r6,zero
 400aeb4:	0005883a 	mov	r2,zero
 400aeb8:	003f6406 	br	400ac4c <__alt_data_end+0xfc00ac4c>
 400aebc:	10009a1e 	bne	r2,zero,400b128 <__subdf3+0x640>
 400aec0:	82400044 	addi	r9,r16,1
 400aec4:	4881ffcc 	andi	r2,r9,2047
 400aec8:	02800044 	movi	r10,1
 400aecc:	5080670e 	bge	r10,r2,400b06c <__subdf3+0x584>
 400aed0:	0081ffc4 	movi	r2,2047
 400aed4:	4880af26 	beq	r9,r2,400b194 <__subdf3+0x6ac>
 400aed8:	898d883a 	add	r6,r17,r6
 400aedc:	1945883a 	add	r2,r3,r5
 400aee0:	3447803a 	cmpltu	r3,r6,r17
 400aee4:	1887883a 	add	r3,r3,r2
 400aee8:	182297fa 	slli	r17,r3,31
 400aeec:	300cd07a 	srli	r6,r6,1
 400aef0:	1806d07a 	srli	r3,r3,1
 400aef4:	4821883a 	mov	r16,r9
 400aef8:	89a2b03a 	or	r17,r17,r6
 400aefc:	003f1b06 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400af00:	0101ffc4 	movi	r4,2047
 400af04:	813f441e 	bne	r16,r4,400ac18 <__alt_data_end+0xfc00ac18>
 400af08:	003f1806 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400af0c:	843ff844 	addi	r16,r16,-31
 400af10:	01400804 	movi	r5,32
 400af14:	1408d83a 	srl	r4,r2,r16
 400af18:	19405026 	beq	r3,r5,400b05c <__subdf3+0x574>
 400af1c:	01401004 	movi	r5,64
 400af20:	28c7c83a 	sub	r3,r5,r3
 400af24:	10c4983a 	sll	r2,r2,r3
 400af28:	88a2b03a 	or	r17,r17,r2
 400af2c:	8822c03a 	cmpne	r17,r17,zero
 400af30:	2462b03a 	or	r17,r4,r17
 400af34:	0007883a 	mov	r3,zero
 400af38:	0021883a 	mov	r16,zero
 400af3c:	003f6d06 	br	400acf4 <__alt_data_end+0xfc00acf4>
 400af40:	11fff804 	addi	r7,r2,-32
 400af44:	01000804 	movi	r4,32
 400af48:	29ced83a 	srl	r7,r5,r7
 400af4c:	11004526 	beq	r2,r4,400b064 <__subdf3+0x57c>
 400af50:	01001004 	movi	r4,64
 400af54:	2089c83a 	sub	r4,r4,r2
 400af58:	2904983a 	sll	r2,r5,r4
 400af5c:	118cb03a 	or	r6,r2,r6
 400af60:	300cc03a 	cmpne	r6,r6,zero
 400af64:	398cb03a 	or	r6,r7,r6
 400af68:	0005883a 	mov	r2,zero
 400af6c:	003f3706 	br	400ac4c <__alt_data_end+0xfc00ac4c>
 400af70:	80002a26 	beq	r16,zero,400b01c <__subdf3+0x534>
 400af74:	0101ffc4 	movi	r4,2047
 400af78:	49006626 	beq	r9,r4,400b114 <__subdf3+0x62c>
 400af7c:	0085c83a 	sub	r2,zero,r2
 400af80:	18c02034 	orhi	r3,r3,128
 400af84:	01000e04 	movi	r4,56
 400af88:	20807e16 	blt	r4,r2,400b184 <__subdf3+0x69c>
 400af8c:	010007c4 	movi	r4,31
 400af90:	2080e716 	blt	r4,r2,400b330 <__subdf3+0x848>
 400af94:	01000804 	movi	r4,32
 400af98:	2089c83a 	sub	r4,r4,r2
 400af9c:	1914983a 	sll	r10,r3,r4
 400afa0:	8890d83a 	srl	r8,r17,r2
 400afa4:	8908983a 	sll	r4,r17,r4
 400afa8:	1884d83a 	srl	r2,r3,r2
 400afac:	5222b03a 	or	r17,r10,r8
 400afb0:	2006c03a 	cmpne	r3,r4,zero
 400afb4:	88e2b03a 	or	r17,r17,r3
 400afb8:	3463c83a 	sub	r17,r6,r17
 400afbc:	2885c83a 	sub	r2,r5,r2
 400afc0:	344d803a 	cmpltu	r6,r6,r17
 400afc4:	1187c83a 	sub	r3,r2,r6
 400afc8:	4821883a 	mov	r16,r9
 400afcc:	3825883a 	mov	r18,r7
 400afd0:	003f2306 	br	400ac60 <__alt_data_end+0xfc00ac60>
 400afd4:	24d0b03a 	or	r8,r4,r19
 400afd8:	40001b1e 	bne	r8,zero,400b048 <__subdf3+0x560>
 400afdc:	0005883a 	mov	r2,zero
 400afe0:	0009883a 	mov	r4,zero
 400afe4:	0021883a 	mov	r16,zero
 400afe8:	003f4906 	br	400ad10 <__alt_data_end+0xfc00ad10>
 400afec:	010007c4 	movi	r4,31
 400aff0:	20803a16 	blt	r4,r2,400b0dc <__subdf3+0x5f4>
 400aff4:	01000804 	movi	r4,32
 400aff8:	2089c83a 	sub	r4,r4,r2
 400affc:	2912983a 	sll	r9,r5,r4
 400b000:	3090d83a 	srl	r8,r6,r2
 400b004:	3108983a 	sll	r4,r6,r4
 400b008:	2884d83a 	srl	r2,r5,r2
 400b00c:	4a12b03a 	or	r9,r9,r8
 400b010:	2008c03a 	cmpne	r4,r4,zero
 400b014:	4912b03a 	or	r9,r9,r4
 400b018:	003f4e06 	br	400ad54 <__alt_data_end+0xfc00ad54>
 400b01c:	1c48b03a 	or	r4,r3,r17
 400b020:	20003c26 	beq	r4,zero,400b114 <__subdf3+0x62c>
 400b024:	0084303a 	nor	r2,zero,r2
 400b028:	1000381e 	bne	r2,zero,400b10c <__subdf3+0x624>
 400b02c:	3463c83a 	sub	r17,r6,r17
 400b030:	28c5c83a 	sub	r2,r5,r3
 400b034:	344d803a 	cmpltu	r6,r6,r17
 400b038:	1187c83a 	sub	r3,r2,r6
 400b03c:	4821883a 	mov	r16,r9
 400b040:	3825883a 	mov	r18,r7
 400b044:	003f0606 	br	400ac60 <__alt_data_end+0xfc00ac60>
 400b048:	2023883a 	mov	r17,r4
 400b04c:	003f0906 	br	400ac74 <__alt_data_end+0xfc00ac74>
 400b050:	0101ffc4 	movi	r4,2047
 400b054:	813f3a1e 	bne	r16,r4,400ad40 <__alt_data_end+0xfc00ad40>
 400b058:	003ec406 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b05c:	0005883a 	mov	r2,zero
 400b060:	003fb106 	br	400af28 <__alt_data_end+0xfc00af28>
 400b064:	0005883a 	mov	r2,zero
 400b068:	003fbc06 	br	400af5c <__alt_data_end+0xfc00af5c>
 400b06c:	1c44b03a 	or	r2,r3,r17
 400b070:	80008e1e 	bne	r16,zero,400b2ac <__subdf3+0x7c4>
 400b074:	1000c826 	beq	r2,zero,400b398 <__subdf3+0x8b0>
 400b078:	2984b03a 	or	r2,r5,r6
 400b07c:	103ebb26 	beq	r2,zero,400ab6c <__alt_data_end+0xfc00ab6c>
 400b080:	8989883a 	add	r4,r17,r6
 400b084:	1945883a 	add	r2,r3,r5
 400b088:	2447803a 	cmpltu	r3,r4,r17
 400b08c:	1887883a 	add	r3,r3,r2
 400b090:	1880202c 	andhi	r2,r3,128
 400b094:	2023883a 	mov	r17,r4
 400b098:	103f1626 	beq	r2,zero,400acf4 <__alt_data_end+0xfc00acf4>
 400b09c:	00bfe034 	movhi	r2,65408
 400b0a0:	10bfffc4 	addi	r2,r2,-1
 400b0a4:	5021883a 	mov	r16,r10
 400b0a8:	1886703a 	and	r3,r3,r2
 400b0ac:	003eaf06 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b0b0:	3825883a 	mov	r18,r7
 400b0b4:	003f0f06 	br	400acf4 <__alt_data_end+0xfc00acf4>
 400b0b8:	1c44b03a 	or	r2,r3,r17
 400b0bc:	8000251e 	bne	r16,zero,400b154 <__subdf3+0x66c>
 400b0c0:	1000661e 	bne	r2,zero,400b25c <__subdf3+0x774>
 400b0c4:	2990b03a 	or	r8,r5,r6
 400b0c8:	40009626 	beq	r8,zero,400b324 <__subdf3+0x83c>
 400b0cc:	2807883a 	mov	r3,r5
 400b0d0:	3023883a 	mov	r17,r6
 400b0d4:	3825883a 	mov	r18,r7
 400b0d8:	003ea406 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b0dc:	127ff804 	addi	r9,r2,-32
 400b0e0:	01000804 	movi	r4,32
 400b0e4:	2a52d83a 	srl	r9,r5,r9
 400b0e8:	11008c26 	beq	r2,r4,400b31c <__subdf3+0x834>
 400b0ec:	01001004 	movi	r4,64
 400b0f0:	2085c83a 	sub	r2,r4,r2
 400b0f4:	2884983a 	sll	r2,r5,r2
 400b0f8:	118cb03a 	or	r6,r2,r6
 400b0fc:	300cc03a 	cmpne	r6,r6,zero
 400b100:	4992b03a 	or	r9,r9,r6
 400b104:	0005883a 	mov	r2,zero
 400b108:	003f1206 	br	400ad54 <__alt_data_end+0xfc00ad54>
 400b10c:	0101ffc4 	movi	r4,2047
 400b110:	493f9c1e 	bne	r9,r4,400af84 <__alt_data_end+0xfc00af84>
 400b114:	2807883a 	mov	r3,r5
 400b118:	3023883a 	mov	r17,r6
 400b11c:	4821883a 	mov	r16,r9
 400b120:	3825883a 	mov	r18,r7
 400b124:	003e9106 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b128:	80001f1e 	bne	r16,zero,400b1a8 <__subdf3+0x6c0>
 400b12c:	1c48b03a 	or	r4,r3,r17
 400b130:	20005a26 	beq	r4,zero,400b29c <__subdf3+0x7b4>
 400b134:	0084303a 	nor	r2,zero,r2
 400b138:	1000561e 	bne	r2,zero,400b294 <__subdf3+0x7ac>
 400b13c:	89a3883a 	add	r17,r17,r6
 400b140:	1945883a 	add	r2,r3,r5
 400b144:	898d803a 	cmpltu	r6,r17,r6
 400b148:	3087883a 	add	r3,r6,r2
 400b14c:	4821883a 	mov	r16,r9
 400b150:	003f0506 	br	400ad68 <__alt_data_end+0xfc00ad68>
 400b154:	10002b1e 	bne	r2,zero,400b204 <__subdf3+0x71c>
 400b158:	2984b03a 	or	r2,r5,r6
 400b15c:	10008026 	beq	r2,zero,400b360 <__subdf3+0x878>
 400b160:	2807883a 	mov	r3,r5
 400b164:	3023883a 	mov	r17,r6
 400b168:	3825883a 	mov	r18,r7
 400b16c:	0401ffc4 	movi	r16,2047
 400b170:	003e7e06 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b174:	3809883a 	mov	r4,r7
 400b178:	0011883a 	mov	r8,zero
 400b17c:	0005883a 	mov	r2,zero
 400b180:	003ee306 	br	400ad10 <__alt_data_end+0xfc00ad10>
 400b184:	1c62b03a 	or	r17,r3,r17
 400b188:	8822c03a 	cmpne	r17,r17,zero
 400b18c:	0005883a 	mov	r2,zero
 400b190:	003f8906 	br	400afb8 <__alt_data_end+0xfc00afb8>
 400b194:	3809883a 	mov	r4,r7
 400b198:	4821883a 	mov	r16,r9
 400b19c:	0011883a 	mov	r8,zero
 400b1a0:	0005883a 	mov	r2,zero
 400b1a4:	003eda06 	br	400ad10 <__alt_data_end+0xfc00ad10>
 400b1a8:	0101ffc4 	movi	r4,2047
 400b1ac:	49003b26 	beq	r9,r4,400b29c <__subdf3+0x7b4>
 400b1b0:	0085c83a 	sub	r2,zero,r2
 400b1b4:	18c02034 	orhi	r3,r3,128
 400b1b8:	01000e04 	movi	r4,56
 400b1bc:	20806e16 	blt	r4,r2,400b378 <__subdf3+0x890>
 400b1c0:	010007c4 	movi	r4,31
 400b1c4:	20807716 	blt	r4,r2,400b3a4 <__subdf3+0x8bc>
 400b1c8:	01000804 	movi	r4,32
 400b1cc:	2089c83a 	sub	r4,r4,r2
 400b1d0:	1914983a 	sll	r10,r3,r4
 400b1d4:	8890d83a 	srl	r8,r17,r2
 400b1d8:	8908983a 	sll	r4,r17,r4
 400b1dc:	1884d83a 	srl	r2,r3,r2
 400b1e0:	5222b03a 	or	r17,r10,r8
 400b1e4:	2006c03a 	cmpne	r3,r4,zero
 400b1e8:	88e2b03a 	or	r17,r17,r3
 400b1ec:	89a3883a 	add	r17,r17,r6
 400b1f0:	1145883a 	add	r2,r2,r5
 400b1f4:	898d803a 	cmpltu	r6,r17,r6
 400b1f8:	3087883a 	add	r3,r6,r2
 400b1fc:	4821883a 	mov	r16,r9
 400b200:	003ed906 	br	400ad68 <__alt_data_end+0xfc00ad68>
 400b204:	2984b03a 	or	r2,r5,r6
 400b208:	10004226 	beq	r2,zero,400b314 <__subdf3+0x82c>
 400b20c:	1808d0fa 	srli	r4,r3,3
 400b210:	8822d0fa 	srli	r17,r17,3
 400b214:	1806977a 	slli	r3,r3,29
 400b218:	2080022c 	andhi	r2,r4,8
 400b21c:	1c62b03a 	or	r17,r3,r17
 400b220:	10000826 	beq	r2,zero,400b244 <__subdf3+0x75c>
 400b224:	2812d0fa 	srli	r9,r5,3
 400b228:	4880022c 	andhi	r2,r9,8
 400b22c:	1000051e 	bne	r2,zero,400b244 <__subdf3+0x75c>
 400b230:	300cd0fa 	srli	r6,r6,3
 400b234:	2804977a 	slli	r2,r5,29
 400b238:	4809883a 	mov	r4,r9
 400b23c:	3825883a 	mov	r18,r7
 400b240:	11a2b03a 	or	r17,r2,r6
 400b244:	8806d77a 	srli	r3,r17,29
 400b248:	200890fa 	slli	r4,r4,3
 400b24c:	882290fa 	slli	r17,r17,3
 400b250:	0401ffc4 	movi	r16,2047
 400b254:	1906b03a 	or	r3,r3,r4
 400b258:	003e4406 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b25c:	2984b03a 	or	r2,r5,r6
 400b260:	103e4226 	beq	r2,zero,400ab6c <__alt_data_end+0xfc00ab6c>
 400b264:	8989c83a 	sub	r4,r17,r6
 400b268:	8911803a 	cmpltu	r8,r17,r4
 400b26c:	1945c83a 	sub	r2,r3,r5
 400b270:	1205c83a 	sub	r2,r2,r8
 400b274:	1200202c 	andhi	r8,r2,128
 400b278:	403e9a26 	beq	r8,zero,400ace4 <__alt_data_end+0xfc00ace4>
 400b27c:	3463c83a 	sub	r17,r6,r17
 400b280:	28c5c83a 	sub	r2,r5,r3
 400b284:	344d803a 	cmpltu	r6,r6,r17
 400b288:	1187c83a 	sub	r3,r2,r6
 400b28c:	3825883a 	mov	r18,r7
 400b290:	003e3606 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b294:	0101ffc4 	movi	r4,2047
 400b298:	493fc71e 	bne	r9,r4,400b1b8 <__alt_data_end+0xfc00b1b8>
 400b29c:	2807883a 	mov	r3,r5
 400b2a0:	3023883a 	mov	r17,r6
 400b2a4:	4821883a 	mov	r16,r9
 400b2a8:	003e3006 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b2ac:	10003626 	beq	r2,zero,400b388 <__subdf3+0x8a0>
 400b2b0:	2984b03a 	or	r2,r5,r6
 400b2b4:	10001726 	beq	r2,zero,400b314 <__subdf3+0x82c>
 400b2b8:	1808d0fa 	srli	r4,r3,3
 400b2bc:	8822d0fa 	srli	r17,r17,3
 400b2c0:	1806977a 	slli	r3,r3,29
 400b2c4:	2080022c 	andhi	r2,r4,8
 400b2c8:	1c62b03a 	or	r17,r3,r17
 400b2cc:	10000726 	beq	r2,zero,400b2ec <__subdf3+0x804>
 400b2d0:	2812d0fa 	srli	r9,r5,3
 400b2d4:	4880022c 	andhi	r2,r9,8
 400b2d8:	1000041e 	bne	r2,zero,400b2ec <__subdf3+0x804>
 400b2dc:	300cd0fa 	srli	r6,r6,3
 400b2e0:	2804977a 	slli	r2,r5,29
 400b2e4:	4809883a 	mov	r4,r9
 400b2e8:	11a2b03a 	or	r17,r2,r6
 400b2ec:	8806d77a 	srli	r3,r17,29
 400b2f0:	200890fa 	slli	r4,r4,3
 400b2f4:	882290fa 	slli	r17,r17,3
 400b2f8:	3825883a 	mov	r18,r7
 400b2fc:	1906b03a 	or	r3,r3,r4
 400b300:	0401ffc4 	movi	r16,2047
 400b304:	003e1906 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b308:	000b883a 	mov	r5,zero
 400b30c:	0005883a 	mov	r2,zero
 400b310:	003e2e06 	br	400abcc <__alt_data_end+0xfc00abcc>
 400b314:	0401ffc4 	movi	r16,2047
 400b318:	003e1406 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b31c:	0005883a 	mov	r2,zero
 400b320:	003f7506 	br	400b0f8 <__alt_data_end+0xfc00b0f8>
 400b324:	0005883a 	mov	r2,zero
 400b328:	0009883a 	mov	r4,zero
 400b32c:	003e7806 	br	400ad10 <__alt_data_end+0xfc00ad10>
 400b330:	123ff804 	addi	r8,r2,-32
 400b334:	01000804 	movi	r4,32
 400b338:	1a10d83a 	srl	r8,r3,r8
 400b33c:	11002526 	beq	r2,r4,400b3d4 <__subdf3+0x8ec>
 400b340:	01001004 	movi	r4,64
 400b344:	2085c83a 	sub	r2,r4,r2
 400b348:	1884983a 	sll	r2,r3,r2
 400b34c:	1444b03a 	or	r2,r2,r17
 400b350:	1004c03a 	cmpne	r2,r2,zero
 400b354:	40a2b03a 	or	r17,r8,r2
 400b358:	0005883a 	mov	r2,zero
 400b35c:	003f1606 	br	400afb8 <__alt_data_end+0xfc00afb8>
 400b360:	02000434 	movhi	r8,16
 400b364:	0009883a 	mov	r4,zero
 400b368:	423fffc4 	addi	r8,r8,-1
 400b36c:	00bfffc4 	movi	r2,-1
 400b370:	0401ffc4 	movi	r16,2047
 400b374:	003e6606 	br	400ad10 <__alt_data_end+0xfc00ad10>
 400b378:	1c62b03a 	or	r17,r3,r17
 400b37c:	8822c03a 	cmpne	r17,r17,zero
 400b380:	0005883a 	mov	r2,zero
 400b384:	003f9906 	br	400b1ec <__alt_data_end+0xfc00b1ec>
 400b388:	2807883a 	mov	r3,r5
 400b38c:	3023883a 	mov	r17,r6
 400b390:	0401ffc4 	movi	r16,2047
 400b394:	003df506 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b398:	2807883a 	mov	r3,r5
 400b39c:	3023883a 	mov	r17,r6
 400b3a0:	003df206 	br	400ab6c <__alt_data_end+0xfc00ab6c>
 400b3a4:	123ff804 	addi	r8,r2,-32
 400b3a8:	01000804 	movi	r4,32
 400b3ac:	1a10d83a 	srl	r8,r3,r8
 400b3b0:	11000a26 	beq	r2,r4,400b3dc <__subdf3+0x8f4>
 400b3b4:	01001004 	movi	r4,64
 400b3b8:	2085c83a 	sub	r2,r4,r2
 400b3bc:	1884983a 	sll	r2,r3,r2
 400b3c0:	1444b03a 	or	r2,r2,r17
 400b3c4:	1004c03a 	cmpne	r2,r2,zero
 400b3c8:	40a2b03a 	or	r17,r8,r2
 400b3cc:	0005883a 	mov	r2,zero
 400b3d0:	003f8606 	br	400b1ec <__alt_data_end+0xfc00b1ec>
 400b3d4:	0005883a 	mov	r2,zero
 400b3d8:	003fdc06 	br	400b34c <__alt_data_end+0xfc00b34c>
 400b3dc:	0005883a 	mov	r2,zero
 400b3e0:	003ff706 	br	400b3c0 <__alt_data_end+0xfc00b3c0>

0400b3e4 <__fixdfsi>:
 400b3e4:	280cd53a 	srli	r6,r5,20
 400b3e8:	00c00434 	movhi	r3,16
 400b3ec:	18ffffc4 	addi	r3,r3,-1
 400b3f0:	3181ffcc 	andi	r6,r6,2047
 400b3f4:	01c0ff84 	movi	r7,1022
 400b3f8:	28c6703a 	and	r3,r5,r3
 400b3fc:	280ad7fa 	srli	r5,r5,31
 400b400:	3980120e 	bge	r7,r6,400b44c <__fixdfsi+0x68>
 400b404:	00810744 	movi	r2,1053
 400b408:	11800c16 	blt	r2,r6,400b43c <__fixdfsi+0x58>
 400b40c:	00810cc4 	movi	r2,1075
 400b410:	1185c83a 	sub	r2,r2,r6
 400b414:	01c007c4 	movi	r7,31
 400b418:	18c00434 	orhi	r3,r3,16
 400b41c:	38800d16 	blt	r7,r2,400b454 <__fixdfsi+0x70>
 400b420:	31befb44 	addi	r6,r6,-1043
 400b424:	2084d83a 	srl	r2,r4,r2
 400b428:	1986983a 	sll	r3,r3,r6
 400b42c:	1884b03a 	or	r2,r3,r2
 400b430:	28000726 	beq	r5,zero,400b450 <__fixdfsi+0x6c>
 400b434:	0085c83a 	sub	r2,zero,r2
 400b438:	f800283a 	ret
 400b43c:	00a00034 	movhi	r2,32768
 400b440:	10bfffc4 	addi	r2,r2,-1
 400b444:	2885883a 	add	r2,r5,r2
 400b448:	f800283a 	ret
 400b44c:	0005883a 	mov	r2,zero
 400b450:	f800283a 	ret
 400b454:	008104c4 	movi	r2,1043
 400b458:	1185c83a 	sub	r2,r2,r6
 400b45c:	1884d83a 	srl	r2,r3,r2
 400b460:	003ff306 	br	400b430 <__alt_data_end+0xfc00b430>

0400b464 <__floatsidf>:
 400b464:	defffd04 	addi	sp,sp,-12
 400b468:	dfc00215 	stw	ra,8(sp)
 400b46c:	dc400115 	stw	r17,4(sp)
 400b470:	dc000015 	stw	r16,0(sp)
 400b474:	20002b26 	beq	r4,zero,400b524 <__floatsidf+0xc0>
 400b478:	2023883a 	mov	r17,r4
 400b47c:	2020d7fa 	srli	r16,r4,31
 400b480:	20002d16 	blt	r4,zero,400b538 <__floatsidf+0xd4>
 400b484:	8809883a 	mov	r4,r17
 400b488:	400b7f80 	call	400b7f8 <__clzsi2>
 400b48c:	01410784 	movi	r5,1054
 400b490:	288bc83a 	sub	r5,r5,r2
 400b494:	01010cc4 	movi	r4,1075
 400b498:	2149c83a 	sub	r4,r4,r5
 400b49c:	00c007c4 	movi	r3,31
 400b4a0:	1900160e 	bge	r3,r4,400b4fc <__floatsidf+0x98>
 400b4a4:	00c104c4 	movi	r3,1043
 400b4a8:	1947c83a 	sub	r3,r3,r5
 400b4ac:	88c6983a 	sll	r3,r17,r3
 400b4b0:	00800434 	movhi	r2,16
 400b4b4:	10bfffc4 	addi	r2,r2,-1
 400b4b8:	1886703a 	and	r3,r3,r2
 400b4bc:	2941ffcc 	andi	r5,r5,2047
 400b4c0:	800d883a 	mov	r6,r16
 400b4c4:	0005883a 	mov	r2,zero
 400b4c8:	280a953a 	slli	r5,r5,20
 400b4cc:	31803fcc 	andi	r6,r6,255
 400b4d0:	01000434 	movhi	r4,16
 400b4d4:	300c97fa 	slli	r6,r6,31
 400b4d8:	213fffc4 	addi	r4,r4,-1
 400b4dc:	1906703a 	and	r3,r3,r4
 400b4e0:	1946b03a 	or	r3,r3,r5
 400b4e4:	1986b03a 	or	r3,r3,r6
 400b4e8:	dfc00217 	ldw	ra,8(sp)
 400b4ec:	dc400117 	ldw	r17,4(sp)
 400b4f0:	dc000017 	ldw	r16,0(sp)
 400b4f4:	dec00304 	addi	sp,sp,12
 400b4f8:	f800283a 	ret
 400b4fc:	00c002c4 	movi	r3,11
 400b500:	1887c83a 	sub	r3,r3,r2
 400b504:	88c6d83a 	srl	r3,r17,r3
 400b508:	8904983a 	sll	r2,r17,r4
 400b50c:	01000434 	movhi	r4,16
 400b510:	213fffc4 	addi	r4,r4,-1
 400b514:	2941ffcc 	andi	r5,r5,2047
 400b518:	1906703a 	and	r3,r3,r4
 400b51c:	800d883a 	mov	r6,r16
 400b520:	003fe906 	br	400b4c8 <__alt_data_end+0xfc00b4c8>
 400b524:	000d883a 	mov	r6,zero
 400b528:	000b883a 	mov	r5,zero
 400b52c:	0007883a 	mov	r3,zero
 400b530:	0005883a 	mov	r2,zero
 400b534:	003fe406 	br	400b4c8 <__alt_data_end+0xfc00b4c8>
 400b538:	0123c83a 	sub	r17,zero,r4
 400b53c:	003fd106 	br	400b484 <__alt_data_end+0xfc00b484>

0400b540 <__extendsfdf2>:
 400b540:	200ad5fa 	srli	r5,r4,23
 400b544:	defffd04 	addi	sp,sp,-12
 400b548:	dc400115 	stw	r17,4(sp)
 400b54c:	29403fcc 	andi	r5,r5,255
 400b550:	29800044 	addi	r6,r5,1
 400b554:	04402034 	movhi	r17,128
 400b558:	dc000015 	stw	r16,0(sp)
 400b55c:	8c7fffc4 	addi	r17,r17,-1
 400b560:	dfc00215 	stw	ra,8(sp)
 400b564:	31803fcc 	andi	r6,r6,255
 400b568:	00800044 	movi	r2,1
 400b56c:	8922703a 	and	r17,r17,r4
 400b570:	2020d7fa 	srli	r16,r4,31
 400b574:	1180110e 	bge	r2,r6,400b5bc <__extendsfdf2+0x7c>
 400b578:	880cd0fa 	srli	r6,r17,3
 400b57c:	8822977a 	slli	r17,r17,29
 400b580:	2940e004 	addi	r5,r5,896
 400b584:	2941ffcc 	andi	r5,r5,2047
 400b588:	2804953a 	slli	r2,r5,20
 400b58c:	01400434 	movhi	r5,16
 400b590:	800697fa 	slli	r3,r16,31
 400b594:	297fffc4 	addi	r5,r5,-1
 400b598:	314a703a 	and	r5,r6,r5
 400b59c:	288ab03a 	or	r5,r5,r2
 400b5a0:	28c6b03a 	or	r3,r5,r3
 400b5a4:	8805883a 	mov	r2,r17
 400b5a8:	dfc00217 	ldw	ra,8(sp)
 400b5ac:	dc400117 	ldw	r17,4(sp)
 400b5b0:	dc000017 	ldw	r16,0(sp)
 400b5b4:	dec00304 	addi	sp,sp,12
 400b5b8:	f800283a 	ret
 400b5bc:	2800111e 	bne	r5,zero,400b604 <__extendsfdf2+0xc4>
 400b5c0:	88001c26 	beq	r17,zero,400b634 <__extendsfdf2+0xf4>
 400b5c4:	8809883a 	mov	r4,r17
 400b5c8:	400b7f80 	call	400b7f8 <__clzsi2>
 400b5cc:	00c00284 	movi	r3,10
 400b5d0:	18801b16 	blt	r3,r2,400b640 <__extendsfdf2+0x100>
 400b5d4:	018002c4 	movi	r6,11
 400b5d8:	308dc83a 	sub	r6,r6,r2
 400b5dc:	11000544 	addi	r4,r2,21
 400b5e0:	8986d83a 	srl	r3,r17,r6
 400b5e4:	8922983a 	sll	r17,r17,r4
 400b5e8:	0180e244 	movi	r6,905
 400b5ec:	01400434 	movhi	r5,16
 400b5f0:	3085c83a 	sub	r2,r6,r2
 400b5f4:	297fffc4 	addi	r5,r5,-1
 400b5f8:	194c703a 	and	r6,r3,r5
 400b5fc:	1141ffcc 	andi	r5,r2,2047
 400b600:	003fe006 	br	400b584 <__alt_data_end+0xfc00b584>
 400b604:	88000826 	beq	r17,zero,400b628 <__extendsfdf2+0xe8>
 400b608:	880cd0fa 	srli	r6,r17,3
 400b60c:	00800434 	movhi	r2,16
 400b610:	10bfffc4 	addi	r2,r2,-1
 400b614:	31800234 	orhi	r6,r6,8
 400b618:	8822977a 	slli	r17,r17,29
 400b61c:	308c703a 	and	r6,r6,r2
 400b620:	0141ffc4 	movi	r5,2047
 400b624:	003fd706 	br	400b584 <__alt_data_end+0xfc00b584>
 400b628:	0141ffc4 	movi	r5,2047
 400b62c:	000d883a 	mov	r6,zero
 400b630:	003fd406 	br	400b584 <__alt_data_end+0xfc00b584>
 400b634:	000b883a 	mov	r5,zero
 400b638:	000d883a 	mov	r6,zero
 400b63c:	003fd106 	br	400b584 <__alt_data_end+0xfc00b584>
 400b640:	11bffd44 	addi	r6,r2,-11
 400b644:	8986983a 	sll	r3,r17,r6
 400b648:	0023883a 	mov	r17,zero
 400b64c:	003fe606 	br	400b5e8 <__alt_data_end+0xfc00b5e8>

0400b650 <__truncdfsf2>:
 400b650:	2810d53a 	srli	r8,r5,20
 400b654:	01c00434 	movhi	r7,16
 400b658:	39ffffc4 	addi	r7,r7,-1
 400b65c:	29ce703a 	and	r7,r5,r7
 400b660:	4201ffcc 	andi	r8,r8,2047
 400b664:	380e90fa 	slli	r7,r7,3
 400b668:	200cd77a 	srli	r6,r4,29
 400b66c:	42400044 	addi	r9,r8,1
 400b670:	4a41ffcc 	andi	r9,r9,2047
 400b674:	00c00044 	movi	r3,1
 400b678:	280ad7fa 	srli	r5,r5,31
 400b67c:	31ceb03a 	or	r7,r6,r7
 400b680:	200490fa 	slli	r2,r4,3
 400b684:	1a40230e 	bge	r3,r9,400b714 <__truncdfsf2+0xc4>
 400b688:	40ff2004 	addi	r3,r8,-896
 400b68c:	01803f84 	movi	r6,254
 400b690:	30c01516 	blt	r6,r3,400b6e8 <__truncdfsf2+0x98>
 400b694:	00c0380e 	bge	zero,r3,400b778 <__truncdfsf2+0x128>
 400b698:	200c91ba 	slli	r6,r4,6
 400b69c:	380e90fa 	slli	r7,r7,3
 400b6a0:	1004d77a 	srli	r2,r2,29
 400b6a4:	300cc03a 	cmpne	r6,r6,zero
 400b6a8:	31ccb03a 	or	r6,r6,r7
 400b6ac:	308cb03a 	or	r6,r6,r2
 400b6b0:	308001cc 	andi	r2,r6,7
 400b6b4:	10000426 	beq	r2,zero,400b6c8 <__truncdfsf2+0x78>
 400b6b8:	308003cc 	andi	r2,r6,15
 400b6bc:	01000104 	movi	r4,4
 400b6c0:	11000126 	beq	r2,r4,400b6c8 <__truncdfsf2+0x78>
 400b6c4:	31800104 	addi	r6,r6,4
 400b6c8:	3081002c 	andhi	r2,r6,1024
 400b6cc:	10001626 	beq	r2,zero,400b728 <__truncdfsf2+0xd8>
 400b6d0:	18c00044 	addi	r3,r3,1
 400b6d4:	00803fc4 	movi	r2,255
 400b6d8:	18800326 	beq	r3,r2,400b6e8 <__truncdfsf2+0x98>
 400b6dc:	300c91ba 	slli	r6,r6,6
 400b6e0:	300cd27a 	srli	r6,r6,9
 400b6e4:	00000206 	br	400b6f0 <__truncdfsf2+0xa0>
 400b6e8:	00ffffc4 	movi	r3,-1
 400b6ec:	000d883a 	mov	r6,zero
 400b6f0:	18c03fcc 	andi	r3,r3,255
 400b6f4:	180895fa 	slli	r4,r3,23
 400b6f8:	00c02034 	movhi	r3,128
 400b6fc:	280a97fa 	slli	r5,r5,31
 400b700:	18ffffc4 	addi	r3,r3,-1
 400b704:	30c6703a 	and	r3,r6,r3
 400b708:	1906b03a 	or	r3,r3,r4
 400b70c:	1944b03a 	or	r2,r3,r5
 400b710:	f800283a 	ret
 400b714:	40000b1e 	bne	r8,zero,400b744 <__truncdfsf2+0xf4>
 400b718:	388cb03a 	or	r6,r7,r2
 400b71c:	0007883a 	mov	r3,zero
 400b720:	30000426 	beq	r6,zero,400b734 <__truncdfsf2+0xe4>
 400b724:	01800144 	movi	r6,5
 400b728:	00803fc4 	movi	r2,255
 400b72c:	300cd0fa 	srli	r6,r6,3
 400b730:	18800a26 	beq	r3,r2,400b75c <__truncdfsf2+0x10c>
 400b734:	00802034 	movhi	r2,128
 400b738:	10bfffc4 	addi	r2,r2,-1
 400b73c:	308c703a 	and	r6,r6,r2
 400b740:	003feb06 	br	400b6f0 <__alt_data_end+0xfc00b6f0>
 400b744:	3888b03a 	or	r4,r7,r2
 400b748:	203fe726 	beq	r4,zero,400b6e8 <__alt_data_end+0xfc00b6e8>
 400b74c:	380c90fa 	slli	r6,r7,3
 400b750:	00c03fc4 	movi	r3,255
 400b754:	31808034 	orhi	r6,r6,512
 400b758:	003fd506 	br	400b6b0 <__alt_data_end+0xfc00b6b0>
 400b75c:	303fe226 	beq	r6,zero,400b6e8 <__alt_data_end+0xfc00b6e8>
 400b760:	00802034 	movhi	r2,128
 400b764:	31801034 	orhi	r6,r6,64
 400b768:	10bfffc4 	addi	r2,r2,-1
 400b76c:	00ffffc4 	movi	r3,-1
 400b770:	308c703a 	and	r6,r6,r2
 400b774:	003fde06 	br	400b6f0 <__alt_data_end+0xfc00b6f0>
 400b778:	013ffa44 	movi	r4,-23
 400b77c:	19000e16 	blt	r3,r4,400b7b8 <__truncdfsf2+0x168>
 400b780:	01000784 	movi	r4,30
 400b784:	20c9c83a 	sub	r4,r4,r3
 400b788:	018007c4 	movi	r6,31
 400b78c:	39c02034 	orhi	r7,r7,128
 400b790:	31000b16 	blt	r6,r4,400b7c0 <__truncdfsf2+0x170>
 400b794:	423f2084 	addi	r8,r8,-894
 400b798:	120c983a 	sll	r6,r2,r8
 400b79c:	3a0e983a 	sll	r7,r7,r8
 400b7a0:	1104d83a 	srl	r2,r2,r4
 400b7a4:	300cc03a 	cmpne	r6,r6,zero
 400b7a8:	31ceb03a 	or	r7,r6,r7
 400b7ac:	388cb03a 	or	r6,r7,r2
 400b7b0:	0007883a 	mov	r3,zero
 400b7b4:	003fbe06 	br	400b6b0 <__alt_data_end+0xfc00b6b0>
 400b7b8:	0007883a 	mov	r3,zero
 400b7bc:	003fd906 	br	400b724 <__alt_data_end+0xfc00b724>
 400b7c0:	01bfff84 	movi	r6,-2
 400b7c4:	30cdc83a 	sub	r6,r6,r3
 400b7c8:	00c00804 	movi	r3,32
 400b7cc:	398cd83a 	srl	r6,r7,r6
 400b7d0:	20c00726 	beq	r4,r3,400b7f0 <__truncdfsf2+0x1a0>
 400b7d4:	423f2884 	addi	r8,r8,-862
 400b7d8:	3a0e983a 	sll	r7,r7,r8
 400b7dc:	3884b03a 	or	r2,r7,r2
 400b7e0:	1004c03a 	cmpne	r2,r2,zero
 400b7e4:	118cb03a 	or	r6,r2,r6
 400b7e8:	0007883a 	mov	r3,zero
 400b7ec:	003fb006 	br	400b6b0 <__alt_data_end+0xfc00b6b0>
 400b7f0:	000f883a 	mov	r7,zero
 400b7f4:	003ff906 	br	400b7dc <__alt_data_end+0xfc00b7dc>

0400b7f8 <__clzsi2>:
 400b7f8:	00bfffd4 	movui	r2,65535
 400b7fc:	11000536 	bltu	r2,r4,400b814 <__clzsi2+0x1c>
 400b800:	00803fc4 	movi	r2,255
 400b804:	11000f36 	bltu	r2,r4,400b844 <__clzsi2+0x4c>
 400b808:	00800804 	movi	r2,32
 400b80c:	0007883a 	mov	r3,zero
 400b810:	00000506 	br	400b828 <__clzsi2+0x30>
 400b814:	00804034 	movhi	r2,256
 400b818:	10bfffc4 	addi	r2,r2,-1
 400b81c:	11000c2e 	bgeu	r2,r4,400b850 <__clzsi2+0x58>
 400b820:	00800204 	movi	r2,8
 400b824:	00c00604 	movi	r3,24
 400b828:	20c8d83a 	srl	r4,r4,r3
 400b82c:	00c100b4 	movhi	r3,1026
 400b830:	18eb4704 	addi	r3,r3,-21220
 400b834:	1909883a 	add	r4,r3,r4
 400b838:	20c00003 	ldbu	r3,0(r4)
 400b83c:	10c5c83a 	sub	r2,r2,r3
 400b840:	f800283a 	ret
 400b844:	00800604 	movi	r2,24
 400b848:	00c00204 	movi	r3,8
 400b84c:	003ff606 	br	400b828 <__alt_data_end+0xfc00b828>
 400b850:	00800404 	movi	r2,16
 400b854:	1007883a 	mov	r3,r2
 400b858:	003ff306 	br	400b828 <__alt_data_end+0xfc00b828>

0400b85c <__errno>:
 400b85c:	008100b4 	movhi	r2,1026
 400b860:	10b2dd04 	addi	r2,r2,-13452
 400b864:	10800017 	ldw	r2,0(r2)
 400b868:	f800283a 	ret

0400b86c <malloc>:
 400b86c:	008100b4 	movhi	r2,1026
 400b870:	10b2dd04 	addi	r2,r2,-13452
 400b874:	200b883a 	mov	r5,r4
 400b878:	11000017 	ldw	r4,0(r2)
 400b87c:	400b8941 	jmpi	400b894 <_malloc_r>

0400b880 <free>:
 400b880:	008100b4 	movhi	r2,1026
 400b884:	10b2dd04 	addi	r2,r2,-13452
 400b888:	200b883a 	mov	r5,r4
 400b88c:	11000017 	ldw	r4,0(r2)
 400b890:	40109481 	jmpi	4010948 <_free_r>

0400b894 <_malloc_r>:
 400b894:	defff504 	addi	sp,sp,-44
 400b898:	dc800315 	stw	r18,12(sp)
 400b89c:	dfc00a15 	stw	ra,40(sp)
 400b8a0:	df000915 	stw	fp,36(sp)
 400b8a4:	ddc00815 	stw	r23,32(sp)
 400b8a8:	dd800715 	stw	r22,28(sp)
 400b8ac:	dd400615 	stw	r21,24(sp)
 400b8b0:	dd000515 	stw	r20,20(sp)
 400b8b4:	dcc00415 	stw	r19,16(sp)
 400b8b8:	dc400215 	stw	r17,8(sp)
 400b8bc:	dc000115 	stw	r16,4(sp)
 400b8c0:	288002c4 	addi	r2,r5,11
 400b8c4:	00c00584 	movi	r3,22
 400b8c8:	2025883a 	mov	r18,r4
 400b8cc:	18807f2e 	bgeu	r3,r2,400bacc <_malloc_r+0x238>
 400b8d0:	047ffe04 	movi	r17,-8
 400b8d4:	1462703a 	and	r17,r2,r17
 400b8d8:	8800a316 	blt	r17,zero,400bb68 <_malloc_r+0x2d4>
 400b8dc:	8940a236 	bltu	r17,r5,400bb68 <_malloc_r+0x2d4>
 400b8e0:	40163240 	call	4016324 <__malloc_lock>
 400b8e4:	00807dc4 	movi	r2,503
 400b8e8:	1441e92e 	bgeu	r2,r17,400c090 <_malloc_r+0x7fc>
 400b8ec:	8804d27a 	srli	r2,r17,9
 400b8f0:	1000a126 	beq	r2,zero,400bb78 <_malloc_r+0x2e4>
 400b8f4:	00c00104 	movi	r3,4
 400b8f8:	18811e36 	bltu	r3,r2,400bd74 <_malloc_r+0x4e0>
 400b8fc:	8804d1ba 	srli	r2,r17,6
 400b900:	12000e44 	addi	r8,r2,57
 400b904:	11c00e04 	addi	r7,r2,56
 400b908:	4209883a 	add	r4,r8,r8
 400b90c:	04c100b4 	movhi	r19,1026
 400b910:	2109883a 	add	r4,r4,r4
 400b914:	9ced2704 	addi	r19,r19,-19300
 400b918:	2109883a 	add	r4,r4,r4
 400b91c:	9909883a 	add	r4,r19,r4
 400b920:	24000117 	ldw	r16,4(r4)
 400b924:	213ffe04 	addi	r4,r4,-8
 400b928:	24009726 	beq	r4,r16,400bb88 <_malloc_r+0x2f4>
 400b92c:	80800117 	ldw	r2,4(r16)
 400b930:	01bfff04 	movi	r6,-4
 400b934:	014003c4 	movi	r5,15
 400b938:	1184703a 	and	r2,r2,r6
 400b93c:	1447c83a 	sub	r3,r2,r17
 400b940:	28c00716 	blt	r5,r3,400b960 <_malloc_r+0xcc>
 400b944:	1800920e 	bge	r3,zero,400bb90 <_malloc_r+0x2fc>
 400b948:	84000317 	ldw	r16,12(r16)
 400b94c:	24008e26 	beq	r4,r16,400bb88 <_malloc_r+0x2f4>
 400b950:	80800117 	ldw	r2,4(r16)
 400b954:	1184703a 	and	r2,r2,r6
 400b958:	1447c83a 	sub	r3,r2,r17
 400b95c:	28fff90e 	bge	r5,r3,400b944 <__alt_data_end+0xfc00b944>
 400b960:	3809883a 	mov	r4,r7
 400b964:	018100b4 	movhi	r6,1026
 400b968:	9c000417 	ldw	r16,16(r19)
 400b96c:	31ad2704 	addi	r6,r6,-19300
 400b970:	32000204 	addi	r8,r6,8
 400b974:	82013426 	beq	r16,r8,400be48 <_malloc_r+0x5b4>
 400b978:	80c00117 	ldw	r3,4(r16)
 400b97c:	00bfff04 	movi	r2,-4
 400b980:	188e703a 	and	r7,r3,r2
 400b984:	3c45c83a 	sub	r2,r7,r17
 400b988:	00c003c4 	movi	r3,15
 400b98c:	18811f16 	blt	r3,r2,400be0c <_malloc_r+0x578>
 400b990:	32000515 	stw	r8,20(r6)
 400b994:	32000415 	stw	r8,16(r6)
 400b998:	10007f0e 	bge	r2,zero,400bb98 <_malloc_r+0x304>
 400b99c:	00807fc4 	movi	r2,511
 400b9a0:	11c0fd36 	bltu	r2,r7,400bd98 <_malloc_r+0x504>
 400b9a4:	3806d0fa 	srli	r3,r7,3
 400b9a8:	01c00044 	movi	r7,1
 400b9ac:	30800117 	ldw	r2,4(r6)
 400b9b0:	19400044 	addi	r5,r3,1
 400b9b4:	294b883a 	add	r5,r5,r5
 400b9b8:	1807d0ba 	srai	r3,r3,2
 400b9bc:	294b883a 	add	r5,r5,r5
 400b9c0:	294b883a 	add	r5,r5,r5
 400b9c4:	298b883a 	add	r5,r5,r6
 400b9c8:	38c6983a 	sll	r3,r7,r3
 400b9cc:	29c00017 	ldw	r7,0(r5)
 400b9d0:	2a7ffe04 	addi	r9,r5,-8
 400b9d4:	1886b03a 	or	r3,r3,r2
 400b9d8:	82400315 	stw	r9,12(r16)
 400b9dc:	81c00215 	stw	r7,8(r16)
 400b9e0:	30c00115 	stw	r3,4(r6)
 400b9e4:	2c000015 	stw	r16,0(r5)
 400b9e8:	3c000315 	stw	r16,12(r7)
 400b9ec:	2005d0ba 	srai	r2,r4,2
 400b9f0:	01400044 	movi	r5,1
 400b9f4:	288a983a 	sll	r5,r5,r2
 400b9f8:	19406f36 	bltu	r3,r5,400bbb8 <_malloc_r+0x324>
 400b9fc:	28c4703a 	and	r2,r5,r3
 400ba00:	10000a1e 	bne	r2,zero,400ba2c <_malloc_r+0x198>
 400ba04:	00bfff04 	movi	r2,-4
 400ba08:	294b883a 	add	r5,r5,r5
 400ba0c:	2088703a 	and	r4,r4,r2
 400ba10:	28c4703a 	and	r2,r5,r3
 400ba14:	21000104 	addi	r4,r4,4
 400ba18:	1000041e 	bne	r2,zero,400ba2c <_malloc_r+0x198>
 400ba1c:	294b883a 	add	r5,r5,r5
 400ba20:	28c4703a 	and	r2,r5,r3
 400ba24:	21000104 	addi	r4,r4,4
 400ba28:	103ffc26 	beq	r2,zero,400ba1c <__alt_data_end+0xfc00ba1c>
 400ba2c:	02bfff04 	movi	r10,-4
 400ba30:	024003c4 	movi	r9,15
 400ba34:	21800044 	addi	r6,r4,1
 400ba38:	318d883a 	add	r6,r6,r6
 400ba3c:	318d883a 	add	r6,r6,r6
 400ba40:	318d883a 	add	r6,r6,r6
 400ba44:	998d883a 	add	r6,r19,r6
 400ba48:	333ffe04 	addi	r12,r6,-8
 400ba4c:	2017883a 	mov	r11,r4
 400ba50:	31800104 	addi	r6,r6,4
 400ba54:	34000017 	ldw	r16,0(r6)
 400ba58:	31fffd04 	addi	r7,r6,-12
 400ba5c:	81c0041e 	bne	r16,r7,400ba70 <_malloc_r+0x1dc>
 400ba60:	0000fb06 	br	400be50 <_malloc_r+0x5bc>
 400ba64:	1801030e 	bge	r3,zero,400be74 <_malloc_r+0x5e0>
 400ba68:	84000317 	ldw	r16,12(r16)
 400ba6c:	81c0f826 	beq	r16,r7,400be50 <_malloc_r+0x5bc>
 400ba70:	80800117 	ldw	r2,4(r16)
 400ba74:	1284703a 	and	r2,r2,r10
 400ba78:	1447c83a 	sub	r3,r2,r17
 400ba7c:	48fff90e 	bge	r9,r3,400ba64 <__alt_data_end+0xfc00ba64>
 400ba80:	80800317 	ldw	r2,12(r16)
 400ba84:	81000217 	ldw	r4,8(r16)
 400ba88:	89400054 	ori	r5,r17,1
 400ba8c:	81400115 	stw	r5,4(r16)
 400ba90:	20800315 	stw	r2,12(r4)
 400ba94:	11000215 	stw	r4,8(r2)
 400ba98:	8463883a 	add	r17,r16,r17
 400ba9c:	9c400515 	stw	r17,20(r19)
 400baa0:	9c400415 	stw	r17,16(r19)
 400baa4:	18800054 	ori	r2,r3,1
 400baa8:	88800115 	stw	r2,4(r17)
 400baac:	8a000315 	stw	r8,12(r17)
 400bab0:	8a000215 	stw	r8,8(r17)
 400bab4:	88e3883a 	add	r17,r17,r3
 400bab8:	88c00015 	stw	r3,0(r17)
 400babc:	9009883a 	mov	r4,r18
 400bac0:	40163480 	call	4016348 <__malloc_unlock>
 400bac4:	80800204 	addi	r2,r16,8
 400bac8:	00001b06 	br	400bb38 <_malloc_r+0x2a4>
 400bacc:	04400404 	movi	r17,16
 400bad0:	89402536 	bltu	r17,r5,400bb68 <_malloc_r+0x2d4>
 400bad4:	40163240 	call	4016324 <__malloc_lock>
 400bad8:	00800184 	movi	r2,6
 400badc:	01000084 	movi	r4,2
 400bae0:	04c100b4 	movhi	r19,1026
 400bae4:	1085883a 	add	r2,r2,r2
 400bae8:	9ced2704 	addi	r19,r19,-19300
 400baec:	1085883a 	add	r2,r2,r2
 400baf0:	9885883a 	add	r2,r19,r2
 400baf4:	14000117 	ldw	r16,4(r2)
 400baf8:	10fffe04 	addi	r3,r2,-8
 400bafc:	80c0d926 	beq	r16,r3,400be64 <_malloc_r+0x5d0>
 400bb00:	80c00117 	ldw	r3,4(r16)
 400bb04:	81000317 	ldw	r4,12(r16)
 400bb08:	00bfff04 	movi	r2,-4
 400bb0c:	1884703a 	and	r2,r3,r2
 400bb10:	81400217 	ldw	r5,8(r16)
 400bb14:	8085883a 	add	r2,r16,r2
 400bb18:	10c00117 	ldw	r3,4(r2)
 400bb1c:	29000315 	stw	r4,12(r5)
 400bb20:	21400215 	stw	r5,8(r4)
 400bb24:	18c00054 	ori	r3,r3,1
 400bb28:	10c00115 	stw	r3,4(r2)
 400bb2c:	9009883a 	mov	r4,r18
 400bb30:	40163480 	call	4016348 <__malloc_unlock>
 400bb34:	80800204 	addi	r2,r16,8
 400bb38:	dfc00a17 	ldw	ra,40(sp)
 400bb3c:	df000917 	ldw	fp,36(sp)
 400bb40:	ddc00817 	ldw	r23,32(sp)
 400bb44:	dd800717 	ldw	r22,28(sp)
 400bb48:	dd400617 	ldw	r21,24(sp)
 400bb4c:	dd000517 	ldw	r20,20(sp)
 400bb50:	dcc00417 	ldw	r19,16(sp)
 400bb54:	dc800317 	ldw	r18,12(sp)
 400bb58:	dc400217 	ldw	r17,8(sp)
 400bb5c:	dc000117 	ldw	r16,4(sp)
 400bb60:	dec00b04 	addi	sp,sp,44
 400bb64:	f800283a 	ret
 400bb68:	00800304 	movi	r2,12
 400bb6c:	90800015 	stw	r2,0(r18)
 400bb70:	0005883a 	mov	r2,zero
 400bb74:	003ff006 	br	400bb38 <__alt_data_end+0xfc00bb38>
 400bb78:	01002004 	movi	r4,128
 400bb7c:	02001004 	movi	r8,64
 400bb80:	01c00fc4 	movi	r7,63
 400bb84:	003f6106 	br	400b90c <__alt_data_end+0xfc00b90c>
 400bb88:	4009883a 	mov	r4,r8
 400bb8c:	003f7506 	br	400b964 <__alt_data_end+0xfc00b964>
 400bb90:	81000317 	ldw	r4,12(r16)
 400bb94:	003fde06 	br	400bb10 <__alt_data_end+0xfc00bb10>
 400bb98:	81c5883a 	add	r2,r16,r7
 400bb9c:	11400117 	ldw	r5,4(r2)
 400bba0:	9009883a 	mov	r4,r18
 400bba4:	29400054 	ori	r5,r5,1
 400bba8:	11400115 	stw	r5,4(r2)
 400bbac:	40163480 	call	4016348 <__malloc_unlock>
 400bbb0:	80800204 	addi	r2,r16,8
 400bbb4:	003fe006 	br	400bb38 <__alt_data_end+0xfc00bb38>
 400bbb8:	9c000217 	ldw	r16,8(r19)
 400bbbc:	00bfff04 	movi	r2,-4
 400bbc0:	85800117 	ldw	r22,4(r16)
 400bbc4:	b0ac703a 	and	r22,r22,r2
 400bbc8:	b4400336 	bltu	r22,r17,400bbd8 <_malloc_r+0x344>
 400bbcc:	b445c83a 	sub	r2,r22,r17
 400bbd0:	00c003c4 	movi	r3,15
 400bbd4:	18805d16 	blt	r3,r2,400bd4c <_malloc_r+0x4b8>
 400bbd8:	05c100b4 	movhi	r23,1026
 400bbdc:	008100b4 	movhi	r2,1026
 400bbe0:	10b9d204 	addi	r2,r2,-6328
 400bbe4:	bdf2de04 	addi	r23,r23,-13448
 400bbe8:	15400017 	ldw	r21,0(r2)
 400bbec:	b8c00017 	ldw	r3,0(r23)
 400bbf0:	00bfffc4 	movi	r2,-1
 400bbf4:	858d883a 	add	r6,r16,r22
 400bbf8:	8d6b883a 	add	r21,r17,r21
 400bbfc:	1880ea26 	beq	r3,r2,400bfa8 <_malloc_r+0x714>
 400bc00:	ad4403c4 	addi	r21,r21,4111
 400bc04:	00bc0004 	movi	r2,-4096
 400bc08:	a8aa703a 	and	r21,r21,r2
 400bc0c:	a80b883a 	mov	r5,r21
 400bc10:	9009883a 	mov	r4,r18
 400bc14:	d9800015 	stw	r6,0(sp)
 400bc18:	400c3280 	call	400c328 <_sbrk_r>
 400bc1c:	1029883a 	mov	r20,r2
 400bc20:	00bfffc4 	movi	r2,-1
 400bc24:	d9800017 	ldw	r6,0(sp)
 400bc28:	a080e826 	beq	r20,r2,400bfcc <_malloc_r+0x738>
 400bc2c:	a180a636 	bltu	r20,r6,400bec8 <_malloc_r+0x634>
 400bc30:	070100b4 	movhi	fp,1026
 400bc34:	e739e804 	addi	fp,fp,-6240
 400bc38:	e0800017 	ldw	r2,0(fp)
 400bc3c:	a887883a 	add	r3,r21,r2
 400bc40:	e0c00015 	stw	r3,0(fp)
 400bc44:	3500e626 	beq	r6,r20,400bfe0 <_malloc_r+0x74c>
 400bc48:	b9000017 	ldw	r4,0(r23)
 400bc4c:	00bfffc4 	movi	r2,-1
 400bc50:	2080ee26 	beq	r4,r2,400c00c <_malloc_r+0x778>
 400bc54:	a185c83a 	sub	r2,r20,r6
 400bc58:	10c5883a 	add	r2,r2,r3
 400bc5c:	e0800015 	stw	r2,0(fp)
 400bc60:	a0c001cc 	andi	r3,r20,7
 400bc64:	1800bc26 	beq	r3,zero,400bf58 <_malloc_r+0x6c4>
 400bc68:	a0e9c83a 	sub	r20,r20,r3
 400bc6c:	00840204 	movi	r2,4104
 400bc70:	a5000204 	addi	r20,r20,8
 400bc74:	10c7c83a 	sub	r3,r2,r3
 400bc78:	a545883a 	add	r2,r20,r21
 400bc7c:	1083ffcc 	andi	r2,r2,4095
 400bc80:	18abc83a 	sub	r21,r3,r2
 400bc84:	a80b883a 	mov	r5,r21
 400bc88:	9009883a 	mov	r4,r18
 400bc8c:	400c3280 	call	400c328 <_sbrk_r>
 400bc90:	00ffffc4 	movi	r3,-1
 400bc94:	10c0e126 	beq	r2,r3,400c01c <_malloc_r+0x788>
 400bc98:	1505c83a 	sub	r2,r2,r20
 400bc9c:	1545883a 	add	r2,r2,r21
 400bca0:	10800054 	ori	r2,r2,1
 400bca4:	e0c00017 	ldw	r3,0(fp)
 400bca8:	9d000215 	stw	r20,8(r19)
 400bcac:	a0800115 	stw	r2,4(r20)
 400bcb0:	a8c7883a 	add	r3,r21,r3
 400bcb4:	e0c00015 	stw	r3,0(fp)
 400bcb8:	84c00e26 	beq	r16,r19,400bcf4 <_malloc_r+0x460>
 400bcbc:	018003c4 	movi	r6,15
 400bcc0:	3580a72e 	bgeu	r6,r22,400bf60 <_malloc_r+0x6cc>
 400bcc4:	81400117 	ldw	r5,4(r16)
 400bcc8:	013ffe04 	movi	r4,-8
 400bccc:	b0bffd04 	addi	r2,r22,-12
 400bcd0:	1104703a 	and	r2,r2,r4
 400bcd4:	2900004c 	andi	r4,r5,1
 400bcd8:	2088b03a 	or	r4,r4,r2
 400bcdc:	81000115 	stw	r4,4(r16)
 400bce0:	01400144 	movi	r5,5
 400bce4:	8089883a 	add	r4,r16,r2
 400bce8:	21400115 	stw	r5,4(r4)
 400bcec:	21400215 	stw	r5,8(r4)
 400bcf0:	3080cd36 	bltu	r6,r2,400c028 <_malloc_r+0x794>
 400bcf4:	008100b4 	movhi	r2,1026
 400bcf8:	10b9d104 	addi	r2,r2,-6332
 400bcfc:	11000017 	ldw	r4,0(r2)
 400bd00:	20c0012e 	bgeu	r4,r3,400bd08 <_malloc_r+0x474>
 400bd04:	10c00015 	stw	r3,0(r2)
 400bd08:	008100b4 	movhi	r2,1026
 400bd0c:	10b9d004 	addi	r2,r2,-6336
 400bd10:	11000017 	ldw	r4,0(r2)
 400bd14:	9c000217 	ldw	r16,8(r19)
 400bd18:	20c0012e 	bgeu	r4,r3,400bd20 <_malloc_r+0x48c>
 400bd1c:	10c00015 	stw	r3,0(r2)
 400bd20:	80c00117 	ldw	r3,4(r16)
 400bd24:	00bfff04 	movi	r2,-4
 400bd28:	1886703a 	and	r3,r3,r2
 400bd2c:	1c45c83a 	sub	r2,r3,r17
 400bd30:	1c400236 	bltu	r3,r17,400bd3c <_malloc_r+0x4a8>
 400bd34:	00c003c4 	movi	r3,15
 400bd38:	18800416 	blt	r3,r2,400bd4c <_malloc_r+0x4b8>
 400bd3c:	9009883a 	mov	r4,r18
 400bd40:	40163480 	call	4016348 <__malloc_unlock>
 400bd44:	0005883a 	mov	r2,zero
 400bd48:	003f7b06 	br	400bb38 <__alt_data_end+0xfc00bb38>
 400bd4c:	88c00054 	ori	r3,r17,1
 400bd50:	80c00115 	stw	r3,4(r16)
 400bd54:	8463883a 	add	r17,r16,r17
 400bd58:	10800054 	ori	r2,r2,1
 400bd5c:	9c400215 	stw	r17,8(r19)
 400bd60:	88800115 	stw	r2,4(r17)
 400bd64:	9009883a 	mov	r4,r18
 400bd68:	40163480 	call	4016348 <__malloc_unlock>
 400bd6c:	80800204 	addi	r2,r16,8
 400bd70:	003f7106 	br	400bb38 <__alt_data_end+0xfc00bb38>
 400bd74:	00c00504 	movi	r3,20
 400bd78:	18804a2e 	bgeu	r3,r2,400bea4 <_malloc_r+0x610>
 400bd7c:	00c01504 	movi	r3,84
 400bd80:	18806e36 	bltu	r3,r2,400bf3c <_malloc_r+0x6a8>
 400bd84:	8804d33a 	srli	r2,r17,12
 400bd88:	12001bc4 	addi	r8,r2,111
 400bd8c:	11c01b84 	addi	r7,r2,110
 400bd90:	4209883a 	add	r4,r8,r8
 400bd94:	003edd06 	br	400b90c <__alt_data_end+0xfc00b90c>
 400bd98:	3804d27a 	srli	r2,r7,9
 400bd9c:	00c00104 	movi	r3,4
 400bda0:	1880442e 	bgeu	r3,r2,400beb4 <_malloc_r+0x620>
 400bda4:	00c00504 	movi	r3,20
 400bda8:	18808136 	bltu	r3,r2,400bfb0 <_malloc_r+0x71c>
 400bdac:	11401704 	addi	r5,r2,92
 400bdb0:	10c016c4 	addi	r3,r2,91
 400bdb4:	294b883a 	add	r5,r5,r5
 400bdb8:	294b883a 	add	r5,r5,r5
 400bdbc:	294b883a 	add	r5,r5,r5
 400bdc0:	994b883a 	add	r5,r19,r5
 400bdc4:	28800017 	ldw	r2,0(r5)
 400bdc8:	018100b4 	movhi	r6,1026
 400bdcc:	297ffe04 	addi	r5,r5,-8
 400bdd0:	31ad2704 	addi	r6,r6,-19300
 400bdd4:	28806526 	beq	r5,r2,400bf6c <_malloc_r+0x6d8>
 400bdd8:	01bfff04 	movi	r6,-4
 400bddc:	10c00117 	ldw	r3,4(r2)
 400bde0:	1986703a 	and	r3,r3,r6
 400bde4:	38c0022e 	bgeu	r7,r3,400bdf0 <_malloc_r+0x55c>
 400bde8:	10800217 	ldw	r2,8(r2)
 400bdec:	28bffb1e 	bne	r5,r2,400bddc <__alt_data_end+0xfc00bddc>
 400bdf0:	11400317 	ldw	r5,12(r2)
 400bdf4:	98c00117 	ldw	r3,4(r19)
 400bdf8:	81400315 	stw	r5,12(r16)
 400bdfc:	80800215 	stw	r2,8(r16)
 400be00:	2c000215 	stw	r16,8(r5)
 400be04:	14000315 	stw	r16,12(r2)
 400be08:	003ef806 	br	400b9ec <__alt_data_end+0xfc00b9ec>
 400be0c:	88c00054 	ori	r3,r17,1
 400be10:	80c00115 	stw	r3,4(r16)
 400be14:	8463883a 	add	r17,r16,r17
 400be18:	34400515 	stw	r17,20(r6)
 400be1c:	34400415 	stw	r17,16(r6)
 400be20:	10c00054 	ori	r3,r2,1
 400be24:	8a000315 	stw	r8,12(r17)
 400be28:	8a000215 	stw	r8,8(r17)
 400be2c:	88c00115 	stw	r3,4(r17)
 400be30:	88a3883a 	add	r17,r17,r2
 400be34:	88800015 	stw	r2,0(r17)
 400be38:	9009883a 	mov	r4,r18
 400be3c:	40163480 	call	4016348 <__malloc_unlock>
 400be40:	80800204 	addi	r2,r16,8
 400be44:	003f3c06 	br	400bb38 <__alt_data_end+0xfc00bb38>
 400be48:	30c00117 	ldw	r3,4(r6)
 400be4c:	003ee706 	br	400b9ec <__alt_data_end+0xfc00b9ec>
 400be50:	5ac00044 	addi	r11,r11,1
 400be54:	588000cc 	andi	r2,r11,3
 400be58:	31800204 	addi	r6,r6,8
 400be5c:	103efd1e 	bne	r2,zero,400ba54 <__alt_data_end+0xfc00ba54>
 400be60:	00002406 	br	400bef4 <_malloc_r+0x660>
 400be64:	14000317 	ldw	r16,12(r2)
 400be68:	143f251e 	bne	r2,r16,400bb00 <__alt_data_end+0xfc00bb00>
 400be6c:	21000084 	addi	r4,r4,2
 400be70:	003ebc06 	br	400b964 <__alt_data_end+0xfc00b964>
 400be74:	8085883a 	add	r2,r16,r2
 400be78:	10c00117 	ldw	r3,4(r2)
 400be7c:	81000317 	ldw	r4,12(r16)
 400be80:	81400217 	ldw	r5,8(r16)
 400be84:	18c00054 	ori	r3,r3,1
 400be88:	10c00115 	stw	r3,4(r2)
 400be8c:	29000315 	stw	r4,12(r5)
 400be90:	21400215 	stw	r5,8(r4)
 400be94:	9009883a 	mov	r4,r18
 400be98:	40163480 	call	4016348 <__malloc_unlock>
 400be9c:	80800204 	addi	r2,r16,8
 400bea0:	003f2506 	br	400bb38 <__alt_data_end+0xfc00bb38>
 400bea4:	12001704 	addi	r8,r2,92
 400bea8:	11c016c4 	addi	r7,r2,91
 400beac:	4209883a 	add	r4,r8,r8
 400beb0:	003e9606 	br	400b90c <__alt_data_end+0xfc00b90c>
 400beb4:	3804d1ba 	srli	r2,r7,6
 400beb8:	11400e44 	addi	r5,r2,57
 400bebc:	10c00e04 	addi	r3,r2,56
 400bec0:	294b883a 	add	r5,r5,r5
 400bec4:	003fbc06 	br	400bdb8 <__alt_data_end+0xfc00bdb8>
 400bec8:	84ff5926 	beq	r16,r19,400bc30 <__alt_data_end+0xfc00bc30>
 400becc:	008100b4 	movhi	r2,1026
 400bed0:	10ad2704 	addi	r2,r2,-19300
 400bed4:	14000217 	ldw	r16,8(r2)
 400bed8:	00bfff04 	movi	r2,-4
 400bedc:	80c00117 	ldw	r3,4(r16)
 400bee0:	1886703a 	and	r3,r3,r2
 400bee4:	003f9106 	br	400bd2c <__alt_data_end+0xfc00bd2c>
 400bee8:	60800217 	ldw	r2,8(r12)
 400beec:	213fffc4 	addi	r4,r4,-1
 400bef0:	1300651e 	bne	r2,r12,400c088 <_malloc_r+0x7f4>
 400bef4:	208000cc 	andi	r2,r4,3
 400bef8:	633ffe04 	addi	r12,r12,-8
 400befc:	103ffa1e 	bne	r2,zero,400bee8 <__alt_data_end+0xfc00bee8>
 400bf00:	98800117 	ldw	r2,4(r19)
 400bf04:	0146303a 	nor	r3,zero,r5
 400bf08:	1884703a 	and	r2,r3,r2
 400bf0c:	98800115 	stw	r2,4(r19)
 400bf10:	294b883a 	add	r5,r5,r5
 400bf14:	117f2836 	bltu	r2,r5,400bbb8 <__alt_data_end+0xfc00bbb8>
 400bf18:	283f2726 	beq	r5,zero,400bbb8 <__alt_data_end+0xfc00bbb8>
 400bf1c:	2886703a 	and	r3,r5,r2
 400bf20:	5809883a 	mov	r4,r11
 400bf24:	183ec31e 	bne	r3,zero,400ba34 <__alt_data_end+0xfc00ba34>
 400bf28:	294b883a 	add	r5,r5,r5
 400bf2c:	2886703a 	and	r3,r5,r2
 400bf30:	21000104 	addi	r4,r4,4
 400bf34:	183ffc26 	beq	r3,zero,400bf28 <__alt_data_end+0xfc00bf28>
 400bf38:	003ebe06 	br	400ba34 <__alt_data_end+0xfc00ba34>
 400bf3c:	00c05504 	movi	r3,340
 400bf40:	18801236 	bltu	r3,r2,400bf8c <_malloc_r+0x6f8>
 400bf44:	8804d3fa 	srli	r2,r17,15
 400bf48:	12001e04 	addi	r8,r2,120
 400bf4c:	11c01dc4 	addi	r7,r2,119
 400bf50:	4209883a 	add	r4,r8,r8
 400bf54:	003e6d06 	br	400b90c <__alt_data_end+0xfc00b90c>
 400bf58:	00c40004 	movi	r3,4096
 400bf5c:	003f4606 	br	400bc78 <__alt_data_end+0xfc00bc78>
 400bf60:	00800044 	movi	r2,1
 400bf64:	a0800115 	stw	r2,4(r20)
 400bf68:	003f7406 	br	400bd3c <__alt_data_end+0xfc00bd3c>
 400bf6c:	1805d0ba 	srai	r2,r3,2
 400bf70:	01c00044 	movi	r7,1
 400bf74:	30c00117 	ldw	r3,4(r6)
 400bf78:	388e983a 	sll	r7,r7,r2
 400bf7c:	2805883a 	mov	r2,r5
 400bf80:	38c6b03a 	or	r3,r7,r3
 400bf84:	30c00115 	stw	r3,4(r6)
 400bf88:	003f9b06 	br	400bdf8 <__alt_data_end+0xfc00bdf8>
 400bf8c:	00c15504 	movi	r3,1364
 400bf90:	18801a36 	bltu	r3,r2,400bffc <_malloc_r+0x768>
 400bf94:	8804d4ba 	srli	r2,r17,18
 400bf98:	12001f44 	addi	r8,r2,125
 400bf9c:	11c01f04 	addi	r7,r2,124
 400bfa0:	4209883a 	add	r4,r8,r8
 400bfa4:	003e5906 	br	400b90c <__alt_data_end+0xfc00b90c>
 400bfa8:	ad400404 	addi	r21,r21,16
 400bfac:	003f1706 	br	400bc0c <__alt_data_end+0xfc00bc0c>
 400bfb0:	00c01504 	movi	r3,84
 400bfb4:	18802336 	bltu	r3,r2,400c044 <_malloc_r+0x7b0>
 400bfb8:	3804d33a 	srli	r2,r7,12
 400bfbc:	11401bc4 	addi	r5,r2,111
 400bfc0:	10c01b84 	addi	r3,r2,110
 400bfc4:	294b883a 	add	r5,r5,r5
 400bfc8:	003f7b06 	br	400bdb8 <__alt_data_end+0xfc00bdb8>
 400bfcc:	9c000217 	ldw	r16,8(r19)
 400bfd0:	00bfff04 	movi	r2,-4
 400bfd4:	80c00117 	ldw	r3,4(r16)
 400bfd8:	1886703a 	and	r3,r3,r2
 400bfdc:	003f5306 	br	400bd2c <__alt_data_end+0xfc00bd2c>
 400bfe0:	3083ffcc 	andi	r2,r6,4095
 400bfe4:	103f181e 	bne	r2,zero,400bc48 <__alt_data_end+0xfc00bc48>
 400bfe8:	99000217 	ldw	r4,8(r19)
 400bfec:	b545883a 	add	r2,r22,r21
 400bff0:	10800054 	ori	r2,r2,1
 400bff4:	20800115 	stw	r2,4(r4)
 400bff8:	003f3e06 	br	400bcf4 <__alt_data_end+0xfc00bcf4>
 400bffc:	01003f84 	movi	r4,254
 400c000:	02001fc4 	movi	r8,127
 400c004:	01c01f84 	movi	r7,126
 400c008:	003e4006 	br	400b90c <__alt_data_end+0xfc00b90c>
 400c00c:	008100b4 	movhi	r2,1026
 400c010:	10b2de04 	addi	r2,r2,-13448
 400c014:	15000015 	stw	r20,0(r2)
 400c018:	003f1106 	br	400bc60 <__alt_data_end+0xfc00bc60>
 400c01c:	00800044 	movi	r2,1
 400c020:	002b883a 	mov	r21,zero
 400c024:	003f1f06 	br	400bca4 <__alt_data_end+0xfc00bca4>
 400c028:	81400204 	addi	r5,r16,8
 400c02c:	9009883a 	mov	r4,r18
 400c030:	40109480 	call	4010948 <_free_r>
 400c034:	008100b4 	movhi	r2,1026
 400c038:	10b9e804 	addi	r2,r2,-6240
 400c03c:	10c00017 	ldw	r3,0(r2)
 400c040:	003f2c06 	br	400bcf4 <__alt_data_end+0xfc00bcf4>
 400c044:	00c05504 	movi	r3,340
 400c048:	18800536 	bltu	r3,r2,400c060 <_malloc_r+0x7cc>
 400c04c:	3804d3fa 	srli	r2,r7,15
 400c050:	11401e04 	addi	r5,r2,120
 400c054:	10c01dc4 	addi	r3,r2,119
 400c058:	294b883a 	add	r5,r5,r5
 400c05c:	003f5606 	br	400bdb8 <__alt_data_end+0xfc00bdb8>
 400c060:	00c15504 	movi	r3,1364
 400c064:	18800536 	bltu	r3,r2,400c07c <_malloc_r+0x7e8>
 400c068:	3804d4ba 	srli	r2,r7,18
 400c06c:	11401f44 	addi	r5,r2,125
 400c070:	10c01f04 	addi	r3,r2,124
 400c074:	294b883a 	add	r5,r5,r5
 400c078:	003f4f06 	br	400bdb8 <__alt_data_end+0xfc00bdb8>
 400c07c:	01403f84 	movi	r5,254
 400c080:	00c01f84 	movi	r3,126
 400c084:	003f4c06 	br	400bdb8 <__alt_data_end+0xfc00bdb8>
 400c088:	98800117 	ldw	r2,4(r19)
 400c08c:	003fa006 	br	400bf10 <__alt_data_end+0xfc00bf10>
 400c090:	8808d0fa 	srli	r4,r17,3
 400c094:	20800044 	addi	r2,r4,1
 400c098:	1085883a 	add	r2,r2,r2
 400c09c:	003e9006 	br	400bae0 <__alt_data_end+0xfc00bae0>

0400c0a0 <memcpy>:
 400c0a0:	defffd04 	addi	sp,sp,-12
 400c0a4:	dfc00215 	stw	ra,8(sp)
 400c0a8:	dc400115 	stw	r17,4(sp)
 400c0ac:	dc000015 	stw	r16,0(sp)
 400c0b0:	00c003c4 	movi	r3,15
 400c0b4:	2005883a 	mov	r2,r4
 400c0b8:	1980452e 	bgeu	r3,r6,400c1d0 <memcpy+0x130>
 400c0bc:	2906b03a 	or	r3,r5,r4
 400c0c0:	18c000cc 	andi	r3,r3,3
 400c0c4:	1800441e 	bne	r3,zero,400c1d8 <memcpy+0x138>
 400c0c8:	347ffc04 	addi	r17,r6,-16
 400c0cc:	8822d13a 	srli	r17,r17,4
 400c0d0:	28c00104 	addi	r3,r5,4
 400c0d4:	23400104 	addi	r13,r4,4
 400c0d8:	8820913a 	slli	r16,r17,4
 400c0dc:	2b000204 	addi	r12,r5,8
 400c0e0:	22c00204 	addi	r11,r4,8
 400c0e4:	84000504 	addi	r16,r16,20
 400c0e8:	2a800304 	addi	r10,r5,12
 400c0ec:	22400304 	addi	r9,r4,12
 400c0f0:	2c21883a 	add	r16,r5,r16
 400c0f4:	2811883a 	mov	r8,r5
 400c0f8:	200f883a 	mov	r7,r4
 400c0fc:	41000017 	ldw	r4,0(r8)
 400c100:	1fc00017 	ldw	ra,0(r3)
 400c104:	63c00017 	ldw	r15,0(r12)
 400c108:	39000015 	stw	r4,0(r7)
 400c10c:	53800017 	ldw	r14,0(r10)
 400c110:	6fc00015 	stw	ra,0(r13)
 400c114:	5bc00015 	stw	r15,0(r11)
 400c118:	4b800015 	stw	r14,0(r9)
 400c11c:	18c00404 	addi	r3,r3,16
 400c120:	39c00404 	addi	r7,r7,16
 400c124:	42000404 	addi	r8,r8,16
 400c128:	6b400404 	addi	r13,r13,16
 400c12c:	63000404 	addi	r12,r12,16
 400c130:	5ac00404 	addi	r11,r11,16
 400c134:	52800404 	addi	r10,r10,16
 400c138:	4a400404 	addi	r9,r9,16
 400c13c:	1c3fef1e 	bne	r3,r16,400c0fc <__alt_data_end+0xfc00c0fc>
 400c140:	89c00044 	addi	r7,r17,1
 400c144:	380e913a 	slli	r7,r7,4
 400c148:	310003cc 	andi	r4,r6,15
 400c14c:	02c000c4 	movi	r11,3
 400c150:	11c7883a 	add	r3,r2,r7
 400c154:	29cb883a 	add	r5,r5,r7
 400c158:	5900212e 	bgeu	r11,r4,400c1e0 <memcpy+0x140>
 400c15c:	1813883a 	mov	r9,r3
 400c160:	2811883a 	mov	r8,r5
 400c164:	200f883a 	mov	r7,r4
 400c168:	42800017 	ldw	r10,0(r8)
 400c16c:	4a400104 	addi	r9,r9,4
 400c170:	39ffff04 	addi	r7,r7,-4
 400c174:	4abfff15 	stw	r10,-4(r9)
 400c178:	42000104 	addi	r8,r8,4
 400c17c:	59fffa36 	bltu	r11,r7,400c168 <__alt_data_end+0xfc00c168>
 400c180:	213fff04 	addi	r4,r4,-4
 400c184:	2008d0ba 	srli	r4,r4,2
 400c188:	318000cc 	andi	r6,r6,3
 400c18c:	21000044 	addi	r4,r4,1
 400c190:	2109883a 	add	r4,r4,r4
 400c194:	2109883a 	add	r4,r4,r4
 400c198:	1907883a 	add	r3,r3,r4
 400c19c:	290b883a 	add	r5,r5,r4
 400c1a0:	30000626 	beq	r6,zero,400c1bc <memcpy+0x11c>
 400c1a4:	198d883a 	add	r6,r3,r6
 400c1a8:	29c00003 	ldbu	r7,0(r5)
 400c1ac:	18c00044 	addi	r3,r3,1
 400c1b0:	29400044 	addi	r5,r5,1
 400c1b4:	19ffffc5 	stb	r7,-1(r3)
 400c1b8:	19bffb1e 	bne	r3,r6,400c1a8 <__alt_data_end+0xfc00c1a8>
 400c1bc:	dfc00217 	ldw	ra,8(sp)
 400c1c0:	dc400117 	ldw	r17,4(sp)
 400c1c4:	dc000017 	ldw	r16,0(sp)
 400c1c8:	dec00304 	addi	sp,sp,12
 400c1cc:	f800283a 	ret
 400c1d0:	2007883a 	mov	r3,r4
 400c1d4:	003ff206 	br	400c1a0 <__alt_data_end+0xfc00c1a0>
 400c1d8:	2007883a 	mov	r3,r4
 400c1dc:	003ff106 	br	400c1a4 <__alt_data_end+0xfc00c1a4>
 400c1e0:	200d883a 	mov	r6,r4
 400c1e4:	003fee06 	br	400c1a0 <__alt_data_end+0xfc00c1a0>

0400c1e8 <_printf_r>:
 400c1e8:	defffd04 	addi	sp,sp,-12
 400c1ec:	2805883a 	mov	r2,r5
 400c1f0:	dfc00015 	stw	ra,0(sp)
 400c1f4:	d9800115 	stw	r6,4(sp)
 400c1f8:	d9c00215 	stw	r7,8(sp)
 400c1fc:	21400217 	ldw	r5,8(r4)
 400c200:	d9c00104 	addi	r7,sp,4
 400c204:	100d883a 	mov	r6,r2
 400c208:	400c4140 	call	400c414 <___vfprintf_internal_r>
 400c20c:	dfc00017 	ldw	ra,0(sp)
 400c210:	dec00304 	addi	sp,sp,12
 400c214:	f800283a 	ret

0400c218 <printf>:
 400c218:	defffc04 	addi	sp,sp,-16
 400c21c:	dfc00015 	stw	ra,0(sp)
 400c220:	d9400115 	stw	r5,4(sp)
 400c224:	d9800215 	stw	r6,8(sp)
 400c228:	d9c00315 	stw	r7,12(sp)
 400c22c:	008100b4 	movhi	r2,1026
 400c230:	10b2dd04 	addi	r2,r2,-13452
 400c234:	10800017 	ldw	r2,0(r2)
 400c238:	200b883a 	mov	r5,r4
 400c23c:	d9800104 	addi	r6,sp,4
 400c240:	11000217 	ldw	r4,8(r2)
 400c244:	400e6f00 	call	400e6f0 <__vfprintf_internal>
 400c248:	dfc00017 	ldw	ra,0(sp)
 400c24c:	dec00404 	addi	sp,sp,16
 400c250:	f800283a 	ret

0400c254 <_puts_r>:
 400c254:	defff604 	addi	sp,sp,-40
 400c258:	dc000715 	stw	r16,28(sp)
 400c25c:	2021883a 	mov	r16,r4
 400c260:	2809883a 	mov	r4,r5
 400c264:	dc400815 	stw	r17,32(sp)
 400c268:	dfc00915 	stw	ra,36(sp)
 400c26c:	2823883a 	mov	r17,r5
 400c270:	400c37c0 	call	400c37c <strlen>
 400c274:	10c00044 	addi	r3,r2,1
 400c278:	d8800115 	stw	r2,4(sp)
 400c27c:	008100b4 	movhi	r2,1026
 400c280:	10ab8804 	addi	r2,r2,-20960
 400c284:	d8800215 	stw	r2,8(sp)
 400c288:	00800044 	movi	r2,1
 400c28c:	d8800315 	stw	r2,12(sp)
 400c290:	00800084 	movi	r2,2
 400c294:	dc400015 	stw	r17,0(sp)
 400c298:	d8c00615 	stw	r3,24(sp)
 400c29c:	dec00415 	stw	sp,16(sp)
 400c2a0:	d8800515 	stw	r2,20(sp)
 400c2a4:	80000226 	beq	r16,zero,400c2b0 <_puts_r+0x5c>
 400c2a8:	80800e17 	ldw	r2,56(r16)
 400c2ac:	10001426 	beq	r2,zero,400c300 <_puts_r+0xac>
 400c2b0:	81400217 	ldw	r5,8(r16)
 400c2b4:	2880030b 	ldhu	r2,12(r5)
 400c2b8:	10c8000c 	andi	r3,r2,8192
 400c2bc:	1800061e 	bne	r3,zero,400c2d8 <_puts_r+0x84>
 400c2c0:	29001917 	ldw	r4,100(r5)
 400c2c4:	00f7ffc4 	movi	r3,-8193
 400c2c8:	10880014 	ori	r2,r2,8192
 400c2cc:	20c6703a 	and	r3,r4,r3
 400c2d0:	2880030d 	sth	r2,12(r5)
 400c2d4:	28c01915 	stw	r3,100(r5)
 400c2d8:	d9800404 	addi	r6,sp,16
 400c2dc:	8009883a 	mov	r4,r16
 400c2e0:	4010c580 	call	4010c58 <__sfvwrite_r>
 400c2e4:	1000091e 	bne	r2,zero,400c30c <_puts_r+0xb8>
 400c2e8:	00800284 	movi	r2,10
 400c2ec:	dfc00917 	ldw	ra,36(sp)
 400c2f0:	dc400817 	ldw	r17,32(sp)
 400c2f4:	dc000717 	ldw	r16,28(sp)
 400c2f8:	dec00a04 	addi	sp,sp,40
 400c2fc:	f800283a 	ret
 400c300:	8009883a 	mov	r4,r16
 400c304:	40107d40 	call	40107d4 <__sinit>
 400c308:	003fe906 	br	400c2b0 <__alt_data_end+0xfc00c2b0>
 400c30c:	00bfffc4 	movi	r2,-1
 400c310:	003ff606 	br	400c2ec <__alt_data_end+0xfc00c2ec>

0400c314 <puts>:
 400c314:	008100b4 	movhi	r2,1026
 400c318:	10b2dd04 	addi	r2,r2,-13452
 400c31c:	200b883a 	mov	r5,r4
 400c320:	11000017 	ldw	r4,0(r2)
 400c324:	400c2541 	jmpi	400c254 <_puts_r>

0400c328 <_sbrk_r>:
 400c328:	defffd04 	addi	sp,sp,-12
 400c32c:	dc000015 	stw	r16,0(sp)
 400c330:	040100b4 	movhi	r16,1026
 400c334:	dc400115 	stw	r17,4(sp)
 400c338:	8439d304 	addi	r16,r16,-6324
 400c33c:	2023883a 	mov	r17,r4
 400c340:	2809883a 	mov	r4,r5
 400c344:	dfc00215 	stw	ra,8(sp)
 400c348:	80000015 	stw	zero,0(r16)
 400c34c:	40167980 	call	4016798 <sbrk>
 400c350:	00ffffc4 	movi	r3,-1
 400c354:	10c00526 	beq	r2,r3,400c36c <_sbrk_r+0x44>
 400c358:	dfc00217 	ldw	ra,8(sp)
 400c35c:	dc400117 	ldw	r17,4(sp)
 400c360:	dc000017 	ldw	r16,0(sp)
 400c364:	dec00304 	addi	sp,sp,12
 400c368:	f800283a 	ret
 400c36c:	80c00017 	ldw	r3,0(r16)
 400c370:	183ff926 	beq	r3,zero,400c358 <__alt_data_end+0xfc00c358>
 400c374:	88c00015 	stw	r3,0(r17)
 400c378:	003ff706 	br	400c358 <__alt_data_end+0xfc00c358>

0400c37c <strlen>:
 400c37c:	208000cc 	andi	r2,r4,3
 400c380:	10002026 	beq	r2,zero,400c404 <strlen+0x88>
 400c384:	20800007 	ldb	r2,0(r4)
 400c388:	10002026 	beq	r2,zero,400c40c <strlen+0x90>
 400c38c:	2005883a 	mov	r2,r4
 400c390:	00000206 	br	400c39c <strlen+0x20>
 400c394:	10c00007 	ldb	r3,0(r2)
 400c398:	18001826 	beq	r3,zero,400c3fc <strlen+0x80>
 400c39c:	10800044 	addi	r2,r2,1
 400c3a0:	10c000cc 	andi	r3,r2,3
 400c3a4:	183ffb1e 	bne	r3,zero,400c394 <__alt_data_end+0xfc00c394>
 400c3a8:	10c00017 	ldw	r3,0(r2)
 400c3ac:	01ffbff4 	movhi	r7,65279
 400c3b0:	39ffbfc4 	addi	r7,r7,-257
 400c3b4:	00ca303a 	nor	r5,zero,r3
 400c3b8:	01a02074 	movhi	r6,32897
 400c3bc:	19c7883a 	add	r3,r3,r7
 400c3c0:	31a02004 	addi	r6,r6,-32640
 400c3c4:	1946703a 	and	r3,r3,r5
 400c3c8:	1986703a 	and	r3,r3,r6
 400c3cc:	1800091e 	bne	r3,zero,400c3f4 <strlen+0x78>
 400c3d0:	10800104 	addi	r2,r2,4
 400c3d4:	10c00017 	ldw	r3,0(r2)
 400c3d8:	19cb883a 	add	r5,r3,r7
 400c3dc:	00c6303a 	nor	r3,zero,r3
 400c3e0:	28c6703a 	and	r3,r5,r3
 400c3e4:	1986703a 	and	r3,r3,r6
 400c3e8:	183ff926 	beq	r3,zero,400c3d0 <__alt_data_end+0xfc00c3d0>
 400c3ec:	00000106 	br	400c3f4 <strlen+0x78>
 400c3f0:	10800044 	addi	r2,r2,1
 400c3f4:	10c00007 	ldb	r3,0(r2)
 400c3f8:	183ffd1e 	bne	r3,zero,400c3f0 <__alt_data_end+0xfc00c3f0>
 400c3fc:	1105c83a 	sub	r2,r2,r4
 400c400:	f800283a 	ret
 400c404:	2005883a 	mov	r2,r4
 400c408:	003fe706 	br	400c3a8 <__alt_data_end+0xfc00c3a8>
 400c40c:	0005883a 	mov	r2,zero
 400c410:	f800283a 	ret

0400c414 <___vfprintf_internal_r>:
 400c414:	deffb804 	addi	sp,sp,-288
 400c418:	dfc04715 	stw	ra,284(sp)
 400c41c:	ddc04515 	stw	r23,276(sp)
 400c420:	dd404315 	stw	r21,268(sp)
 400c424:	d9002d15 	stw	r4,180(sp)
 400c428:	282f883a 	mov	r23,r5
 400c42c:	302b883a 	mov	r21,r6
 400c430:	d9c02e15 	stw	r7,184(sp)
 400c434:	df004615 	stw	fp,280(sp)
 400c438:	dd804415 	stw	r22,272(sp)
 400c43c:	dd004215 	stw	r20,264(sp)
 400c440:	dcc04115 	stw	r19,260(sp)
 400c444:	dc804015 	stw	r18,256(sp)
 400c448:	dc403f15 	stw	r17,252(sp)
 400c44c:	dc003e15 	stw	r16,248(sp)
 400c450:	40113540 	call	4011354 <_localeconv_r>
 400c454:	10800017 	ldw	r2,0(r2)
 400c458:	1009883a 	mov	r4,r2
 400c45c:	d8803415 	stw	r2,208(sp)
 400c460:	400c37c0 	call	400c37c <strlen>
 400c464:	d8803715 	stw	r2,220(sp)
 400c468:	d8802d17 	ldw	r2,180(sp)
 400c46c:	10000226 	beq	r2,zero,400c478 <___vfprintf_internal_r+0x64>
 400c470:	10800e17 	ldw	r2,56(r2)
 400c474:	1000fb26 	beq	r2,zero,400c864 <___vfprintf_internal_r+0x450>
 400c478:	b880030b 	ldhu	r2,12(r23)
 400c47c:	10c8000c 	andi	r3,r2,8192
 400c480:	1800061e 	bne	r3,zero,400c49c <___vfprintf_internal_r+0x88>
 400c484:	b9001917 	ldw	r4,100(r23)
 400c488:	00f7ffc4 	movi	r3,-8193
 400c48c:	10880014 	ori	r2,r2,8192
 400c490:	20c6703a 	and	r3,r4,r3
 400c494:	b880030d 	sth	r2,12(r23)
 400c498:	b8c01915 	stw	r3,100(r23)
 400c49c:	10c0020c 	andi	r3,r2,8
 400c4a0:	1800c326 	beq	r3,zero,400c7b0 <___vfprintf_internal_r+0x39c>
 400c4a4:	b8c00417 	ldw	r3,16(r23)
 400c4a8:	1800c126 	beq	r3,zero,400c7b0 <___vfprintf_internal_r+0x39c>
 400c4ac:	1080068c 	andi	r2,r2,26
 400c4b0:	00c00284 	movi	r3,10
 400c4b4:	10c0c626 	beq	r2,r3,400c7d0 <___vfprintf_internal_r+0x3bc>
 400c4b8:	d8c00404 	addi	r3,sp,16
 400c4bc:	050100b4 	movhi	r20,1026
 400c4c0:	d9001e04 	addi	r4,sp,120
 400c4c4:	a52b9984 	addi	r20,r20,-20890
 400c4c8:	d8c01e15 	stw	r3,120(sp)
 400c4cc:	d8002015 	stw	zero,128(sp)
 400c4d0:	d8001f15 	stw	zero,124(sp)
 400c4d4:	d8003315 	stw	zero,204(sp)
 400c4d8:	d8003615 	stw	zero,216(sp)
 400c4dc:	d8003815 	stw	zero,224(sp)
 400c4e0:	1811883a 	mov	r8,r3
 400c4e4:	d8003915 	stw	zero,228(sp)
 400c4e8:	d8003a15 	stw	zero,232(sp)
 400c4ec:	d8002f15 	stw	zero,188(sp)
 400c4f0:	d9002815 	stw	r4,160(sp)
 400c4f4:	a8800007 	ldb	r2,0(r21)
 400c4f8:	10028b26 	beq	r2,zero,400cf28 <___vfprintf_internal_r+0xb14>
 400c4fc:	00c00944 	movi	r3,37
 400c500:	a823883a 	mov	r17,r21
 400c504:	10c0021e 	bne	r2,r3,400c510 <___vfprintf_internal_r+0xfc>
 400c508:	00001406 	br	400c55c <___vfprintf_internal_r+0x148>
 400c50c:	10c00326 	beq	r2,r3,400c51c <___vfprintf_internal_r+0x108>
 400c510:	8c400044 	addi	r17,r17,1
 400c514:	88800007 	ldb	r2,0(r17)
 400c518:	103ffc1e 	bne	r2,zero,400c50c <__alt_data_end+0xfc00c50c>
 400c51c:	8d61c83a 	sub	r16,r17,r21
 400c520:	80000e26 	beq	r16,zero,400c55c <___vfprintf_internal_r+0x148>
 400c524:	d8c02017 	ldw	r3,128(sp)
 400c528:	d8801f17 	ldw	r2,124(sp)
 400c52c:	45400015 	stw	r21,0(r8)
 400c530:	1c07883a 	add	r3,r3,r16
 400c534:	10800044 	addi	r2,r2,1
 400c538:	d8c02015 	stw	r3,128(sp)
 400c53c:	44000115 	stw	r16,4(r8)
 400c540:	d8801f15 	stw	r2,124(sp)
 400c544:	00c001c4 	movi	r3,7
 400c548:	1880a916 	blt	r3,r2,400c7f0 <___vfprintf_internal_r+0x3dc>
 400c54c:	42000204 	addi	r8,r8,8
 400c550:	d9402f17 	ldw	r5,188(sp)
 400c554:	2c0b883a 	add	r5,r5,r16
 400c558:	d9402f15 	stw	r5,188(sp)
 400c55c:	88800007 	ldb	r2,0(r17)
 400c560:	1000aa26 	beq	r2,zero,400c80c <___vfprintf_internal_r+0x3f8>
 400c564:	8d400044 	addi	r21,r17,1
 400c568:	8c400047 	ldb	r17,1(r17)
 400c56c:	0021883a 	mov	r16,zero
 400c570:	00bfffc4 	movi	r2,-1
 400c574:	0025883a 	mov	r18,zero
 400c578:	dc002905 	stb	r16,164(sp)
 400c57c:	d8002785 	stb	zero,158(sp)
 400c580:	d8002b05 	stb	zero,172(sp)
 400c584:	d8802a15 	stw	r2,168(sp)
 400c588:	d8003115 	stw	zero,196(sp)
 400c58c:	04c01604 	movi	r19,88
 400c590:	05800244 	movi	r22,9
 400c594:	9021883a 	mov	r16,r18
 400c598:	4039883a 	mov	fp,r8
 400c59c:	ad400044 	addi	r21,r21,1
 400c5a0:	88bff804 	addi	r2,r17,-32
 400c5a4:	98833236 	bltu	r19,r2,400d270 <___vfprintf_internal_r+0xe5c>
 400c5a8:	100490ba 	slli	r2,r2,2
 400c5ac:	00c10074 	movhi	r3,1025
 400c5b0:	18f17004 	addi	r3,r3,-14912
 400c5b4:	10c5883a 	add	r2,r2,r3
 400c5b8:	10800017 	ldw	r2,0(r2)
 400c5bc:	1000683a 	jmp	r2
 400c5c0:	0400d168 	cmpgeui	r16,zero,837
 400c5c4:	0400d270 	cmpltui	r16,zero,841
 400c5c8:	0400d270 	cmpltui	r16,zero,841
 400c5cc:	0400d188 	cmpgei	r16,zero,838
 400c5d0:	0400d270 	cmpltui	r16,zero,841
 400c5d4:	0400d270 	cmpltui	r16,zero,841
 400c5d8:	0400d270 	cmpltui	r16,zero,841
 400c5dc:	0400d270 	cmpltui	r16,zero,841
 400c5e0:	0400d270 	cmpltui	r16,zero,841
 400c5e4:	0400d270 	cmpltui	r16,zero,841
 400c5e8:	0400c870 	cmpltui	r16,zero,801
 400c5ec:	0400d078 	rdprs	r16,zero,833
 400c5f0:	0400d270 	cmpltui	r16,zero,841
 400c5f4:	0400c734 	movhi	r16,796
 400c5f8:	0400c894 	movui	r16,802
 400c5fc:	0400d270 	cmpltui	r16,zero,841
 400c600:	0400c8e4 	muli	r16,zero,803
 400c604:	0400c8f0 	cmpltui	r16,zero,803
 400c608:	0400c8f0 	cmpltui	r16,zero,803
 400c60c:	0400c8f0 	cmpltui	r16,zero,803
 400c610:	0400c8f0 	cmpltui	r16,zero,803
 400c614:	0400c8f0 	cmpltui	r16,zero,803
 400c618:	0400c8f0 	cmpltui	r16,zero,803
 400c61c:	0400c8f0 	cmpltui	r16,zero,803
 400c620:	0400c8f0 	cmpltui	r16,zero,803
 400c624:	0400c8f0 	cmpltui	r16,zero,803
 400c628:	0400d270 	cmpltui	r16,zero,841
 400c62c:	0400d270 	cmpltui	r16,zero,841
 400c630:	0400d270 	cmpltui	r16,zero,841
 400c634:	0400d270 	cmpltui	r16,zero,841
 400c638:	0400d270 	cmpltui	r16,zero,841
 400c63c:	0400d270 	cmpltui	r16,zero,841
 400c640:	0400d270 	cmpltui	r16,zero,841
 400c644:	0400d270 	cmpltui	r16,zero,841
 400c648:	0400d270 	cmpltui	r16,zero,841
 400c64c:	0400d270 	cmpltui	r16,zero,841
 400c650:	0400c92c 	andhi	r16,zero,804
 400c654:	0400c9f4 	movhi	r16,807
 400c658:	0400d270 	cmpltui	r16,zero,841
 400c65c:	0400c9f4 	movhi	r16,807
 400c660:	0400d270 	cmpltui	r16,zero,841
 400c664:	0400d270 	cmpltui	r16,zero,841
 400c668:	0400d270 	cmpltui	r16,zero,841
 400c66c:	0400d270 	cmpltui	r16,zero,841
 400c670:	0400caa0 	cmpeqi	r16,zero,810
 400c674:	0400d270 	cmpltui	r16,zero,841
 400c678:	0400d270 	cmpltui	r16,zero,841
 400c67c:	0400caac 	andhi	r16,zero,810
 400c680:	0400d270 	cmpltui	r16,zero,841
 400c684:	0400d270 	cmpltui	r16,zero,841
 400c688:	0400d270 	cmpltui	r16,zero,841
 400c68c:	0400d270 	cmpltui	r16,zero,841
 400c690:	0400d270 	cmpltui	r16,zero,841
 400c694:	0400cf30 	cmpltui	r16,zero,828
 400c698:	0400d270 	cmpltui	r16,zero,841
 400c69c:	0400d270 	cmpltui	r16,zero,841
 400c6a0:	0400cf9c 	xori	r16,zero,830
 400c6a4:	0400d270 	cmpltui	r16,zero,841
 400c6a8:	0400d270 	cmpltui	r16,zero,841
 400c6ac:	0400d270 	cmpltui	r16,zero,841
 400c6b0:	0400d270 	cmpltui	r16,zero,841
 400c6b4:	0400d270 	cmpltui	r16,zero,841
 400c6b8:	0400d270 	cmpltui	r16,zero,841
 400c6bc:	0400d270 	cmpltui	r16,zero,841
 400c6c0:	0400d270 	cmpltui	r16,zero,841
 400c6c4:	0400d270 	cmpltui	r16,zero,841
 400c6c8:	0400d270 	cmpltui	r16,zero,841
 400c6cc:	0400d214 	movui	r16,840
 400c6d0:	0400d194 	movui	r16,838
 400c6d4:	0400c9f4 	movhi	r16,807
 400c6d8:	0400c9f4 	movhi	r16,807
 400c6dc:	0400c9f4 	movhi	r16,807
 400c6e0:	0400d1b4 	movhi	r16,838
 400c6e4:	0400d194 	movui	r16,838
 400c6e8:	0400d270 	cmpltui	r16,zero,841
 400c6ec:	0400d270 	cmpltui	r16,zero,841
 400c6f0:	0400d1c0 	call	400d1c <__alt_mem_sdram-0x3bff2e4>
 400c6f4:	0400d270 	cmpltui	r16,zero,841
 400c6f8:	0400d1d4 	movui	r16,839
 400c6fc:	0400d058 	cmpnei	r16,zero,833
 400c700:	0400c740 	call	400c74 <__alt_mem_sdram-0x3bff38c>
 400c704:	0400d090 	cmplti	r16,zero,834
 400c708:	0400d270 	cmpltui	r16,zero,841
 400c70c:	0400d09c 	xori	r16,zero,834
 400c710:	0400d270 	cmpltui	r16,zero,841
 400c714:	0400d100 	call	400d10 <__alt_mem_sdram-0x3bff2f0>
 400c718:	0400d270 	cmpltui	r16,zero,841
 400c71c:	0400d270 	cmpltui	r16,zero,841
 400c720:	0400d120 	cmpeqi	r16,zero,836
 400c724:	d8c03117 	ldw	r3,196(sp)
 400c728:	d8802e15 	stw	r2,184(sp)
 400c72c:	00c7c83a 	sub	r3,zero,r3
 400c730:	d8c03115 	stw	r3,196(sp)
 400c734:	84000114 	ori	r16,r16,4
 400c738:	ac400007 	ldb	r17,0(r21)
 400c73c:	003f9706 	br	400c59c <__alt_data_end+0xfc00c59c>
 400c740:	00800c04 	movi	r2,48
 400c744:	d8802705 	stb	r2,156(sp)
 400c748:	00801e04 	movi	r2,120
 400c74c:	d8802745 	stb	r2,157(sp)
 400c750:	d9002a17 	ldw	r4,168(sp)
 400c754:	d8802e17 	ldw	r2,184(sp)
 400c758:	d8002785 	stb	zero,158(sp)
 400c75c:	e011883a 	mov	r8,fp
 400c760:	10c00104 	addi	r3,r2,4
 400c764:	14c00017 	ldw	r19,0(r2)
 400c768:	002d883a 	mov	r22,zero
 400c76c:	80800094 	ori	r2,r16,2
 400c770:	2002ca16 	blt	r4,zero,400d29c <___vfprintf_internal_r+0xe88>
 400c774:	00bfdfc4 	movi	r2,-129
 400c778:	80a4703a 	and	r18,r16,r2
 400c77c:	d8c02e15 	stw	r3,184(sp)
 400c780:	94800094 	ori	r18,r18,2
 400c784:	9802b41e 	bne	r19,zero,400d258 <___vfprintf_internal_r+0xe44>
 400c788:	014100b4 	movhi	r5,1026
 400c78c:	296b9204 	addi	r5,r5,-20920
 400c790:	d9403915 	stw	r5,228(sp)
 400c794:	04401e04 	movi	r17,120
 400c798:	d8802a17 	ldw	r2,168(sp)
 400c79c:	0039883a 	mov	fp,zero
 400c7a0:	1001fa26 	beq	r2,zero,400cf8c <___vfprintf_internal_r+0xb78>
 400c7a4:	0027883a 	mov	r19,zero
 400c7a8:	002d883a 	mov	r22,zero
 400c7ac:	00021906 	br	400d014 <___vfprintf_internal_r+0xc00>
 400c7b0:	d9002d17 	ldw	r4,180(sp)
 400c7b4:	b80b883a 	mov	r5,r23
 400c7b8:	400e7c80 	call	400e7c8 <__swsetup_r>
 400c7bc:	1005dc1e 	bne	r2,zero,400df30 <___vfprintf_internal_r+0x1b1c>
 400c7c0:	b880030b 	ldhu	r2,12(r23)
 400c7c4:	00c00284 	movi	r3,10
 400c7c8:	1080068c 	andi	r2,r2,26
 400c7cc:	10ff3a1e 	bne	r2,r3,400c4b8 <__alt_data_end+0xfc00c4b8>
 400c7d0:	b880038f 	ldh	r2,14(r23)
 400c7d4:	103f3816 	blt	r2,zero,400c4b8 <__alt_data_end+0xfc00c4b8>
 400c7d8:	d9c02e17 	ldw	r7,184(sp)
 400c7dc:	d9002d17 	ldw	r4,180(sp)
 400c7e0:	a80d883a 	mov	r6,r21
 400c7e4:	b80b883a 	mov	r5,r23
 400c7e8:	400e70c0 	call	400e70c <__sbprintf>
 400c7ec:	00001106 	br	400c834 <___vfprintf_internal_r+0x420>
 400c7f0:	d9002d17 	ldw	r4,180(sp)
 400c7f4:	d9801e04 	addi	r6,sp,120
 400c7f8:	b80b883a 	mov	r5,r23
 400c7fc:	40131d80 	call	40131d8 <__sprint_r>
 400c800:	1000081e 	bne	r2,zero,400c824 <___vfprintf_internal_r+0x410>
 400c804:	da000404 	addi	r8,sp,16
 400c808:	003f5106 	br	400c550 <__alt_data_end+0xfc00c550>
 400c80c:	d8802017 	ldw	r2,128(sp)
 400c810:	10000426 	beq	r2,zero,400c824 <___vfprintf_internal_r+0x410>
 400c814:	d9002d17 	ldw	r4,180(sp)
 400c818:	d9801e04 	addi	r6,sp,120
 400c81c:	b80b883a 	mov	r5,r23
 400c820:	40131d80 	call	40131d8 <__sprint_r>
 400c824:	b880030b 	ldhu	r2,12(r23)
 400c828:	1080100c 	andi	r2,r2,64
 400c82c:	1005c01e 	bne	r2,zero,400df30 <___vfprintf_internal_r+0x1b1c>
 400c830:	d8802f17 	ldw	r2,188(sp)
 400c834:	dfc04717 	ldw	ra,284(sp)
 400c838:	df004617 	ldw	fp,280(sp)
 400c83c:	ddc04517 	ldw	r23,276(sp)
 400c840:	dd804417 	ldw	r22,272(sp)
 400c844:	dd404317 	ldw	r21,268(sp)
 400c848:	dd004217 	ldw	r20,264(sp)
 400c84c:	dcc04117 	ldw	r19,260(sp)
 400c850:	dc804017 	ldw	r18,256(sp)
 400c854:	dc403f17 	ldw	r17,252(sp)
 400c858:	dc003e17 	ldw	r16,248(sp)
 400c85c:	dec04804 	addi	sp,sp,288
 400c860:	f800283a 	ret
 400c864:	d9002d17 	ldw	r4,180(sp)
 400c868:	40107d40 	call	40107d4 <__sinit>
 400c86c:	003f0206 	br	400c478 <__alt_data_end+0xfc00c478>
 400c870:	d9002e17 	ldw	r4,184(sp)
 400c874:	d9402e17 	ldw	r5,184(sp)
 400c878:	21000017 	ldw	r4,0(r4)
 400c87c:	28800104 	addi	r2,r5,4
 400c880:	d9003115 	stw	r4,196(sp)
 400c884:	203fa716 	blt	r4,zero,400c724 <__alt_data_end+0xfc00c724>
 400c888:	d8802e15 	stw	r2,184(sp)
 400c88c:	ac400007 	ldb	r17,0(r21)
 400c890:	003f4206 	br	400c59c <__alt_data_end+0xfc00c59c>
 400c894:	ac400007 	ldb	r17,0(r21)
 400c898:	01000a84 	movi	r4,42
 400c89c:	a8c00044 	addi	r3,r21,1
 400c8a0:	89075826 	beq	r17,r4,400e604 <___vfprintf_internal_r+0x21f0>
 400c8a4:	8cbff404 	addi	r18,r17,-48
 400c8a8:	b486ae36 	bltu	r22,r18,400e364 <___vfprintf_internal_r+0x1f50>
 400c8ac:	0009883a 	mov	r4,zero
 400c8b0:	1823883a 	mov	r17,r3
 400c8b4:	01400284 	movi	r5,10
 400c8b8:	4007eb40 	call	4007eb4 <__mulsi3>
 400c8bc:	88c00007 	ldb	r3,0(r17)
 400c8c0:	1489883a 	add	r4,r2,r18
 400c8c4:	8d400044 	addi	r21,r17,1
 400c8c8:	1cbff404 	addi	r18,r3,-48
 400c8cc:	a823883a 	mov	r17,r21
 400c8d0:	b4bff82e 	bgeu	r22,r18,400c8b4 <__alt_data_end+0xfc00c8b4>
 400c8d4:	1823883a 	mov	r17,r3
 400c8d8:	2005f616 	blt	r4,zero,400e0b4 <___vfprintf_internal_r+0x1ca0>
 400c8dc:	d9002a15 	stw	r4,168(sp)
 400c8e0:	003f2f06 	br	400c5a0 <__alt_data_end+0xfc00c5a0>
 400c8e4:	84002014 	ori	r16,r16,128
 400c8e8:	ac400007 	ldb	r17,0(r21)
 400c8ec:	003f2b06 	br	400c59c <__alt_data_end+0xfc00c59c>
 400c8f0:	8cbff404 	addi	r18,r17,-48
 400c8f4:	d8003115 	stw	zero,196(sp)
 400c8f8:	0009883a 	mov	r4,zero
 400c8fc:	a823883a 	mov	r17,r21
 400c900:	01400284 	movi	r5,10
 400c904:	4007eb40 	call	4007eb4 <__mulsi3>
 400c908:	88c00007 	ldb	r3,0(r17)
 400c90c:	9089883a 	add	r4,r18,r2
 400c910:	ad400044 	addi	r21,r21,1
 400c914:	1cbff404 	addi	r18,r3,-48
 400c918:	a823883a 	mov	r17,r21
 400c91c:	b4bff82e 	bgeu	r22,r18,400c900 <__alt_data_end+0xfc00c900>
 400c920:	1823883a 	mov	r17,r3
 400c924:	d9003115 	stw	r4,196(sp)
 400c928:	003f1d06 	br	400c5a0 <__alt_data_end+0xfc00c5a0>
 400c92c:	8025883a 	mov	r18,r16
 400c930:	dc002903 	ldbu	r16,164(sp)
 400c934:	e011883a 	mov	r8,fp
 400c938:	84003fcc 	andi	r16,r16,255
 400c93c:	8007531e 	bne	r16,zero,400e68c <___vfprintf_internal_r+0x2278>
 400c940:	94800414 	ori	r18,r18,16
 400c944:	9080080c 	andi	r2,r18,32
 400c948:	1003a326 	beq	r2,zero,400d7d8 <___vfprintf_internal_r+0x13c4>
 400c94c:	d9002e17 	ldw	r4,184(sp)
 400c950:	20800117 	ldw	r2,4(r4)
 400c954:	24c00017 	ldw	r19,0(r4)
 400c958:	21000204 	addi	r4,r4,8
 400c95c:	d9002e15 	stw	r4,184(sp)
 400c960:	102d883a 	mov	r22,r2
 400c964:	10047316 	blt	r2,zero,400db34 <___vfprintf_internal_r+0x1720>
 400c968:	d9002a17 	ldw	r4,168(sp)
 400c96c:	df002783 	ldbu	fp,158(sp)
 400c970:	2003e416 	blt	r4,zero,400d904 <___vfprintf_internal_r+0x14f0>
 400c974:	00ffdfc4 	movi	r3,-129
 400c978:	9d84b03a 	or	r2,r19,r22
 400c97c:	90e4703a 	and	r18,r18,r3
 400c980:	10018026 	beq	r2,zero,400cf84 <___vfprintf_internal_r+0xb70>
 400c984:	b003ab26 	beq	r22,zero,400d834 <___vfprintf_internal_r+0x1420>
 400c988:	dc402915 	stw	r17,164(sp)
 400c98c:	dc001e04 	addi	r16,sp,120
 400c990:	b023883a 	mov	r17,r22
 400c994:	402d883a 	mov	r22,r8
 400c998:	9809883a 	mov	r4,r19
 400c99c:	880b883a 	mov	r5,r17
 400c9a0:	01800284 	movi	r6,10
 400c9a4:	000f883a 	mov	r7,zero
 400c9a8:	401571c0 	call	401571c <__umoddi3>
 400c9ac:	10800c04 	addi	r2,r2,48
 400c9b0:	843fffc4 	addi	r16,r16,-1
 400c9b4:	9809883a 	mov	r4,r19
 400c9b8:	880b883a 	mov	r5,r17
 400c9bc:	80800005 	stb	r2,0(r16)
 400c9c0:	01800284 	movi	r6,10
 400c9c4:	000f883a 	mov	r7,zero
 400c9c8:	40151200 	call	4015120 <__udivdi3>
 400c9cc:	1027883a 	mov	r19,r2
 400c9d0:	10c4b03a 	or	r2,r2,r3
 400c9d4:	1823883a 	mov	r17,r3
 400c9d8:	103fef1e 	bne	r2,zero,400c998 <__alt_data_end+0xfc00c998>
 400c9dc:	d8c02817 	ldw	r3,160(sp)
 400c9e0:	dc402917 	ldw	r17,164(sp)
 400c9e4:	b011883a 	mov	r8,r22
 400c9e8:	1c07c83a 	sub	r3,r3,r16
 400c9ec:	d8c02b15 	stw	r3,172(sp)
 400c9f0:	00005f06 	br	400cb70 <___vfprintf_internal_r+0x75c>
 400c9f4:	8025883a 	mov	r18,r16
 400c9f8:	dc002903 	ldbu	r16,164(sp)
 400c9fc:	e011883a 	mov	r8,fp
 400ca00:	84003fcc 	andi	r16,r16,255
 400ca04:	80071e1e 	bne	r16,zero,400e680 <___vfprintf_internal_r+0x226c>
 400ca08:	9080020c 	andi	r2,r18,8
 400ca0c:	1004af26 	beq	r2,zero,400dccc <___vfprintf_internal_r+0x18b8>
 400ca10:	d9002e17 	ldw	r4,184(sp)
 400ca14:	d9402e17 	ldw	r5,184(sp)
 400ca18:	d8802e17 	ldw	r2,184(sp)
 400ca1c:	21000017 	ldw	r4,0(r4)
 400ca20:	29400117 	ldw	r5,4(r5)
 400ca24:	10800204 	addi	r2,r2,8
 400ca28:	d9003615 	stw	r4,216(sp)
 400ca2c:	d9403815 	stw	r5,224(sp)
 400ca30:	d8802e15 	stw	r2,184(sp)
 400ca34:	d9003617 	ldw	r4,216(sp)
 400ca38:	d9403817 	ldw	r5,224(sp)
 400ca3c:	da003d15 	stw	r8,244(sp)
 400ca40:	04000044 	movi	r16,1
 400ca44:	4007acc0 	call	4007acc <__fpclassifyd>
 400ca48:	da003d17 	ldw	r8,244(sp)
 400ca4c:	1404441e 	bne	r2,r16,400db60 <___vfprintf_internal_r+0x174c>
 400ca50:	d9003617 	ldw	r4,216(sp)
 400ca54:	d9403817 	ldw	r5,224(sp)
 400ca58:	000d883a 	mov	r6,zero
 400ca5c:	000f883a 	mov	r7,zero
 400ca60:	400a1880 	call	400a188 <__ledf2>
 400ca64:	da003d17 	ldw	r8,244(sp)
 400ca68:	1005e316 	blt	r2,zero,400e1f8 <___vfprintf_internal_r+0x1de4>
 400ca6c:	df002783 	ldbu	fp,158(sp)
 400ca70:	008011c4 	movi	r2,71
 400ca74:	1445580e 	bge	r2,r17,400dfd8 <___vfprintf_internal_r+0x1bc4>
 400ca78:	040100b4 	movhi	r16,1026
 400ca7c:	842b8a04 	addi	r16,r16,-20952
 400ca80:	00c000c4 	movi	r3,3
 400ca84:	00bfdfc4 	movi	r2,-129
 400ca88:	d8c02915 	stw	r3,164(sp)
 400ca8c:	90a4703a 	and	r18,r18,r2
 400ca90:	d8c02b15 	stw	r3,172(sp)
 400ca94:	d8002a15 	stw	zero,168(sp)
 400ca98:	d8003215 	stw	zero,200(sp)
 400ca9c:	00003a06 	br	400cb88 <___vfprintf_internal_r+0x774>
 400caa0:	84000214 	ori	r16,r16,8
 400caa4:	ac400007 	ldb	r17,0(r21)
 400caa8:	003ebc06 	br	400c59c <__alt_data_end+0xfc00c59c>
 400caac:	8025883a 	mov	r18,r16
 400cab0:	dc002903 	ldbu	r16,164(sp)
 400cab4:	e011883a 	mov	r8,fp
 400cab8:	84003fcc 	andi	r16,r16,255
 400cabc:	8007001e 	bne	r16,zero,400e6c0 <___vfprintf_internal_r+0x22ac>
 400cac0:	94800414 	ori	r18,r18,16
 400cac4:	9080080c 	andi	r2,r18,32
 400cac8:	1002fa26 	beq	r2,zero,400d6b4 <___vfprintf_internal_r+0x12a0>
 400cacc:	d9002e17 	ldw	r4,184(sp)
 400cad0:	d9402a17 	ldw	r5,168(sp)
 400cad4:	d8002785 	stb	zero,158(sp)
 400cad8:	20800204 	addi	r2,r4,8
 400cadc:	24c00017 	ldw	r19,0(r4)
 400cae0:	25800117 	ldw	r22,4(r4)
 400cae4:	2804b116 	blt	r5,zero,400ddac <___vfprintf_internal_r+0x1998>
 400cae8:	013fdfc4 	movi	r4,-129
 400caec:	9d86b03a 	or	r3,r19,r22
 400caf0:	d8802e15 	stw	r2,184(sp)
 400caf4:	9124703a 	and	r18,r18,r4
 400caf8:	1802fb1e 	bne	r3,zero,400d6e8 <___vfprintf_internal_r+0x12d4>
 400cafc:	d8c02a17 	ldw	r3,168(sp)
 400cb00:	0039883a 	mov	fp,zero
 400cb04:	1805e526 	beq	r3,zero,400e29c <___vfprintf_internal_r+0x1e88>
 400cb08:	0027883a 	mov	r19,zero
 400cb0c:	002d883a 	mov	r22,zero
 400cb10:	dc001e04 	addi	r16,sp,120
 400cb14:	9806d0fa 	srli	r3,r19,3
 400cb18:	b008977a 	slli	r4,r22,29
 400cb1c:	b02cd0fa 	srli	r22,r22,3
 400cb20:	9cc001cc 	andi	r19,r19,7
 400cb24:	98800c04 	addi	r2,r19,48
 400cb28:	843fffc4 	addi	r16,r16,-1
 400cb2c:	20e6b03a 	or	r19,r4,r3
 400cb30:	80800005 	stb	r2,0(r16)
 400cb34:	9d86b03a 	or	r3,r19,r22
 400cb38:	183ff61e 	bne	r3,zero,400cb14 <__alt_data_end+0xfc00cb14>
 400cb3c:	90c0004c 	andi	r3,r18,1
 400cb40:	18014126 	beq	r3,zero,400d048 <___vfprintf_internal_r+0xc34>
 400cb44:	10803fcc 	andi	r2,r2,255
 400cb48:	1080201c 	xori	r2,r2,128
 400cb4c:	10bfe004 	addi	r2,r2,-128
 400cb50:	00c00c04 	movi	r3,48
 400cb54:	10c13c26 	beq	r2,r3,400d048 <___vfprintf_internal_r+0xc34>
 400cb58:	80ffffc5 	stb	r3,-1(r16)
 400cb5c:	d8c02817 	ldw	r3,160(sp)
 400cb60:	80bfffc4 	addi	r2,r16,-1
 400cb64:	1021883a 	mov	r16,r2
 400cb68:	1887c83a 	sub	r3,r3,r2
 400cb6c:	d8c02b15 	stw	r3,172(sp)
 400cb70:	d8802b17 	ldw	r2,172(sp)
 400cb74:	d9002a17 	ldw	r4,168(sp)
 400cb78:	1100010e 	bge	r2,r4,400cb80 <___vfprintf_internal_r+0x76c>
 400cb7c:	2005883a 	mov	r2,r4
 400cb80:	d8802915 	stw	r2,164(sp)
 400cb84:	d8003215 	stw	zero,200(sp)
 400cb88:	e7003fcc 	andi	fp,fp,255
 400cb8c:	e700201c 	xori	fp,fp,128
 400cb90:	e73fe004 	addi	fp,fp,-128
 400cb94:	e0000326 	beq	fp,zero,400cba4 <___vfprintf_internal_r+0x790>
 400cb98:	d8c02917 	ldw	r3,164(sp)
 400cb9c:	18c00044 	addi	r3,r3,1
 400cba0:	d8c02915 	stw	r3,164(sp)
 400cba4:	90c0008c 	andi	r3,r18,2
 400cba8:	d8c02c15 	stw	r3,176(sp)
 400cbac:	18000326 	beq	r3,zero,400cbbc <___vfprintf_internal_r+0x7a8>
 400cbb0:	d8c02917 	ldw	r3,164(sp)
 400cbb4:	18c00084 	addi	r3,r3,2
 400cbb8:	d8c02915 	stw	r3,164(sp)
 400cbbc:	90c0210c 	andi	r3,r18,132
 400cbc0:	d8c03015 	stw	r3,192(sp)
 400cbc4:	1801c51e 	bne	r3,zero,400d2dc <___vfprintf_internal_r+0xec8>
 400cbc8:	d9003117 	ldw	r4,196(sp)
 400cbcc:	d8c02917 	ldw	r3,164(sp)
 400cbd0:	20e7c83a 	sub	r19,r4,r3
 400cbd4:	04c1c10e 	bge	zero,r19,400d2dc <___vfprintf_internal_r+0xec8>
 400cbd8:	02400404 	movi	r9,16
 400cbdc:	d8c02017 	ldw	r3,128(sp)
 400cbe0:	d8801f17 	ldw	r2,124(sp)
 400cbe4:	4cc52f0e 	bge	r9,r19,400e0a4 <___vfprintf_internal_r+0x1c90>
 400cbe8:	014100b4 	movhi	r5,1026
 400cbec:	296b9d84 	addi	r5,r5,-20874
 400cbf0:	dc403b15 	stw	r17,236(sp)
 400cbf4:	d9403515 	stw	r5,212(sp)
 400cbf8:	9823883a 	mov	r17,r19
 400cbfc:	482d883a 	mov	r22,r9
 400cc00:	9027883a 	mov	r19,r18
 400cc04:	070001c4 	movi	fp,7
 400cc08:	8025883a 	mov	r18,r16
 400cc0c:	dc002d17 	ldw	r16,180(sp)
 400cc10:	00000306 	br	400cc20 <___vfprintf_internal_r+0x80c>
 400cc14:	8c7ffc04 	addi	r17,r17,-16
 400cc18:	42000204 	addi	r8,r8,8
 400cc1c:	b440130e 	bge	r22,r17,400cc6c <___vfprintf_internal_r+0x858>
 400cc20:	010100b4 	movhi	r4,1026
 400cc24:	18c00404 	addi	r3,r3,16
 400cc28:	10800044 	addi	r2,r2,1
 400cc2c:	212b9d84 	addi	r4,r4,-20874
 400cc30:	41000015 	stw	r4,0(r8)
 400cc34:	45800115 	stw	r22,4(r8)
 400cc38:	d8c02015 	stw	r3,128(sp)
 400cc3c:	d8801f15 	stw	r2,124(sp)
 400cc40:	e0bff40e 	bge	fp,r2,400cc14 <__alt_data_end+0xfc00cc14>
 400cc44:	d9801e04 	addi	r6,sp,120
 400cc48:	b80b883a 	mov	r5,r23
 400cc4c:	8009883a 	mov	r4,r16
 400cc50:	40131d80 	call	40131d8 <__sprint_r>
 400cc54:	103ef31e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400cc58:	8c7ffc04 	addi	r17,r17,-16
 400cc5c:	d8c02017 	ldw	r3,128(sp)
 400cc60:	d8801f17 	ldw	r2,124(sp)
 400cc64:	da000404 	addi	r8,sp,16
 400cc68:	b47fed16 	blt	r22,r17,400cc20 <__alt_data_end+0xfc00cc20>
 400cc6c:	9021883a 	mov	r16,r18
 400cc70:	9825883a 	mov	r18,r19
 400cc74:	8827883a 	mov	r19,r17
 400cc78:	dc403b17 	ldw	r17,236(sp)
 400cc7c:	d9403517 	ldw	r5,212(sp)
 400cc80:	98c7883a 	add	r3,r19,r3
 400cc84:	10800044 	addi	r2,r2,1
 400cc88:	41400015 	stw	r5,0(r8)
 400cc8c:	44c00115 	stw	r19,4(r8)
 400cc90:	d8c02015 	stw	r3,128(sp)
 400cc94:	d8801f15 	stw	r2,124(sp)
 400cc98:	010001c4 	movi	r4,7
 400cc9c:	2082c516 	blt	r4,r2,400d7b4 <___vfprintf_internal_r+0x13a0>
 400cca0:	df002787 	ldb	fp,158(sp)
 400cca4:	42000204 	addi	r8,r8,8
 400cca8:	e0000c26 	beq	fp,zero,400ccdc <___vfprintf_internal_r+0x8c8>
 400ccac:	d8801f17 	ldw	r2,124(sp)
 400ccb0:	d9002784 	addi	r4,sp,158
 400ccb4:	18c00044 	addi	r3,r3,1
 400ccb8:	10800044 	addi	r2,r2,1
 400ccbc:	41000015 	stw	r4,0(r8)
 400ccc0:	01000044 	movi	r4,1
 400ccc4:	41000115 	stw	r4,4(r8)
 400ccc8:	d8c02015 	stw	r3,128(sp)
 400cccc:	d8801f15 	stw	r2,124(sp)
 400ccd0:	010001c4 	movi	r4,7
 400ccd4:	20825e16 	blt	r4,r2,400d650 <___vfprintf_internal_r+0x123c>
 400ccd8:	42000204 	addi	r8,r8,8
 400ccdc:	d8802c17 	ldw	r2,176(sp)
 400cce0:	10000c26 	beq	r2,zero,400cd14 <___vfprintf_internal_r+0x900>
 400cce4:	d8801f17 	ldw	r2,124(sp)
 400cce8:	d9002704 	addi	r4,sp,156
 400ccec:	18c00084 	addi	r3,r3,2
 400ccf0:	10800044 	addi	r2,r2,1
 400ccf4:	41000015 	stw	r4,0(r8)
 400ccf8:	01000084 	movi	r4,2
 400ccfc:	41000115 	stw	r4,4(r8)
 400cd00:	d8c02015 	stw	r3,128(sp)
 400cd04:	d8801f15 	stw	r2,124(sp)
 400cd08:	010001c4 	movi	r4,7
 400cd0c:	20825816 	blt	r4,r2,400d670 <___vfprintf_internal_r+0x125c>
 400cd10:	42000204 	addi	r8,r8,8
 400cd14:	d9003017 	ldw	r4,192(sp)
 400cd18:	00802004 	movi	r2,128
 400cd1c:	2081bb26 	beq	r4,r2,400d40c <___vfprintf_internal_r+0xff8>
 400cd20:	d9402a17 	ldw	r5,168(sp)
 400cd24:	d8802b17 	ldw	r2,172(sp)
 400cd28:	28adc83a 	sub	r22,r5,r2
 400cd2c:	0580310e 	bge	zero,r22,400cdf4 <___vfprintf_internal_r+0x9e0>
 400cd30:	07000404 	movi	fp,16
 400cd34:	d8801f17 	ldw	r2,124(sp)
 400cd38:	e584360e 	bge	fp,r22,400de14 <___vfprintf_internal_r+0x1a00>
 400cd3c:	014100b4 	movhi	r5,1026
 400cd40:	296b9984 	addi	r5,r5,-20890
 400cd44:	dc402a15 	stw	r17,168(sp)
 400cd48:	d9402c15 	stw	r5,176(sp)
 400cd4c:	b023883a 	mov	r17,r22
 400cd50:	04c001c4 	movi	r19,7
 400cd54:	a82d883a 	mov	r22,r21
 400cd58:	902b883a 	mov	r21,r18
 400cd5c:	8025883a 	mov	r18,r16
 400cd60:	dc002d17 	ldw	r16,180(sp)
 400cd64:	00000306 	br	400cd74 <___vfprintf_internal_r+0x960>
 400cd68:	8c7ffc04 	addi	r17,r17,-16
 400cd6c:	42000204 	addi	r8,r8,8
 400cd70:	e440110e 	bge	fp,r17,400cdb8 <___vfprintf_internal_r+0x9a4>
 400cd74:	18c00404 	addi	r3,r3,16
 400cd78:	10800044 	addi	r2,r2,1
 400cd7c:	45000015 	stw	r20,0(r8)
 400cd80:	47000115 	stw	fp,4(r8)
 400cd84:	d8c02015 	stw	r3,128(sp)
 400cd88:	d8801f15 	stw	r2,124(sp)
 400cd8c:	98bff60e 	bge	r19,r2,400cd68 <__alt_data_end+0xfc00cd68>
 400cd90:	d9801e04 	addi	r6,sp,120
 400cd94:	b80b883a 	mov	r5,r23
 400cd98:	8009883a 	mov	r4,r16
 400cd9c:	40131d80 	call	40131d8 <__sprint_r>
 400cda0:	103ea01e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400cda4:	8c7ffc04 	addi	r17,r17,-16
 400cda8:	d8c02017 	ldw	r3,128(sp)
 400cdac:	d8801f17 	ldw	r2,124(sp)
 400cdb0:	da000404 	addi	r8,sp,16
 400cdb4:	e47fef16 	blt	fp,r17,400cd74 <__alt_data_end+0xfc00cd74>
 400cdb8:	9021883a 	mov	r16,r18
 400cdbc:	a825883a 	mov	r18,r21
 400cdc0:	b02b883a 	mov	r21,r22
 400cdc4:	882d883a 	mov	r22,r17
 400cdc8:	dc402a17 	ldw	r17,168(sp)
 400cdcc:	d9002c17 	ldw	r4,176(sp)
 400cdd0:	1d87883a 	add	r3,r3,r22
 400cdd4:	10800044 	addi	r2,r2,1
 400cdd8:	41000015 	stw	r4,0(r8)
 400cddc:	45800115 	stw	r22,4(r8)
 400cde0:	d8c02015 	stw	r3,128(sp)
 400cde4:	d8801f15 	stw	r2,124(sp)
 400cde8:	010001c4 	movi	r4,7
 400cdec:	20821016 	blt	r4,r2,400d630 <___vfprintf_internal_r+0x121c>
 400cdf0:	42000204 	addi	r8,r8,8
 400cdf4:	9080400c 	andi	r2,r18,256
 400cdf8:	10013a1e 	bne	r2,zero,400d2e4 <___vfprintf_internal_r+0xed0>
 400cdfc:	d9402b17 	ldw	r5,172(sp)
 400ce00:	d8801f17 	ldw	r2,124(sp)
 400ce04:	44000015 	stw	r16,0(r8)
 400ce08:	1947883a 	add	r3,r3,r5
 400ce0c:	10800044 	addi	r2,r2,1
 400ce10:	41400115 	stw	r5,4(r8)
 400ce14:	d8c02015 	stw	r3,128(sp)
 400ce18:	d8801f15 	stw	r2,124(sp)
 400ce1c:	010001c4 	movi	r4,7
 400ce20:	2081f516 	blt	r4,r2,400d5f8 <___vfprintf_internal_r+0x11e4>
 400ce24:	42000204 	addi	r8,r8,8
 400ce28:	9480010c 	andi	r18,r18,4
 400ce2c:	90003226 	beq	r18,zero,400cef8 <___vfprintf_internal_r+0xae4>
 400ce30:	d9403117 	ldw	r5,196(sp)
 400ce34:	d8802917 	ldw	r2,164(sp)
 400ce38:	28a1c83a 	sub	r16,r5,r2
 400ce3c:	04002e0e 	bge	zero,r16,400cef8 <___vfprintf_internal_r+0xae4>
 400ce40:	04400404 	movi	r17,16
 400ce44:	d8801f17 	ldw	r2,124(sp)
 400ce48:	8c04c40e 	bge	r17,r16,400e15c <___vfprintf_internal_r+0x1d48>
 400ce4c:	014100b4 	movhi	r5,1026
 400ce50:	296b9d84 	addi	r5,r5,-20874
 400ce54:	d9403515 	stw	r5,212(sp)
 400ce58:	048001c4 	movi	r18,7
 400ce5c:	dcc02d17 	ldw	r19,180(sp)
 400ce60:	00000306 	br	400ce70 <___vfprintf_internal_r+0xa5c>
 400ce64:	843ffc04 	addi	r16,r16,-16
 400ce68:	42000204 	addi	r8,r8,8
 400ce6c:	8c00130e 	bge	r17,r16,400cebc <___vfprintf_internal_r+0xaa8>
 400ce70:	010100b4 	movhi	r4,1026
 400ce74:	18c00404 	addi	r3,r3,16
 400ce78:	10800044 	addi	r2,r2,1
 400ce7c:	212b9d84 	addi	r4,r4,-20874
 400ce80:	41000015 	stw	r4,0(r8)
 400ce84:	44400115 	stw	r17,4(r8)
 400ce88:	d8c02015 	stw	r3,128(sp)
 400ce8c:	d8801f15 	stw	r2,124(sp)
 400ce90:	90bff40e 	bge	r18,r2,400ce64 <__alt_data_end+0xfc00ce64>
 400ce94:	d9801e04 	addi	r6,sp,120
 400ce98:	b80b883a 	mov	r5,r23
 400ce9c:	9809883a 	mov	r4,r19
 400cea0:	40131d80 	call	40131d8 <__sprint_r>
 400cea4:	103e5f1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400cea8:	843ffc04 	addi	r16,r16,-16
 400ceac:	d8c02017 	ldw	r3,128(sp)
 400ceb0:	d8801f17 	ldw	r2,124(sp)
 400ceb4:	da000404 	addi	r8,sp,16
 400ceb8:	8c3fed16 	blt	r17,r16,400ce70 <__alt_data_end+0xfc00ce70>
 400cebc:	d9403517 	ldw	r5,212(sp)
 400cec0:	1c07883a 	add	r3,r3,r16
 400cec4:	10800044 	addi	r2,r2,1
 400cec8:	41400015 	stw	r5,0(r8)
 400cecc:	44000115 	stw	r16,4(r8)
 400ced0:	d8c02015 	stw	r3,128(sp)
 400ced4:	d8801f15 	stw	r2,124(sp)
 400ced8:	010001c4 	movi	r4,7
 400cedc:	2080060e 	bge	r4,r2,400cef8 <___vfprintf_internal_r+0xae4>
 400cee0:	d9002d17 	ldw	r4,180(sp)
 400cee4:	d9801e04 	addi	r6,sp,120
 400cee8:	b80b883a 	mov	r5,r23
 400ceec:	40131d80 	call	40131d8 <__sprint_r>
 400cef0:	103e4c1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400cef4:	d8c02017 	ldw	r3,128(sp)
 400cef8:	d8803117 	ldw	r2,196(sp)
 400cefc:	d9002917 	ldw	r4,164(sp)
 400cf00:	1100010e 	bge	r2,r4,400cf08 <___vfprintf_internal_r+0xaf4>
 400cf04:	2005883a 	mov	r2,r4
 400cf08:	d9402f17 	ldw	r5,188(sp)
 400cf0c:	288b883a 	add	r5,r5,r2
 400cf10:	d9402f15 	stw	r5,188(sp)
 400cf14:	1801c01e 	bne	r3,zero,400d618 <___vfprintf_internal_r+0x1204>
 400cf18:	a8800007 	ldb	r2,0(r21)
 400cf1c:	d8001f15 	stw	zero,124(sp)
 400cf20:	da000404 	addi	r8,sp,16
 400cf24:	103d751e 	bne	r2,zero,400c4fc <__alt_data_end+0xfc00c4fc>
 400cf28:	a823883a 	mov	r17,r21
 400cf2c:	003d8b06 	br	400c55c <__alt_data_end+0xfc00c55c>
 400cf30:	8025883a 	mov	r18,r16
 400cf34:	dc002903 	ldbu	r16,164(sp)
 400cf38:	e011883a 	mov	r8,fp
 400cf3c:	84003fcc 	andi	r16,r16,255
 400cf40:	8005e51e 	bne	r16,zero,400e6d8 <___vfprintf_internal_r+0x22c4>
 400cf44:	94800414 	ori	r18,r18,16
 400cf48:	9080080c 	andi	r2,r18,32
 400cf4c:	10022b26 	beq	r2,zero,400d7fc <___vfprintf_internal_r+0x13e8>
 400cf50:	d9002e17 	ldw	r4,184(sp)
 400cf54:	d9402a17 	ldw	r5,168(sp)
 400cf58:	d8002785 	stb	zero,158(sp)
 400cf5c:	20c00204 	addi	r3,r4,8
 400cf60:	24c00017 	ldw	r19,0(r4)
 400cf64:	25800117 	ldw	r22,4(r4)
 400cf68:	28042e16 	blt	r5,zero,400e024 <___vfprintf_internal_r+0x1c10>
 400cf6c:	013fdfc4 	movi	r4,-129
 400cf70:	9d84b03a 	or	r2,r19,r22
 400cf74:	d8c02e15 	stw	r3,184(sp)
 400cf78:	9124703a 	and	r18,r18,r4
 400cf7c:	0039883a 	mov	fp,zero
 400cf80:	103e801e 	bne	r2,zero,400c984 <__alt_data_end+0xfc00c984>
 400cf84:	d9002a17 	ldw	r4,168(sp)
 400cf88:	2002e01e 	bne	r4,zero,400db0c <___vfprintf_internal_r+0x16f8>
 400cf8c:	d8002a15 	stw	zero,168(sp)
 400cf90:	d8002b15 	stw	zero,172(sp)
 400cf94:	dc001e04 	addi	r16,sp,120
 400cf98:	003ef506 	br	400cb70 <__alt_data_end+0xfc00cb70>
 400cf9c:	8025883a 	mov	r18,r16
 400cfa0:	dc002903 	ldbu	r16,164(sp)
 400cfa4:	e011883a 	mov	r8,fp
 400cfa8:	84003fcc 	andi	r16,r16,255
 400cfac:	8005ba1e 	bne	r16,zero,400e698 <___vfprintf_internal_r+0x2284>
 400cfb0:	010100b4 	movhi	r4,1026
 400cfb4:	212b8d04 	addi	r4,r4,-20940
 400cfb8:	d9003915 	stw	r4,228(sp)
 400cfbc:	9080080c 	andi	r2,r18,32
 400cfc0:	10006126 	beq	r2,zero,400d148 <___vfprintf_internal_r+0xd34>
 400cfc4:	d9402e17 	ldw	r5,184(sp)
 400cfc8:	2cc00017 	ldw	r19,0(r5)
 400cfcc:	2d800117 	ldw	r22,4(r5)
 400cfd0:	29400204 	addi	r5,r5,8
 400cfd4:	d9402e15 	stw	r5,184(sp)
 400cfd8:	9080004c 	andi	r2,r18,1
 400cfdc:	1001ac26 	beq	r2,zero,400d690 <___vfprintf_internal_r+0x127c>
 400cfe0:	9d84b03a 	or	r2,r19,r22
 400cfe4:	10038526 	beq	r2,zero,400ddfc <___vfprintf_internal_r+0x19e8>
 400cfe8:	d8c02a17 	ldw	r3,168(sp)
 400cfec:	00800c04 	movi	r2,48
 400cff0:	d8802705 	stb	r2,156(sp)
 400cff4:	dc402745 	stb	r17,157(sp)
 400cff8:	d8002785 	stb	zero,158(sp)
 400cffc:	90800094 	ori	r2,r18,2
 400d000:	18047916 	blt	r3,zero,400e1e8 <___vfprintf_internal_r+0x1dd4>
 400d004:	00bfdfc4 	movi	r2,-129
 400d008:	90a4703a 	and	r18,r18,r2
 400d00c:	94800094 	ori	r18,r18,2
 400d010:	0039883a 	mov	fp,zero
 400d014:	d9003917 	ldw	r4,228(sp)
 400d018:	dc001e04 	addi	r16,sp,120
 400d01c:	988003cc 	andi	r2,r19,15
 400d020:	b006973a 	slli	r3,r22,28
 400d024:	2085883a 	add	r2,r4,r2
 400d028:	9826d13a 	srli	r19,r19,4
 400d02c:	10800003 	ldbu	r2,0(r2)
 400d030:	b02cd13a 	srli	r22,r22,4
 400d034:	843fffc4 	addi	r16,r16,-1
 400d038:	1ce6b03a 	or	r19,r3,r19
 400d03c:	80800005 	stb	r2,0(r16)
 400d040:	9d84b03a 	or	r2,r19,r22
 400d044:	103ff51e 	bne	r2,zero,400d01c <__alt_data_end+0xfc00d01c>
 400d048:	d8c02817 	ldw	r3,160(sp)
 400d04c:	1c07c83a 	sub	r3,r3,r16
 400d050:	d8c02b15 	stw	r3,172(sp)
 400d054:	003ec606 	br	400cb70 <__alt_data_end+0xfc00cb70>
 400d058:	8025883a 	mov	r18,r16
 400d05c:	dc002903 	ldbu	r16,164(sp)
 400d060:	e011883a 	mov	r8,fp
 400d064:	84003fcc 	andi	r16,r16,255
 400d068:	803e9626 	beq	r16,zero,400cac4 <__alt_data_end+0xfc00cac4>
 400d06c:	d8c02b03 	ldbu	r3,172(sp)
 400d070:	d8c02785 	stb	r3,158(sp)
 400d074:	003e9306 	br	400cac4 <__alt_data_end+0xfc00cac4>
 400d078:	00c00044 	movi	r3,1
 400d07c:	d8c02905 	stb	r3,164(sp)
 400d080:	00c00ac4 	movi	r3,43
 400d084:	d8c02b05 	stb	r3,172(sp)
 400d088:	ac400007 	ldb	r17,0(r21)
 400d08c:	003d4306 	br	400c59c <__alt_data_end+0xfc00c59c>
 400d090:	84000814 	ori	r16,r16,32
 400d094:	ac400007 	ldb	r17,0(r21)
 400d098:	003d4006 	br	400c59c <__alt_data_end+0xfc00c59c>
 400d09c:	d8802e17 	ldw	r2,184(sp)
 400d0a0:	8025883a 	mov	r18,r16
 400d0a4:	d8002785 	stb	zero,158(sp)
 400d0a8:	14000017 	ldw	r16,0(r2)
 400d0ac:	e011883a 	mov	r8,fp
 400d0b0:	14c00104 	addi	r19,r2,4
 400d0b4:	80042d26 	beq	r16,zero,400e16c <___vfprintf_internal_r+0x1d58>
 400d0b8:	d8c02a17 	ldw	r3,168(sp)
 400d0bc:	1803e416 	blt	r3,zero,400e050 <___vfprintf_internal_r+0x1c3c>
 400d0c0:	180d883a 	mov	r6,r3
 400d0c4:	000b883a 	mov	r5,zero
 400d0c8:	8009883a 	mov	r4,r16
 400d0cc:	df003d15 	stw	fp,244(sp)
 400d0d0:	40115400 	call	4011540 <memchr>
 400d0d4:	da003d17 	ldw	r8,244(sp)
 400d0d8:	10046826 	beq	r2,zero,400e27c <___vfprintf_internal_r+0x1e68>
 400d0dc:	1405c83a 	sub	r2,r2,r16
 400d0e0:	d8802b15 	stw	r2,172(sp)
 400d0e4:	1003e016 	blt	r2,zero,400e068 <___vfprintf_internal_r+0x1c54>
 400d0e8:	df002783 	ldbu	fp,158(sp)
 400d0ec:	d8802915 	stw	r2,164(sp)
 400d0f0:	dcc02e15 	stw	r19,184(sp)
 400d0f4:	d8002a15 	stw	zero,168(sp)
 400d0f8:	d8003215 	stw	zero,200(sp)
 400d0fc:	003ea206 	br	400cb88 <__alt_data_end+0xfc00cb88>
 400d100:	8025883a 	mov	r18,r16
 400d104:	dc002903 	ldbu	r16,164(sp)
 400d108:	e011883a 	mov	r8,fp
 400d10c:	84003fcc 	andi	r16,r16,255
 400d110:	803f8d26 	beq	r16,zero,400cf48 <__alt_data_end+0xfc00cf48>
 400d114:	d8c02b03 	ldbu	r3,172(sp)
 400d118:	d8c02785 	stb	r3,158(sp)
 400d11c:	003f8a06 	br	400cf48 <__alt_data_end+0xfc00cf48>
 400d120:	8025883a 	mov	r18,r16
 400d124:	dc002903 	ldbu	r16,164(sp)
 400d128:	e011883a 	mov	r8,fp
 400d12c:	84003fcc 	andi	r16,r16,255
 400d130:	8005661e 	bne	r16,zero,400e6cc <___vfprintf_internal_r+0x22b8>
 400d134:	010100b4 	movhi	r4,1026
 400d138:	212b9204 	addi	r4,r4,-20920
 400d13c:	d9003915 	stw	r4,228(sp)
 400d140:	9080080c 	andi	r2,r18,32
 400d144:	103f9f1e 	bne	r2,zero,400cfc4 <__alt_data_end+0xfc00cfc4>
 400d148:	9080040c 	andi	r2,r18,16
 400d14c:	1002eb26 	beq	r2,zero,400dcfc <___vfprintf_internal_r+0x18e8>
 400d150:	d8802e17 	ldw	r2,184(sp)
 400d154:	002d883a 	mov	r22,zero
 400d158:	14c00017 	ldw	r19,0(r2)
 400d15c:	10800104 	addi	r2,r2,4
 400d160:	d8802e15 	stw	r2,184(sp)
 400d164:	003f9c06 	br	400cfd8 <__alt_data_end+0xfc00cfd8>
 400d168:	d8802b07 	ldb	r2,172(sp)
 400d16c:	1002e11e 	bne	r2,zero,400dcf4 <___vfprintf_internal_r+0x18e0>
 400d170:	00c00044 	movi	r3,1
 400d174:	d8c02905 	stb	r3,164(sp)
 400d178:	00c00804 	movi	r3,32
 400d17c:	d8c02b05 	stb	r3,172(sp)
 400d180:	ac400007 	ldb	r17,0(r21)
 400d184:	003d0506 	br	400c59c <__alt_data_end+0xfc00c59c>
 400d188:	84000054 	ori	r16,r16,1
 400d18c:	ac400007 	ldb	r17,0(r21)
 400d190:	003d0206 	br	400c59c <__alt_data_end+0xfc00c59c>
 400d194:	8025883a 	mov	r18,r16
 400d198:	dc002903 	ldbu	r16,164(sp)
 400d19c:	e011883a 	mov	r8,fp
 400d1a0:	84003fcc 	andi	r16,r16,255
 400d1a4:	803de726 	beq	r16,zero,400c944 <__alt_data_end+0xfc00c944>
 400d1a8:	d8c02b03 	ldbu	r3,172(sp)
 400d1ac:	d8c02785 	stb	r3,158(sp)
 400d1b0:	003de406 	br	400c944 <__alt_data_end+0xfc00c944>
 400d1b4:	84001014 	ori	r16,r16,64
 400d1b8:	ac400007 	ldb	r17,0(r21)
 400d1bc:	003cf706 	br	400c59c <__alt_data_end+0xfc00c59c>
 400d1c0:	ac400007 	ldb	r17,0(r21)
 400d1c4:	00801b04 	movi	r2,108
 400d1c8:	88838f26 	beq	r17,r2,400e008 <___vfprintf_internal_r+0x1bf4>
 400d1cc:	84000414 	ori	r16,r16,16
 400d1d0:	003cf206 	br	400c59c <__alt_data_end+0xfc00c59c>
 400d1d4:	8025883a 	mov	r18,r16
 400d1d8:	dc002903 	ldbu	r16,164(sp)
 400d1dc:	e011883a 	mov	r8,fp
 400d1e0:	84003fcc 	andi	r16,r16,255
 400d1e4:	80053f1e 	bne	r16,zero,400e6e4 <___vfprintf_internal_r+0x22d0>
 400d1e8:	9080080c 	andi	r2,r18,32
 400d1ec:	1002d226 	beq	r2,zero,400dd38 <___vfprintf_internal_r+0x1924>
 400d1f0:	d9002e17 	ldw	r4,184(sp)
 400d1f4:	d9402f17 	ldw	r5,188(sp)
 400d1f8:	20800017 	ldw	r2,0(r4)
 400d1fc:	2807d7fa 	srai	r3,r5,31
 400d200:	21000104 	addi	r4,r4,4
 400d204:	d9002e15 	stw	r4,184(sp)
 400d208:	11400015 	stw	r5,0(r2)
 400d20c:	10c00115 	stw	r3,4(r2)
 400d210:	003cb806 	br	400c4f4 <__alt_data_end+0xfc00c4f4>
 400d214:	d8c02e17 	ldw	r3,184(sp)
 400d218:	d9002e17 	ldw	r4,184(sp)
 400d21c:	8025883a 	mov	r18,r16
 400d220:	18800017 	ldw	r2,0(r3)
 400d224:	21000104 	addi	r4,r4,4
 400d228:	00c00044 	movi	r3,1
 400d22c:	e011883a 	mov	r8,fp
 400d230:	d8c02915 	stw	r3,164(sp)
 400d234:	d8002785 	stb	zero,158(sp)
 400d238:	d8801405 	stb	r2,80(sp)
 400d23c:	d9002e15 	stw	r4,184(sp)
 400d240:	d8c02b15 	stw	r3,172(sp)
 400d244:	d8002a15 	stw	zero,168(sp)
 400d248:	d8003215 	stw	zero,200(sp)
 400d24c:	dc001404 	addi	r16,sp,80
 400d250:	0039883a 	mov	fp,zero
 400d254:	003e5306 	br	400cba4 <__alt_data_end+0xfc00cba4>
 400d258:	010100b4 	movhi	r4,1026
 400d25c:	212b9204 	addi	r4,r4,-20920
 400d260:	0039883a 	mov	fp,zero
 400d264:	d9003915 	stw	r4,228(sp)
 400d268:	04401e04 	movi	r17,120
 400d26c:	003f6906 	br	400d014 <__alt_data_end+0xfc00d014>
 400d270:	8025883a 	mov	r18,r16
 400d274:	dc002903 	ldbu	r16,164(sp)
 400d278:	e011883a 	mov	r8,fp
 400d27c:	84003fcc 	andi	r16,r16,255
 400d280:	8005081e 	bne	r16,zero,400e6a4 <___vfprintf_internal_r+0x2290>
 400d284:	883d6126 	beq	r17,zero,400c80c <__alt_data_end+0xfc00c80c>
 400d288:	00c00044 	movi	r3,1
 400d28c:	d8c02915 	stw	r3,164(sp)
 400d290:	dc401405 	stb	r17,80(sp)
 400d294:	d8002785 	stb	zero,158(sp)
 400d298:	003fe906 	br	400d240 <__alt_data_end+0xfc00d240>
 400d29c:	014100b4 	movhi	r5,1026
 400d2a0:	296b9204 	addi	r5,r5,-20920
 400d2a4:	d9403915 	stw	r5,228(sp)
 400d2a8:	d8c02e15 	stw	r3,184(sp)
 400d2ac:	1025883a 	mov	r18,r2
 400d2b0:	04401e04 	movi	r17,120
 400d2b4:	9d84b03a 	or	r2,r19,r22
 400d2b8:	1000fc1e 	bne	r2,zero,400d6ac <___vfprintf_internal_r+0x1298>
 400d2bc:	0039883a 	mov	fp,zero
 400d2c0:	00800084 	movi	r2,2
 400d2c4:	10803fcc 	andi	r2,r2,255
 400d2c8:	00c00044 	movi	r3,1
 400d2cc:	10c20f26 	beq	r2,r3,400db0c <___vfprintf_internal_r+0x16f8>
 400d2d0:	00c00084 	movi	r3,2
 400d2d4:	10fd3326 	beq	r2,r3,400c7a4 <__alt_data_end+0xfc00c7a4>
 400d2d8:	003e0b06 	br	400cb08 <__alt_data_end+0xfc00cb08>
 400d2dc:	d8c02017 	ldw	r3,128(sp)
 400d2e0:	003e7106 	br	400cca8 <__alt_data_end+0xfc00cca8>
 400d2e4:	00801944 	movi	r2,101
 400d2e8:	14407e0e 	bge	r2,r17,400d4e4 <___vfprintf_internal_r+0x10d0>
 400d2ec:	d9003617 	ldw	r4,216(sp)
 400d2f0:	d9403817 	ldw	r5,224(sp)
 400d2f4:	000d883a 	mov	r6,zero
 400d2f8:	000f883a 	mov	r7,zero
 400d2fc:	d8c03c15 	stw	r3,240(sp)
 400d300:	da003d15 	stw	r8,244(sp)
 400d304:	400a0240 	call	400a024 <__eqdf2>
 400d308:	d8c03c17 	ldw	r3,240(sp)
 400d30c:	da003d17 	ldw	r8,244(sp)
 400d310:	1000f71e 	bne	r2,zero,400d6f0 <___vfprintf_internal_r+0x12dc>
 400d314:	d8801f17 	ldw	r2,124(sp)
 400d318:	010100b4 	movhi	r4,1026
 400d31c:	212b9904 	addi	r4,r4,-20892
 400d320:	18c00044 	addi	r3,r3,1
 400d324:	10800044 	addi	r2,r2,1
 400d328:	41000015 	stw	r4,0(r8)
 400d32c:	01000044 	movi	r4,1
 400d330:	41000115 	stw	r4,4(r8)
 400d334:	d8c02015 	stw	r3,128(sp)
 400d338:	d8801f15 	stw	r2,124(sp)
 400d33c:	010001c4 	movi	r4,7
 400d340:	2082b816 	blt	r4,r2,400de24 <___vfprintf_internal_r+0x1a10>
 400d344:	42000204 	addi	r8,r8,8
 400d348:	d8802617 	ldw	r2,152(sp)
 400d34c:	d9403317 	ldw	r5,204(sp)
 400d350:	11400216 	blt	r2,r5,400d35c <___vfprintf_internal_r+0xf48>
 400d354:	9080004c 	andi	r2,r18,1
 400d358:	103eb326 	beq	r2,zero,400ce28 <__alt_data_end+0xfc00ce28>
 400d35c:	d8803717 	ldw	r2,220(sp)
 400d360:	d9003417 	ldw	r4,208(sp)
 400d364:	d9403717 	ldw	r5,220(sp)
 400d368:	1887883a 	add	r3,r3,r2
 400d36c:	d8801f17 	ldw	r2,124(sp)
 400d370:	41000015 	stw	r4,0(r8)
 400d374:	41400115 	stw	r5,4(r8)
 400d378:	10800044 	addi	r2,r2,1
 400d37c:	d8c02015 	stw	r3,128(sp)
 400d380:	d8801f15 	stw	r2,124(sp)
 400d384:	010001c4 	movi	r4,7
 400d388:	20832916 	blt	r4,r2,400e030 <___vfprintf_internal_r+0x1c1c>
 400d38c:	42000204 	addi	r8,r8,8
 400d390:	d8803317 	ldw	r2,204(sp)
 400d394:	143fffc4 	addi	r16,r2,-1
 400d398:	043ea30e 	bge	zero,r16,400ce28 <__alt_data_end+0xfc00ce28>
 400d39c:	04400404 	movi	r17,16
 400d3a0:	d8801f17 	ldw	r2,124(sp)
 400d3a4:	8c00880e 	bge	r17,r16,400d5c8 <___vfprintf_internal_r+0x11b4>
 400d3a8:	014100b4 	movhi	r5,1026
 400d3ac:	296b9984 	addi	r5,r5,-20890
 400d3b0:	d9402c15 	stw	r5,176(sp)
 400d3b4:	058001c4 	movi	r22,7
 400d3b8:	dcc02d17 	ldw	r19,180(sp)
 400d3bc:	00000306 	br	400d3cc <___vfprintf_internal_r+0xfb8>
 400d3c0:	42000204 	addi	r8,r8,8
 400d3c4:	843ffc04 	addi	r16,r16,-16
 400d3c8:	8c00820e 	bge	r17,r16,400d5d4 <___vfprintf_internal_r+0x11c0>
 400d3cc:	18c00404 	addi	r3,r3,16
 400d3d0:	10800044 	addi	r2,r2,1
 400d3d4:	45000015 	stw	r20,0(r8)
 400d3d8:	44400115 	stw	r17,4(r8)
 400d3dc:	d8c02015 	stw	r3,128(sp)
 400d3e0:	d8801f15 	stw	r2,124(sp)
 400d3e4:	b0bff60e 	bge	r22,r2,400d3c0 <__alt_data_end+0xfc00d3c0>
 400d3e8:	d9801e04 	addi	r6,sp,120
 400d3ec:	b80b883a 	mov	r5,r23
 400d3f0:	9809883a 	mov	r4,r19
 400d3f4:	40131d80 	call	40131d8 <__sprint_r>
 400d3f8:	103d0a1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d3fc:	d8c02017 	ldw	r3,128(sp)
 400d400:	d8801f17 	ldw	r2,124(sp)
 400d404:	da000404 	addi	r8,sp,16
 400d408:	003fee06 	br	400d3c4 <__alt_data_end+0xfc00d3c4>
 400d40c:	d9403117 	ldw	r5,196(sp)
 400d410:	d8802917 	ldw	r2,164(sp)
 400d414:	28adc83a 	sub	r22,r5,r2
 400d418:	05be410e 	bge	zero,r22,400cd20 <__alt_data_end+0xfc00cd20>
 400d41c:	07000404 	movi	fp,16
 400d420:	d8801f17 	ldw	r2,124(sp)
 400d424:	e5838f0e 	bge	fp,r22,400e264 <___vfprintf_internal_r+0x1e50>
 400d428:	014100b4 	movhi	r5,1026
 400d42c:	296b9984 	addi	r5,r5,-20890
 400d430:	dc403015 	stw	r17,192(sp)
 400d434:	d9402c15 	stw	r5,176(sp)
 400d438:	b023883a 	mov	r17,r22
 400d43c:	04c001c4 	movi	r19,7
 400d440:	a82d883a 	mov	r22,r21
 400d444:	902b883a 	mov	r21,r18
 400d448:	8025883a 	mov	r18,r16
 400d44c:	dc002d17 	ldw	r16,180(sp)
 400d450:	00000306 	br	400d460 <___vfprintf_internal_r+0x104c>
 400d454:	8c7ffc04 	addi	r17,r17,-16
 400d458:	42000204 	addi	r8,r8,8
 400d45c:	e440110e 	bge	fp,r17,400d4a4 <___vfprintf_internal_r+0x1090>
 400d460:	18c00404 	addi	r3,r3,16
 400d464:	10800044 	addi	r2,r2,1
 400d468:	45000015 	stw	r20,0(r8)
 400d46c:	47000115 	stw	fp,4(r8)
 400d470:	d8c02015 	stw	r3,128(sp)
 400d474:	d8801f15 	stw	r2,124(sp)
 400d478:	98bff60e 	bge	r19,r2,400d454 <__alt_data_end+0xfc00d454>
 400d47c:	d9801e04 	addi	r6,sp,120
 400d480:	b80b883a 	mov	r5,r23
 400d484:	8009883a 	mov	r4,r16
 400d488:	40131d80 	call	40131d8 <__sprint_r>
 400d48c:	103ce51e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d490:	8c7ffc04 	addi	r17,r17,-16
 400d494:	d8c02017 	ldw	r3,128(sp)
 400d498:	d8801f17 	ldw	r2,124(sp)
 400d49c:	da000404 	addi	r8,sp,16
 400d4a0:	e47fef16 	blt	fp,r17,400d460 <__alt_data_end+0xfc00d460>
 400d4a4:	9021883a 	mov	r16,r18
 400d4a8:	a825883a 	mov	r18,r21
 400d4ac:	b02b883a 	mov	r21,r22
 400d4b0:	882d883a 	mov	r22,r17
 400d4b4:	dc403017 	ldw	r17,192(sp)
 400d4b8:	d9002c17 	ldw	r4,176(sp)
 400d4bc:	1d87883a 	add	r3,r3,r22
 400d4c0:	10800044 	addi	r2,r2,1
 400d4c4:	41000015 	stw	r4,0(r8)
 400d4c8:	45800115 	stw	r22,4(r8)
 400d4cc:	d8c02015 	stw	r3,128(sp)
 400d4d0:	d8801f15 	stw	r2,124(sp)
 400d4d4:	010001c4 	movi	r4,7
 400d4d8:	20818e16 	blt	r4,r2,400db14 <___vfprintf_internal_r+0x1700>
 400d4dc:	42000204 	addi	r8,r8,8
 400d4e0:	003e0f06 	br	400cd20 <__alt_data_end+0xfc00cd20>
 400d4e4:	d9403317 	ldw	r5,204(sp)
 400d4e8:	00800044 	movi	r2,1
 400d4ec:	18c00044 	addi	r3,r3,1
 400d4f0:	1141530e 	bge	r2,r5,400da40 <___vfprintf_internal_r+0x162c>
 400d4f4:	dc401f17 	ldw	r17,124(sp)
 400d4f8:	00800044 	movi	r2,1
 400d4fc:	40800115 	stw	r2,4(r8)
 400d500:	8c400044 	addi	r17,r17,1
 400d504:	44000015 	stw	r16,0(r8)
 400d508:	d8c02015 	stw	r3,128(sp)
 400d50c:	dc401f15 	stw	r17,124(sp)
 400d510:	008001c4 	movi	r2,7
 400d514:	14416b16 	blt	r2,r17,400dac4 <___vfprintf_internal_r+0x16b0>
 400d518:	42000204 	addi	r8,r8,8
 400d51c:	d8803717 	ldw	r2,220(sp)
 400d520:	d9003417 	ldw	r4,208(sp)
 400d524:	8c400044 	addi	r17,r17,1
 400d528:	10c7883a 	add	r3,r2,r3
 400d52c:	40800115 	stw	r2,4(r8)
 400d530:	41000015 	stw	r4,0(r8)
 400d534:	d8c02015 	stw	r3,128(sp)
 400d538:	dc401f15 	stw	r17,124(sp)
 400d53c:	008001c4 	movi	r2,7
 400d540:	14416916 	blt	r2,r17,400dae8 <___vfprintf_internal_r+0x16d4>
 400d544:	45800204 	addi	r22,r8,8
 400d548:	d9003617 	ldw	r4,216(sp)
 400d54c:	d9403817 	ldw	r5,224(sp)
 400d550:	000d883a 	mov	r6,zero
 400d554:	000f883a 	mov	r7,zero
 400d558:	d8c03c15 	stw	r3,240(sp)
 400d55c:	400a0240 	call	400a024 <__eqdf2>
 400d560:	d8c03c17 	ldw	r3,240(sp)
 400d564:	1000bc26 	beq	r2,zero,400d858 <___vfprintf_internal_r+0x1444>
 400d568:	d9403317 	ldw	r5,204(sp)
 400d56c:	84000044 	addi	r16,r16,1
 400d570:	8c400044 	addi	r17,r17,1
 400d574:	28bfffc4 	addi	r2,r5,-1
 400d578:	1887883a 	add	r3,r3,r2
 400d57c:	b0800115 	stw	r2,4(r22)
 400d580:	b4000015 	stw	r16,0(r22)
 400d584:	d8c02015 	stw	r3,128(sp)
 400d588:	dc401f15 	stw	r17,124(sp)
 400d58c:	008001c4 	movi	r2,7
 400d590:	14414316 	blt	r2,r17,400daa0 <___vfprintf_internal_r+0x168c>
 400d594:	b5800204 	addi	r22,r22,8
 400d598:	d9003a17 	ldw	r4,232(sp)
 400d59c:	df0022c4 	addi	fp,sp,139
 400d5a0:	8c400044 	addi	r17,r17,1
 400d5a4:	20c7883a 	add	r3,r4,r3
 400d5a8:	b7000015 	stw	fp,0(r22)
 400d5ac:	b1000115 	stw	r4,4(r22)
 400d5b0:	d8c02015 	stw	r3,128(sp)
 400d5b4:	dc401f15 	stw	r17,124(sp)
 400d5b8:	008001c4 	movi	r2,7
 400d5bc:	14400e16 	blt	r2,r17,400d5f8 <___vfprintf_internal_r+0x11e4>
 400d5c0:	b2000204 	addi	r8,r22,8
 400d5c4:	003e1806 	br	400ce28 <__alt_data_end+0xfc00ce28>
 400d5c8:	010100b4 	movhi	r4,1026
 400d5cc:	212b9984 	addi	r4,r4,-20890
 400d5d0:	d9002c15 	stw	r4,176(sp)
 400d5d4:	d9002c17 	ldw	r4,176(sp)
 400d5d8:	1c07883a 	add	r3,r3,r16
 400d5dc:	44000115 	stw	r16,4(r8)
 400d5e0:	41000015 	stw	r4,0(r8)
 400d5e4:	10800044 	addi	r2,r2,1
 400d5e8:	d8c02015 	stw	r3,128(sp)
 400d5ec:	d8801f15 	stw	r2,124(sp)
 400d5f0:	010001c4 	movi	r4,7
 400d5f4:	20be0b0e 	bge	r4,r2,400ce24 <__alt_data_end+0xfc00ce24>
 400d5f8:	d9002d17 	ldw	r4,180(sp)
 400d5fc:	d9801e04 	addi	r6,sp,120
 400d600:	b80b883a 	mov	r5,r23
 400d604:	40131d80 	call	40131d8 <__sprint_r>
 400d608:	103c861e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d60c:	d8c02017 	ldw	r3,128(sp)
 400d610:	da000404 	addi	r8,sp,16
 400d614:	003e0406 	br	400ce28 <__alt_data_end+0xfc00ce28>
 400d618:	d9002d17 	ldw	r4,180(sp)
 400d61c:	d9801e04 	addi	r6,sp,120
 400d620:	b80b883a 	mov	r5,r23
 400d624:	40131d80 	call	40131d8 <__sprint_r>
 400d628:	103e3b26 	beq	r2,zero,400cf18 <__alt_data_end+0xfc00cf18>
 400d62c:	003c7d06 	br	400c824 <__alt_data_end+0xfc00c824>
 400d630:	d9002d17 	ldw	r4,180(sp)
 400d634:	d9801e04 	addi	r6,sp,120
 400d638:	b80b883a 	mov	r5,r23
 400d63c:	40131d80 	call	40131d8 <__sprint_r>
 400d640:	103c781e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d644:	d8c02017 	ldw	r3,128(sp)
 400d648:	da000404 	addi	r8,sp,16
 400d64c:	003de906 	br	400cdf4 <__alt_data_end+0xfc00cdf4>
 400d650:	d9002d17 	ldw	r4,180(sp)
 400d654:	d9801e04 	addi	r6,sp,120
 400d658:	b80b883a 	mov	r5,r23
 400d65c:	40131d80 	call	40131d8 <__sprint_r>
 400d660:	103c701e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d664:	d8c02017 	ldw	r3,128(sp)
 400d668:	da000404 	addi	r8,sp,16
 400d66c:	003d9b06 	br	400ccdc <__alt_data_end+0xfc00ccdc>
 400d670:	d9002d17 	ldw	r4,180(sp)
 400d674:	d9801e04 	addi	r6,sp,120
 400d678:	b80b883a 	mov	r5,r23
 400d67c:	40131d80 	call	40131d8 <__sprint_r>
 400d680:	103c681e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d684:	d8c02017 	ldw	r3,128(sp)
 400d688:	da000404 	addi	r8,sp,16
 400d68c:	003da106 	br	400cd14 <__alt_data_end+0xfc00cd14>
 400d690:	d9402a17 	ldw	r5,168(sp)
 400d694:	d8002785 	stb	zero,158(sp)
 400d698:	283f0616 	blt	r5,zero,400d2b4 <__alt_data_end+0xfc00d2b4>
 400d69c:	00ffdfc4 	movi	r3,-129
 400d6a0:	9d84b03a 	or	r2,r19,r22
 400d6a4:	90e4703a 	and	r18,r18,r3
 400d6a8:	103c3b26 	beq	r2,zero,400c798 <__alt_data_end+0xfc00c798>
 400d6ac:	0039883a 	mov	fp,zero
 400d6b0:	003e5806 	br	400d014 <__alt_data_end+0xfc00d014>
 400d6b4:	9080040c 	andi	r2,r18,16
 400d6b8:	1001b326 	beq	r2,zero,400dd88 <___vfprintf_internal_r+0x1974>
 400d6bc:	d8c02e17 	ldw	r3,184(sp)
 400d6c0:	d9002a17 	ldw	r4,168(sp)
 400d6c4:	d8002785 	stb	zero,158(sp)
 400d6c8:	18800104 	addi	r2,r3,4
 400d6cc:	1cc00017 	ldw	r19,0(r3)
 400d6d0:	002d883a 	mov	r22,zero
 400d6d4:	2001b516 	blt	r4,zero,400ddac <___vfprintf_internal_r+0x1998>
 400d6d8:	00ffdfc4 	movi	r3,-129
 400d6dc:	d8802e15 	stw	r2,184(sp)
 400d6e0:	90e4703a 	and	r18,r18,r3
 400d6e4:	983d0526 	beq	r19,zero,400cafc <__alt_data_end+0xfc00cafc>
 400d6e8:	0039883a 	mov	fp,zero
 400d6ec:	003d0806 	br	400cb10 <__alt_data_end+0xfc00cb10>
 400d6f0:	dc402617 	ldw	r17,152(sp)
 400d6f4:	0441d30e 	bge	zero,r17,400de44 <___vfprintf_internal_r+0x1a30>
 400d6f8:	dc403217 	ldw	r17,200(sp)
 400d6fc:	d8803317 	ldw	r2,204(sp)
 400d700:	1440010e 	bge	r2,r17,400d708 <___vfprintf_internal_r+0x12f4>
 400d704:	1023883a 	mov	r17,r2
 400d708:	04400a0e 	bge	zero,r17,400d734 <___vfprintf_internal_r+0x1320>
 400d70c:	d8801f17 	ldw	r2,124(sp)
 400d710:	1c47883a 	add	r3,r3,r17
 400d714:	44000015 	stw	r16,0(r8)
 400d718:	10800044 	addi	r2,r2,1
 400d71c:	44400115 	stw	r17,4(r8)
 400d720:	d8c02015 	stw	r3,128(sp)
 400d724:	d8801f15 	stw	r2,124(sp)
 400d728:	010001c4 	movi	r4,7
 400d72c:	20826516 	blt	r4,r2,400e0c4 <___vfprintf_internal_r+0x1cb0>
 400d730:	42000204 	addi	r8,r8,8
 400d734:	88026116 	blt	r17,zero,400e0bc <___vfprintf_internal_r+0x1ca8>
 400d738:	d9003217 	ldw	r4,200(sp)
 400d73c:	2463c83a 	sub	r17,r4,r17
 400d740:	04407b0e 	bge	zero,r17,400d930 <___vfprintf_internal_r+0x151c>
 400d744:	05800404 	movi	r22,16
 400d748:	d8801f17 	ldw	r2,124(sp)
 400d74c:	b4419d0e 	bge	r22,r17,400ddc4 <___vfprintf_internal_r+0x19b0>
 400d750:	010100b4 	movhi	r4,1026
 400d754:	212b9984 	addi	r4,r4,-20890
 400d758:	d9002c15 	stw	r4,176(sp)
 400d75c:	070001c4 	movi	fp,7
 400d760:	dcc02d17 	ldw	r19,180(sp)
 400d764:	00000306 	br	400d774 <___vfprintf_internal_r+0x1360>
 400d768:	42000204 	addi	r8,r8,8
 400d76c:	8c7ffc04 	addi	r17,r17,-16
 400d770:	b441970e 	bge	r22,r17,400ddd0 <___vfprintf_internal_r+0x19bc>
 400d774:	18c00404 	addi	r3,r3,16
 400d778:	10800044 	addi	r2,r2,1
 400d77c:	45000015 	stw	r20,0(r8)
 400d780:	45800115 	stw	r22,4(r8)
 400d784:	d8c02015 	stw	r3,128(sp)
 400d788:	d8801f15 	stw	r2,124(sp)
 400d78c:	e0bff60e 	bge	fp,r2,400d768 <__alt_data_end+0xfc00d768>
 400d790:	d9801e04 	addi	r6,sp,120
 400d794:	b80b883a 	mov	r5,r23
 400d798:	9809883a 	mov	r4,r19
 400d79c:	40131d80 	call	40131d8 <__sprint_r>
 400d7a0:	103c201e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d7a4:	d8c02017 	ldw	r3,128(sp)
 400d7a8:	d8801f17 	ldw	r2,124(sp)
 400d7ac:	da000404 	addi	r8,sp,16
 400d7b0:	003fee06 	br	400d76c <__alt_data_end+0xfc00d76c>
 400d7b4:	d9002d17 	ldw	r4,180(sp)
 400d7b8:	d9801e04 	addi	r6,sp,120
 400d7bc:	b80b883a 	mov	r5,r23
 400d7c0:	40131d80 	call	40131d8 <__sprint_r>
 400d7c4:	103c171e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d7c8:	d8c02017 	ldw	r3,128(sp)
 400d7cc:	df002787 	ldb	fp,158(sp)
 400d7d0:	da000404 	addi	r8,sp,16
 400d7d4:	003d3406 	br	400cca8 <__alt_data_end+0xfc00cca8>
 400d7d8:	9080040c 	andi	r2,r18,16
 400d7dc:	10016126 	beq	r2,zero,400dd64 <___vfprintf_internal_r+0x1950>
 400d7e0:	d9402e17 	ldw	r5,184(sp)
 400d7e4:	2cc00017 	ldw	r19,0(r5)
 400d7e8:	29400104 	addi	r5,r5,4
 400d7ec:	d9402e15 	stw	r5,184(sp)
 400d7f0:	982dd7fa 	srai	r22,r19,31
 400d7f4:	b005883a 	mov	r2,r22
 400d7f8:	003c5a06 	br	400c964 <__alt_data_end+0xfc00c964>
 400d7fc:	9080040c 	andi	r2,r18,16
 400d800:	10003526 	beq	r2,zero,400d8d8 <___vfprintf_internal_r+0x14c4>
 400d804:	d8c02e17 	ldw	r3,184(sp)
 400d808:	d9002a17 	ldw	r4,168(sp)
 400d80c:	d8002785 	stb	zero,158(sp)
 400d810:	18800104 	addi	r2,r3,4
 400d814:	1cc00017 	ldw	r19,0(r3)
 400d818:	002d883a 	mov	r22,zero
 400d81c:	20003716 	blt	r4,zero,400d8fc <___vfprintf_internal_r+0x14e8>
 400d820:	00ffdfc4 	movi	r3,-129
 400d824:	d8802e15 	stw	r2,184(sp)
 400d828:	90e4703a 	and	r18,r18,r3
 400d82c:	0039883a 	mov	fp,zero
 400d830:	983dd426 	beq	r19,zero,400cf84 <__alt_data_end+0xfc00cf84>
 400d834:	00800244 	movi	r2,9
 400d838:	14fc5336 	bltu	r2,r19,400c988 <__alt_data_end+0xfc00c988>
 400d83c:	d8c02817 	ldw	r3,160(sp)
 400d840:	dc001dc4 	addi	r16,sp,119
 400d844:	9cc00c04 	addi	r19,r19,48
 400d848:	1c07c83a 	sub	r3,r3,r16
 400d84c:	dcc01dc5 	stb	r19,119(sp)
 400d850:	d8c02b15 	stw	r3,172(sp)
 400d854:	003cc606 	br	400cb70 <__alt_data_end+0xfc00cb70>
 400d858:	d8803317 	ldw	r2,204(sp)
 400d85c:	143fffc4 	addi	r16,r2,-1
 400d860:	043f4d0e 	bge	zero,r16,400d598 <__alt_data_end+0xfc00d598>
 400d864:	07000404 	movi	fp,16
 400d868:	e400810e 	bge	fp,r16,400da70 <___vfprintf_internal_r+0x165c>
 400d86c:	014100b4 	movhi	r5,1026
 400d870:	296b9984 	addi	r5,r5,-20890
 400d874:	d9402c15 	stw	r5,176(sp)
 400d878:	01c001c4 	movi	r7,7
 400d87c:	dcc02d17 	ldw	r19,180(sp)
 400d880:	00000306 	br	400d890 <___vfprintf_internal_r+0x147c>
 400d884:	b5800204 	addi	r22,r22,8
 400d888:	843ffc04 	addi	r16,r16,-16
 400d88c:	e4007b0e 	bge	fp,r16,400da7c <___vfprintf_internal_r+0x1668>
 400d890:	18c00404 	addi	r3,r3,16
 400d894:	8c400044 	addi	r17,r17,1
 400d898:	b5000015 	stw	r20,0(r22)
 400d89c:	b7000115 	stw	fp,4(r22)
 400d8a0:	d8c02015 	stw	r3,128(sp)
 400d8a4:	dc401f15 	stw	r17,124(sp)
 400d8a8:	3c7ff60e 	bge	r7,r17,400d884 <__alt_data_end+0xfc00d884>
 400d8ac:	d9801e04 	addi	r6,sp,120
 400d8b0:	b80b883a 	mov	r5,r23
 400d8b4:	9809883a 	mov	r4,r19
 400d8b8:	d9c03c15 	stw	r7,240(sp)
 400d8bc:	40131d80 	call	40131d8 <__sprint_r>
 400d8c0:	d9c03c17 	ldw	r7,240(sp)
 400d8c4:	103bd71e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d8c8:	d8c02017 	ldw	r3,128(sp)
 400d8cc:	dc401f17 	ldw	r17,124(sp)
 400d8d0:	dd800404 	addi	r22,sp,16
 400d8d4:	003fec06 	br	400d888 <__alt_data_end+0xfc00d888>
 400d8d8:	9080100c 	andi	r2,r18,64
 400d8dc:	d8002785 	stb	zero,158(sp)
 400d8e0:	10010e26 	beq	r2,zero,400dd1c <___vfprintf_internal_r+0x1908>
 400d8e4:	d9402e17 	ldw	r5,184(sp)
 400d8e8:	d8c02a17 	ldw	r3,168(sp)
 400d8ec:	002d883a 	mov	r22,zero
 400d8f0:	28800104 	addi	r2,r5,4
 400d8f4:	2cc0000b 	ldhu	r19,0(r5)
 400d8f8:	183fc90e 	bge	r3,zero,400d820 <__alt_data_end+0xfc00d820>
 400d8fc:	d8802e15 	stw	r2,184(sp)
 400d900:	0039883a 	mov	fp,zero
 400d904:	9d84b03a 	or	r2,r19,r22
 400d908:	103c1e1e 	bne	r2,zero,400c984 <__alt_data_end+0xfc00c984>
 400d90c:	00800044 	movi	r2,1
 400d910:	003e6c06 	br	400d2c4 <__alt_data_end+0xfc00d2c4>
 400d914:	d9002d17 	ldw	r4,180(sp)
 400d918:	d9801e04 	addi	r6,sp,120
 400d91c:	b80b883a 	mov	r5,r23
 400d920:	40131d80 	call	40131d8 <__sprint_r>
 400d924:	103bbf1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400d928:	d8c02017 	ldw	r3,128(sp)
 400d92c:	da000404 	addi	r8,sp,16
 400d930:	d9003217 	ldw	r4,200(sp)
 400d934:	d8802617 	ldw	r2,152(sp)
 400d938:	d9403317 	ldw	r5,204(sp)
 400d93c:	8123883a 	add	r17,r16,r4
 400d940:	11400216 	blt	r2,r5,400d94c <___vfprintf_internal_r+0x1538>
 400d944:	9100004c 	andi	r4,r18,1
 400d948:	20000d26 	beq	r4,zero,400d980 <___vfprintf_internal_r+0x156c>
 400d94c:	d9003717 	ldw	r4,220(sp)
 400d950:	d9403417 	ldw	r5,208(sp)
 400d954:	1907883a 	add	r3,r3,r4
 400d958:	d9001f17 	ldw	r4,124(sp)
 400d95c:	41400015 	stw	r5,0(r8)
 400d960:	d9403717 	ldw	r5,220(sp)
 400d964:	21000044 	addi	r4,r4,1
 400d968:	d8c02015 	stw	r3,128(sp)
 400d96c:	41400115 	stw	r5,4(r8)
 400d970:	d9001f15 	stw	r4,124(sp)
 400d974:	014001c4 	movi	r5,7
 400d978:	2901e816 	blt	r5,r4,400e11c <___vfprintf_internal_r+0x1d08>
 400d97c:	42000204 	addi	r8,r8,8
 400d980:	d9003317 	ldw	r4,204(sp)
 400d984:	8121883a 	add	r16,r16,r4
 400d988:	2085c83a 	sub	r2,r4,r2
 400d98c:	8461c83a 	sub	r16,r16,r17
 400d990:	1400010e 	bge	r2,r16,400d998 <___vfprintf_internal_r+0x1584>
 400d994:	1021883a 	mov	r16,r2
 400d998:	04000a0e 	bge	zero,r16,400d9c4 <___vfprintf_internal_r+0x15b0>
 400d99c:	d9001f17 	ldw	r4,124(sp)
 400d9a0:	1c07883a 	add	r3,r3,r16
 400d9a4:	44400015 	stw	r17,0(r8)
 400d9a8:	21000044 	addi	r4,r4,1
 400d9ac:	44000115 	stw	r16,4(r8)
 400d9b0:	d8c02015 	stw	r3,128(sp)
 400d9b4:	d9001f15 	stw	r4,124(sp)
 400d9b8:	014001c4 	movi	r5,7
 400d9bc:	2901fb16 	blt	r5,r4,400e1ac <___vfprintf_internal_r+0x1d98>
 400d9c0:	42000204 	addi	r8,r8,8
 400d9c4:	8001f716 	blt	r16,zero,400e1a4 <___vfprintf_internal_r+0x1d90>
 400d9c8:	1421c83a 	sub	r16,r2,r16
 400d9cc:	043d160e 	bge	zero,r16,400ce28 <__alt_data_end+0xfc00ce28>
 400d9d0:	04400404 	movi	r17,16
 400d9d4:	d8801f17 	ldw	r2,124(sp)
 400d9d8:	8c3efb0e 	bge	r17,r16,400d5c8 <__alt_data_end+0xfc00d5c8>
 400d9dc:	014100b4 	movhi	r5,1026
 400d9e0:	296b9984 	addi	r5,r5,-20890
 400d9e4:	d9402c15 	stw	r5,176(sp)
 400d9e8:	058001c4 	movi	r22,7
 400d9ec:	dcc02d17 	ldw	r19,180(sp)
 400d9f0:	00000306 	br	400da00 <___vfprintf_internal_r+0x15ec>
 400d9f4:	42000204 	addi	r8,r8,8
 400d9f8:	843ffc04 	addi	r16,r16,-16
 400d9fc:	8c3ef50e 	bge	r17,r16,400d5d4 <__alt_data_end+0xfc00d5d4>
 400da00:	18c00404 	addi	r3,r3,16
 400da04:	10800044 	addi	r2,r2,1
 400da08:	45000015 	stw	r20,0(r8)
 400da0c:	44400115 	stw	r17,4(r8)
 400da10:	d8c02015 	stw	r3,128(sp)
 400da14:	d8801f15 	stw	r2,124(sp)
 400da18:	b0bff60e 	bge	r22,r2,400d9f4 <__alt_data_end+0xfc00d9f4>
 400da1c:	d9801e04 	addi	r6,sp,120
 400da20:	b80b883a 	mov	r5,r23
 400da24:	9809883a 	mov	r4,r19
 400da28:	40131d80 	call	40131d8 <__sprint_r>
 400da2c:	103b7d1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400da30:	d8c02017 	ldw	r3,128(sp)
 400da34:	d8801f17 	ldw	r2,124(sp)
 400da38:	da000404 	addi	r8,sp,16
 400da3c:	003fee06 	br	400d9f8 <__alt_data_end+0xfc00d9f8>
 400da40:	9088703a 	and	r4,r18,r2
 400da44:	203eab1e 	bne	r4,zero,400d4f4 <__alt_data_end+0xfc00d4f4>
 400da48:	dc401f17 	ldw	r17,124(sp)
 400da4c:	40800115 	stw	r2,4(r8)
 400da50:	44000015 	stw	r16,0(r8)
 400da54:	8c400044 	addi	r17,r17,1
 400da58:	d8c02015 	stw	r3,128(sp)
 400da5c:	dc401f15 	stw	r17,124(sp)
 400da60:	008001c4 	movi	r2,7
 400da64:	14400e16 	blt	r2,r17,400daa0 <___vfprintf_internal_r+0x168c>
 400da68:	45800204 	addi	r22,r8,8
 400da6c:	003eca06 	br	400d598 <__alt_data_end+0xfc00d598>
 400da70:	010100b4 	movhi	r4,1026
 400da74:	212b9984 	addi	r4,r4,-20890
 400da78:	d9002c15 	stw	r4,176(sp)
 400da7c:	d8802c17 	ldw	r2,176(sp)
 400da80:	1c07883a 	add	r3,r3,r16
 400da84:	8c400044 	addi	r17,r17,1
 400da88:	b0800015 	stw	r2,0(r22)
 400da8c:	b4000115 	stw	r16,4(r22)
 400da90:	d8c02015 	stw	r3,128(sp)
 400da94:	dc401f15 	stw	r17,124(sp)
 400da98:	008001c4 	movi	r2,7
 400da9c:	147ebd0e 	bge	r2,r17,400d594 <__alt_data_end+0xfc00d594>
 400daa0:	d9002d17 	ldw	r4,180(sp)
 400daa4:	d9801e04 	addi	r6,sp,120
 400daa8:	b80b883a 	mov	r5,r23
 400daac:	40131d80 	call	40131d8 <__sprint_r>
 400dab0:	103b5c1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400dab4:	d8c02017 	ldw	r3,128(sp)
 400dab8:	dc401f17 	ldw	r17,124(sp)
 400dabc:	dd800404 	addi	r22,sp,16
 400dac0:	003eb506 	br	400d598 <__alt_data_end+0xfc00d598>
 400dac4:	d9002d17 	ldw	r4,180(sp)
 400dac8:	d9801e04 	addi	r6,sp,120
 400dacc:	b80b883a 	mov	r5,r23
 400dad0:	40131d80 	call	40131d8 <__sprint_r>
 400dad4:	103b531e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400dad8:	d8c02017 	ldw	r3,128(sp)
 400dadc:	dc401f17 	ldw	r17,124(sp)
 400dae0:	da000404 	addi	r8,sp,16
 400dae4:	003e8d06 	br	400d51c <__alt_data_end+0xfc00d51c>
 400dae8:	d9002d17 	ldw	r4,180(sp)
 400daec:	d9801e04 	addi	r6,sp,120
 400daf0:	b80b883a 	mov	r5,r23
 400daf4:	40131d80 	call	40131d8 <__sprint_r>
 400daf8:	103b4a1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400dafc:	d8c02017 	ldw	r3,128(sp)
 400db00:	dc401f17 	ldw	r17,124(sp)
 400db04:	dd800404 	addi	r22,sp,16
 400db08:	003e8f06 	br	400d548 <__alt_data_end+0xfc00d548>
 400db0c:	0027883a 	mov	r19,zero
 400db10:	003f4a06 	br	400d83c <__alt_data_end+0xfc00d83c>
 400db14:	d9002d17 	ldw	r4,180(sp)
 400db18:	d9801e04 	addi	r6,sp,120
 400db1c:	b80b883a 	mov	r5,r23
 400db20:	40131d80 	call	40131d8 <__sprint_r>
 400db24:	103b3f1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400db28:	d8c02017 	ldw	r3,128(sp)
 400db2c:	da000404 	addi	r8,sp,16
 400db30:	003c7b06 	br	400cd20 <__alt_data_end+0xfc00cd20>
 400db34:	d9402a17 	ldw	r5,168(sp)
 400db38:	04e7c83a 	sub	r19,zero,r19
 400db3c:	07000b44 	movi	fp,45
 400db40:	9804c03a 	cmpne	r2,r19,zero
 400db44:	05adc83a 	sub	r22,zero,r22
 400db48:	df002785 	stb	fp,158(sp)
 400db4c:	b0adc83a 	sub	r22,r22,r2
 400db50:	28017b16 	blt	r5,zero,400e140 <___vfprintf_internal_r+0x1d2c>
 400db54:	00bfdfc4 	movi	r2,-129
 400db58:	90a4703a 	and	r18,r18,r2
 400db5c:	003b8906 	br	400c984 <__alt_data_end+0xfc00c984>
 400db60:	d9003617 	ldw	r4,216(sp)
 400db64:	d9403817 	ldw	r5,224(sp)
 400db68:	da003d15 	stw	r8,244(sp)
 400db6c:	4007acc0 	call	4007acc <__fpclassifyd>
 400db70:	da003d17 	ldw	r8,244(sp)
 400db74:	1000f026 	beq	r2,zero,400df38 <___vfprintf_internal_r+0x1b24>
 400db78:	d9002a17 	ldw	r4,168(sp)
 400db7c:	05bff7c4 	movi	r22,-33
 400db80:	00bfffc4 	movi	r2,-1
 400db84:	8dac703a 	and	r22,r17,r22
 400db88:	20820026 	beq	r4,r2,400e38c <___vfprintf_internal_r+0x1f78>
 400db8c:	008011c4 	movi	r2,71
 400db90:	b081f726 	beq	r22,r2,400e370 <___vfprintf_internal_r+0x1f5c>
 400db94:	d9003817 	ldw	r4,224(sp)
 400db98:	90c04014 	ori	r3,r18,256
 400db9c:	d8c02c15 	stw	r3,176(sp)
 400dba0:	20021516 	blt	r4,zero,400e3f8 <___vfprintf_internal_r+0x1fe4>
 400dba4:	dcc03817 	ldw	r19,224(sp)
 400dba8:	d8002905 	stb	zero,164(sp)
 400dbac:	00801984 	movi	r2,102
 400dbb0:	8881f926 	beq	r17,r2,400e398 <___vfprintf_internal_r+0x1f84>
 400dbb4:	00801184 	movi	r2,70
 400dbb8:	88821c26 	beq	r17,r2,400e42c <___vfprintf_internal_r+0x2018>
 400dbbc:	00801144 	movi	r2,69
 400dbc0:	b081ef26 	beq	r22,r2,400e380 <___vfprintf_internal_r+0x1f6c>
 400dbc4:	d8c02a17 	ldw	r3,168(sp)
 400dbc8:	d8802104 	addi	r2,sp,132
 400dbcc:	d8800315 	stw	r2,12(sp)
 400dbd0:	d9403617 	ldw	r5,216(sp)
 400dbd4:	d8802504 	addi	r2,sp,148
 400dbd8:	d9002d17 	ldw	r4,180(sp)
 400dbdc:	d8800215 	stw	r2,8(sp)
 400dbe0:	d8802604 	addi	r2,sp,152
 400dbe4:	d8c00015 	stw	r3,0(sp)
 400dbe8:	d8800115 	stw	r2,4(sp)
 400dbec:	01c00084 	movi	r7,2
 400dbf0:	980d883a 	mov	r6,r19
 400dbf4:	d8c03c15 	stw	r3,240(sp)
 400dbf8:	da003d15 	stw	r8,244(sp)
 400dbfc:	400eb440 	call	400eb44 <_dtoa_r>
 400dc00:	1021883a 	mov	r16,r2
 400dc04:	008019c4 	movi	r2,103
 400dc08:	d8c03c17 	ldw	r3,240(sp)
 400dc0c:	da003d17 	ldw	r8,244(sp)
 400dc10:	88817126 	beq	r17,r2,400e1d8 <___vfprintf_internal_r+0x1dc4>
 400dc14:	008011c4 	movi	r2,71
 400dc18:	88829126 	beq	r17,r2,400e660 <___vfprintf_internal_r+0x224c>
 400dc1c:	80f9883a 	add	fp,r16,r3
 400dc20:	d9003617 	ldw	r4,216(sp)
 400dc24:	000d883a 	mov	r6,zero
 400dc28:	000f883a 	mov	r7,zero
 400dc2c:	980b883a 	mov	r5,r19
 400dc30:	da003d15 	stw	r8,244(sp)
 400dc34:	400a0240 	call	400a024 <__eqdf2>
 400dc38:	da003d17 	ldw	r8,244(sp)
 400dc3c:	10018d26 	beq	r2,zero,400e274 <___vfprintf_internal_r+0x1e60>
 400dc40:	d8802117 	ldw	r2,132(sp)
 400dc44:	1700062e 	bgeu	r2,fp,400dc60 <___vfprintf_internal_r+0x184c>
 400dc48:	01000c04 	movi	r4,48
 400dc4c:	10c00044 	addi	r3,r2,1
 400dc50:	d8c02115 	stw	r3,132(sp)
 400dc54:	11000005 	stb	r4,0(r2)
 400dc58:	d8802117 	ldw	r2,132(sp)
 400dc5c:	173ffb36 	bltu	r2,fp,400dc4c <__alt_data_end+0xfc00dc4c>
 400dc60:	1405c83a 	sub	r2,r2,r16
 400dc64:	d8803315 	stw	r2,204(sp)
 400dc68:	008011c4 	movi	r2,71
 400dc6c:	b0817626 	beq	r22,r2,400e248 <___vfprintf_internal_r+0x1e34>
 400dc70:	00801944 	movi	r2,101
 400dc74:	1442800e 	bge	r2,r17,400e678 <___vfprintf_internal_r+0x2264>
 400dc78:	d8c02617 	ldw	r3,152(sp)
 400dc7c:	00801984 	movi	r2,102
 400dc80:	d8c03215 	stw	r3,200(sp)
 400dc84:	8881fe26 	beq	r17,r2,400e480 <___vfprintf_internal_r+0x206c>
 400dc88:	d8c03217 	ldw	r3,200(sp)
 400dc8c:	d9003317 	ldw	r4,204(sp)
 400dc90:	1901dd16 	blt	r3,r4,400e408 <___vfprintf_internal_r+0x1ff4>
 400dc94:	9480004c 	andi	r18,r18,1
 400dc98:	90022b1e 	bne	r18,zero,400e548 <___vfprintf_internal_r+0x2134>
 400dc9c:	1805883a 	mov	r2,r3
 400dca0:	18028316 	blt	r3,zero,400e6b0 <___vfprintf_internal_r+0x229c>
 400dca4:	d8c03217 	ldw	r3,200(sp)
 400dca8:	044019c4 	movi	r17,103
 400dcac:	d8c02b15 	stw	r3,172(sp)
 400dcb0:	df002907 	ldb	fp,164(sp)
 400dcb4:	e001531e 	bne	fp,zero,400e204 <___vfprintf_internal_r+0x1df0>
 400dcb8:	df002783 	ldbu	fp,158(sp)
 400dcbc:	d8802915 	stw	r2,164(sp)
 400dcc0:	dc802c17 	ldw	r18,176(sp)
 400dcc4:	d8002a15 	stw	zero,168(sp)
 400dcc8:	003baf06 	br	400cb88 <__alt_data_end+0xfc00cb88>
 400dccc:	d8c02e17 	ldw	r3,184(sp)
 400dcd0:	d9002e17 	ldw	r4,184(sp)
 400dcd4:	d9402e17 	ldw	r5,184(sp)
 400dcd8:	18c00017 	ldw	r3,0(r3)
 400dcdc:	21000117 	ldw	r4,4(r4)
 400dce0:	29400204 	addi	r5,r5,8
 400dce4:	d8c03615 	stw	r3,216(sp)
 400dce8:	d9003815 	stw	r4,224(sp)
 400dcec:	d9402e15 	stw	r5,184(sp)
 400dcf0:	003b5006 	br	400ca34 <__alt_data_end+0xfc00ca34>
 400dcf4:	ac400007 	ldb	r17,0(r21)
 400dcf8:	003a2806 	br	400c59c <__alt_data_end+0xfc00c59c>
 400dcfc:	9080100c 	andi	r2,r18,64
 400dd00:	1000a826 	beq	r2,zero,400dfa4 <___vfprintf_internal_r+0x1b90>
 400dd04:	d8c02e17 	ldw	r3,184(sp)
 400dd08:	002d883a 	mov	r22,zero
 400dd0c:	1cc0000b 	ldhu	r19,0(r3)
 400dd10:	18c00104 	addi	r3,r3,4
 400dd14:	d8c02e15 	stw	r3,184(sp)
 400dd18:	003caf06 	br	400cfd8 <__alt_data_end+0xfc00cfd8>
 400dd1c:	d9002e17 	ldw	r4,184(sp)
 400dd20:	d9402a17 	ldw	r5,168(sp)
 400dd24:	002d883a 	mov	r22,zero
 400dd28:	20800104 	addi	r2,r4,4
 400dd2c:	24c00017 	ldw	r19,0(r4)
 400dd30:	283ebb0e 	bge	r5,zero,400d820 <__alt_data_end+0xfc00d820>
 400dd34:	003ef106 	br	400d8fc <__alt_data_end+0xfc00d8fc>
 400dd38:	9080040c 	andi	r2,r18,16
 400dd3c:	1000921e 	bne	r2,zero,400df88 <___vfprintf_internal_r+0x1b74>
 400dd40:	9480100c 	andi	r18,r18,64
 400dd44:	90013926 	beq	r18,zero,400e22c <___vfprintf_internal_r+0x1e18>
 400dd48:	d9402e17 	ldw	r5,184(sp)
 400dd4c:	d8c02f17 	ldw	r3,188(sp)
 400dd50:	28800017 	ldw	r2,0(r5)
 400dd54:	29400104 	addi	r5,r5,4
 400dd58:	d9402e15 	stw	r5,184(sp)
 400dd5c:	10c0000d 	sth	r3,0(r2)
 400dd60:	0039e406 	br	400c4f4 <__alt_data_end+0xfc00c4f4>
 400dd64:	9080100c 	andi	r2,r18,64
 400dd68:	10008026 	beq	r2,zero,400df6c <___vfprintf_internal_r+0x1b58>
 400dd6c:	d8802e17 	ldw	r2,184(sp)
 400dd70:	14c0000f 	ldh	r19,0(r2)
 400dd74:	10800104 	addi	r2,r2,4
 400dd78:	d8802e15 	stw	r2,184(sp)
 400dd7c:	982dd7fa 	srai	r22,r19,31
 400dd80:	b005883a 	mov	r2,r22
 400dd84:	003af706 	br	400c964 <__alt_data_end+0xfc00c964>
 400dd88:	9080100c 	andi	r2,r18,64
 400dd8c:	d8002785 	stb	zero,158(sp)
 400dd90:	10008a1e 	bne	r2,zero,400dfbc <___vfprintf_internal_r+0x1ba8>
 400dd94:	d9002e17 	ldw	r4,184(sp)
 400dd98:	d9402a17 	ldw	r5,168(sp)
 400dd9c:	002d883a 	mov	r22,zero
 400dda0:	20800104 	addi	r2,r4,4
 400dda4:	24c00017 	ldw	r19,0(r4)
 400dda8:	283e4b0e 	bge	r5,zero,400d6d8 <__alt_data_end+0xfc00d6d8>
 400ddac:	9d86b03a 	or	r3,r19,r22
 400ddb0:	d8802e15 	stw	r2,184(sp)
 400ddb4:	183e4c1e 	bne	r3,zero,400d6e8 <__alt_data_end+0xfc00d6e8>
 400ddb8:	0039883a 	mov	fp,zero
 400ddbc:	0005883a 	mov	r2,zero
 400ddc0:	003d4006 	br	400d2c4 <__alt_data_end+0xfc00d2c4>
 400ddc4:	014100b4 	movhi	r5,1026
 400ddc8:	296b9984 	addi	r5,r5,-20890
 400ddcc:	d9402c15 	stw	r5,176(sp)
 400ddd0:	d9402c17 	ldw	r5,176(sp)
 400ddd4:	1c47883a 	add	r3,r3,r17
 400ddd8:	10800044 	addi	r2,r2,1
 400dddc:	41400015 	stw	r5,0(r8)
 400dde0:	44400115 	stw	r17,4(r8)
 400dde4:	d8c02015 	stw	r3,128(sp)
 400dde8:	d8801f15 	stw	r2,124(sp)
 400ddec:	010001c4 	movi	r4,7
 400ddf0:	20bec816 	blt	r4,r2,400d914 <__alt_data_end+0xfc00d914>
 400ddf4:	42000204 	addi	r8,r8,8
 400ddf8:	003ecd06 	br	400d930 <__alt_data_end+0xfc00d930>
 400ddfc:	d9002a17 	ldw	r4,168(sp)
 400de00:	d8002785 	stb	zero,158(sp)
 400de04:	203d2d16 	blt	r4,zero,400d2bc <__alt_data_end+0xfc00d2bc>
 400de08:	00bfdfc4 	movi	r2,-129
 400de0c:	90a4703a 	and	r18,r18,r2
 400de10:	003a6106 	br	400c798 <__alt_data_end+0xfc00c798>
 400de14:	010100b4 	movhi	r4,1026
 400de18:	212b9984 	addi	r4,r4,-20890
 400de1c:	d9002c15 	stw	r4,176(sp)
 400de20:	003bea06 	br	400cdcc <__alt_data_end+0xfc00cdcc>
 400de24:	d9002d17 	ldw	r4,180(sp)
 400de28:	d9801e04 	addi	r6,sp,120
 400de2c:	b80b883a 	mov	r5,r23
 400de30:	40131d80 	call	40131d8 <__sprint_r>
 400de34:	103a7b1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400de38:	d8c02017 	ldw	r3,128(sp)
 400de3c:	da000404 	addi	r8,sp,16
 400de40:	003d4106 	br	400d348 <__alt_data_end+0xfc00d348>
 400de44:	d8801f17 	ldw	r2,124(sp)
 400de48:	014100b4 	movhi	r5,1026
 400de4c:	01000044 	movi	r4,1
 400de50:	18c00044 	addi	r3,r3,1
 400de54:	10800044 	addi	r2,r2,1
 400de58:	296b9904 	addi	r5,r5,-20892
 400de5c:	41000115 	stw	r4,4(r8)
 400de60:	41400015 	stw	r5,0(r8)
 400de64:	d8c02015 	stw	r3,128(sp)
 400de68:	d8801f15 	stw	r2,124(sp)
 400de6c:	010001c4 	movi	r4,7
 400de70:	20805c16 	blt	r4,r2,400dfe4 <___vfprintf_internal_r+0x1bd0>
 400de74:	42000204 	addi	r8,r8,8
 400de78:	8800041e 	bne	r17,zero,400de8c <___vfprintf_internal_r+0x1a78>
 400de7c:	d8803317 	ldw	r2,204(sp)
 400de80:	1000021e 	bne	r2,zero,400de8c <___vfprintf_internal_r+0x1a78>
 400de84:	9080004c 	andi	r2,r18,1
 400de88:	103be726 	beq	r2,zero,400ce28 <__alt_data_end+0xfc00ce28>
 400de8c:	d9003717 	ldw	r4,220(sp)
 400de90:	d8801f17 	ldw	r2,124(sp)
 400de94:	d9403417 	ldw	r5,208(sp)
 400de98:	20c7883a 	add	r3,r4,r3
 400de9c:	10800044 	addi	r2,r2,1
 400dea0:	41000115 	stw	r4,4(r8)
 400dea4:	41400015 	stw	r5,0(r8)
 400dea8:	d8c02015 	stw	r3,128(sp)
 400deac:	d8801f15 	stw	r2,124(sp)
 400deb0:	010001c4 	movi	r4,7
 400deb4:	20812116 	blt	r4,r2,400e33c <___vfprintf_internal_r+0x1f28>
 400deb8:	42000204 	addi	r8,r8,8
 400debc:	0463c83a 	sub	r17,zero,r17
 400dec0:	0440730e 	bge	zero,r17,400e090 <___vfprintf_internal_r+0x1c7c>
 400dec4:	05800404 	movi	r22,16
 400dec8:	b440860e 	bge	r22,r17,400e0e4 <___vfprintf_internal_r+0x1cd0>
 400decc:	014100b4 	movhi	r5,1026
 400ded0:	296b9984 	addi	r5,r5,-20890
 400ded4:	d9402c15 	stw	r5,176(sp)
 400ded8:	070001c4 	movi	fp,7
 400dedc:	dcc02d17 	ldw	r19,180(sp)
 400dee0:	00000306 	br	400def0 <___vfprintf_internal_r+0x1adc>
 400dee4:	42000204 	addi	r8,r8,8
 400dee8:	8c7ffc04 	addi	r17,r17,-16
 400deec:	b440800e 	bge	r22,r17,400e0f0 <___vfprintf_internal_r+0x1cdc>
 400def0:	18c00404 	addi	r3,r3,16
 400def4:	10800044 	addi	r2,r2,1
 400def8:	45000015 	stw	r20,0(r8)
 400defc:	45800115 	stw	r22,4(r8)
 400df00:	d8c02015 	stw	r3,128(sp)
 400df04:	d8801f15 	stw	r2,124(sp)
 400df08:	e0bff60e 	bge	fp,r2,400dee4 <__alt_data_end+0xfc00dee4>
 400df0c:	d9801e04 	addi	r6,sp,120
 400df10:	b80b883a 	mov	r5,r23
 400df14:	9809883a 	mov	r4,r19
 400df18:	40131d80 	call	40131d8 <__sprint_r>
 400df1c:	103a411e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400df20:	d8c02017 	ldw	r3,128(sp)
 400df24:	d8801f17 	ldw	r2,124(sp)
 400df28:	da000404 	addi	r8,sp,16
 400df2c:	003fee06 	br	400dee8 <__alt_data_end+0xfc00dee8>
 400df30:	00bfffc4 	movi	r2,-1
 400df34:	003a3f06 	br	400c834 <__alt_data_end+0xfc00c834>
 400df38:	008011c4 	movi	r2,71
 400df3c:	1440b816 	blt	r2,r17,400e220 <___vfprintf_internal_r+0x1e0c>
 400df40:	040100b4 	movhi	r16,1026
 400df44:	842b8b04 	addi	r16,r16,-20948
 400df48:	00c000c4 	movi	r3,3
 400df4c:	00bfdfc4 	movi	r2,-129
 400df50:	d8c02915 	stw	r3,164(sp)
 400df54:	90a4703a 	and	r18,r18,r2
 400df58:	df002783 	ldbu	fp,158(sp)
 400df5c:	d8c02b15 	stw	r3,172(sp)
 400df60:	d8002a15 	stw	zero,168(sp)
 400df64:	d8003215 	stw	zero,200(sp)
 400df68:	003b0706 	br	400cb88 <__alt_data_end+0xfc00cb88>
 400df6c:	d8c02e17 	ldw	r3,184(sp)
 400df70:	1cc00017 	ldw	r19,0(r3)
 400df74:	18c00104 	addi	r3,r3,4
 400df78:	d8c02e15 	stw	r3,184(sp)
 400df7c:	982dd7fa 	srai	r22,r19,31
 400df80:	b005883a 	mov	r2,r22
 400df84:	003a7706 	br	400c964 <__alt_data_end+0xfc00c964>
 400df88:	d8c02e17 	ldw	r3,184(sp)
 400df8c:	d9002f17 	ldw	r4,188(sp)
 400df90:	18800017 	ldw	r2,0(r3)
 400df94:	18c00104 	addi	r3,r3,4
 400df98:	d8c02e15 	stw	r3,184(sp)
 400df9c:	11000015 	stw	r4,0(r2)
 400dfa0:	00395406 	br	400c4f4 <__alt_data_end+0xfc00c4f4>
 400dfa4:	d9002e17 	ldw	r4,184(sp)
 400dfa8:	002d883a 	mov	r22,zero
 400dfac:	24c00017 	ldw	r19,0(r4)
 400dfb0:	21000104 	addi	r4,r4,4
 400dfb4:	d9002e15 	stw	r4,184(sp)
 400dfb8:	003c0706 	br	400cfd8 <__alt_data_end+0xfc00cfd8>
 400dfbc:	d9402e17 	ldw	r5,184(sp)
 400dfc0:	d8c02a17 	ldw	r3,168(sp)
 400dfc4:	002d883a 	mov	r22,zero
 400dfc8:	28800104 	addi	r2,r5,4
 400dfcc:	2cc0000b 	ldhu	r19,0(r5)
 400dfd0:	183dc10e 	bge	r3,zero,400d6d8 <__alt_data_end+0xfc00d6d8>
 400dfd4:	003f7506 	br	400ddac <__alt_data_end+0xfc00ddac>
 400dfd8:	040100b4 	movhi	r16,1026
 400dfdc:	842b8904 	addi	r16,r16,-20956
 400dfe0:	003aa706 	br	400ca80 <__alt_data_end+0xfc00ca80>
 400dfe4:	d9002d17 	ldw	r4,180(sp)
 400dfe8:	d9801e04 	addi	r6,sp,120
 400dfec:	b80b883a 	mov	r5,r23
 400dff0:	40131d80 	call	40131d8 <__sprint_r>
 400dff4:	103a0b1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400dff8:	dc402617 	ldw	r17,152(sp)
 400dffc:	d8c02017 	ldw	r3,128(sp)
 400e000:	da000404 	addi	r8,sp,16
 400e004:	003f9c06 	br	400de78 <__alt_data_end+0xfc00de78>
 400e008:	ac400043 	ldbu	r17,1(r21)
 400e00c:	84000814 	ori	r16,r16,32
 400e010:	ad400044 	addi	r21,r21,1
 400e014:	8c403fcc 	andi	r17,r17,255
 400e018:	8c40201c 	xori	r17,r17,128
 400e01c:	8c7fe004 	addi	r17,r17,-128
 400e020:	00395e06 	br	400c59c <__alt_data_end+0xfc00c59c>
 400e024:	d8c02e15 	stw	r3,184(sp)
 400e028:	0039883a 	mov	fp,zero
 400e02c:	003e3506 	br	400d904 <__alt_data_end+0xfc00d904>
 400e030:	d9002d17 	ldw	r4,180(sp)
 400e034:	d9801e04 	addi	r6,sp,120
 400e038:	b80b883a 	mov	r5,r23
 400e03c:	40131d80 	call	40131d8 <__sprint_r>
 400e040:	1039f81e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400e044:	d8c02017 	ldw	r3,128(sp)
 400e048:	da000404 	addi	r8,sp,16
 400e04c:	003cd006 	br	400d390 <__alt_data_end+0xfc00d390>
 400e050:	8009883a 	mov	r4,r16
 400e054:	df003d15 	stw	fp,244(sp)
 400e058:	400c37c0 	call	400c37c <strlen>
 400e05c:	d8802b15 	stw	r2,172(sp)
 400e060:	da003d17 	ldw	r8,244(sp)
 400e064:	103c200e 	bge	r2,zero,400d0e8 <__alt_data_end+0xfc00d0e8>
 400e068:	0005883a 	mov	r2,zero
 400e06c:	003c1e06 	br	400d0e8 <__alt_data_end+0xfc00d0e8>
 400e070:	d9002d17 	ldw	r4,180(sp)
 400e074:	d9801e04 	addi	r6,sp,120
 400e078:	b80b883a 	mov	r5,r23
 400e07c:	40131d80 	call	40131d8 <__sprint_r>
 400e080:	1039e81e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400e084:	d8c02017 	ldw	r3,128(sp)
 400e088:	d8801f17 	ldw	r2,124(sp)
 400e08c:	da000404 	addi	r8,sp,16
 400e090:	d9403317 	ldw	r5,204(sp)
 400e094:	10800044 	addi	r2,r2,1
 400e098:	44000015 	stw	r16,0(r8)
 400e09c:	28c7883a 	add	r3,r5,r3
 400e0a0:	003b5b06 	br	400ce10 <__alt_data_end+0xfc00ce10>
 400e0a4:	010100b4 	movhi	r4,1026
 400e0a8:	212b9d84 	addi	r4,r4,-20874
 400e0ac:	d9003515 	stw	r4,212(sp)
 400e0b0:	003af206 	br	400cc7c <__alt_data_end+0xfc00cc7c>
 400e0b4:	013fffc4 	movi	r4,-1
 400e0b8:	003a0806 	br	400c8dc <__alt_data_end+0xfc00c8dc>
 400e0bc:	0023883a 	mov	r17,zero
 400e0c0:	003d9d06 	br	400d738 <__alt_data_end+0xfc00d738>
 400e0c4:	d9002d17 	ldw	r4,180(sp)
 400e0c8:	d9801e04 	addi	r6,sp,120
 400e0cc:	b80b883a 	mov	r5,r23
 400e0d0:	40131d80 	call	40131d8 <__sprint_r>
 400e0d4:	1039d31e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400e0d8:	d8c02017 	ldw	r3,128(sp)
 400e0dc:	da000404 	addi	r8,sp,16
 400e0e0:	003d9406 	br	400d734 <__alt_data_end+0xfc00d734>
 400e0e4:	010100b4 	movhi	r4,1026
 400e0e8:	212b9984 	addi	r4,r4,-20890
 400e0ec:	d9002c15 	stw	r4,176(sp)
 400e0f0:	d9002c17 	ldw	r4,176(sp)
 400e0f4:	1c47883a 	add	r3,r3,r17
 400e0f8:	10800044 	addi	r2,r2,1
 400e0fc:	41000015 	stw	r4,0(r8)
 400e100:	44400115 	stw	r17,4(r8)
 400e104:	d8c02015 	stw	r3,128(sp)
 400e108:	d8801f15 	stw	r2,124(sp)
 400e10c:	010001c4 	movi	r4,7
 400e110:	20bfd716 	blt	r4,r2,400e070 <__alt_data_end+0xfc00e070>
 400e114:	42000204 	addi	r8,r8,8
 400e118:	003fdd06 	br	400e090 <__alt_data_end+0xfc00e090>
 400e11c:	d9002d17 	ldw	r4,180(sp)
 400e120:	d9801e04 	addi	r6,sp,120
 400e124:	b80b883a 	mov	r5,r23
 400e128:	40131d80 	call	40131d8 <__sprint_r>
 400e12c:	1039bd1e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400e130:	d8802617 	ldw	r2,152(sp)
 400e134:	d8c02017 	ldw	r3,128(sp)
 400e138:	da000404 	addi	r8,sp,16
 400e13c:	003e1006 	br	400d980 <__alt_data_end+0xfc00d980>
 400e140:	00800044 	movi	r2,1
 400e144:	10803fcc 	andi	r2,r2,255
 400e148:	00c00044 	movi	r3,1
 400e14c:	10fa0d26 	beq	r2,r3,400c984 <__alt_data_end+0xfc00c984>
 400e150:	00c00084 	movi	r3,2
 400e154:	10fbaf26 	beq	r2,r3,400d014 <__alt_data_end+0xfc00d014>
 400e158:	003a6d06 	br	400cb10 <__alt_data_end+0xfc00cb10>
 400e15c:	010100b4 	movhi	r4,1026
 400e160:	212b9d84 	addi	r4,r4,-20874
 400e164:	d9003515 	stw	r4,212(sp)
 400e168:	003b5406 	br	400cebc <__alt_data_end+0xfc00cebc>
 400e16c:	d8802a17 	ldw	r2,168(sp)
 400e170:	00c00184 	movi	r3,6
 400e174:	1880012e 	bgeu	r3,r2,400e17c <___vfprintf_internal_r+0x1d68>
 400e178:	1805883a 	mov	r2,r3
 400e17c:	d8802b15 	stw	r2,172(sp)
 400e180:	1000ef16 	blt	r2,zero,400e540 <___vfprintf_internal_r+0x212c>
 400e184:	040100b4 	movhi	r16,1026
 400e188:	d8802915 	stw	r2,164(sp)
 400e18c:	dcc02e15 	stw	r19,184(sp)
 400e190:	d8002a15 	stw	zero,168(sp)
 400e194:	d8003215 	stw	zero,200(sp)
 400e198:	842b9704 	addi	r16,r16,-20900
 400e19c:	0039883a 	mov	fp,zero
 400e1a0:	003a8006 	br	400cba4 <__alt_data_end+0xfc00cba4>
 400e1a4:	0021883a 	mov	r16,zero
 400e1a8:	003e0706 	br	400d9c8 <__alt_data_end+0xfc00d9c8>
 400e1ac:	d9002d17 	ldw	r4,180(sp)
 400e1b0:	d9801e04 	addi	r6,sp,120
 400e1b4:	b80b883a 	mov	r5,r23
 400e1b8:	40131d80 	call	40131d8 <__sprint_r>
 400e1bc:	1039991e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400e1c0:	d8802617 	ldw	r2,152(sp)
 400e1c4:	d9403317 	ldw	r5,204(sp)
 400e1c8:	d8c02017 	ldw	r3,128(sp)
 400e1cc:	da000404 	addi	r8,sp,16
 400e1d0:	2885c83a 	sub	r2,r5,r2
 400e1d4:	003dfb06 	br	400d9c4 <__alt_data_end+0xfc00d9c4>
 400e1d8:	9080004c 	andi	r2,r18,1
 400e1dc:	103e8f1e 	bne	r2,zero,400dc1c <__alt_data_end+0xfc00dc1c>
 400e1e0:	d8802117 	ldw	r2,132(sp)
 400e1e4:	003e9e06 	br	400dc60 <__alt_data_end+0xfc00dc60>
 400e1e8:	1025883a 	mov	r18,r2
 400e1ec:	0039883a 	mov	fp,zero
 400e1f0:	00800084 	movi	r2,2
 400e1f4:	003fd306 	br	400e144 <__alt_data_end+0xfc00e144>
 400e1f8:	07000b44 	movi	fp,45
 400e1fc:	df002785 	stb	fp,158(sp)
 400e200:	003a1b06 	br	400ca70 <__alt_data_end+0xfc00ca70>
 400e204:	00c00b44 	movi	r3,45
 400e208:	d8c02785 	stb	r3,158(sp)
 400e20c:	d8802915 	stw	r2,164(sp)
 400e210:	dc802c17 	ldw	r18,176(sp)
 400e214:	d8002a15 	stw	zero,168(sp)
 400e218:	07000b44 	movi	fp,45
 400e21c:	003a5e06 	br	400cb98 <__alt_data_end+0xfc00cb98>
 400e220:	040100b4 	movhi	r16,1026
 400e224:	842b8c04 	addi	r16,r16,-20944
 400e228:	003f4706 	br	400df48 <__alt_data_end+0xfc00df48>
 400e22c:	d9002e17 	ldw	r4,184(sp)
 400e230:	d9402f17 	ldw	r5,188(sp)
 400e234:	20800017 	ldw	r2,0(r4)
 400e238:	21000104 	addi	r4,r4,4
 400e23c:	d9002e15 	stw	r4,184(sp)
 400e240:	11400015 	stw	r5,0(r2)
 400e244:	0038ab06 	br	400c4f4 <__alt_data_end+0xfc00c4f4>
 400e248:	dd802617 	ldw	r22,152(sp)
 400e24c:	00bfff44 	movi	r2,-3
 400e250:	b0801c16 	blt	r22,r2,400e2c4 <___vfprintf_internal_r+0x1eb0>
 400e254:	d9402a17 	ldw	r5,168(sp)
 400e258:	2d801a16 	blt	r5,r22,400e2c4 <___vfprintf_internal_r+0x1eb0>
 400e25c:	dd803215 	stw	r22,200(sp)
 400e260:	003e8906 	br	400dc88 <__alt_data_end+0xfc00dc88>
 400e264:	010100b4 	movhi	r4,1026
 400e268:	212b9984 	addi	r4,r4,-20890
 400e26c:	d9002c15 	stw	r4,176(sp)
 400e270:	003c9106 	br	400d4b8 <__alt_data_end+0xfc00d4b8>
 400e274:	e005883a 	mov	r2,fp
 400e278:	003e7906 	br	400dc60 <__alt_data_end+0xfc00dc60>
 400e27c:	d9002a17 	ldw	r4,168(sp)
 400e280:	df002783 	ldbu	fp,158(sp)
 400e284:	dcc02e15 	stw	r19,184(sp)
 400e288:	d9002915 	stw	r4,164(sp)
 400e28c:	d9002b15 	stw	r4,172(sp)
 400e290:	d8002a15 	stw	zero,168(sp)
 400e294:	d8003215 	stw	zero,200(sp)
 400e298:	003a3b06 	br	400cb88 <__alt_data_end+0xfc00cb88>
 400e29c:	9080004c 	andi	r2,r18,1
 400e2a0:	0039883a 	mov	fp,zero
 400e2a4:	10000426 	beq	r2,zero,400e2b8 <___vfprintf_internal_r+0x1ea4>
 400e2a8:	00800c04 	movi	r2,48
 400e2ac:	dc001dc4 	addi	r16,sp,119
 400e2b0:	d8801dc5 	stb	r2,119(sp)
 400e2b4:	003b6406 	br	400d048 <__alt_data_end+0xfc00d048>
 400e2b8:	d8002b15 	stw	zero,172(sp)
 400e2bc:	dc001e04 	addi	r16,sp,120
 400e2c0:	003a2b06 	br	400cb70 <__alt_data_end+0xfc00cb70>
 400e2c4:	8c7fff84 	addi	r17,r17,-2
 400e2c8:	b5bfffc4 	addi	r22,r22,-1
 400e2cc:	dd802615 	stw	r22,152(sp)
 400e2d0:	dc4022c5 	stb	r17,139(sp)
 400e2d4:	b000bf16 	blt	r22,zero,400e5d4 <___vfprintf_internal_r+0x21c0>
 400e2d8:	00800ac4 	movi	r2,43
 400e2dc:	d8802305 	stb	r2,140(sp)
 400e2e0:	00800244 	movi	r2,9
 400e2e4:	15807016 	blt	r2,r22,400e4a8 <___vfprintf_internal_r+0x2094>
 400e2e8:	00800c04 	movi	r2,48
 400e2ec:	b5800c04 	addi	r22,r22,48
 400e2f0:	d8802345 	stb	r2,141(sp)
 400e2f4:	dd802385 	stb	r22,142(sp)
 400e2f8:	d88023c4 	addi	r2,sp,143
 400e2fc:	df0022c4 	addi	fp,sp,139
 400e300:	d8c03317 	ldw	r3,204(sp)
 400e304:	1739c83a 	sub	fp,r2,fp
 400e308:	d9003317 	ldw	r4,204(sp)
 400e30c:	e0c7883a 	add	r3,fp,r3
 400e310:	df003a15 	stw	fp,232(sp)
 400e314:	d8c02b15 	stw	r3,172(sp)
 400e318:	00800044 	movi	r2,1
 400e31c:	1100b30e 	bge	r2,r4,400e5ec <___vfprintf_internal_r+0x21d8>
 400e320:	d8c02b17 	ldw	r3,172(sp)
 400e324:	18c00044 	addi	r3,r3,1
 400e328:	d8c02b15 	stw	r3,172(sp)
 400e32c:	1805883a 	mov	r2,r3
 400e330:	1800ac16 	blt	r3,zero,400e5e4 <___vfprintf_internal_r+0x21d0>
 400e334:	d8003215 	stw	zero,200(sp)
 400e338:	003e5d06 	br	400dcb0 <__alt_data_end+0xfc00dcb0>
 400e33c:	d9002d17 	ldw	r4,180(sp)
 400e340:	d9801e04 	addi	r6,sp,120
 400e344:	b80b883a 	mov	r5,r23
 400e348:	40131d80 	call	40131d8 <__sprint_r>
 400e34c:	1039351e 	bne	r2,zero,400c824 <__alt_data_end+0xfc00c824>
 400e350:	dc402617 	ldw	r17,152(sp)
 400e354:	d8c02017 	ldw	r3,128(sp)
 400e358:	d8801f17 	ldw	r2,124(sp)
 400e35c:	da000404 	addi	r8,sp,16
 400e360:	003ed606 	br	400debc <__alt_data_end+0xfc00debc>
 400e364:	182b883a 	mov	r21,r3
 400e368:	d8002a15 	stw	zero,168(sp)
 400e36c:	00388c06 	br	400c5a0 <__alt_data_end+0xfc00c5a0>
 400e370:	d8802a17 	ldw	r2,168(sp)
 400e374:	103e071e 	bne	r2,zero,400db94 <__alt_data_end+0xfc00db94>
 400e378:	dc002a15 	stw	r16,168(sp)
 400e37c:	003e0506 	br	400db94 <__alt_data_end+0xfc00db94>
 400e380:	d9002a17 	ldw	r4,168(sp)
 400e384:	20c00044 	addi	r3,r4,1
 400e388:	003e0f06 	br	400dbc8 <__alt_data_end+0xfc00dbc8>
 400e38c:	01400184 	movi	r5,6
 400e390:	d9402a15 	stw	r5,168(sp)
 400e394:	003dff06 	br	400db94 <__alt_data_end+0xfc00db94>
 400e398:	d8802104 	addi	r2,sp,132
 400e39c:	d8800315 	stw	r2,12(sp)
 400e3a0:	d8802504 	addi	r2,sp,148
 400e3a4:	d8800215 	stw	r2,8(sp)
 400e3a8:	d8802604 	addi	r2,sp,152
 400e3ac:	d8800115 	stw	r2,4(sp)
 400e3b0:	d8802a17 	ldw	r2,168(sp)
 400e3b4:	d9403617 	ldw	r5,216(sp)
 400e3b8:	d9002d17 	ldw	r4,180(sp)
 400e3bc:	d8800015 	stw	r2,0(sp)
 400e3c0:	01c000c4 	movi	r7,3
 400e3c4:	980d883a 	mov	r6,r19
 400e3c8:	da003d15 	stw	r8,244(sp)
 400e3cc:	400eb440 	call	400eb44 <_dtoa_r>
 400e3d0:	d8c02a17 	ldw	r3,168(sp)
 400e3d4:	da003d17 	ldw	r8,244(sp)
 400e3d8:	1021883a 	mov	r16,r2
 400e3dc:	10f9883a 	add	fp,r2,r3
 400e3e0:	81000007 	ldb	r4,0(r16)
 400e3e4:	00800c04 	movi	r2,48
 400e3e8:	20805e26 	beq	r4,r2,400e564 <___vfprintf_internal_r+0x2150>
 400e3ec:	d8c02617 	ldw	r3,152(sp)
 400e3f0:	e0f9883a 	add	fp,fp,r3
 400e3f4:	003e0a06 	br	400dc20 <__alt_data_end+0xfc00dc20>
 400e3f8:	00c00b44 	movi	r3,45
 400e3fc:	24e0003c 	xorhi	r19,r4,32768
 400e400:	d8c02905 	stb	r3,164(sp)
 400e404:	003de906 	br	400dbac <__alt_data_end+0xfc00dbac>
 400e408:	d8c03217 	ldw	r3,200(sp)
 400e40c:	00c07a0e 	bge	zero,r3,400e5f8 <___vfprintf_internal_r+0x21e4>
 400e410:	00800044 	movi	r2,1
 400e414:	d9003317 	ldw	r4,204(sp)
 400e418:	1105883a 	add	r2,r2,r4
 400e41c:	d8802b15 	stw	r2,172(sp)
 400e420:	10004e16 	blt	r2,zero,400e55c <___vfprintf_internal_r+0x2148>
 400e424:	044019c4 	movi	r17,103
 400e428:	003e2106 	br	400dcb0 <__alt_data_end+0xfc00dcb0>
 400e42c:	d9002a17 	ldw	r4,168(sp)
 400e430:	d8802104 	addi	r2,sp,132
 400e434:	d8800315 	stw	r2,12(sp)
 400e438:	d9000015 	stw	r4,0(sp)
 400e43c:	d8802504 	addi	r2,sp,148
 400e440:	d9403617 	ldw	r5,216(sp)
 400e444:	d9002d17 	ldw	r4,180(sp)
 400e448:	d8800215 	stw	r2,8(sp)
 400e44c:	d8802604 	addi	r2,sp,152
 400e450:	d8800115 	stw	r2,4(sp)
 400e454:	01c000c4 	movi	r7,3
 400e458:	980d883a 	mov	r6,r19
 400e45c:	da003d15 	stw	r8,244(sp)
 400e460:	400eb440 	call	400eb44 <_dtoa_r>
 400e464:	d8c02a17 	ldw	r3,168(sp)
 400e468:	da003d17 	ldw	r8,244(sp)
 400e46c:	1021883a 	mov	r16,r2
 400e470:	00801184 	movi	r2,70
 400e474:	80f9883a 	add	fp,r16,r3
 400e478:	88bfd926 	beq	r17,r2,400e3e0 <__alt_data_end+0xfc00e3e0>
 400e47c:	003de806 	br	400dc20 <__alt_data_end+0xfc00dc20>
 400e480:	d9002a17 	ldw	r4,168(sp)
 400e484:	00c04d0e 	bge	zero,r3,400e5bc <___vfprintf_internal_r+0x21a8>
 400e488:	2000441e 	bne	r4,zero,400e59c <___vfprintf_internal_r+0x2188>
 400e48c:	9480004c 	andi	r18,r18,1
 400e490:	9000421e 	bne	r18,zero,400e59c <___vfprintf_internal_r+0x2188>
 400e494:	1805883a 	mov	r2,r3
 400e498:	18006f16 	blt	r3,zero,400e658 <___vfprintf_internal_r+0x2244>
 400e49c:	d8c03217 	ldw	r3,200(sp)
 400e4a0:	d8c02b15 	stw	r3,172(sp)
 400e4a4:	003e0206 	br	400dcb0 <__alt_data_end+0xfc00dcb0>
 400e4a8:	df0022c4 	addi	fp,sp,139
 400e4ac:	dc002a15 	stw	r16,168(sp)
 400e4b0:	4027883a 	mov	r19,r8
 400e4b4:	e021883a 	mov	r16,fp
 400e4b8:	b009883a 	mov	r4,r22
 400e4bc:	01400284 	movi	r5,10
 400e4c0:	4007d840 	call	4007d84 <__modsi3>
 400e4c4:	10800c04 	addi	r2,r2,48
 400e4c8:	843fffc4 	addi	r16,r16,-1
 400e4cc:	b009883a 	mov	r4,r22
 400e4d0:	01400284 	movi	r5,10
 400e4d4:	80800005 	stb	r2,0(r16)
 400e4d8:	4007d000 	call	4007d00 <__divsi3>
 400e4dc:	102d883a 	mov	r22,r2
 400e4e0:	00800244 	movi	r2,9
 400e4e4:	15bff416 	blt	r2,r22,400e4b8 <__alt_data_end+0xfc00e4b8>
 400e4e8:	9811883a 	mov	r8,r19
 400e4ec:	b0800c04 	addi	r2,r22,48
 400e4f0:	8027883a 	mov	r19,r16
 400e4f4:	997fffc4 	addi	r5,r19,-1
 400e4f8:	98bfffc5 	stb	r2,-1(r19)
 400e4fc:	dc002a17 	ldw	r16,168(sp)
 400e500:	2f006d2e 	bgeu	r5,fp,400e6b8 <___vfprintf_internal_r+0x22a4>
 400e504:	d9c02384 	addi	r7,sp,142
 400e508:	3ccfc83a 	sub	r7,r7,r19
 400e50c:	d9002344 	addi	r4,sp,141
 400e510:	e1cf883a 	add	r7,fp,r7
 400e514:	00000106 	br	400e51c <___vfprintf_internal_r+0x2108>
 400e518:	28800003 	ldbu	r2,0(r5)
 400e51c:	20800005 	stb	r2,0(r4)
 400e520:	21000044 	addi	r4,r4,1
 400e524:	29400044 	addi	r5,r5,1
 400e528:	393ffb1e 	bne	r7,r4,400e518 <__alt_data_end+0xfc00e518>
 400e52c:	d8802304 	addi	r2,sp,140
 400e530:	14c5c83a 	sub	r2,r2,r19
 400e534:	d8c02344 	addi	r3,sp,141
 400e538:	1885883a 	add	r2,r3,r2
 400e53c:	003f7006 	br	400e300 <__alt_data_end+0xfc00e300>
 400e540:	0005883a 	mov	r2,zero
 400e544:	003f0f06 	br	400e184 <__alt_data_end+0xfc00e184>
 400e548:	d8c03217 	ldw	r3,200(sp)
 400e54c:	18c00044 	addi	r3,r3,1
 400e550:	d8c02b15 	stw	r3,172(sp)
 400e554:	1805883a 	mov	r2,r3
 400e558:	183fb20e 	bge	r3,zero,400e424 <__alt_data_end+0xfc00e424>
 400e55c:	0005883a 	mov	r2,zero
 400e560:	003fb006 	br	400e424 <__alt_data_end+0xfc00e424>
 400e564:	d9003617 	ldw	r4,216(sp)
 400e568:	000d883a 	mov	r6,zero
 400e56c:	000f883a 	mov	r7,zero
 400e570:	980b883a 	mov	r5,r19
 400e574:	d8c03c15 	stw	r3,240(sp)
 400e578:	da003d15 	stw	r8,244(sp)
 400e57c:	400a0240 	call	400a024 <__eqdf2>
 400e580:	d8c03c17 	ldw	r3,240(sp)
 400e584:	da003d17 	ldw	r8,244(sp)
 400e588:	103f9826 	beq	r2,zero,400e3ec <__alt_data_end+0xfc00e3ec>
 400e58c:	00800044 	movi	r2,1
 400e590:	10c7c83a 	sub	r3,r2,r3
 400e594:	d8c02615 	stw	r3,152(sp)
 400e598:	003f9506 	br	400e3f0 <__alt_data_end+0xfc00e3f0>
 400e59c:	d9002a17 	ldw	r4,168(sp)
 400e5a0:	d8c03217 	ldw	r3,200(sp)
 400e5a4:	20800044 	addi	r2,r4,1
 400e5a8:	1885883a 	add	r2,r3,r2
 400e5ac:	d8802b15 	stw	r2,172(sp)
 400e5b0:	103dbf0e 	bge	r2,zero,400dcb0 <__alt_data_end+0xfc00dcb0>
 400e5b4:	0005883a 	mov	r2,zero
 400e5b8:	003dbd06 	br	400dcb0 <__alt_data_end+0xfc00dcb0>
 400e5bc:	2000201e 	bne	r4,zero,400e640 <___vfprintf_internal_r+0x222c>
 400e5c0:	9480004c 	andi	r18,r18,1
 400e5c4:	90001e1e 	bne	r18,zero,400e640 <___vfprintf_internal_r+0x222c>
 400e5c8:	00800044 	movi	r2,1
 400e5cc:	d8802b15 	stw	r2,172(sp)
 400e5d0:	003db706 	br	400dcb0 <__alt_data_end+0xfc00dcb0>
 400e5d4:	00800b44 	movi	r2,45
 400e5d8:	05adc83a 	sub	r22,zero,r22
 400e5dc:	d8802305 	stb	r2,140(sp)
 400e5e0:	003f3f06 	br	400e2e0 <__alt_data_end+0xfc00e2e0>
 400e5e4:	0005883a 	mov	r2,zero
 400e5e8:	003f5206 	br	400e334 <__alt_data_end+0xfc00e334>
 400e5ec:	90a4703a 	and	r18,r18,r2
 400e5f0:	903f4e26 	beq	r18,zero,400e32c <__alt_data_end+0xfc00e32c>
 400e5f4:	003f4a06 	br	400e320 <__alt_data_end+0xfc00e320>
 400e5f8:	00800084 	movi	r2,2
 400e5fc:	10c5c83a 	sub	r2,r2,r3
 400e600:	003f8406 	br	400e414 <__alt_data_end+0xfc00e414>
 400e604:	d9402e17 	ldw	r5,184(sp)
 400e608:	d9002e17 	ldw	r4,184(sp)
 400e60c:	ac400043 	ldbu	r17,1(r21)
 400e610:	29400017 	ldw	r5,0(r5)
 400e614:	20800104 	addi	r2,r4,4
 400e618:	d8802e15 	stw	r2,184(sp)
 400e61c:	d9402a15 	stw	r5,168(sp)
 400e620:	182b883a 	mov	r21,r3
 400e624:	283e7b0e 	bge	r5,zero,400e014 <__alt_data_end+0xfc00e014>
 400e628:	8c403fcc 	andi	r17,r17,255
 400e62c:	017fffc4 	movi	r5,-1
 400e630:	8c40201c 	xori	r17,r17,128
 400e634:	d9402a15 	stw	r5,168(sp)
 400e638:	8c7fe004 	addi	r17,r17,-128
 400e63c:	0037d706 	br	400c59c <__alt_data_end+0xfc00c59c>
 400e640:	d8c02a17 	ldw	r3,168(sp)
 400e644:	18c00084 	addi	r3,r3,2
 400e648:	d8c02b15 	stw	r3,172(sp)
 400e64c:	1805883a 	mov	r2,r3
 400e650:	183d970e 	bge	r3,zero,400dcb0 <__alt_data_end+0xfc00dcb0>
 400e654:	003fd706 	br	400e5b4 <__alt_data_end+0xfc00e5b4>
 400e658:	0005883a 	mov	r2,zero
 400e65c:	003f8f06 	br	400e49c <__alt_data_end+0xfc00e49c>
 400e660:	9080004c 	andi	r2,r18,1
 400e664:	103f821e 	bne	r2,zero,400e470 <__alt_data_end+0xfc00e470>
 400e668:	d8802117 	ldw	r2,132(sp)
 400e66c:	1405c83a 	sub	r2,r2,r16
 400e670:	d8803315 	stw	r2,204(sp)
 400e674:	b47ef426 	beq	r22,r17,400e248 <__alt_data_end+0xfc00e248>
 400e678:	dd802617 	ldw	r22,152(sp)
 400e67c:	003f1206 	br	400e2c8 <__alt_data_end+0xfc00e2c8>
 400e680:	d8c02b03 	ldbu	r3,172(sp)
 400e684:	d8c02785 	stb	r3,158(sp)
 400e688:	0038df06 	br	400ca08 <__alt_data_end+0xfc00ca08>
 400e68c:	d8c02b03 	ldbu	r3,172(sp)
 400e690:	d8c02785 	stb	r3,158(sp)
 400e694:	0038aa06 	br	400c940 <__alt_data_end+0xfc00c940>
 400e698:	d8c02b03 	ldbu	r3,172(sp)
 400e69c:	d8c02785 	stb	r3,158(sp)
 400e6a0:	003a4306 	br	400cfb0 <__alt_data_end+0xfc00cfb0>
 400e6a4:	d8c02b03 	ldbu	r3,172(sp)
 400e6a8:	d8c02785 	stb	r3,158(sp)
 400e6ac:	003af506 	br	400d284 <__alt_data_end+0xfc00d284>
 400e6b0:	0005883a 	mov	r2,zero
 400e6b4:	003d7b06 	br	400dca4 <__alt_data_end+0xfc00dca4>
 400e6b8:	d8802344 	addi	r2,sp,141
 400e6bc:	003f1006 	br	400e300 <__alt_data_end+0xfc00e300>
 400e6c0:	d8c02b03 	ldbu	r3,172(sp)
 400e6c4:	d8c02785 	stb	r3,158(sp)
 400e6c8:	0038fd06 	br	400cac0 <__alt_data_end+0xfc00cac0>
 400e6cc:	d8c02b03 	ldbu	r3,172(sp)
 400e6d0:	d8c02785 	stb	r3,158(sp)
 400e6d4:	003a9706 	br	400d134 <__alt_data_end+0xfc00d134>
 400e6d8:	d8c02b03 	ldbu	r3,172(sp)
 400e6dc:	d8c02785 	stb	r3,158(sp)
 400e6e0:	003a1806 	br	400cf44 <__alt_data_end+0xfc00cf44>
 400e6e4:	d8c02b03 	ldbu	r3,172(sp)
 400e6e8:	d8c02785 	stb	r3,158(sp)
 400e6ec:	003abe06 	br	400d1e8 <__alt_data_end+0xfc00d1e8>

0400e6f0 <__vfprintf_internal>:
 400e6f0:	008100b4 	movhi	r2,1026
 400e6f4:	10b2dd04 	addi	r2,r2,-13452
 400e6f8:	300f883a 	mov	r7,r6
 400e6fc:	280d883a 	mov	r6,r5
 400e700:	200b883a 	mov	r5,r4
 400e704:	11000017 	ldw	r4,0(r2)
 400e708:	400c4141 	jmpi	400c414 <___vfprintf_internal_r>

0400e70c <__sbprintf>:
 400e70c:	2880030b 	ldhu	r2,12(r5)
 400e710:	2ac01917 	ldw	r11,100(r5)
 400e714:	2a80038b 	ldhu	r10,14(r5)
 400e718:	2a400717 	ldw	r9,28(r5)
 400e71c:	2a000917 	ldw	r8,36(r5)
 400e720:	defee204 	addi	sp,sp,-1144
 400e724:	00c10004 	movi	r3,1024
 400e728:	dc011a15 	stw	r16,1128(sp)
 400e72c:	10bfff4c 	andi	r2,r2,65533
 400e730:	2821883a 	mov	r16,r5
 400e734:	d8cb883a 	add	r5,sp,r3
 400e738:	dc811c15 	stw	r18,1136(sp)
 400e73c:	dc411b15 	stw	r17,1132(sp)
 400e740:	dfc11d15 	stw	ra,1140(sp)
 400e744:	2025883a 	mov	r18,r4
 400e748:	d881030d 	sth	r2,1036(sp)
 400e74c:	dac11915 	stw	r11,1124(sp)
 400e750:	da81038d 	sth	r10,1038(sp)
 400e754:	da410715 	stw	r9,1052(sp)
 400e758:	da010915 	stw	r8,1060(sp)
 400e75c:	dec10015 	stw	sp,1024(sp)
 400e760:	dec10415 	stw	sp,1040(sp)
 400e764:	d8c10215 	stw	r3,1032(sp)
 400e768:	d8c10515 	stw	r3,1044(sp)
 400e76c:	d8010615 	stw	zero,1048(sp)
 400e770:	400c4140 	call	400c414 <___vfprintf_internal_r>
 400e774:	1023883a 	mov	r17,r2
 400e778:	10000416 	blt	r2,zero,400e78c <__sbprintf+0x80>
 400e77c:	d9410004 	addi	r5,sp,1024
 400e780:	9009883a 	mov	r4,r18
 400e784:	40103e80 	call	40103e8 <_fflush_r>
 400e788:	10000d1e 	bne	r2,zero,400e7c0 <__sbprintf+0xb4>
 400e78c:	d881030b 	ldhu	r2,1036(sp)
 400e790:	1080100c 	andi	r2,r2,64
 400e794:	10000326 	beq	r2,zero,400e7a4 <__sbprintf+0x98>
 400e798:	8080030b 	ldhu	r2,12(r16)
 400e79c:	10801014 	ori	r2,r2,64
 400e7a0:	8080030d 	sth	r2,12(r16)
 400e7a4:	8805883a 	mov	r2,r17
 400e7a8:	dfc11d17 	ldw	ra,1140(sp)
 400e7ac:	dc811c17 	ldw	r18,1136(sp)
 400e7b0:	dc411b17 	ldw	r17,1132(sp)
 400e7b4:	dc011a17 	ldw	r16,1128(sp)
 400e7b8:	dec11e04 	addi	sp,sp,1144
 400e7bc:	f800283a 	ret
 400e7c0:	047fffc4 	movi	r17,-1
 400e7c4:	003ff106 	br	400e78c <__alt_data_end+0xfc00e78c>

0400e7c8 <__swsetup_r>:
 400e7c8:	008100b4 	movhi	r2,1026
 400e7cc:	defffd04 	addi	sp,sp,-12
 400e7d0:	10b2dd04 	addi	r2,r2,-13452
 400e7d4:	dc400115 	stw	r17,4(sp)
 400e7d8:	2023883a 	mov	r17,r4
 400e7dc:	11000017 	ldw	r4,0(r2)
 400e7e0:	dc000015 	stw	r16,0(sp)
 400e7e4:	dfc00215 	stw	ra,8(sp)
 400e7e8:	2821883a 	mov	r16,r5
 400e7ec:	20000226 	beq	r4,zero,400e7f8 <__swsetup_r+0x30>
 400e7f0:	20800e17 	ldw	r2,56(r4)
 400e7f4:	10003126 	beq	r2,zero,400e8bc <__swsetup_r+0xf4>
 400e7f8:	8080030b 	ldhu	r2,12(r16)
 400e7fc:	10c0020c 	andi	r3,r2,8
 400e800:	1009883a 	mov	r4,r2
 400e804:	18000f26 	beq	r3,zero,400e844 <__swsetup_r+0x7c>
 400e808:	80c00417 	ldw	r3,16(r16)
 400e80c:	18001526 	beq	r3,zero,400e864 <__swsetup_r+0x9c>
 400e810:	1100004c 	andi	r4,r2,1
 400e814:	20001c1e 	bne	r4,zero,400e888 <__swsetup_r+0xc0>
 400e818:	1080008c 	andi	r2,r2,2
 400e81c:	1000291e 	bne	r2,zero,400e8c4 <__swsetup_r+0xfc>
 400e820:	80800517 	ldw	r2,20(r16)
 400e824:	80800215 	stw	r2,8(r16)
 400e828:	18001c26 	beq	r3,zero,400e89c <__swsetup_r+0xd4>
 400e82c:	0005883a 	mov	r2,zero
 400e830:	dfc00217 	ldw	ra,8(sp)
 400e834:	dc400117 	ldw	r17,4(sp)
 400e838:	dc000017 	ldw	r16,0(sp)
 400e83c:	dec00304 	addi	sp,sp,12
 400e840:	f800283a 	ret
 400e844:	2080040c 	andi	r2,r4,16
 400e848:	10002e26 	beq	r2,zero,400e904 <__swsetup_r+0x13c>
 400e84c:	2080010c 	andi	r2,r4,4
 400e850:	10001e1e 	bne	r2,zero,400e8cc <__swsetup_r+0x104>
 400e854:	80c00417 	ldw	r3,16(r16)
 400e858:	20800214 	ori	r2,r4,8
 400e85c:	8080030d 	sth	r2,12(r16)
 400e860:	183feb1e 	bne	r3,zero,400e810 <__alt_data_end+0xfc00e810>
 400e864:	1100a00c 	andi	r4,r2,640
 400e868:	01408004 	movi	r5,512
 400e86c:	217fe826 	beq	r4,r5,400e810 <__alt_data_end+0xfc00e810>
 400e870:	800b883a 	mov	r5,r16
 400e874:	8809883a 	mov	r4,r17
 400e878:	40113840 	call	4011384 <__smakebuf_r>
 400e87c:	8080030b 	ldhu	r2,12(r16)
 400e880:	80c00417 	ldw	r3,16(r16)
 400e884:	003fe206 	br	400e810 <__alt_data_end+0xfc00e810>
 400e888:	80800517 	ldw	r2,20(r16)
 400e88c:	80000215 	stw	zero,8(r16)
 400e890:	0085c83a 	sub	r2,zero,r2
 400e894:	80800615 	stw	r2,24(r16)
 400e898:	183fe41e 	bne	r3,zero,400e82c <__alt_data_end+0xfc00e82c>
 400e89c:	80c0030b 	ldhu	r3,12(r16)
 400e8a0:	0005883a 	mov	r2,zero
 400e8a4:	1900200c 	andi	r4,r3,128
 400e8a8:	203fe126 	beq	r4,zero,400e830 <__alt_data_end+0xfc00e830>
 400e8ac:	18c01014 	ori	r3,r3,64
 400e8b0:	80c0030d 	sth	r3,12(r16)
 400e8b4:	00bfffc4 	movi	r2,-1
 400e8b8:	003fdd06 	br	400e830 <__alt_data_end+0xfc00e830>
 400e8bc:	40107d40 	call	40107d4 <__sinit>
 400e8c0:	003fcd06 	br	400e7f8 <__alt_data_end+0xfc00e7f8>
 400e8c4:	0005883a 	mov	r2,zero
 400e8c8:	003fd606 	br	400e824 <__alt_data_end+0xfc00e824>
 400e8cc:	81400c17 	ldw	r5,48(r16)
 400e8d0:	28000626 	beq	r5,zero,400e8ec <__swsetup_r+0x124>
 400e8d4:	80801004 	addi	r2,r16,64
 400e8d8:	28800326 	beq	r5,r2,400e8e8 <__swsetup_r+0x120>
 400e8dc:	8809883a 	mov	r4,r17
 400e8e0:	40109480 	call	4010948 <_free_r>
 400e8e4:	8100030b 	ldhu	r4,12(r16)
 400e8e8:	80000c15 	stw	zero,48(r16)
 400e8ec:	80c00417 	ldw	r3,16(r16)
 400e8f0:	00bff6c4 	movi	r2,-37
 400e8f4:	1108703a 	and	r4,r2,r4
 400e8f8:	80000115 	stw	zero,4(r16)
 400e8fc:	80c00015 	stw	r3,0(r16)
 400e900:	003fd506 	br	400e858 <__alt_data_end+0xfc00e858>
 400e904:	00800244 	movi	r2,9
 400e908:	88800015 	stw	r2,0(r17)
 400e90c:	20801014 	ori	r2,r4,64
 400e910:	8080030d 	sth	r2,12(r16)
 400e914:	00bfffc4 	movi	r2,-1
 400e918:	003fc506 	br	400e830 <__alt_data_end+0xfc00e830>

0400e91c <quorem>:
 400e91c:	defff204 	addi	sp,sp,-56
 400e920:	ddc00b15 	stw	r23,44(sp)
 400e924:	20800417 	ldw	r2,16(r4)
 400e928:	2dc00417 	ldw	r23,16(r5)
 400e92c:	dfc00d15 	stw	ra,52(sp)
 400e930:	df000c15 	stw	fp,48(sp)
 400e934:	dd800a15 	stw	r22,40(sp)
 400e938:	dd400915 	stw	r21,36(sp)
 400e93c:	dd000815 	stw	r20,32(sp)
 400e940:	dcc00715 	stw	r19,28(sp)
 400e944:	dc800615 	stw	r18,24(sp)
 400e948:	dc400515 	stw	r17,20(sp)
 400e94c:	dc000415 	stw	r16,16(sp)
 400e950:	15c07a16 	blt	r2,r23,400eb3c <quorem+0x220>
 400e954:	bdffffc4 	addi	r23,r23,-1
 400e958:	bde9883a 	add	r20,r23,r23
 400e95c:	28c00504 	addi	r3,r5,20
 400e960:	a529883a 	add	r20,r20,r20
 400e964:	1d39883a 	add	fp,r3,r20
 400e968:	24c00504 	addi	r19,r4,20
 400e96c:	d9400215 	stw	r5,8(sp)
 400e970:	9d29883a 	add	r20,r19,r20
 400e974:	e1400017 	ldw	r5,0(fp)
 400e978:	d9000015 	stw	r4,0(sp)
 400e97c:	a1000017 	ldw	r4,0(r20)
 400e980:	29400044 	addi	r5,r5,1
 400e984:	d8c00115 	stw	r3,4(sp)
 400e988:	dd000315 	stw	r20,12(sp)
 400e98c:	4007df80 	call	4007df8 <__udivsi3>
 400e990:	1025883a 	mov	r18,r2
 400e994:	10003026 	beq	r2,zero,400ea58 <quorem+0x13c>
 400e998:	dc400117 	ldw	r17,4(sp)
 400e99c:	9829883a 	mov	r20,r19
 400e9a0:	002d883a 	mov	r22,zero
 400e9a4:	0021883a 	mov	r16,zero
 400e9a8:	8d400017 	ldw	r21,0(r17)
 400e9ac:	900b883a 	mov	r5,r18
 400e9b0:	8c400104 	addi	r17,r17,4
 400e9b4:	a93fffcc 	andi	r4,r21,65535
 400e9b8:	4007eb40 	call	4007eb4 <__mulsi3>
 400e9bc:	a808d43a 	srli	r4,r21,16
 400e9c0:	900b883a 	mov	r5,r18
 400e9c4:	15ad883a 	add	r22,r2,r22
 400e9c8:	4007eb40 	call	4007eb4 <__mulsi3>
 400e9cc:	a1000017 	ldw	r4,0(r20)
 400e9d0:	b00cd43a 	srli	r6,r22,16
 400e9d4:	b0ffffcc 	andi	r3,r22,65535
 400e9d8:	217fffcc 	andi	r5,r4,65535
 400e9dc:	2c21883a 	add	r16,r5,r16
 400e9e0:	80c7c83a 	sub	r3,r16,r3
 400e9e4:	2008d43a 	srli	r4,r4,16
 400e9e8:	1185883a 	add	r2,r2,r6
 400e9ec:	1821d43a 	srai	r16,r3,16
 400e9f0:	117fffcc 	andi	r5,r2,65535
 400e9f4:	2149c83a 	sub	r4,r4,r5
 400e9f8:	2421883a 	add	r16,r4,r16
 400e9fc:	8008943a 	slli	r4,r16,16
 400ea00:	18ffffcc 	andi	r3,r3,65535
 400ea04:	102cd43a 	srli	r22,r2,16
 400ea08:	20c8b03a 	or	r4,r4,r3
 400ea0c:	a1000015 	stw	r4,0(r20)
 400ea10:	8021d43a 	srai	r16,r16,16
 400ea14:	a5000104 	addi	r20,r20,4
 400ea18:	e47fe32e 	bgeu	fp,r17,400e9a8 <__alt_data_end+0xfc00e9a8>
 400ea1c:	d8c00317 	ldw	r3,12(sp)
 400ea20:	18800017 	ldw	r2,0(r3)
 400ea24:	10000c1e 	bne	r2,zero,400ea58 <quorem+0x13c>
 400ea28:	18bfff04 	addi	r2,r3,-4
 400ea2c:	9880082e 	bgeu	r19,r2,400ea50 <quorem+0x134>
 400ea30:	18ffff17 	ldw	r3,-4(r3)
 400ea34:	18000326 	beq	r3,zero,400ea44 <quorem+0x128>
 400ea38:	00000506 	br	400ea50 <quorem+0x134>
 400ea3c:	10c00017 	ldw	r3,0(r2)
 400ea40:	1800031e 	bne	r3,zero,400ea50 <quorem+0x134>
 400ea44:	10bfff04 	addi	r2,r2,-4
 400ea48:	bdffffc4 	addi	r23,r23,-1
 400ea4c:	98bffb36 	bltu	r19,r2,400ea3c <__alt_data_end+0xfc00ea3c>
 400ea50:	d8c00017 	ldw	r3,0(sp)
 400ea54:	1dc00415 	stw	r23,16(r3)
 400ea58:	d9400217 	ldw	r5,8(sp)
 400ea5c:	d9000017 	ldw	r4,0(sp)
 400ea60:	401222c0 	call	401222c <__mcmp>
 400ea64:	10002816 	blt	r2,zero,400eb08 <quorem+0x1ec>
 400ea68:	dc400117 	ldw	r17,4(sp)
 400ea6c:	94800044 	addi	r18,r18,1
 400ea70:	980d883a 	mov	r6,r19
 400ea74:	0007883a 	mov	r3,zero
 400ea78:	31000017 	ldw	r4,0(r6)
 400ea7c:	89400017 	ldw	r5,0(r17)
 400ea80:	31800104 	addi	r6,r6,4
 400ea84:	20bfffcc 	andi	r2,r4,65535
 400ea88:	10c7883a 	add	r3,r2,r3
 400ea8c:	28bfffcc 	andi	r2,r5,65535
 400ea90:	1885c83a 	sub	r2,r3,r2
 400ea94:	280ad43a 	srli	r5,r5,16
 400ea98:	2008d43a 	srli	r4,r4,16
 400ea9c:	1007d43a 	srai	r3,r2,16
 400eaa0:	10bfffcc 	andi	r2,r2,65535
 400eaa4:	2149c83a 	sub	r4,r4,r5
 400eaa8:	20c9883a 	add	r4,r4,r3
 400eaac:	200a943a 	slli	r5,r4,16
 400eab0:	8c400104 	addi	r17,r17,4
 400eab4:	2007d43a 	srai	r3,r4,16
 400eab8:	2884b03a 	or	r2,r5,r2
 400eabc:	30bfff15 	stw	r2,-4(r6)
 400eac0:	e47fed2e 	bgeu	fp,r17,400ea78 <__alt_data_end+0xfc00ea78>
 400eac4:	bdc5883a 	add	r2,r23,r23
 400eac8:	1085883a 	add	r2,r2,r2
 400eacc:	9887883a 	add	r3,r19,r2
 400ead0:	18800017 	ldw	r2,0(r3)
 400ead4:	10000c1e 	bne	r2,zero,400eb08 <quorem+0x1ec>
 400ead8:	18bfff04 	addi	r2,r3,-4
 400eadc:	9880082e 	bgeu	r19,r2,400eb00 <quorem+0x1e4>
 400eae0:	18ffff17 	ldw	r3,-4(r3)
 400eae4:	18000326 	beq	r3,zero,400eaf4 <quorem+0x1d8>
 400eae8:	00000506 	br	400eb00 <quorem+0x1e4>
 400eaec:	10c00017 	ldw	r3,0(r2)
 400eaf0:	1800031e 	bne	r3,zero,400eb00 <quorem+0x1e4>
 400eaf4:	10bfff04 	addi	r2,r2,-4
 400eaf8:	bdffffc4 	addi	r23,r23,-1
 400eafc:	98bffb36 	bltu	r19,r2,400eaec <__alt_data_end+0xfc00eaec>
 400eb00:	d8c00017 	ldw	r3,0(sp)
 400eb04:	1dc00415 	stw	r23,16(r3)
 400eb08:	9005883a 	mov	r2,r18
 400eb0c:	dfc00d17 	ldw	ra,52(sp)
 400eb10:	df000c17 	ldw	fp,48(sp)
 400eb14:	ddc00b17 	ldw	r23,44(sp)
 400eb18:	dd800a17 	ldw	r22,40(sp)
 400eb1c:	dd400917 	ldw	r21,36(sp)
 400eb20:	dd000817 	ldw	r20,32(sp)
 400eb24:	dcc00717 	ldw	r19,28(sp)
 400eb28:	dc800617 	ldw	r18,24(sp)
 400eb2c:	dc400517 	ldw	r17,20(sp)
 400eb30:	dc000417 	ldw	r16,16(sp)
 400eb34:	dec00e04 	addi	sp,sp,56
 400eb38:	f800283a 	ret
 400eb3c:	0005883a 	mov	r2,zero
 400eb40:	003ff206 	br	400eb0c <__alt_data_end+0xfc00eb0c>

0400eb44 <_dtoa_r>:
 400eb44:	20801017 	ldw	r2,64(r4)
 400eb48:	deffde04 	addi	sp,sp,-136
 400eb4c:	df002015 	stw	fp,128(sp)
 400eb50:	dcc01b15 	stw	r19,108(sp)
 400eb54:	dc801a15 	stw	r18,104(sp)
 400eb58:	dc401915 	stw	r17,100(sp)
 400eb5c:	dc001815 	stw	r16,96(sp)
 400eb60:	dfc02115 	stw	ra,132(sp)
 400eb64:	ddc01f15 	stw	r23,124(sp)
 400eb68:	dd801e15 	stw	r22,120(sp)
 400eb6c:	dd401d15 	stw	r21,116(sp)
 400eb70:	dd001c15 	stw	r20,112(sp)
 400eb74:	d9c00315 	stw	r7,12(sp)
 400eb78:	2039883a 	mov	fp,r4
 400eb7c:	3023883a 	mov	r17,r6
 400eb80:	2825883a 	mov	r18,r5
 400eb84:	dc002417 	ldw	r16,144(sp)
 400eb88:	3027883a 	mov	r19,r6
 400eb8c:	10000826 	beq	r2,zero,400ebb0 <_dtoa_r+0x6c>
 400eb90:	21801117 	ldw	r6,68(r4)
 400eb94:	00c00044 	movi	r3,1
 400eb98:	100b883a 	mov	r5,r2
 400eb9c:	1986983a 	sll	r3,r3,r6
 400eba0:	11800115 	stw	r6,4(r2)
 400eba4:	10c00215 	stw	r3,8(r2)
 400eba8:	40119500 	call	4011950 <_Bfree>
 400ebac:	e0001015 	stw	zero,64(fp)
 400ebb0:	88002e16 	blt	r17,zero,400ec6c <_dtoa_r+0x128>
 400ebb4:	80000015 	stw	zero,0(r16)
 400ebb8:	889ffc2c 	andhi	r2,r17,32752
 400ebbc:	00dffc34 	movhi	r3,32752
 400ebc0:	10c01c26 	beq	r2,r3,400ec34 <_dtoa_r+0xf0>
 400ebc4:	000d883a 	mov	r6,zero
 400ebc8:	000f883a 	mov	r7,zero
 400ebcc:	9009883a 	mov	r4,r18
 400ebd0:	980b883a 	mov	r5,r19
 400ebd4:	400a0240 	call	400a024 <__eqdf2>
 400ebd8:	10002b1e 	bne	r2,zero,400ec88 <_dtoa_r+0x144>
 400ebdc:	d9c02317 	ldw	r7,140(sp)
 400ebe0:	00800044 	movi	r2,1
 400ebe4:	38800015 	stw	r2,0(r7)
 400ebe8:	d8802517 	ldw	r2,148(sp)
 400ebec:	10019e26 	beq	r2,zero,400f268 <_dtoa_r+0x724>
 400ebf0:	d8c02517 	ldw	r3,148(sp)
 400ebf4:	008100b4 	movhi	r2,1026
 400ebf8:	10ab9944 	addi	r2,r2,-20891
 400ebfc:	18800015 	stw	r2,0(r3)
 400ec00:	10bfffc4 	addi	r2,r2,-1
 400ec04:	dfc02117 	ldw	ra,132(sp)
 400ec08:	df002017 	ldw	fp,128(sp)
 400ec0c:	ddc01f17 	ldw	r23,124(sp)
 400ec10:	dd801e17 	ldw	r22,120(sp)
 400ec14:	dd401d17 	ldw	r21,116(sp)
 400ec18:	dd001c17 	ldw	r20,112(sp)
 400ec1c:	dcc01b17 	ldw	r19,108(sp)
 400ec20:	dc801a17 	ldw	r18,104(sp)
 400ec24:	dc401917 	ldw	r17,100(sp)
 400ec28:	dc001817 	ldw	r16,96(sp)
 400ec2c:	dec02204 	addi	sp,sp,136
 400ec30:	f800283a 	ret
 400ec34:	d8c02317 	ldw	r3,140(sp)
 400ec38:	0089c3c4 	movi	r2,9999
 400ec3c:	18800015 	stw	r2,0(r3)
 400ec40:	90017726 	beq	r18,zero,400f220 <_dtoa_r+0x6dc>
 400ec44:	008100b4 	movhi	r2,1026
 400ec48:	10aba504 	addi	r2,r2,-20844
 400ec4c:	d9002517 	ldw	r4,148(sp)
 400ec50:	203fec26 	beq	r4,zero,400ec04 <__alt_data_end+0xfc00ec04>
 400ec54:	10c000c7 	ldb	r3,3(r2)
 400ec58:	1801781e 	bne	r3,zero,400f23c <_dtoa_r+0x6f8>
 400ec5c:	10c000c4 	addi	r3,r2,3
 400ec60:	d9802517 	ldw	r6,148(sp)
 400ec64:	30c00015 	stw	r3,0(r6)
 400ec68:	003fe606 	br	400ec04 <__alt_data_end+0xfc00ec04>
 400ec6c:	04e00034 	movhi	r19,32768
 400ec70:	9cffffc4 	addi	r19,r19,-1
 400ec74:	00800044 	movi	r2,1
 400ec78:	8ce6703a 	and	r19,r17,r19
 400ec7c:	80800015 	stw	r2,0(r16)
 400ec80:	9823883a 	mov	r17,r19
 400ec84:	003fcc06 	br	400ebb8 <__alt_data_end+0xfc00ebb8>
 400ec88:	d8800204 	addi	r2,sp,8
 400ec8c:	d8800015 	stw	r2,0(sp)
 400ec90:	d9c00104 	addi	r7,sp,4
 400ec94:	900b883a 	mov	r5,r18
 400ec98:	980d883a 	mov	r6,r19
 400ec9c:	e009883a 	mov	r4,fp
 400eca0:	8820d53a 	srli	r16,r17,20
 400eca4:	40125f80 	call	40125f8 <__d2b>
 400eca8:	d8800915 	stw	r2,36(sp)
 400ecac:	8001651e 	bne	r16,zero,400f244 <_dtoa_r+0x700>
 400ecb0:	dd800217 	ldw	r22,8(sp)
 400ecb4:	dc000117 	ldw	r16,4(sp)
 400ecb8:	00800804 	movi	r2,32
 400ecbc:	b421883a 	add	r16,r22,r16
 400ecc0:	80c10c84 	addi	r3,r16,1074
 400ecc4:	10c2d10e 	bge	r2,r3,400f80c <_dtoa_r+0xcc8>
 400ecc8:	00801004 	movi	r2,64
 400eccc:	81010484 	addi	r4,r16,1042
 400ecd0:	10c7c83a 	sub	r3,r2,r3
 400ecd4:	9108d83a 	srl	r4,r18,r4
 400ecd8:	88e2983a 	sll	r17,r17,r3
 400ecdc:	2448b03a 	or	r4,r4,r17
 400ece0:	4015ce00 	call	4015ce0 <__floatunsidf>
 400ece4:	017f8434 	movhi	r5,65040
 400ece8:	01800044 	movi	r6,1
 400ecec:	1009883a 	mov	r4,r2
 400ecf0:	194b883a 	add	r5,r3,r5
 400ecf4:	843fffc4 	addi	r16,r16,-1
 400ecf8:	d9801115 	stw	r6,68(sp)
 400ecfc:	000d883a 	mov	r6,zero
 400ed00:	01cffe34 	movhi	r7,16376
 400ed04:	400aae80 	call	400aae8 <__subdf3>
 400ed08:	0198dbf4 	movhi	r6,25455
 400ed0c:	01cff4f4 	movhi	r7,16339
 400ed10:	3190d844 	addi	r6,r6,17249
 400ed14:	39e1e9c4 	addi	r7,r7,-30809
 400ed18:	1009883a 	mov	r4,r2
 400ed1c:	180b883a 	mov	r5,r3
 400ed20:	400a27c0 	call	400a27c <__muldf3>
 400ed24:	01a2d874 	movhi	r6,35681
 400ed28:	01cff1f4 	movhi	r7,16327
 400ed2c:	31b22cc4 	addi	r6,r6,-14157
 400ed30:	39e28a04 	addi	r7,r7,-30168
 400ed34:	180b883a 	mov	r5,r3
 400ed38:	1009883a 	mov	r4,r2
 400ed3c:	4008da80 	call	4008da8 <__adddf3>
 400ed40:	8009883a 	mov	r4,r16
 400ed44:	1029883a 	mov	r20,r2
 400ed48:	1823883a 	mov	r17,r3
 400ed4c:	400b4640 	call	400b464 <__floatsidf>
 400ed50:	019427f4 	movhi	r6,20639
 400ed54:	01cff4f4 	movhi	r7,16339
 400ed58:	319e7ec4 	addi	r6,r6,31227
 400ed5c:	39d104c4 	addi	r7,r7,17427
 400ed60:	1009883a 	mov	r4,r2
 400ed64:	180b883a 	mov	r5,r3
 400ed68:	400a27c0 	call	400a27c <__muldf3>
 400ed6c:	100d883a 	mov	r6,r2
 400ed70:	180f883a 	mov	r7,r3
 400ed74:	a009883a 	mov	r4,r20
 400ed78:	880b883a 	mov	r5,r17
 400ed7c:	4008da80 	call	4008da8 <__adddf3>
 400ed80:	1009883a 	mov	r4,r2
 400ed84:	180b883a 	mov	r5,r3
 400ed88:	1029883a 	mov	r20,r2
 400ed8c:	1823883a 	mov	r17,r3
 400ed90:	400b3e40 	call	400b3e4 <__fixdfsi>
 400ed94:	000d883a 	mov	r6,zero
 400ed98:	000f883a 	mov	r7,zero
 400ed9c:	a009883a 	mov	r4,r20
 400eda0:	880b883a 	mov	r5,r17
 400eda4:	d8800515 	stw	r2,20(sp)
 400eda8:	400a1880 	call	400a188 <__ledf2>
 400edac:	10028716 	blt	r2,zero,400f7cc <_dtoa_r+0xc88>
 400edb0:	d8c00517 	ldw	r3,20(sp)
 400edb4:	00800584 	movi	r2,22
 400edb8:	10c27536 	bltu	r2,r3,400f790 <_dtoa_r+0xc4c>
 400edbc:	180490fa 	slli	r2,r3,3
 400edc0:	00c100b4 	movhi	r3,1026
 400edc4:	18ebc004 	addi	r3,r3,-20736
 400edc8:	1885883a 	add	r2,r3,r2
 400edcc:	11000017 	ldw	r4,0(r2)
 400edd0:	11400117 	ldw	r5,4(r2)
 400edd4:	900d883a 	mov	r6,r18
 400edd8:	980f883a 	mov	r7,r19
 400eddc:	400a0ac0 	call	400a0ac <__gedf2>
 400ede0:	00828d0e 	bge	zero,r2,400f818 <_dtoa_r+0xcd4>
 400ede4:	d9000517 	ldw	r4,20(sp)
 400ede8:	d8000e15 	stw	zero,56(sp)
 400edec:	213fffc4 	addi	r4,r4,-1
 400edf0:	d9000515 	stw	r4,20(sp)
 400edf4:	b42dc83a 	sub	r22,r22,r16
 400edf8:	b5bfffc4 	addi	r22,r22,-1
 400edfc:	b0026f16 	blt	r22,zero,400f7bc <_dtoa_r+0xc78>
 400ee00:	d8000815 	stw	zero,32(sp)
 400ee04:	d9c00517 	ldw	r7,20(sp)
 400ee08:	38026416 	blt	r7,zero,400f79c <_dtoa_r+0xc58>
 400ee0c:	b1ed883a 	add	r22,r22,r7
 400ee10:	d9c00d15 	stw	r7,52(sp)
 400ee14:	d8000a15 	stw	zero,40(sp)
 400ee18:	d9800317 	ldw	r6,12(sp)
 400ee1c:	00800244 	movi	r2,9
 400ee20:	11811436 	bltu	r2,r6,400f274 <_dtoa_r+0x730>
 400ee24:	00800144 	movi	r2,5
 400ee28:	1184e10e 	bge	r2,r6,40101b0 <_dtoa_r+0x166c>
 400ee2c:	31bfff04 	addi	r6,r6,-4
 400ee30:	d9800315 	stw	r6,12(sp)
 400ee34:	0023883a 	mov	r17,zero
 400ee38:	d9800317 	ldw	r6,12(sp)
 400ee3c:	008000c4 	movi	r2,3
 400ee40:	30836726 	beq	r6,r2,400fbe0 <_dtoa_r+0x109c>
 400ee44:	1183410e 	bge	r2,r6,400fb4c <_dtoa_r+0x1008>
 400ee48:	d9c00317 	ldw	r7,12(sp)
 400ee4c:	00800104 	movi	r2,4
 400ee50:	38827c26 	beq	r7,r2,400f844 <_dtoa_r+0xd00>
 400ee54:	00800144 	movi	r2,5
 400ee58:	3884c41e 	bne	r7,r2,401016c <_dtoa_r+0x1628>
 400ee5c:	00800044 	movi	r2,1
 400ee60:	d8800b15 	stw	r2,44(sp)
 400ee64:	d8c00517 	ldw	r3,20(sp)
 400ee68:	d9002217 	ldw	r4,136(sp)
 400ee6c:	1907883a 	add	r3,r3,r4
 400ee70:	19800044 	addi	r6,r3,1
 400ee74:	d8c00c15 	stw	r3,48(sp)
 400ee78:	d9800615 	stw	r6,24(sp)
 400ee7c:	0183a40e 	bge	zero,r6,400fd10 <_dtoa_r+0x11cc>
 400ee80:	d9800617 	ldw	r6,24(sp)
 400ee84:	3021883a 	mov	r16,r6
 400ee88:	e0001115 	stw	zero,68(fp)
 400ee8c:	008005c4 	movi	r2,23
 400ee90:	1184c92e 	bgeu	r2,r6,40101b8 <_dtoa_r+0x1674>
 400ee94:	00c00044 	movi	r3,1
 400ee98:	00800104 	movi	r2,4
 400ee9c:	1085883a 	add	r2,r2,r2
 400eea0:	11000504 	addi	r4,r2,20
 400eea4:	180b883a 	mov	r5,r3
 400eea8:	18c00044 	addi	r3,r3,1
 400eeac:	313ffb2e 	bgeu	r6,r4,400ee9c <__alt_data_end+0xfc00ee9c>
 400eeb0:	e1401115 	stw	r5,68(fp)
 400eeb4:	e009883a 	mov	r4,fp
 400eeb8:	40118a80 	call	40118a8 <_Balloc>
 400eebc:	d8800715 	stw	r2,28(sp)
 400eec0:	e0801015 	stw	r2,64(fp)
 400eec4:	00800384 	movi	r2,14
 400eec8:	1400f736 	bltu	r2,r16,400f2a8 <_dtoa_r+0x764>
 400eecc:	8800f626 	beq	r17,zero,400f2a8 <_dtoa_r+0x764>
 400eed0:	d9c00517 	ldw	r7,20(sp)
 400eed4:	01c39a0e 	bge	zero,r7,400fd40 <_dtoa_r+0x11fc>
 400eed8:	388003cc 	andi	r2,r7,15
 400eedc:	100490fa 	slli	r2,r2,3
 400eee0:	382bd13a 	srai	r21,r7,4
 400eee4:	00c100b4 	movhi	r3,1026
 400eee8:	18ebc004 	addi	r3,r3,-20736
 400eeec:	1885883a 	add	r2,r3,r2
 400eef0:	a8c0040c 	andi	r3,r21,16
 400eef4:	12400017 	ldw	r9,0(r2)
 400eef8:	12000117 	ldw	r8,4(r2)
 400eefc:	18037926 	beq	r3,zero,400fce4 <_dtoa_r+0x11a0>
 400ef00:	008100b4 	movhi	r2,1026
 400ef04:	10abb604 	addi	r2,r2,-20776
 400ef08:	11800817 	ldw	r6,32(r2)
 400ef0c:	11c00917 	ldw	r7,36(r2)
 400ef10:	9009883a 	mov	r4,r18
 400ef14:	980b883a 	mov	r5,r19
 400ef18:	da001715 	stw	r8,92(sp)
 400ef1c:	da401615 	stw	r9,88(sp)
 400ef20:	40096540 	call	4009654 <__divdf3>
 400ef24:	da001717 	ldw	r8,92(sp)
 400ef28:	da401617 	ldw	r9,88(sp)
 400ef2c:	ad4003cc 	andi	r21,r21,15
 400ef30:	040000c4 	movi	r16,3
 400ef34:	1023883a 	mov	r17,r2
 400ef38:	1829883a 	mov	r20,r3
 400ef3c:	a8001126 	beq	r21,zero,400ef84 <_dtoa_r+0x440>
 400ef40:	05c100b4 	movhi	r23,1026
 400ef44:	bdebb604 	addi	r23,r23,-20776
 400ef48:	4805883a 	mov	r2,r9
 400ef4c:	4007883a 	mov	r3,r8
 400ef50:	a980004c 	andi	r6,r21,1
 400ef54:	1009883a 	mov	r4,r2
 400ef58:	a82bd07a 	srai	r21,r21,1
 400ef5c:	180b883a 	mov	r5,r3
 400ef60:	30000426 	beq	r6,zero,400ef74 <_dtoa_r+0x430>
 400ef64:	b9800017 	ldw	r6,0(r23)
 400ef68:	b9c00117 	ldw	r7,4(r23)
 400ef6c:	84000044 	addi	r16,r16,1
 400ef70:	400a27c0 	call	400a27c <__muldf3>
 400ef74:	bdc00204 	addi	r23,r23,8
 400ef78:	a83ff51e 	bne	r21,zero,400ef50 <__alt_data_end+0xfc00ef50>
 400ef7c:	1013883a 	mov	r9,r2
 400ef80:	1811883a 	mov	r8,r3
 400ef84:	480d883a 	mov	r6,r9
 400ef88:	400f883a 	mov	r7,r8
 400ef8c:	8809883a 	mov	r4,r17
 400ef90:	a00b883a 	mov	r5,r20
 400ef94:	40096540 	call	4009654 <__divdf3>
 400ef98:	d8800f15 	stw	r2,60(sp)
 400ef9c:	d8c01015 	stw	r3,64(sp)
 400efa0:	d8c00e17 	ldw	r3,56(sp)
 400efa4:	18000626 	beq	r3,zero,400efc0 <_dtoa_r+0x47c>
 400efa8:	d9000f17 	ldw	r4,60(sp)
 400efac:	d9401017 	ldw	r5,64(sp)
 400efb0:	000d883a 	mov	r6,zero
 400efb4:	01cffc34 	movhi	r7,16368
 400efb8:	400a1880 	call	400a188 <__ledf2>
 400efbc:	10040b16 	blt	r2,zero,400ffec <_dtoa_r+0x14a8>
 400efc0:	8009883a 	mov	r4,r16
 400efc4:	400b4640 	call	400b464 <__floatsidf>
 400efc8:	d9800f17 	ldw	r6,60(sp)
 400efcc:	d9c01017 	ldw	r7,64(sp)
 400efd0:	1009883a 	mov	r4,r2
 400efd4:	180b883a 	mov	r5,r3
 400efd8:	400a27c0 	call	400a27c <__muldf3>
 400efdc:	000d883a 	mov	r6,zero
 400efe0:	01d00734 	movhi	r7,16412
 400efe4:	1009883a 	mov	r4,r2
 400efe8:	180b883a 	mov	r5,r3
 400efec:	4008da80 	call	4008da8 <__adddf3>
 400eff0:	1021883a 	mov	r16,r2
 400eff4:	d8800617 	ldw	r2,24(sp)
 400eff8:	047f3034 	movhi	r17,64704
 400effc:	1c63883a 	add	r17,r3,r17
 400f000:	10031826 	beq	r2,zero,400fc64 <_dtoa_r+0x1120>
 400f004:	d8c00517 	ldw	r3,20(sp)
 400f008:	db000617 	ldw	r12,24(sp)
 400f00c:	d8c01315 	stw	r3,76(sp)
 400f010:	d9000b17 	ldw	r4,44(sp)
 400f014:	20038f26 	beq	r4,zero,400fe54 <_dtoa_r+0x1310>
 400f018:	60bfffc4 	addi	r2,r12,-1
 400f01c:	100490fa 	slli	r2,r2,3
 400f020:	00c100b4 	movhi	r3,1026
 400f024:	18ebc004 	addi	r3,r3,-20736
 400f028:	1885883a 	add	r2,r3,r2
 400f02c:	11800017 	ldw	r6,0(r2)
 400f030:	11c00117 	ldw	r7,4(r2)
 400f034:	d8800717 	ldw	r2,28(sp)
 400f038:	0009883a 	mov	r4,zero
 400f03c:	014ff834 	movhi	r5,16352
 400f040:	db001615 	stw	r12,88(sp)
 400f044:	15c00044 	addi	r23,r2,1
 400f048:	40096540 	call	4009654 <__divdf3>
 400f04c:	800d883a 	mov	r6,r16
 400f050:	880f883a 	mov	r7,r17
 400f054:	1009883a 	mov	r4,r2
 400f058:	180b883a 	mov	r5,r3
 400f05c:	400aae80 	call	400aae8 <__subdf3>
 400f060:	d9401017 	ldw	r5,64(sp)
 400f064:	d9000f17 	ldw	r4,60(sp)
 400f068:	102b883a 	mov	r21,r2
 400f06c:	d8c01215 	stw	r3,72(sp)
 400f070:	400b3e40 	call	400b3e4 <__fixdfsi>
 400f074:	1009883a 	mov	r4,r2
 400f078:	1029883a 	mov	r20,r2
 400f07c:	400b4640 	call	400b464 <__floatsidf>
 400f080:	d9000f17 	ldw	r4,60(sp)
 400f084:	d9401017 	ldw	r5,64(sp)
 400f088:	100d883a 	mov	r6,r2
 400f08c:	180f883a 	mov	r7,r3
 400f090:	400aae80 	call	400aae8 <__subdf3>
 400f094:	1823883a 	mov	r17,r3
 400f098:	d8c00717 	ldw	r3,28(sp)
 400f09c:	d9401217 	ldw	r5,72(sp)
 400f0a0:	a2000c04 	addi	r8,r20,48
 400f0a4:	1021883a 	mov	r16,r2
 400f0a8:	1a000005 	stb	r8,0(r3)
 400f0ac:	800d883a 	mov	r6,r16
 400f0b0:	880f883a 	mov	r7,r17
 400f0b4:	a809883a 	mov	r4,r21
 400f0b8:	4029883a 	mov	r20,r8
 400f0bc:	400a0ac0 	call	400a0ac <__gedf2>
 400f0c0:	00841d16 	blt	zero,r2,4010138 <_dtoa_r+0x15f4>
 400f0c4:	800d883a 	mov	r6,r16
 400f0c8:	880f883a 	mov	r7,r17
 400f0cc:	0009883a 	mov	r4,zero
 400f0d0:	014ffc34 	movhi	r5,16368
 400f0d4:	400aae80 	call	400aae8 <__subdf3>
 400f0d8:	d9401217 	ldw	r5,72(sp)
 400f0dc:	100d883a 	mov	r6,r2
 400f0e0:	180f883a 	mov	r7,r3
 400f0e4:	a809883a 	mov	r4,r21
 400f0e8:	400a0ac0 	call	400a0ac <__gedf2>
 400f0ec:	db001617 	ldw	r12,88(sp)
 400f0f0:	00840e16 	blt	zero,r2,401012c <_dtoa_r+0x15e8>
 400f0f4:	00800044 	movi	r2,1
 400f0f8:	13006b0e 	bge	r2,r12,400f2a8 <_dtoa_r+0x764>
 400f0fc:	d9000717 	ldw	r4,28(sp)
 400f100:	dd800f15 	stw	r22,60(sp)
 400f104:	dcc01015 	stw	r19,64(sp)
 400f108:	2319883a 	add	r12,r4,r12
 400f10c:	dcc01217 	ldw	r19,72(sp)
 400f110:	602d883a 	mov	r22,r12
 400f114:	dc801215 	stw	r18,72(sp)
 400f118:	b825883a 	mov	r18,r23
 400f11c:	00000906 	br	400f144 <_dtoa_r+0x600>
 400f120:	400aae80 	call	400aae8 <__subdf3>
 400f124:	a80d883a 	mov	r6,r21
 400f128:	980f883a 	mov	r7,r19
 400f12c:	1009883a 	mov	r4,r2
 400f130:	180b883a 	mov	r5,r3
 400f134:	400a1880 	call	400a188 <__ledf2>
 400f138:	1003e816 	blt	r2,zero,40100dc <_dtoa_r+0x1598>
 400f13c:	b825883a 	mov	r18,r23
 400f140:	bd83e926 	beq	r23,r22,40100e8 <_dtoa_r+0x15a4>
 400f144:	a809883a 	mov	r4,r21
 400f148:	980b883a 	mov	r5,r19
 400f14c:	000d883a 	mov	r6,zero
 400f150:	01d00934 	movhi	r7,16420
 400f154:	400a27c0 	call	400a27c <__muldf3>
 400f158:	000d883a 	mov	r6,zero
 400f15c:	01d00934 	movhi	r7,16420
 400f160:	8009883a 	mov	r4,r16
 400f164:	880b883a 	mov	r5,r17
 400f168:	102b883a 	mov	r21,r2
 400f16c:	1827883a 	mov	r19,r3
 400f170:	400a27c0 	call	400a27c <__muldf3>
 400f174:	180b883a 	mov	r5,r3
 400f178:	1009883a 	mov	r4,r2
 400f17c:	1821883a 	mov	r16,r3
 400f180:	1023883a 	mov	r17,r2
 400f184:	400b3e40 	call	400b3e4 <__fixdfsi>
 400f188:	1009883a 	mov	r4,r2
 400f18c:	1029883a 	mov	r20,r2
 400f190:	400b4640 	call	400b464 <__floatsidf>
 400f194:	8809883a 	mov	r4,r17
 400f198:	800b883a 	mov	r5,r16
 400f19c:	100d883a 	mov	r6,r2
 400f1a0:	180f883a 	mov	r7,r3
 400f1a4:	400aae80 	call	400aae8 <__subdf3>
 400f1a8:	a5000c04 	addi	r20,r20,48
 400f1ac:	a80d883a 	mov	r6,r21
 400f1b0:	980f883a 	mov	r7,r19
 400f1b4:	1009883a 	mov	r4,r2
 400f1b8:	180b883a 	mov	r5,r3
 400f1bc:	95000005 	stb	r20,0(r18)
 400f1c0:	1021883a 	mov	r16,r2
 400f1c4:	1823883a 	mov	r17,r3
 400f1c8:	400a1880 	call	400a188 <__ledf2>
 400f1cc:	bdc00044 	addi	r23,r23,1
 400f1d0:	800d883a 	mov	r6,r16
 400f1d4:	880f883a 	mov	r7,r17
 400f1d8:	0009883a 	mov	r4,zero
 400f1dc:	014ffc34 	movhi	r5,16368
 400f1e0:	103fcf0e 	bge	r2,zero,400f120 <__alt_data_end+0xfc00f120>
 400f1e4:	d8c01317 	ldw	r3,76(sp)
 400f1e8:	d8c00515 	stw	r3,20(sp)
 400f1ec:	d9400917 	ldw	r5,36(sp)
 400f1f0:	e009883a 	mov	r4,fp
 400f1f4:	40119500 	call	4011950 <_Bfree>
 400f1f8:	d9000517 	ldw	r4,20(sp)
 400f1fc:	d9802317 	ldw	r6,140(sp)
 400f200:	d9c02517 	ldw	r7,148(sp)
 400f204:	b8000005 	stb	zero,0(r23)
 400f208:	20800044 	addi	r2,r4,1
 400f20c:	30800015 	stw	r2,0(r6)
 400f210:	3802aa26 	beq	r7,zero,400fcbc <_dtoa_r+0x1178>
 400f214:	3dc00015 	stw	r23,0(r7)
 400f218:	d8800717 	ldw	r2,28(sp)
 400f21c:	003e7906 	br	400ec04 <__alt_data_end+0xfc00ec04>
 400f220:	00800434 	movhi	r2,16
 400f224:	10bfffc4 	addi	r2,r2,-1
 400f228:	88a2703a 	and	r17,r17,r2
 400f22c:	883e851e 	bne	r17,zero,400ec44 <__alt_data_end+0xfc00ec44>
 400f230:	008100b4 	movhi	r2,1026
 400f234:	10aba204 	addi	r2,r2,-20856
 400f238:	003e8406 	br	400ec4c <__alt_data_end+0xfc00ec4c>
 400f23c:	10c00204 	addi	r3,r2,8
 400f240:	003e8706 	br	400ec60 <__alt_data_end+0xfc00ec60>
 400f244:	01400434 	movhi	r5,16
 400f248:	297fffc4 	addi	r5,r5,-1
 400f24c:	994a703a 	and	r5,r19,r5
 400f250:	9009883a 	mov	r4,r18
 400f254:	843f0044 	addi	r16,r16,-1023
 400f258:	294ffc34 	orhi	r5,r5,16368
 400f25c:	dd800217 	ldw	r22,8(sp)
 400f260:	d8001115 	stw	zero,68(sp)
 400f264:	003ea506 	br	400ecfc <__alt_data_end+0xfc00ecfc>
 400f268:	008100b4 	movhi	r2,1026
 400f26c:	10ab9904 	addi	r2,r2,-20892
 400f270:	003e6406 	br	400ec04 <__alt_data_end+0xfc00ec04>
 400f274:	e0001115 	stw	zero,68(fp)
 400f278:	000b883a 	mov	r5,zero
 400f27c:	e009883a 	mov	r4,fp
 400f280:	40118a80 	call	40118a8 <_Balloc>
 400f284:	01bfffc4 	movi	r6,-1
 400f288:	01c00044 	movi	r7,1
 400f28c:	d8800715 	stw	r2,28(sp)
 400f290:	d9800c15 	stw	r6,48(sp)
 400f294:	e0801015 	stw	r2,64(fp)
 400f298:	d8000315 	stw	zero,12(sp)
 400f29c:	d9c00b15 	stw	r7,44(sp)
 400f2a0:	d9800615 	stw	r6,24(sp)
 400f2a4:	d8002215 	stw	zero,136(sp)
 400f2a8:	d8800117 	ldw	r2,4(sp)
 400f2ac:	10008916 	blt	r2,zero,400f4d4 <_dtoa_r+0x990>
 400f2b0:	d9000517 	ldw	r4,20(sp)
 400f2b4:	00c00384 	movi	r3,14
 400f2b8:	19008616 	blt	r3,r4,400f4d4 <_dtoa_r+0x990>
 400f2bc:	200490fa 	slli	r2,r4,3
 400f2c0:	00c100b4 	movhi	r3,1026
 400f2c4:	d9802217 	ldw	r6,136(sp)
 400f2c8:	18ebc004 	addi	r3,r3,-20736
 400f2cc:	1885883a 	add	r2,r3,r2
 400f2d0:	14000017 	ldw	r16,0(r2)
 400f2d4:	14400117 	ldw	r17,4(r2)
 400f2d8:	30016316 	blt	r6,zero,400f868 <_dtoa_r+0xd24>
 400f2dc:	800d883a 	mov	r6,r16
 400f2e0:	880f883a 	mov	r7,r17
 400f2e4:	9009883a 	mov	r4,r18
 400f2e8:	980b883a 	mov	r5,r19
 400f2ec:	40096540 	call	4009654 <__divdf3>
 400f2f0:	180b883a 	mov	r5,r3
 400f2f4:	1009883a 	mov	r4,r2
 400f2f8:	400b3e40 	call	400b3e4 <__fixdfsi>
 400f2fc:	1009883a 	mov	r4,r2
 400f300:	102b883a 	mov	r21,r2
 400f304:	400b4640 	call	400b464 <__floatsidf>
 400f308:	800d883a 	mov	r6,r16
 400f30c:	880f883a 	mov	r7,r17
 400f310:	1009883a 	mov	r4,r2
 400f314:	180b883a 	mov	r5,r3
 400f318:	400a27c0 	call	400a27c <__muldf3>
 400f31c:	100d883a 	mov	r6,r2
 400f320:	180f883a 	mov	r7,r3
 400f324:	9009883a 	mov	r4,r18
 400f328:	980b883a 	mov	r5,r19
 400f32c:	400aae80 	call	400aae8 <__subdf3>
 400f330:	d9c00717 	ldw	r7,28(sp)
 400f334:	1009883a 	mov	r4,r2
 400f338:	a8800c04 	addi	r2,r21,48
 400f33c:	38800005 	stb	r2,0(r7)
 400f340:	3dc00044 	addi	r23,r7,1
 400f344:	d9c00617 	ldw	r7,24(sp)
 400f348:	01800044 	movi	r6,1
 400f34c:	180b883a 	mov	r5,r3
 400f350:	2005883a 	mov	r2,r4
 400f354:	39803826 	beq	r7,r6,400f438 <_dtoa_r+0x8f4>
 400f358:	000d883a 	mov	r6,zero
 400f35c:	01d00934 	movhi	r7,16420
 400f360:	400a27c0 	call	400a27c <__muldf3>
 400f364:	000d883a 	mov	r6,zero
 400f368:	000f883a 	mov	r7,zero
 400f36c:	1009883a 	mov	r4,r2
 400f370:	180b883a 	mov	r5,r3
 400f374:	1025883a 	mov	r18,r2
 400f378:	1827883a 	mov	r19,r3
 400f37c:	400a0240 	call	400a024 <__eqdf2>
 400f380:	103f9a26 	beq	r2,zero,400f1ec <__alt_data_end+0xfc00f1ec>
 400f384:	d9c00617 	ldw	r7,24(sp)
 400f388:	d8c00717 	ldw	r3,28(sp)
 400f38c:	b829883a 	mov	r20,r23
 400f390:	38bfffc4 	addi	r2,r7,-1
 400f394:	18ad883a 	add	r22,r3,r2
 400f398:	00000a06 	br	400f3c4 <_dtoa_r+0x880>
 400f39c:	400a27c0 	call	400a27c <__muldf3>
 400f3a0:	000d883a 	mov	r6,zero
 400f3a4:	000f883a 	mov	r7,zero
 400f3a8:	1009883a 	mov	r4,r2
 400f3ac:	180b883a 	mov	r5,r3
 400f3b0:	1025883a 	mov	r18,r2
 400f3b4:	1827883a 	mov	r19,r3
 400f3b8:	b829883a 	mov	r20,r23
 400f3bc:	400a0240 	call	400a024 <__eqdf2>
 400f3c0:	103f8a26 	beq	r2,zero,400f1ec <__alt_data_end+0xfc00f1ec>
 400f3c4:	800d883a 	mov	r6,r16
 400f3c8:	880f883a 	mov	r7,r17
 400f3cc:	9009883a 	mov	r4,r18
 400f3d0:	980b883a 	mov	r5,r19
 400f3d4:	40096540 	call	4009654 <__divdf3>
 400f3d8:	180b883a 	mov	r5,r3
 400f3dc:	1009883a 	mov	r4,r2
 400f3e0:	400b3e40 	call	400b3e4 <__fixdfsi>
 400f3e4:	1009883a 	mov	r4,r2
 400f3e8:	102b883a 	mov	r21,r2
 400f3ec:	400b4640 	call	400b464 <__floatsidf>
 400f3f0:	800d883a 	mov	r6,r16
 400f3f4:	880f883a 	mov	r7,r17
 400f3f8:	1009883a 	mov	r4,r2
 400f3fc:	180b883a 	mov	r5,r3
 400f400:	400a27c0 	call	400a27c <__muldf3>
 400f404:	100d883a 	mov	r6,r2
 400f408:	180f883a 	mov	r7,r3
 400f40c:	9009883a 	mov	r4,r18
 400f410:	980b883a 	mov	r5,r19
 400f414:	400aae80 	call	400aae8 <__subdf3>
 400f418:	aa000c04 	addi	r8,r21,48
 400f41c:	a2000005 	stb	r8,0(r20)
 400f420:	000d883a 	mov	r6,zero
 400f424:	01d00934 	movhi	r7,16420
 400f428:	1009883a 	mov	r4,r2
 400f42c:	180b883a 	mov	r5,r3
 400f430:	a5c00044 	addi	r23,r20,1
 400f434:	b53fd91e 	bne	r22,r20,400f39c <__alt_data_end+0xfc00f39c>
 400f438:	100d883a 	mov	r6,r2
 400f43c:	180f883a 	mov	r7,r3
 400f440:	1009883a 	mov	r4,r2
 400f444:	180b883a 	mov	r5,r3
 400f448:	4008da80 	call	4008da8 <__adddf3>
 400f44c:	100d883a 	mov	r6,r2
 400f450:	180f883a 	mov	r7,r3
 400f454:	8009883a 	mov	r4,r16
 400f458:	880b883a 	mov	r5,r17
 400f45c:	1027883a 	mov	r19,r2
 400f460:	1825883a 	mov	r18,r3
 400f464:	400a1880 	call	400a188 <__ledf2>
 400f468:	10000816 	blt	r2,zero,400f48c <_dtoa_r+0x948>
 400f46c:	980d883a 	mov	r6,r19
 400f470:	900f883a 	mov	r7,r18
 400f474:	8009883a 	mov	r4,r16
 400f478:	880b883a 	mov	r5,r17
 400f47c:	400a0240 	call	400a024 <__eqdf2>
 400f480:	103f5a1e 	bne	r2,zero,400f1ec <__alt_data_end+0xfc00f1ec>
 400f484:	ad40004c 	andi	r21,r21,1
 400f488:	a83f5826 	beq	r21,zero,400f1ec <__alt_data_end+0xfc00f1ec>
 400f48c:	bd3fffc3 	ldbu	r20,-1(r23)
 400f490:	b8bfffc4 	addi	r2,r23,-1
 400f494:	1007883a 	mov	r3,r2
 400f498:	01400e44 	movi	r5,57
 400f49c:	d9800717 	ldw	r6,28(sp)
 400f4a0:	00000506 	br	400f4b8 <_dtoa_r+0x974>
 400f4a4:	18ffffc4 	addi	r3,r3,-1
 400f4a8:	11824726 	beq	r2,r6,400fdc8 <_dtoa_r+0x1284>
 400f4ac:	1d000003 	ldbu	r20,0(r3)
 400f4b0:	102f883a 	mov	r23,r2
 400f4b4:	10bfffc4 	addi	r2,r2,-1
 400f4b8:	a1003fcc 	andi	r4,r20,255
 400f4bc:	2100201c 	xori	r4,r4,128
 400f4c0:	213fe004 	addi	r4,r4,-128
 400f4c4:	217ff726 	beq	r4,r5,400f4a4 <__alt_data_end+0xfc00f4a4>
 400f4c8:	a2000044 	addi	r8,r20,1
 400f4cc:	12000005 	stb	r8,0(r2)
 400f4d0:	003f4606 	br	400f1ec <__alt_data_end+0xfc00f1ec>
 400f4d4:	d9000b17 	ldw	r4,44(sp)
 400f4d8:	2000c826 	beq	r4,zero,400f7fc <_dtoa_r+0xcb8>
 400f4dc:	d9800317 	ldw	r6,12(sp)
 400f4e0:	00c00044 	movi	r3,1
 400f4e4:	1980f90e 	bge	r3,r6,400f8cc <_dtoa_r+0xd88>
 400f4e8:	d8800617 	ldw	r2,24(sp)
 400f4ec:	d8c00a17 	ldw	r3,40(sp)
 400f4f0:	157fffc4 	addi	r21,r2,-1
 400f4f4:	1d41f316 	blt	r3,r21,400fcc4 <_dtoa_r+0x1180>
 400f4f8:	1d6bc83a 	sub	r21,r3,r21
 400f4fc:	d9c00617 	ldw	r7,24(sp)
 400f500:	3802aa16 	blt	r7,zero,400ffac <_dtoa_r+0x1468>
 400f504:	dd000817 	ldw	r20,32(sp)
 400f508:	d8800617 	ldw	r2,24(sp)
 400f50c:	d8c00817 	ldw	r3,32(sp)
 400f510:	01400044 	movi	r5,1
 400f514:	e009883a 	mov	r4,fp
 400f518:	1887883a 	add	r3,r3,r2
 400f51c:	d8c00815 	stw	r3,32(sp)
 400f520:	b0ad883a 	add	r22,r22,r2
 400f524:	4011cdc0 	call	4011cdc <__i2b>
 400f528:	1023883a 	mov	r17,r2
 400f52c:	a0000826 	beq	r20,zero,400f550 <_dtoa_r+0xa0c>
 400f530:	0580070e 	bge	zero,r22,400f550 <_dtoa_r+0xa0c>
 400f534:	a005883a 	mov	r2,r20
 400f538:	b500b916 	blt	r22,r20,400f820 <_dtoa_r+0xcdc>
 400f53c:	d9000817 	ldw	r4,32(sp)
 400f540:	a0a9c83a 	sub	r20,r20,r2
 400f544:	b0adc83a 	sub	r22,r22,r2
 400f548:	2089c83a 	sub	r4,r4,r2
 400f54c:	d9000815 	stw	r4,32(sp)
 400f550:	d9800a17 	ldw	r6,40(sp)
 400f554:	0181810e 	bge	zero,r6,400fb5c <_dtoa_r+0x1018>
 400f558:	d9c00b17 	ldw	r7,44(sp)
 400f55c:	3800b326 	beq	r7,zero,400f82c <_dtoa_r+0xce8>
 400f560:	a800b226 	beq	r21,zero,400f82c <_dtoa_r+0xce8>
 400f564:	880b883a 	mov	r5,r17
 400f568:	a80d883a 	mov	r6,r21
 400f56c:	e009883a 	mov	r4,fp
 400f570:	4011fa40 	call	4011fa4 <__pow5mult>
 400f574:	d9800917 	ldw	r6,36(sp)
 400f578:	100b883a 	mov	r5,r2
 400f57c:	e009883a 	mov	r4,fp
 400f580:	1023883a 	mov	r17,r2
 400f584:	4011d180 	call	4011d18 <__multiply>
 400f588:	1021883a 	mov	r16,r2
 400f58c:	d8800a17 	ldw	r2,40(sp)
 400f590:	d9400917 	ldw	r5,36(sp)
 400f594:	e009883a 	mov	r4,fp
 400f598:	1545c83a 	sub	r2,r2,r21
 400f59c:	d8800a15 	stw	r2,40(sp)
 400f5a0:	40119500 	call	4011950 <_Bfree>
 400f5a4:	d8c00a17 	ldw	r3,40(sp)
 400f5a8:	18009f1e 	bne	r3,zero,400f828 <_dtoa_r+0xce4>
 400f5ac:	05c00044 	movi	r23,1
 400f5b0:	e009883a 	mov	r4,fp
 400f5b4:	b80b883a 	mov	r5,r23
 400f5b8:	4011cdc0 	call	4011cdc <__i2b>
 400f5bc:	d9000d17 	ldw	r4,52(sp)
 400f5c0:	102b883a 	mov	r21,r2
 400f5c4:	2000ce26 	beq	r4,zero,400f900 <_dtoa_r+0xdbc>
 400f5c8:	200d883a 	mov	r6,r4
 400f5cc:	100b883a 	mov	r5,r2
 400f5d0:	e009883a 	mov	r4,fp
 400f5d4:	4011fa40 	call	4011fa4 <__pow5mult>
 400f5d8:	d9800317 	ldw	r6,12(sp)
 400f5dc:	102b883a 	mov	r21,r2
 400f5e0:	b981810e 	bge	r23,r6,400fbe8 <_dtoa_r+0x10a4>
 400f5e4:	0027883a 	mov	r19,zero
 400f5e8:	a8800417 	ldw	r2,16(r21)
 400f5ec:	05c00804 	movi	r23,32
 400f5f0:	10800104 	addi	r2,r2,4
 400f5f4:	1085883a 	add	r2,r2,r2
 400f5f8:	1085883a 	add	r2,r2,r2
 400f5fc:	a885883a 	add	r2,r21,r2
 400f600:	11000017 	ldw	r4,0(r2)
 400f604:	4011bc40 	call	4011bc4 <__hi0bits>
 400f608:	b885c83a 	sub	r2,r23,r2
 400f60c:	1585883a 	add	r2,r2,r22
 400f610:	108007cc 	andi	r2,r2,31
 400f614:	1000b326 	beq	r2,zero,400f8e4 <_dtoa_r+0xda0>
 400f618:	00c00804 	movi	r3,32
 400f61c:	1887c83a 	sub	r3,r3,r2
 400f620:	01000104 	movi	r4,4
 400f624:	20c2cd0e 	bge	r4,r3,401015c <_dtoa_r+0x1618>
 400f628:	00c00704 	movi	r3,28
 400f62c:	1885c83a 	sub	r2,r3,r2
 400f630:	d8c00817 	ldw	r3,32(sp)
 400f634:	a0a9883a 	add	r20,r20,r2
 400f638:	b0ad883a 	add	r22,r22,r2
 400f63c:	1887883a 	add	r3,r3,r2
 400f640:	d8c00815 	stw	r3,32(sp)
 400f644:	d9800817 	ldw	r6,32(sp)
 400f648:	0180040e 	bge	zero,r6,400f65c <_dtoa_r+0xb18>
 400f64c:	800b883a 	mov	r5,r16
 400f650:	e009883a 	mov	r4,fp
 400f654:	40120e40 	call	40120e4 <__lshift>
 400f658:	1021883a 	mov	r16,r2
 400f65c:	0580050e 	bge	zero,r22,400f674 <_dtoa_r+0xb30>
 400f660:	a80b883a 	mov	r5,r21
 400f664:	b00d883a 	mov	r6,r22
 400f668:	e009883a 	mov	r4,fp
 400f66c:	40120e40 	call	40120e4 <__lshift>
 400f670:	102b883a 	mov	r21,r2
 400f674:	d9c00e17 	ldw	r7,56(sp)
 400f678:	3801211e 	bne	r7,zero,400fb00 <_dtoa_r+0xfbc>
 400f67c:	d9800617 	ldw	r6,24(sp)
 400f680:	0181380e 	bge	zero,r6,400fb64 <_dtoa_r+0x1020>
 400f684:	d8c00b17 	ldw	r3,44(sp)
 400f688:	1800ab1e 	bne	r3,zero,400f938 <_dtoa_r+0xdf4>
 400f68c:	dc800717 	ldw	r18,28(sp)
 400f690:	dcc00617 	ldw	r19,24(sp)
 400f694:	9029883a 	mov	r20,r18
 400f698:	00000206 	br	400f6a4 <_dtoa_r+0xb60>
 400f69c:	40119780 	call	4011978 <__multadd>
 400f6a0:	1021883a 	mov	r16,r2
 400f6a4:	a80b883a 	mov	r5,r21
 400f6a8:	8009883a 	mov	r4,r16
 400f6ac:	400e91c0 	call	400e91c <quorem>
 400f6b0:	10800c04 	addi	r2,r2,48
 400f6b4:	90800005 	stb	r2,0(r18)
 400f6b8:	94800044 	addi	r18,r18,1
 400f6bc:	9507c83a 	sub	r3,r18,r20
 400f6c0:	000f883a 	mov	r7,zero
 400f6c4:	01800284 	movi	r6,10
 400f6c8:	800b883a 	mov	r5,r16
 400f6cc:	e009883a 	mov	r4,fp
 400f6d0:	1cfff216 	blt	r3,r19,400f69c <__alt_data_end+0xfc00f69c>
 400f6d4:	1011883a 	mov	r8,r2
 400f6d8:	d8800617 	ldw	r2,24(sp)
 400f6dc:	0082370e 	bge	zero,r2,400ffbc <_dtoa_r+0x1478>
 400f6e0:	d9000717 	ldw	r4,28(sp)
 400f6e4:	0025883a 	mov	r18,zero
 400f6e8:	20af883a 	add	r23,r4,r2
 400f6ec:	01800044 	movi	r6,1
 400f6f0:	800b883a 	mov	r5,r16
 400f6f4:	e009883a 	mov	r4,fp
 400f6f8:	da001715 	stw	r8,92(sp)
 400f6fc:	40120e40 	call	40120e4 <__lshift>
 400f700:	a80b883a 	mov	r5,r21
 400f704:	1009883a 	mov	r4,r2
 400f708:	d8800915 	stw	r2,36(sp)
 400f70c:	401222c0 	call	401222c <__mcmp>
 400f710:	da001717 	ldw	r8,92(sp)
 400f714:	0081800e 	bge	zero,r2,400fd18 <_dtoa_r+0x11d4>
 400f718:	b93fffc3 	ldbu	r4,-1(r23)
 400f71c:	b8bfffc4 	addi	r2,r23,-1
 400f720:	1007883a 	mov	r3,r2
 400f724:	01800e44 	movi	r6,57
 400f728:	d9c00717 	ldw	r7,28(sp)
 400f72c:	00000506 	br	400f744 <_dtoa_r+0xc00>
 400f730:	18ffffc4 	addi	r3,r3,-1
 400f734:	11c12326 	beq	r2,r7,400fbc4 <_dtoa_r+0x1080>
 400f738:	19000003 	ldbu	r4,0(r3)
 400f73c:	102f883a 	mov	r23,r2
 400f740:	10bfffc4 	addi	r2,r2,-1
 400f744:	21403fcc 	andi	r5,r4,255
 400f748:	2940201c 	xori	r5,r5,128
 400f74c:	297fe004 	addi	r5,r5,-128
 400f750:	29bff726 	beq	r5,r6,400f730 <__alt_data_end+0xfc00f730>
 400f754:	21000044 	addi	r4,r4,1
 400f758:	11000005 	stb	r4,0(r2)
 400f75c:	a80b883a 	mov	r5,r21
 400f760:	e009883a 	mov	r4,fp
 400f764:	40119500 	call	4011950 <_Bfree>
 400f768:	883ea026 	beq	r17,zero,400f1ec <__alt_data_end+0xfc00f1ec>
 400f76c:	90000426 	beq	r18,zero,400f780 <_dtoa_r+0xc3c>
 400f770:	94400326 	beq	r18,r17,400f780 <_dtoa_r+0xc3c>
 400f774:	900b883a 	mov	r5,r18
 400f778:	e009883a 	mov	r4,fp
 400f77c:	40119500 	call	4011950 <_Bfree>
 400f780:	880b883a 	mov	r5,r17
 400f784:	e009883a 	mov	r4,fp
 400f788:	40119500 	call	4011950 <_Bfree>
 400f78c:	003e9706 	br	400f1ec <__alt_data_end+0xfc00f1ec>
 400f790:	01800044 	movi	r6,1
 400f794:	d9800e15 	stw	r6,56(sp)
 400f798:	003d9606 	br	400edf4 <__alt_data_end+0xfc00edf4>
 400f79c:	d8800817 	ldw	r2,32(sp)
 400f7a0:	d8c00517 	ldw	r3,20(sp)
 400f7a4:	d8000d15 	stw	zero,52(sp)
 400f7a8:	10c5c83a 	sub	r2,r2,r3
 400f7ac:	00c9c83a 	sub	r4,zero,r3
 400f7b0:	d8800815 	stw	r2,32(sp)
 400f7b4:	d9000a15 	stw	r4,40(sp)
 400f7b8:	003d9706 	br	400ee18 <__alt_data_end+0xfc00ee18>
 400f7bc:	05adc83a 	sub	r22,zero,r22
 400f7c0:	dd800815 	stw	r22,32(sp)
 400f7c4:	002d883a 	mov	r22,zero
 400f7c8:	003d8e06 	br	400ee04 <__alt_data_end+0xfc00ee04>
 400f7cc:	d9000517 	ldw	r4,20(sp)
 400f7d0:	400b4640 	call	400b464 <__floatsidf>
 400f7d4:	100d883a 	mov	r6,r2
 400f7d8:	180f883a 	mov	r7,r3
 400f7dc:	a009883a 	mov	r4,r20
 400f7e0:	880b883a 	mov	r5,r17
 400f7e4:	400a0240 	call	400a024 <__eqdf2>
 400f7e8:	103d7126 	beq	r2,zero,400edb0 <__alt_data_end+0xfc00edb0>
 400f7ec:	d9c00517 	ldw	r7,20(sp)
 400f7f0:	39ffffc4 	addi	r7,r7,-1
 400f7f4:	d9c00515 	stw	r7,20(sp)
 400f7f8:	003d6d06 	br	400edb0 <__alt_data_end+0xfc00edb0>
 400f7fc:	dd400a17 	ldw	r21,40(sp)
 400f800:	dd000817 	ldw	r20,32(sp)
 400f804:	0023883a 	mov	r17,zero
 400f808:	003f4806 	br	400f52c <__alt_data_end+0xfc00f52c>
 400f80c:	10e3c83a 	sub	r17,r2,r3
 400f810:	9448983a 	sll	r4,r18,r17
 400f814:	003d3206 	br	400ece0 <__alt_data_end+0xfc00ece0>
 400f818:	d8000e15 	stw	zero,56(sp)
 400f81c:	003d7506 	br	400edf4 <__alt_data_end+0xfc00edf4>
 400f820:	b005883a 	mov	r2,r22
 400f824:	003f4506 	br	400f53c <__alt_data_end+0xfc00f53c>
 400f828:	dc000915 	stw	r16,36(sp)
 400f82c:	d9800a17 	ldw	r6,40(sp)
 400f830:	d9400917 	ldw	r5,36(sp)
 400f834:	e009883a 	mov	r4,fp
 400f838:	4011fa40 	call	4011fa4 <__pow5mult>
 400f83c:	1021883a 	mov	r16,r2
 400f840:	003f5a06 	br	400f5ac <__alt_data_end+0xfc00f5ac>
 400f844:	01c00044 	movi	r7,1
 400f848:	d9c00b15 	stw	r7,44(sp)
 400f84c:	d8802217 	ldw	r2,136(sp)
 400f850:	0081280e 	bge	zero,r2,400fcf4 <_dtoa_r+0x11b0>
 400f854:	100d883a 	mov	r6,r2
 400f858:	1021883a 	mov	r16,r2
 400f85c:	d8800c15 	stw	r2,48(sp)
 400f860:	d8800615 	stw	r2,24(sp)
 400f864:	003d8806 	br	400ee88 <__alt_data_end+0xfc00ee88>
 400f868:	d8800617 	ldw	r2,24(sp)
 400f86c:	00be9b16 	blt	zero,r2,400f2dc <__alt_data_end+0xfc00f2dc>
 400f870:	10010f1e 	bne	r2,zero,400fcb0 <_dtoa_r+0x116c>
 400f874:	880b883a 	mov	r5,r17
 400f878:	000d883a 	mov	r6,zero
 400f87c:	01d00534 	movhi	r7,16404
 400f880:	8009883a 	mov	r4,r16
 400f884:	400a27c0 	call	400a27c <__muldf3>
 400f888:	900d883a 	mov	r6,r18
 400f88c:	980f883a 	mov	r7,r19
 400f890:	1009883a 	mov	r4,r2
 400f894:	180b883a 	mov	r5,r3
 400f898:	400a0ac0 	call	400a0ac <__gedf2>
 400f89c:	002b883a 	mov	r21,zero
 400f8a0:	0023883a 	mov	r17,zero
 400f8a4:	1000bf16 	blt	r2,zero,400fba4 <_dtoa_r+0x1060>
 400f8a8:	d9802217 	ldw	r6,136(sp)
 400f8ac:	ddc00717 	ldw	r23,28(sp)
 400f8b0:	018c303a 	nor	r6,zero,r6
 400f8b4:	d9800515 	stw	r6,20(sp)
 400f8b8:	a80b883a 	mov	r5,r21
 400f8bc:	e009883a 	mov	r4,fp
 400f8c0:	40119500 	call	4011950 <_Bfree>
 400f8c4:	883e4926 	beq	r17,zero,400f1ec <__alt_data_end+0xfc00f1ec>
 400f8c8:	003fad06 	br	400f780 <__alt_data_end+0xfc00f780>
 400f8cc:	d9c01117 	ldw	r7,68(sp)
 400f8d0:	3801bc26 	beq	r7,zero,400ffc4 <_dtoa_r+0x1480>
 400f8d4:	10810cc4 	addi	r2,r2,1075
 400f8d8:	dd400a17 	ldw	r21,40(sp)
 400f8dc:	dd000817 	ldw	r20,32(sp)
 400f8e0:	003f0a06 	br	400f50c <__alt_data_end+0xfc00f50c>
 400f8e4:	00800704 	movi	r2,28
 400f8e8:	d9000817 	ldw	r4,32(sp)
 400f8ec:	a0a9883a 	add	r20,r20,r2
 400f8f0:	b0ad883a 	add	r22,r22,r2
 400f8f4:	2089883a 	add	r4,r4,r2
 400f8f8:	d9000815 	stw	r4,32(sp)
 400f8fc:	003f5106 	br	400f644 <__alt_data_end+0xfc00f644>
 400f900:	d8c00317 	ldw	r3,12(sp)
 400f904:	b8c1fc0e 	bge	r23,r3,40100f8 <_dtoa_r+0x15b4>
 400f908:	0027883a 	mov	r19,zero
 400f90c:	b805883a 	mov	r2,r23
 400f910:	003f3e06 	br	400f60c <__alt_data_end+0xfc00f60c>
 400f914:	880b883a 	mov	r5,r17
 400f918:	e009883a 	mov	r4,fp
 400f91c:	000f883a 	mov	r7,zero
 400f920:	01800284 	movi	r6,10
 400f924:	40119780 	call	4011978 <__multadd>
 400f928:	d9000c17 	ldw	r4,48(sp)
 400f92c:	1023883a 	mov	r17,r2
 400f930:	0102040e 	bge	zero,r4,4010144 <_dtoa_r+0x1600>
 400f934:	d9000615 	stw	r4,24(sp)
 400f938:	0500050e 	bge	zero,r20,400f950 <_dtoa_r+0xe0c>
 400f93c:	880b883a 	mov	r5,r17
 400f940:	a00d883a 	mov	r6,r20
 400f944:	e009883a 	mov	r4,fp
 400f948:	40120e40 	call	40120e4 <__lshift>
 400f94c:	1023883a 	mov	r17,r2
 400f950:	9801241e 	bne	r19,zero,400fde4 <_dtoa_r+0x12a0>
 400f954:	8829883a 	mov	r20,r17
 400f958:	d9000617 	ldw	r4,24(sp)
 400f95c:	dcc00717 	ldw	r19,28(sp)
 400f960:	9480004c 	andi	r18,r18,1
 400f964:	20bfffc4 	addi	r2,r4,-1
 400f968:	9885883a 	add	r2,r19,r2
 400f96c:	d8800415 	stw	r2,16(sp)
 400f970:	dc800615 	stw	r18,24(sp)
 400f974:	a80b883a 	mov	r5,r21
 400f978:	8009883a 	mov	r4,r16
 400f97c:	400e91c0 	call	400e91c <quorem>
 400f980:	880b883a 	mov	r5,r17
 400f984:	8009883a 	mov	r4,r16
 400f988:	102f883a 	mov	r23,r2
 400f98c:	401222c0 	call	401222c <__mcmp>
 400f990:	a80b883a 	mov	r5,r21
 400f994:	a00d883a 	mov	r6,r20
 400f998:	e009883a 	mov	r4,fp
 400f99c:	102d883a 	mov	r22,r2
 400f9a0:	401228c0 	call	401228c <__mdiff>
 400f9a4:	1007883a 	mov	r3,r2
 400f9a8:	10800317 	ldw	r2,12(r2)
 400f9ac:	bc800c04 	addi	r18,r23,48
 400f9b0:	180b883a 	mov	r5,r3
 400f9b4:	10004e1e 	bne	r2,zero,400faf0 <_dtoa_r+0xfac>
 400f9b8:	8009883a 	mov	r4,r16
 400f9bc:	d8c01615 	stw	r3,88(sp)
 400f9c0:	401222c0 	call	401222c <__mcmp>
 400f9c4:	d8c01617 	ldw	r3,88(sp)
 400f9c8:	e009883a 	mov	r4,fp
 400f9cc:	d8801615 	stw	r2,88(sp)
 400f9d0:	180b883a 	mov	r5,r3
 400f9d4:	40119500 	call	4011950 <_Bfree>
 400f9d8:	d8801617 	ldw	r2,88(sp)
 400f9dc:	1000041e 	bne	r2,zero,400f9f0 <_dtoa_r+0xeac>
 400f9e0:	d9800317 	ldw	r6,12(sp)
 400f9e4:	3000021e 	bne	r6,zero,400f9f0 <_dtoa_r+0xeac>
 400f9e8:	d8c00617 	ldw	r3,24(sp)
 400f9ec:	18003726 	beq	r3,zero,400facc <_dtoa_r+0xf88>
 400f9f0:	b0002016 	blt	r22,zero,400fa74 <_dtoa_r+0xf30>
 400f9f4:	b000041e 	bne	r22,zero,400fa08 <_dtoa_r+0xec4>
 400f9f8:	d9000317 	ldw	r4,12(sp)
 400f9fc:	2000021e 	bne	r4,zero,400fa08 <_dtoa_r+0xec4>
 400fa00:	d8c00617 	ldw	r3,24(sp)
 400fa04:	18001b26 	beq	r3,zero,400fa74 <_dtoa_r+0xf30>
 400fa08:	00810716 	blt	zero,r2,400fe28 <_dtoa_r+0x12e4>
 400fa0c:	d8c00417 	ldw	r3,16(sp)
 400fa10:	9d800044 	addi	r22,r19,1
 400fa14:	9c800005 	stb	r18,0(r19)
 400fa18:	b02f883a 	mov	r23,r22
 400fa1c:	98c10626 	beq	r19,r3,400fe38 <_dtoa_r+0x12f4>
 400fa20:	800b883a 	mov	r5,r16
 400fa24:	000f883a 	mov	r7,zero
 400fa28:	01800284 	movi	r6,10
 400fa2c:	e009883a 	mov	r4,fp
 400fa30:	40119780 	call	4011978 <__multadd>
 400fa34:	1021883a 	mov	r16,r2
 400fa38:	000f883a 	mov	r7,zero
 400fa3c:	01800284 	movi	r6,10
 400fa40:	880b883a 	mov	r5,r17
 400fa44:	e009883a 	mov	r4,fp
 400fa48:	8d002526 	beq	r17,r20,400fae0 <_dtoa_r+0xf9c>
 400fa4c:	40119780 	call	4011978 <__multadd>
 400fa50:	a00b883a 	mov	r5,r20
 400fa54:	000f883a 	mov	r7,zero
 400fa58:	01800284 	movi	r6,10
 400fa5c:	e009883a 	mov	r4,fp
 400fa60:	1023883a 	mov	r17,r2
 400fa64:	40119780 	call	4011978 <__multadd>
 400fa68:	1029883a 	mov	r20,r2
 400fa6c:	b027883a 	mov	r19,r22
 400fa70:	003fc006 	br	400f974 <__alt_data_end+0xfc00f974>
 400fa74:	9011883a 	mov	r8,r18
 400fa78:	00800e0e 	bge	zero,r2,400fab4 <_dtoa_r+0xf70>
 400fa7c:	800b883a 	mov	r5,r16
 400fa80:	01800044 	movi	r6,1
 400fa84:	e009883a 	mov	r4,fp
 400fa88:	da001715 	stw	r8,92(sp)
 400fa8c:	40120e40 	call	40120e4 <__lshift>
 400fa90:	a80b883a 	mov	r5,r21
 400fa94:	1009883a 	mov	r4,r2
 400fa98:	1021883a 	mov	r16,r2
 400fa9c:	401222c0 	call	401222c <__mcmp>
 400faa0:	da001717 	ldw	r8,92(sp)
 400faa4:	0081960e 	bge	zero,r2,4010100 <_dtoa_r+0x15bc>
 400faa8:	00800e44 	movi	r2,57
 400faac:	40817026 	beq	r8,r2,4010070 <_dtoa_r+0x152c>
 400fab0:	ba000c44 	addi	r8,r23,49
 400fab4:	8825883a 	mov	r18,r17
 400fab8:	9dc00044 	addi	r23,r19,1
 400fabc:	9a000005 	stb	r8,0(r19)
 400fac0:	a023883a 	mov	r17,r20
 400fac4:	dc000915 	stw	r16,36(sp)
 400fac8:	003f2406 	br	400f75c <__alt_data_end+0xfc00f75c>
 400facc:	00800e44 	movi	r2,57
 400fad0:	9011883a 	mov	r8,r18
 400fad4:	90816626 	beq	r18,r2,4010070 <_dtoa_r+0x152c>
 400fad8:	05bff516 	blt	zero,r22,400fab0 <__alt_data_end+0xfc00fab0>
 400fadc:	003ff506 	br	400fab4 <__alt_data_end+0xfc00fab4>
 400fae0:	40119780 	call	4011978 <__multadd>
 400fae4:	1023883a 	mov	r17,r2
 400fae8:	1029883a 	mov	r20,r2
 400faec:	003fdf06 	br	400fa6c <__alt_data_end+0xfc00fa6c>
 400faf0:	e009883a 	mov	r4,fp
 400faf4:	40119500 	call	4011950 <_Bfree>
 400faf8:	00800044 	movi	r2,1
 400fafc:	003fbc06 	br	400f9f0 <__alt_data_end+0xfc00f9f0>
 400fb00:	a80b883a 	mov	r5,r21
 400fb04:	8009883a 	mov	r4,r16
 400fb08:	401222c0 	call	401222c <__mcmp>
 400fb0c:	103edb0e 	bge	r2,zero,400f67c <__alt_data_end+0xfc00f67c>
 400fb10:	800b883a 	mov	r5,r16
 400fb14:	000f883a 	mov	r7,zero
 400fb18:	01800284 	movi	r6,10
 400fb1c:	e009883a 	mov	r4,fp
 400fb20:	40119780 	call	4011978 <__multadd>
 400fb24:	1021883a 	mov	r16,r2
 400fb28:	d8800517 	ldw	r2,20(sp)
 400fb2c:	d8c00b17 	ldw	r3,44(sp)
 400fb30:	10bfffc4 	addi	r2,r2,-1
 400fb34:	d8800515 	stw	r2,20(sp)
 400fb38:	183f761e 	bne	r3,zero,400f914 <__alt_data_end+0xfc00f914>
 400fb3c:	d9000c17 	ldw	r4,48(sp)
 400fb40:	0101730e 	bge	zero,r4,4010110 <_dtoa_r+0x15cc>
 400fb44:	d9000615 	stw	r4,24(sp)
 400fb48:	003ed006 	br	400f68c <__alt_data_end+0xfc00f68c>
 400fb4c:	00800084 	movi	r2,2
 400fb50:	3081861e 	bne	r6,r2,401016c <_dtoa_r+0x1628>
 400fb54:	d8000b15 	stw	zero,44(sp)
 400fb58:	003f3c06 	br	400f84c <__alt_data_end+0xfc00f84c>
 400fb5c:	dc000917 	ldw	r16,36(sp)
 400fb60:	003e9206 	br	400f5ac <__alt_data_end+0xfc00f5ac>
 400fb64:	d9c00317 	ldw	r7,12(sp)
 400fb68:	00800084 	movi	r2,2
 400fb6c:	11fec50e 	bge	r2,r7,400f684 <__alt_data_end+0xfc00f684>
 400fb70:	d9000617 	ldw	r4,24(sp)
 400fb74:	20013c1e 	bne	r4,zero,4010068 <_dtoa_r+0x1524>
 400fb78:	a80b883a 	mov	r5,r21
 400fb7c:	000f883a 	mov	r7,zero
 400fb80:	01800144 	movi	r6,5
 400fb84:	e009883a 	mov	r4,fp
 400fb88:	40119780 	call	4011978 <__multadd>
 400fb8c:	100b883a 	mov	r5,r2
 400fb90:	8009883a 	mov	r4,r16
 400fb94:	102b883a 	mov	r21,r2
 400fb98:	401222c0 	call	401222c <__mcmp>
 400fb9c:	dc000915 	stw	r16,36(sp)
 400fba0:	00bf410e 	bge	zero,r2,400f8a8 <__alt_data_end+0xfc00f8a8>
 400fba4:	d9c00717 	ldw	r7,28(sp)
 400fba8:	00800c44 	movi	r2,49
 400fbac:	38800005 	stb	r2,0(r7)
 400fbb0:	d8800517 	ldw	r2,20(sp)
 400fbb4:	3dc00044 	addi	r23,r7,1
 400fbb8:	10800044 	addi	r2,r2,1
 400fbbc:	d8800515 	stw	r2,20(sp)
 400fbc0:	003f3d06 	br	400f8b8 <__alt_data_end+0xfc00f8b8>
 400fbc4:	d9800517 	ldw	r6,20(sp)
 400fbc8:	d9c00717 	ldw	r7,28(sp)
 400fbcc:	00800c44 	movi	r2,49
 400fbd0:	31800044 	addi	r6,r6,1
 400fbd4:	d9800515 	stw	r6,20(sp)
 400fbd8:	38800005 	stb	r2,0(r7)
 400fbdc:	003edf06 	br	400f75c <__alt_data_end+0xfc00f75c>
 400fbe0:	d8000b15 	stw	zero,44(sp)
 400fbe4:	003c9f06 	br	400ee64 <__alt_data_end+0xfc00ee64>
 400fbe8:	903e7e1e 	bne	r18,zero,400f5e4 <__alt_data_end+0xfc00f5e4>
 400fbec:	00800434 	movhi	r2,16
 400fbf0:	10bfffc4 	addi	r2,r2,-1
 400fbf4:	9884703a 	and	r2,r19,r2
 400fbf8:	1000ea1e 	bne	r2,zero,400ffa4 <_dtoa_r+0x1460>
 400fbfc:	9cdffc2c 	andhi	r19,r19,32752
 400fc00:	9800e826 	beq	r19,zero,400ffa4 <_dtoa_r+0x1460>
 400fc04:	d9c00817 	ldw	r7,32(sp)
 400fc08:	b5800044 	addi	r22,r22,1
 400fc0c:	04c00044 	movi	r19,1
 400fc10:	39c00044 	addi	r7,r7,1
 400fc14:	d9c00815 	stw	r7,32(sp)
 400fc18:	d8800d17 	ldw	r2,52(sp)
 400fc1c:	103e721e 	bne	r2,zero,400f5e8 <__alt_data_end+0xfc00f5e8>
 400fc20:	00800044 	movi	r2,1
 400fc24:	003e7906 	br	400f60c <__alt_data_end+0xfc00f60c>
 400fc28:	8009883a 	mov	r4,r16
 400fc2c:	400b4640 	call	400b464 <__floatsidf>
 400fc30:	d9800f17 	ldw	r6,60(sp)
 400fc34:	d9c01017 	ldw	r7,64(sp)
 400fc38:	1009883a 	mov	r4,r2
 400fc3c:	180b883a 	mov	r5,r3
 400fc40:	400a27c0 	call	400a27c <__muldf3>
 400fc44:	000d883a 	mov	r6,zero
 400fc48:	01d00734 	movhi	r7,16412
 400fc4c:	1009883a 	mov	r4,r2
 400fc50:	180b883a 	mov	r5,r3
 400fc54:	4008da80 	call	4008da8 <__adddf3>
 400fc58:	047f3034 	movhi	r17,64704
 400fc5c:	1021883a 	mov	r16,r2
 400fc60:	1c63883a 	add	r17,r3,r17
 400fc64:	d9000f17 	ldw	r4,60(sp)
 400fc68:	d9401017 	ldw	r5,64(sp)
 400fc6c:	000d883a 	mov	r6,zero
 400fc70:	01d00534 	movhi	r7,16404
 400fc74:	400aae80 	call	400aae8 <__subdf3>
 400fc78:	800d883a 	mov	r6,r16
 400fc7c:	880f883a 	mov	r7,r17
 400fc80:	1009883a 	mov	r4,r2
 400fc84:	180b883a 	mov	r5,r3
 400fc88:	102b883a 	mov	r21,r2
 400fc8c:	1829883a 	mov	r20,r3
 400fc90:	400a0ac0 	call	400a0ac <__gedf2>
 400fc94:	00806c16 	blt	zero,r2,400fe48 <_dtoa_r+0x1304>
 400fc98:	89e0003c 	xorhi	r7,r17,32768
 400fc9c:	800d883a 	mov	r6,r16
 400fca0:	a809883a 	mov	r4,r21
 400fca4:	a00b883a 	mov	r5,r20
 400fca8:	400a1880 	call	400a188 <__ledf2>
 400fcac:	103d7e0e 	bge	r2,zero,400f2a8 <__alt_data_end+0xfc00f2a8>
 400fcb0:	002b883a 	mov	r21,zero
 400fcb4:	0023883a 	mov	r17,zero
 400fcb8:	003efb06 	br	400f8a8 <__alt_data_end+0xfc00f8a8>
 400fcbc:	d8800717 	ldw	r2,28(sp)
 400fcc0:	003bd006 	br	400ec04 <__alt_data_end+0xfc00ec04>
 400fcc4:	d9000a17 	ldw	r4,40(sp)
 400fcc8:	d9800d17 	ldw	r6,52(sp)
 400fccc:	dd400a15 	stw	r21,40(sp)
 400fcd0:	a905c83a 	sub	r2,r21,r4
 400fcd4:	308d883a 	add	r6,r6,r2
 400fcd8:	d9800d15 	stw	r6,52(sp)
 400fcdc:	002b883a 	mov	r21,zero
 400fce0:	003e0606 	br	400f4fc <__alt_data_end+0xfc00f4fc>
 400fce4:	9023883a 	mov	r17,r18
 400fce8:	9829883a 	mov	r20,r19
 400fcec:	04000084 	movi	r16,2
 400fcf0:	003c9206 	br	400ef3c <__alt_data_end+0xfc00ef3c>
 400fcf4:	04000044 	movi	r16,1
 400fcf8:	dc000c15 	stw	r16,48(sp)
 400fcfc:	dc000615 	stw	r16,24(sp)
 400fd00:	dc002215 	stw	r16,136(sp)
 400fd04:	e0001115 	stw	zero,68(fp)
 400fd08:	000b883a 	mov	r5,zero
 400fd0c:	003c6906 	br	400eeb4 <__alt_data_end+0xfc00eeb4>
 400fd10:	3021883a 	mov	r16,r6
 400fd14:	003ffb06 	br	400fd04 <__alt_data_end+0xfc00fd04>
 400fd18:	1000021e 	bne	r2,zero,400fd24 <_dtoa_r+0x11e0>
 400fd1c:	4200004c 	andi	r8,r8,1
 400fd20:	403e7d1e 	bne	r8,zero,400f718 <__alt_data_end+0xfc00f718>
 400fd24:	01000c04 	movi	r4,48
 400fd28:	00000106 	br	400fd30 <_dtoa_r+0x11ec>
 400fd2c:	102f883a 	mov	r23,r2
 400fd30:	b8bfffc4 	addi	r2,r23,-1
 400fd34:	10c00007 	ldb	r3,0(r2)
 400fd38:	193ffc26 	beq	r3,r4,400fd2c <__alt_data_end+0xfc00fd2c>
 400fd3c:	003e8706 	br	400f75c <__alt_data_end+0xfc00f75c>
 400fd40:	d8800517 	ldw	r2,20(sp)
 400fd44:	00a3c83a 	sub	r17,zero,r2
 400fd48:	8800a426 	beq	r17,zero,400ffdc <_dtoa_r+0x1498>
 400fd4c:	888003cc 	andi	r2,r17,15
 400fd50:	100490fa 	slli	r2,r2,3
 400fd54:	00c100b4 	movhi	r3,1026
 400fd58:	18ebc004 	addi	r3,r3,-20736
 400fd5c:	1885883a 	add	r2,r3,r2
 400fd60:	11800017 	ldw	r6,0(r2)
 400fd64:	11c00117 	ldw	r7,4(r2)
 400fd68:	9009883a 	mov	r4,r18
 400fd6c:	980b883a 	mov	r5,r19
 400fd70:	8823d13a 	srai	r17,r17,4
 400fd74:	400a27c0 	call	400a27c <__muldf3>
 400fd78:	d8800f15 	stw	r2,60(sp)
 400fd7c:	d8c01015 	stw	r3,64(sp)
 400fd80:	8800e826 	beq	r17,zero,4010124 <_dtoa_r+0x15e0>
 400fd84:	050100b4 	movhi	r20,1026
 400fd88:	a52bb604 	addi	r20,r20,-20776
 400fd8c:	04000084 	movi	r16,2
 400fd90:	8980004c 	andi	r6,r17,1
 400fd94:	1009883a 	mov	r4,r2
 400fd98:	8823d07a 	srai	r17,r17,1
 400fd9c:	180b883a 	mov	r5,r3
 400fda0:	30000426 	beq	r6,zero,400fdb4 <_dtoa_r+0x1270>
 400fda4:	a1800017 	ldw	r6,0(r20)
 400fda8:	a1c00117 	ldw	r7,4(r20)
 400fdac:	84000044 	addi	r16,r16,1
 400fdb0:	400a27c0 	call	400a27c <__muldf3>
 400fdb4:	a5000204 	addi	r20,r20,8
 400fdb8:	883ff51e 	bne	r17,zero,400fd90 <__alt_data_end+0xfc00fd90>
 400fdbc:	d8800f15 	stw	r2,60(sp)
 400fdc0:	d8c01015 	stw	r3,64(sp)
 400fdc4:	003c7606 	br	400efa0 <__alt_data_end+0xfc00efa0>
 400fdc8:	00c00c04 	movi	r3,48
 400fdcc:	10c00005 	stb	r3,0(r2)
 400fdd0:	d8c00517 	ldw	r3,20(sp)
 400fdd4:	bd3fffc3 	ldbu	r20,-1(r23)
 400fdd8:	18c00044 	addi	r3,r3,1
 400fddc:	d8c00515 	stw	r3,20(sp)
 400fde0:	003db906 	br	400f4c8 <__alt_data_end+0xfc00f4c8>
 400fde4:	89400117 	ldw	r5,4(r17)
 400fde8:	e009883a 	mov	r4,fp
 400fdec:	40118a80 	call	40118a8 <_Balloc>
 400fdf0:	89800417 	ldw	r6,16(r17)
 400fdf4:	89400304 	addi	r5,r17,12
 400fdf8:	11000304 	addi	r4,r2,12
 400fdfc:	31800084 	addi	r6,r6,2
 400fe00:	318d883a 	add	r6,r6,r6
 400fe04:	318d883a 	add	r6,r6,r6
 400fe08:	1027883a 	mov	r19,r2
 400fe0c:	400c0a00 	call	400c0a0 <memcpy>
 400fe10:	01800044 	movi	r6,1
 400fe14:	980b883a 	mov	r5,r19
 400fe18:	e009883a 	mov	r4,fp
 400fe1c:	40120e40 	call	40120e4 <__lshift>
 400fe20:	1029883a 	mov	r20,r2
 400fe24:	003ecc06 	br	400f958 <__alt_data_end+0xfc00f958>
 400fe28:	00800e44 	movi	r2,57
 400fe2c:	90809026 	beq	r18,r2,4010070 <_dtoa_r+0x152c>
 400fe30:	92000044 	addi	r8,r18,1
 400fe34:	003f1f06 	br	400fab4 <__alt_data_end+0xfc00fab4>
 400fe38:	9011883a 	mov	r8,r18
 400fe3c:	8825883a 	mov	r18,r17
 400fe40:	a023883a 	mov	r17,r20
 400fe44:	003e2906 	br	400f6ec <__alt_data_end+0xfc00f6ec>
 400fe48:	002b883a 	mov	r21,zero
 400fe4c:	0023883a 	mov	r17,zero
 400fe50:	003f5406 	br	400fba4 <__alt_data_end+0xfc00fba4>
 400fe54:	61bfffc4 	addi	r6,r12,-1
 400fe58:	300490fa 	slli	r2,r6,3
 400fe5c:	00c100b4 	movhi	r3,1026
 400fe60:	18ebc004 	addi	r3,r3,-20736
 400fe64:	1885883a 	add	r2,r3,r2
 400fe68:	11000017 	ldw	r4,0(r2)
 400fe6c:	11400117 	ldw	r5,4(r2)
 400fe70:	d8800717 	ldw	r2,28(sp)
 400fe74:	880f883a 	mov	r7,r17
 400fe78:	d9801215 	stw	r6,72(sp)
 400fe7c:	800d883a 	mov	r6,r16
 400fe80:	db001615 	stw	r12,88(sp)
 400fe84:	15c00044 	addi	r23,r2,1
 400fe88:	400a27c0 	call	400a27c <__muldf3>
 400fe8c:	d9401017 	ldw	r5,64(sp)
 400fe90:	d9000f17 	ldw	r4,60(sp)
 400fe94:	d8c01515 	stw	r3,84(sp)
 400fe98:	d8801415 	stw	r2,80(sp)
 400fe9c:	400b3e40 	call	400b3e4 <__fixdfsi>
 400fea0:	1009883a 	mov	r4,r2
 400fea4:	1021883a 	mov	r16,r2
 400fea8:	400b4640 	call	400b464 <__floatsidf>
 400feac:	d9000f17 	ldw	r4,60(sp)
 400feb0:	d9401017 	ldw	r5,64(sp)
 400feb4:	100d883a 	mov	r6,r2
 400feb8:	180f883a 	mov	r7,r3
 400febc:	400aae80 	call	400aae8 <__subdf3>
 400fec0:	1829883a 	mov	r20,r3
 400fec4:	d8c00717 	ldw	r3,28(sp)
 400fec8:	84000c04 	addi	r16,r16,48
 400fecc:	1023883a 	mov	r17,r2
 400fed0:	1c000005 	stb	r16,0(r3)
 400fed4:	db001617 	ldw	r12,88(sp)
 400fed8:	00800044 	movi	r2,1
 400fedc:	60802226 	beq	r12,r2,400ff68 <_dtoa_r+0x1424>
 400fee0:	d9c00717 	ldw	r7,28(sp)
 400fee4:	8805883a 	mov	r2,r17
 400fee8:	b82b883a 	mov	r21,r23
 400feec:	3b19883a 	add	r12,r7,r12
 400fef0:	6023883a 	mov	r17,r12
 400fef4:	a007883a 	mov	r3,r20
 400fef8:	dc800f15 	stw	r18,60(sp)
 400fefc:	000d883a 	mov	r6,zero
 400ff00:	01d00934 	movhi	r7,16420
 400ff04:	1009883a 	mov	r4,r2
 400ff08:	180b883a 	mov	r5,r3
 400ff0c:	400a27c0 	call	400a27c <__muldf3>
 400ff10:	180b883a 	mov	r5,r3
 400ff14:	1009883a 	mov	r4,r2
 400ff18:	1829883a 	mov	r20,r3
 400ff1c:	1025883a 	mov	r18,r2
 400ff20:	400b3e40 	call	400b3e4 <__fixdfsi>
 400ff24:	1009883a 	mov	r4,r2
 400ff28:	1021883a 	mov	r16,r2
 400ff2c:	400b4640 	call	400b464 <__floatsidf>
 400ff30:	100d883a 	mov	r6,r2
 400ff34:	180f883a 	mov	r7,r3
 400ff38:	9009883a 	mov	r4,r18
 400ff3c:	a00b883a 	mov	r5,r20
 400ff40:	84000c04 	addi	r16,r16,48
 400ff44:	400aae80 	call	400aae8 <__subdf3>
 400ff48:	ad400044 	addi	r21,r21,1
 400ff4c:	ac3fffc5 	stb	r16,-1(r21)
 400ff50:	ac7fea1e 	bne	r21,r17,400fefc <__alt_data_end+0xfc00fefc>
 400ff54:	1023883a 	mov	r17,r2
 400ff58:	d8801217 	ldw	r2,72(sp)
 400ff5c:	dc800f17 	ldw	r18,60(sp)
 400ff60:	1829883a 	mov	r20,r3
 400ff64:	b8af883a 	add	r23,r23,r2
 400ff68:	d9001417 	ldw	r4,80(sp)
 400ff6c:	d9401517 	ldw	r5,84(sp)
 400ff70:	000d883a 	mov	r6,zero
 400ff74:	01cff834 	movhi	r7,16352
 400ff78:	4008da80 	call	4008da8 <__adddf3>
 400ff7c:	880d883a 	mov	r6,r17
 400ff80:	a00f883a 	mov	r7,r20
 400ff84:	1009883a 	mov	r4,r2
 400ff88:	180b883a 	mov	r5,r3
 400ff8c:	400a1880 	call	400a188 <__ledf2>
 400ff90:	10003e0e 	bge	r2,zero,401008c <_dtoa_r+0x1548>
 400ff94:	d9001317 	ldw	r4,76(sp)
 400ff98:	bd3fffc3 	ldbu	r20,-1(r23)
 400ff9c:	d9000515 	stw	r4,20(sp)
 400ffa0:	003d3b06 	br	400f490 <__alt_data_end+0xfc00f490>
 400ffa4:	0027883a 	mov	r19,zero
 400ffa8:	003f1b06 	br	400fc18 <__alt_data_end+0xfc00fc18>
 400ffac:	d8800817 	ldw	r2,32(sp)
 400ffb0:	11e9c83a 	sub	r20,r2,r7
 400ffb4:	0005883a 	mov	r2,zero
 400ffb8:	003d5406 	br	400f50c <__alt_data_end+0xfc00f50c>
 400ffbc:	00800044 	movi	r2,1
 400ffc0:	003dc706 	br	400f6e0 <__alt_data_end+0xfc00f6e0>
 400ffc4:	d8c00217 	ldw	r3,8(sp)
 400ffc8:	00800d84 	movi	r2,54
 400ffcc:	dd400a17 	ldw	r21,40(sp)
 400ffd0:	10c5c83a 	sub	r2,r2,r3
 400ffd4:	dd000817 	ldw	r20,32(sp)
 400ffd8:	003d4c06 	br	400f50c <__alt_data_end+0xfc00f50c>
 400ffdc:	dc800f15 	stw	r18,60(sp)
 400ffe0:	dcc01015 	stw	r19,64(sp)
 400ffe4:	04000084 	movi	r16,2
 400ffe8:	003bed06 	br	400efa0 <__alt_data_end+0xfc00efa0>
 400ffec:	d9000617 	ldw	r4,24(sp)
 400fff0:	203f0d26 	beq	r4,zero,400fc28 <__alt_data_end+0xfc00fc28>
 400fff4:	d9800c17 	ldw	r6,48(sp)
 400fff8:	01bcab0e 	bge	zero,r6,400f2a8 <__alt_data_end+0xfc00f2a8>
 400fffc:	d9401017 	ldw	r5,64(sp)
 4010000:	d9000f17 	ldw	r4,60(sp)
 4010004:	000d883a 	mov	r6,zero
 4010008:	01d00934 	movhi	r7,16420
 401000c:	400a27c0 	call	400a27c <__muldf3>
 4010010:	81000044 	addi	r4,r16,1
 4010014:	d8800f15 	stw	r2,60(sp)
 4010018:	d8c01015 	stw	r3,64(sp)
 401001c:	400b4640 	call	400b464 <__floatsidf>
 4010020:	d9800f17 	ldw	r6,60(sp)
 4010024:	d9c01017 	ldw	r7,64(sp)
 4010028:	1009883a 	mov	r4,r2
 401002c:	180b883a 	mov	r5,r3
 4010030:	400a27c0 	call	400a27c <__muldf3>
 4010034:	01d00734 	movhi	r7,16412
 4010038:	000d883a 	mov	r6,zero
 401003c:	1009883a 	mov	r4,r2
 4010040:	180b883a 	mov	r5,r3
 4010044:	4008da80 	call	4008da8 <__adddf3>
 4010048:	d9c00517 	ldw	r7,20(sp)
 401004c:	047f3034 	movhi	r17,64704
 4010050:	1021883a 	mov	r16,r2
 4010054:	39ffffc4 	addi	r7,r7,-1
 4010058:	d9c01315 	stw	r7,76(sp)
 401005c:	1c63883a 	add	r17,r3,r17
 4010060:	db000c17 	ldw	r12,48(sp)
 4010064:	003bea06 	br	400f010 <__alt_data_end+0xfc00f010>
 4010068:	dc000915 	stw	r16,36(sp)
 401006c:	003e0e06 	br	400f8a8 <__alt_data_end+0xfc00f8a8>
 4010070:	01000e44 	movi	r4,57
 4010074:	8825883a 	mov	r18,r17
 4010078:	9dc00044 	addi	r23,r19,1
 401007c:	99000005 	stb	r4,0(r19)
 4010080:	a023883a 	mov	r17,r20
 4010084:	dc000915 	stw	r16,36(sp)
 4010088:	003da406 	br	400f71c <__alt_data_end+0xfc00f71c>
 401008c:	d9801417 	ldw	r6,80(sp)
 4010090:	d9c01517 	ldw	r7,84(sp)
 4010094:	0009883a 	mov	r4,zero
 4010098:	014ff834 	movhi	r5,16352
 401009c:	400aae80 	call	400aae8 <__subdf3>
 40100a0:	880d883a 	mov	r6,r17
 40100a4:	a00f883a 	mov	r7,r20
 40100a8:	1009883a 	mov	r4,r2
 40100ac:	180b883a 	mov	r5,r3
 40100b0:	400a0ac0 	call	400a0ac <__gedf2>
 40100b4:	00bc7c0e 	bge	zero,r2,400f2a8 <__alt_data_end+0xfc00f2a8>
 40100b8:	01000c04 	movi	r4,48
 40100bc:	00000106 	br	40100c4 <_dtoa_r+0x1580>
 40100c0:	102f883a 	mov	r23,r2
 40100c4:	b8bfffc4 	addi	r2,r23,-1
 40100c8:	10c00007 	ldb	r3,0(r2)
 40100cc:	193ffc26 	beq	r3,r4,40100c0 <__alt_data_end+0xfc0100c0>
 40100d0:	d9801317 	ldw	r6,76(sp)
 40100d4:	d9800515 	stw	r6,20(sp)
 40100d8:	003c4406 	br	400f1ec <__alt_data_end+0xfc00f1ec>
 40100dc:	d9801317 	ldw	r6,76(sp)
 40100e0:	d9800515 	stw	r6,20(sp)
 40100e4:	003cea06 	br	400f490 <__alt_data_end+0xfc00f490>
 40100e8:	dd800f17 	ldw	r22,60(sp)
 40100ec:	dcc01017 	ldw	r19,64(sp)
 40100f0:	dc801217 	ldw	r18,72(sp)
 40100f4:	003c6c06 	br	400f2a8 <__alt_data_end+0xfc00f2a8>
 40100f8:	903e031e 	bne	r18,zero,400f908 <__alt_data_end+0xfc00f908>
 40100fc:	003ebb06 	br	400fbec <__alt_data_end+0xfc00fbec>
 4010100:	103e6c1e 	bne	r2,zero,400fab4 <__alt_data_end+0xfc00fab4>
 4010104:	4080004c 	andi	r2,r8,1
 4010108:	103e6a26 	beq	r2,zero,400fab4 <__alt_data_end+0xfc00fab4>
 401010c:	003e6606 	br	400faa8 <__alt_data_end+0xfc00faa8>
 4010110:	d8c00317 	ldw	r3,12(sp)
 4010114:	00800084 	movi	r2,2
 4010118:	10c02916 	blt	r2,r3,40101c0 <_dtoa_r+0x167c>
 401011c:	d9000c17 	ldw	r4,48(sp)
 4010120:	003e8806 	br	400fb44 <__alt_data_end+0xfc00fb44>
 4010124:	04000084 	movi	r16,2
 4010128:	003b9d06 	br	400efa0 <__alt_data_end+0xfc00efa0>
 401012c:	d9001317 	ldw	r4,76(sp)
 4010130:	d9000515 	stw	r4,20(sp)
 4010134:	003cd606 	br	400f490 <__alt_data_end+0xfc00f490>
 4010138:	d8801317 	ldw	r2,76(sp)
 401013c:	d8800515 	stw	r2,20(sp)
 4010140:	003c2a06 	br	400f1ec <__alt_data_end+0xfc00f1ec>
 4010144:	d9800317 	ldw	r6,12(sp)
 4010148:	00800084 	movi	r2,2
 401014c:	11801516 	blt	r2,r6,40101a4 <_dtoa_r+0x1660>
 4010150:	d9c00c17 	ldw	r7,48(sp)
 4010154:	d9c00615 	stw	r7,24(sp)
 4010158:	003df706 	br	400f938 <__alt_data_end+0xfc00f938>
 401015c:	193d3926 	beq	r3,r4,400f644 <__alt_data_end+0xfc00f644>
 4010160:	00c00f04 	movi	r3,60
 4010164:	1885c83a 	sub	r2,r3,r2
 4010168:	003ddf06 	br	400f8e8 <__alt_data_end+0xfc00f8e8>
 401016c:	e009883a 	mov	r4,fp
 4010170:	e0001115 	stw	zero,68(fp)
 4010174:	000b883a 	mov	r5,zero
 4010178:	40118a80 	call	40118a8 <_Balloc>
 401017c:	d8800715 	stw	r2,28(sp)
 4010180:	d8c00717 	ldw	r3,28(sp)
 4010184:	00bfffc4 	movi	r2,-1
 4010188:	01000044 	movi	r4,1
 401018c:	d8800c15 	stw	r2,48(sp)
 4010190:	e0c01015 	stw	r3,64(fp)
 4010194:	d9000b15 	stw	r4,44(sp)
 4010198:	d8800615 	stw	r2,24(sp)
 401019c:	d8002215 	stw	zero,136(sp)
 40101a0:	003c4106 	br	400f2a8 <__alt_data_end+0xfc00f2a8>
 40101a4:	d8c00c17 	ldw	r3,48(sp)
 40101a8:	d8c00615 	stw	r3,24(sp)
 40101ac:	003e7006 	br	400fb70 <__alt_data_end+0xfc00fb70>
 40101b0:	04400044 	movi	r17,1
 40101b4:	003b2006 	br	400ee38 <__alt_data_end+0xfc00ee38>
 40101b8:	000b883a 	mov	r5,zero
 40101bc:	003b3d06 	br	400eeb4 <__alt_data_end+0xfc00eeb4>
 40101c0:	d8800c17 	ldw	r2,48(sp)
 40101c4:	d8800615 	stw	r2,24(sp)
 40101c8:	003e6906 	br	400fb70 <__alt_data_end+0xfc00fb70>

040101cc <__sflush_r>:
 40101cc:	2880030b 	ldhu	r2,12(r5)
 40101d0:	defffb04 	addi	sp,sp,-20
 40101d4:	dcc00315 	stw	r19,12(sp)
 40101d8:	dc400115 	stw	r17,4(sp)
 40101dc:	dfc00415 	stw	ra,16(sp)
 40101e0:	dc800215 	stw	r18,8(sp)
 40101e4:	dc000015 	stw	r16,0(sp)
 40101e8:	10c0020c 	andi	r3,r2,8
 40101ec:	2823883a 	mov	r17,r5
 40101f0:	2027883a 	mov	r19,r4
 40101f4:	1800311e 	bne	r3,zero,40102bc <__sflush_r+0xf0>
 40101f8:	28c00117 	ldw	r3,4(r5)
 40101fc:	10820014 	ori	r2,r2,2048
 4010200:	2880030d 	sth	r2,12(r5)
 4010204:	00c04b0e 	bge	zero,r3,4010334 <__sflush_r+0x168>
 4010208:	8a000a17 	ldw	r8,40(r17)
 401020c:	40002326 	beq	r8,zero,401029c <__sflush_r+0xd0>
 4010210:	9c000017 	ldw	r16,0(r19)
 4010214:	10c4000c 	andi	r3,r2,4096
 4010218:	98000015 	stw	zero,0(r19)
 401021c:	18004826 	beq	r3,zero,4010340 <__sflush_r+0x174>
 4010220:	89801417 	ldw	r6,80(r17)
 4010224:	10c0010c 	andi	r3,r2,4
 4010228:	18000626 	beq	r3,zero,4010244 <__sflush_r+0x78>
 401022c:	88c00117 	ldw	r3,4(r17)
 4010230:	88800c17 	ldw	r2,48(r17)
 4010234:	30cdc83a 	sub	r6,r6,r3
 4010238:	10000226 	beq	r2,zero,4010244 <__sflush_r+0x78>
 401023c:	88800f17 	ldw	r2,60(r17)
 4010240:	308dc83a 	sub	r6,r6,r2
 4010244:	89400717 	ldw	r5,28(r17)
 4010248:	000f883a 	mov	r7,zero
 401024c:	9809883a 	mov	r4,r19
 4010250:	403ee83a 	callr	r8
 4010254:	00ffffc4 	movi	r3,-1
 4010258:	10c04426 	beq	r2,r3,401036c <__sflush_r+0x1a0>
 401025c:	88c0030b 	ldhu	r3,12(r17)
 4010260:	89000417 	ldw	r4,16(r17)
 4010264:	88000115 	stw	zero,4(r17)
 4010268:	197dffcc 	andi	r5,r3,63487
 401026c:	8940030d 	sth	r5,12(r17)
 4010270:	89000015 	stw	r4,0(r17)
 4010274:	18c4000c 	andi	r3,r3,4096
 4010278:	18002c1e 	bne	r3,zero,401032c <__sflush_r+0x160>
 401027c:	89400c17 	ldw	r5,48(r17)
 4010280:	9c000015 	stw	r16,0(r19)
 4010284:	28000526 	beq	r5,zero,401029c <__sflush_r+0xd0>
 4010288:	88801004 	addi	r2,r17,64
 401028c:	28800226 	beq	r5,r2,4010298 <__sflush_r+0xcc>
 4010290:	9809883a 	mov	r4,r19
 4010294:	40109480 	call	4010948 <_free_r>
 4010298:	88000c15 	stw	zero,48(r17)
 401029c:	0005883a 	mov	r2,zero
 40102a0:	dfc00417 	ldw	ra,16(sp)
 40102a4:	dcc00317 	ldw	r19,12(sp)
 40102a8:	dc800217 	ldw	r18,8(sp)
 40102ac:	dc400117 	ldw	r17,4(sp)
 40102b0:	dc000017 	ldw	r16,0(sp)
 40102b4:	dec00504 	addi	sp,sp,20
 40102b8:	f800283a 	ret
 40102bc:	2c800417 	ldw	r18,16(r5)
 40102c0:	903ff626 	beq	r18,zero,401029c <__alt_data_end+0xfc01029c>
 40102c4:	2c000017 	ldw	r16,0(r5)
 40102c8:	108000cc 	andi	r2,r2,3
 40102cc:	2c800015 	stw	r18,0(r5)
 40102d0:	84a1c83a 	sub	r16,r16,r18
 40102d4:	1000131e 	bne	r2,zero,4010324 <__sflush_r+0x158>
 40102d8:	28800517 	ldw	r2,20(r5)
 40102dc:	88800215 	stw	r2,8(r17)
 40102e0:	04000316 	blt	zero,r16,40102f0 <__sflush_r+0x124>
 40102e4:	003fed06 	br	401029c <__alt_data_end+0xfc01029c>
 40102e8:	90a5883a 	add	r18,r18,r2
 40102ec:	043feb0e 	bge	zero,r16,401029c <__alt_data_end+0xfc01029c>
 40102f0:	88800917 	ldw	r2,36(r17)
 40102f4:	89400717 	ldw	r5,28(r17)
 40102f8:	800f883a 	mov	r7,r16
 40102fc:	900d883a 	mov	r6,r18
 4010300:	9809883a 	mov	r4,r19
 4010304:	103ee83a 	callr	r2
 4010308:	80a1c83a 	sub	r16,r16,r2
 401030c:	00bff616 	blt	zero,r2,40102e8 <__alt_data_end+0xfc0102e8>
 4010310:	88c0030b 	ldhu	r3,12(r17)
 4010314:	00bfffc4 	movi	r2,-1
 4010318:	18c01014 	ori	r3,r3,64
 401031c:	88c0030d 	sth	r3,12(r17)
 4010320:	003fdf06 	br	40102a0 <__alt_data_end+0xfc0102a0>
 4010324:	0005883a 	mov	r2,zero
 4010328:	003fec06 	br	40102dc <__alt_data_end+0xfc0102dc>
 401032c:	88801415 	stw	r2,80(r17)
 4010330:	003fd206 	br	401027c <__alt_data_end+0xfc01027c>
 4010334:	28c00f17 	ldw	r3,60(r5)
 4010338:	00ffb316 	blt	zero,r3,4010208 <__alt_data_end+0xfc010208>
 401033c:	003fd706 	br	401029c <__alt_data_end+0xfc01029c>
 4010340:	89400717 	ldw	r5,28(r17)
 4010344:	000d883a 	mov	r6,zero
 4010348:	01c00044 	movi	r7,1
 401034c:	9809883a 	mov	r4,r19
 4010350:	403ee83a 	callr	r8
 4010354:	100d883a 	mov	r6,r2
 4010358:	00bfffc4 	movi	r2,-1
 401035c:	30801426 	beq	r6,r2,40103b0 <__sflush_r+0x1e4>
 4010360:	8880030b 	ldhu	r2,12(r17)
 4010364:	8a000a17 	ldw	r8,40(r17)
 4010368:	003fae06 	br	4010224 <__alt_data_end+0xfc010224>
 401036c:	98c00017 	ldw	r3,0(r19)
 4010370:	183fba26 	beq	r3,zero,401025c <__alt_data_end+0xfc01025c>
 4010374:	01000744 	movi	r4,29
 4010378:	19000626 	beq	r3,r4,4010394 <__sflush_r+0x1c8>
 401037c:	01000584 	movi	r4,22
 4010380:	19000426 	beq	r3,r4,4010394 <__sflush_r+0x1c8>
 4010384:	88c0030b 	ldhu	r3,12(r17)
 4010388:	18c01014 	ori	r3,r3,64
 401038c:	88c0030d 	sth	r3,12(r17)
 4010390:	003fc306 	br	40102a0 <__alt_data_end+0xfc0102a0>
 4010394:	8880030b 	ldhu	r2,12(r17)
 4010398:	88c00417 	ldw	r3,16(r17)
 401039c:	88000115 	stw	zero,4(r17)
 40103a0:	10bdffcc 	andi	r2,r2,63487
 40103a4:	8880030d 	sth	r2,12(r17)
 40103a8:	88c00015 	stw	r3,0(r17)
 40103ac:	003fb306 	br	401027c <__alt_data_end+0xfc01027c>
 40103b0:	98800017 	ldw	r2,0(r19)
 40103b4:	103fea26 	beq	r2,zero,4010360 <__alt_data_end+0xfc010360>
 40103b8:	00c00744 	movi	r3,29
 40103bc:	10c00226 	beq	r2,r3,40103c8 <__sflush_r+0x1fc>
 40103c0:	00c00584 	movi	r3,22
 40103c4:	10c0031e 	bne	r2,r3,40103d4 <__sflush_r+0x208>
 40103c8:	9c000015 	stw	r16,0(r19)
 40103cc:	0005883a 	mov	r2,zero
 40103d0:	003fb306 	br	40102a0 <__alt_data_end+0xfc0102a0>
 40103d4:	88c0030b 	ldhu	r3,12(r17)
 40103d8:	3005883a 	mov	r2,r6
 40103dc:	18c01014 	ori	r3,r3,64
 40103e0:	88c0030d 	sth	r3,12(r17)
 40103e4:	003fae06 	br	40102a0 <__alt_data_end+0xfc0102a0>

040103e8 <_fflush_r>:
 40103e8:	defffd04 	addi	sp,sp,-12
 40103ec:	dc000115 	stw	r16,4(sp)
 40103f0:	dfc00215 	stw	ra,8(sp)
 40103f4:	2021883a 	mov	r16,r4
 40103f8:	20000226 	beq	r4,zero,4010404 <_fflush_r+0x1c>
 40103fc:	20800e17 	ldw	r2,56(r4)
 4010400:	10000c26 	beq	r2,zero,4010434 <_fflush_r+0x4c>
 4010404:	2880030f 	ldh	r2,12(r5)
 4010408:	1000051e 	bne	r2,zero,4010420 <_fflush_r+0x38>
 401040c:	0005883a 	mov	r2,zero
 4010410:	dfc00217 	ldw	ra,8(sp)
 4010414:	dc000117 	ldw	r16,4(sp)
 4010418:	dec00304 	addi	sp,sp,12
 401041c:	f800283a 	ret
 4010420:	8009883a 	mov	r4,r16
 4010424:	dfc00217 	ldw	ra,8(sp)
 4010428:	dc000117 	ldw	r16,4(sp)
 401042c:	dec00304 	addi	sp,sp,12
 4010430:	40101cc1 	jmpi	40101cc <__sflush_r>
 4010434:	d9400015 	stw	r5,0(sp)
 4010438:	40107d40 	call	40107d4 <__sinit>
 401043c:	d9400017 	ldw	r5,0(sp)
 4010440:	003ff006 	br	4010404 <__alt_data_end+0xfc010404>

04010444 <fflush>:
 4010444:	20000526 	beq	r4,zero,401045c <fflush+0x18>
 4010448:	008100b4 	movhi	r2,1026
 401044c:	10b2dd04 	addi	r2,r2,-13452
 4010450:	200b883a 	mov	r5,r4
 4010454:	11000017 	ldw	r4,0(r2)
 4010458:	40103e81 	jmpi	40103e8 <_fflush_r>
 401045c:	008100b4 	movhi	r2,1026
 4010460:	10b2dc04 	addi	r2,r2,-13456
 4010464:	11000017 	ldw	r4,0(r2)
 4010468:	01410074 	movhi	r5,1025
 401046c:	2940fa04 	addi	r5,r5,1000
 4010470:	40111e41 	jmpi	40111e4 <_fwalk_reent>

04010474 <__fp_unlock>:
 4010474:	0005883a 	mov	r2,zero
 4010478:	f800283a 	ret

0401047c <_cleanup_r>:
 401047c:	01410074 	movhi	r5,1025
 4010480:	29525904 	addi	r5,r5,18788
 4010484:	40111e41 	jmpi	40111e4 <_fwalk_reent>

04010488 <__sinit.part.1>:
 4010488:	defff704 	addi	sp,sp,-36
 401048c:	00c10074 	movhi	r3,1025
 4010490:	dfc00815 	stw	ra,32(sp)
 4010494:	ddc00715 	stw	r23,28(sp)
 4010498:	dd800615 	stw	r22,24(sp)
 401049c:	dd400515 	stw	r21,20(sp)
 40104a0:	dd000415 	stw	r20,16(sp)
 40104a4:	dcc00315 	stw	r19,12(sp)
 40104a8:	dc800215 	stw	r18,8(sp)
 40104ac:	dc400115 	stw	r17,4(sp)
 40104b0:	dc000015 	stw	r16,0(sp)
 40104b4:	18c11f04 	addi	r3,r3,1148
 40104b8:	24000117 	ldw	r16,4(r4)
 40104bc:	20c00f15 	stw	r3,60(r4)
 40104c0:	2080bb04 	addi	r2,r4,748
 40104c4:	00c000c4 	movi	r3,3
 40104c8:	20c0b915 	stw	r3,740(r4)
 40104cc:	2080ba15 	stw	r2,744(r4)
 40104d0:	2000b815 	stw	zero,736(r4)
 40104d4:	05c00204 	movi	r23,8
 40104d8:	00800104 	movi	r2,4
 40104dc:	2025883a 	mov	r18,r4
 40104e0:	b80d883a 	mov	r6,r23
 40104e4:	81001704 	addi	r4,r16,92
 40104e8:	000b883a 	mov	r5,zero
 40104ec:	80000015 	stw	zero,0(r16)
 40104f0:	80000115 	stw	zero,4(r16)
 40104f4:	80000215 	stw	zero,8(r16)
 40104f8:	8080030d 	sth	r2,12(r16)
 40104fc:	80001915 	stw	zero,100(r16)
 4010500:	8000038d 	sth	zero,14(r16)
 4010504:	80000415 	stw	zero,16(r16)
 4010508:	80000515 	stw	zero,20(r16)
 401050c:	80000615 	stw	zero,24(r16)
 4010510:	40117800 	call	4011780 <memset>
 4010514:	05810074 	movhi	r22,1025
 4010518:	94400217 	ldw	r17,8(r18)
 401051c:	05410074 	movhi	r21,1025
 4010520:	05010074 	movhi	r20,1025
 4010524:	04c10074 	movhi	r19,1025
 4010528:	b58bb104 	addi	r22,r22,11972
 401052c:	ad4bc804 	addi	r21,r21,12064
 4010530:	a50be704 	addi	r20,r20,12188
 4010534:	9ccbfe04 	addi	r19,r19,12280
 4010538:	85800815 	stw	r22,32(r16)
 401053c:	85400915 	stw	r21,36(r16)
 4010540:	85000a15 	stw	r20,40(r16)
 4010544:	84c00b15 	stw	r19,44(r16)
 4010548:	84000715 	stw	r16,28(r16)
 401054c:	00800284 	movi	r2,10
 4010550:	8880030d 	sth	r2,12(r17)
 4010554:	00800044 	movi	r2,1
 4010558:	b80d883a 	mov	r6,r23
 401055c:	89001704 	addi	r4,r17,92
 4010560:	000b883a 	mov	r5,zero
 4010564:	88000015 	stw	zero,0(r17)
 4010568:	88000115 	stw	zero,4(r17)
 401056c:	88000215 	stw	zero,8(r17)
 4010570:	88001915 	stw	zero,100(r17)
 4010574:	8880038d 	sth	r2,14(r17)
 4010578:	88000415 	stw	zero,16(r17)
 401057c:	88000515 	stw	zero,20(r17)
 4010580:	88000615 	stw	zero,24(r17)
 4010584:	40117800 	call	4011780 <memset>
 4010588:	94000317 	ldw	r16,12(r18)
 401058c:	00800484 	movi	r2,18
 4010590:	8c400715 	stw	r17,28(r17)
 4010594:	8d800815 	stw	r22,32(r17)
 4010598:	8d400915 	stw	r21,36(r17)
 401059c:	8d000a15 	stw	r20,40(r17)
 40105a0:	8cc00b15 	stw	r19,44(r17)
 40105a4:	8080030d 	sth	r2,12(r16)
 40105a8:	00800084 	movi	r2,2
 40105ac:	80000015 	stw	zero,0(r16)
 40105b0:	80000115 	stw	zero,4(r16)
 40105b4:	80000215 	stw	zero,8(r16)
 40105b8:	80001915 	stw	zero,100(r16)
 40105bc:	8080038d 	sth	r2,14(r16)
 40105c0:	80000415 	stw	zero,16(r16)
 40105c4:	80000515 	stw	zero,20(r16)
 40105c8:	80000615 	stw	zero,24(r16)
 40105cc:	b80d883a 	mov	r6,r23
 40105d0:	000b883a 	mov	r5,zero
 40105d4:	81001704 	addi	r4,r16,92
 40105d8:	40117800 	call	4011780 <memset>
 40105dc:	00800044 	movi	r2,1
 40105e0:	84000715 	stw	r16,28(r16)
 40105e4:	85800815 	stw	r22,32(r16)
 40105e8:	85400915 	stw	r21,36(r16)
 40105ec:	85000a15 	stw	r20,40(r16)
 40105f0:	84c00b15 	stw	r19,44(r16)
 40105f4:	90800e15 	stw	r2,56(r18)
 40105f8:	dfc00817 	ldw	ra,32(sp)
 40105fc:	ddc00717 	ldw	r23,28(sp)
 4010600:	dd800617 	ldw	r22,24(sp)
 4010604:	dd400517 	ldw	r21,20(sp)
 4010608:	dd000417 	ldw	r20,16(sp)
 401060c:	dcc00317 	ldw	r19,12(sp)
 4010610:	dc800217 	ldw	r18,8(sp)
 4010614:	dc400117 	ldw	r17,4(sp)
 4010618:	dc000017 	ldw	r16,0(sp)
 401061c:	dec00904 	addi	sp,sp,36
 4010620:	f800283a 	ret

04010624 <__fp_lock>:
 4010624:	0005883a 	mov	r2,zero
 4010628:	f800283a 	ret

0401062c <__sfmoreglue>:
 401062c:	defffc04 	addi	sp,sp,-16
 4010630:	dc800215 	stw	r18,8(sp)
 4010634:	2825883a 	mov	r18,r5
 4010638:	dc000015 	stw	r16,0(sp)
 401063c:	01401a04 	movi	r5,104
 4010640:	2021883a 	mov	r16,r4
 4010644:	913fffc4 	addi	r4,r18,-1
 4010648:	dfc00315 	stw	ra,12(sp)
 401064c:	dc400115 	stw	r17,4(sp)
 4010650:	4007eb40 	call	4007eb4 <__mulsi3>
 4010654:	8009883a 	mov	r4,r16
 4010658:	11401d04 	addi	r5,r2,116
 401065c:	1023883a 	mov	r17,r2
 4010660:	400b8940 	call	400b894 <_malloc_r>
 4010664:	1021883a 	mov	r16,r2
 4010668:	10000726 	beq	r2,zero,4010688 <__sfmoreglue+0x5c>
 401066c:	11000304 	addi	r4,r2,12
 4010670:	10000015 	stw	zero,0(r2)
 4010674:	14800115 	stw	r18,4(r2)
 4010678:	11000215 	stw	r4,8(r2)
 401067c:	89801a04 	addi	r6,r17,104
 4010680:	000b883a 	mov	r5,zero
 4010684:	40117800 	call	4011780 <memset>
 4010688:	8005883a 	mov	r2,r16
 401068c:	dfc00317 	ldw	ra,12(sp)
 4010690:	dc800217 	ldw	r18,8(sp)
 4010694:	dc400117 	ldw	r17,4(sp)
 4010698:	dc000017 	ldw	r16,0(sp)
 401069c:	dec00404 	addi	sp,sp,16
 40106a0:	f800283a 	ret

040106a4 <__sfp>:
 40106a4:	defffb04 	addi	sp,sp,-20
 40106a8:	dc000015 	stw	r16,0(sp)
 40106ac:	040100b4 	movhi	r16,1026
 40106b0:	8432dc04 	addi	r16,r16,-13456
 40106b4:	dcc00315 	stw	r19,12(sp)
 40106b8:	2027883a 	mov	r19,r4
 40106bc:	81000017 	ldw	r4,0(r16)
 40106c0:	dfc00415 	stw	ra,16(sp)
 40106c4:	dc800215 	stw	r18,8(sp)
 40106c8:	20800e17 	ldw	r2,56(r4)
 40106cc:	dc400115 	stw	r17,4(sp)
 40106d0:	1000021e 	bne	r2,zero,40106dc <__sfp+0x38>
 40106d4:	40104880 	call	4010488 <__sinit.part.1>
 40106d8:	81000017 	ldw	r4,0(r16)
 40106dc:	2480b804 	addi	r18,r4,736
 40106e0:	047fffc4 	movi	r17,-1
 40106e4:	91000117 	ldw	r4,4(r18)
 40106e8:	94000217 	ldw	r16,8(r18)
 40106ec:	213fffc4 	addi	r4,r4,-1
 40106f0:	20000a16 	blt	r4,zero,401071c <__sfp+0x78>
 40106f4:	8080030f 	ldh	r2,12(r16)
 40106f8:	10000c26 	beq	r2,zero,401072c <__sfp+0x88>
 40106fc:	80c01d04 	addi	r3,r16,116
 4010700:	00000206 	br	401070c <__sfp+0x68>
 4010704:	18bfe60f 	ldh	r2,-104(r3)
 4010708:	10000826 	beq	r2,zero,401072c <__sfp+0x88>
 401070c:	213fffc4 	addi	r4,r4,-1
 4010710:	1c3ffd04 	addi	r16,r3,-12
 4010714:	18c01a04 	addi	r3,r3,104
 4010718:	247ffa1e 	bne	r4,r17,4010704 <__alt_data_end+0xfc010704>
 401071c:	90800017 	ldw	r2,0(r18)
 4010720:	10001d26 	beq	r2,zero,4010798 <__sfp+0xf4>
 4010724:	1025883a 	mov	r18,r2
 4010728:	003fee06 	br	40106e4 <__alt_data_end+0xfc0106e4>
 401072c:	00bfffc4 	movi	r2,-1
 4010730:	8080038d 	sth	r2,14(r16)
 4010734:	00800044 	movi	r2,1
 4010738:	8080030d 	sth	r2,12(r16)
 401073c:	80001915 	stw	zero,100(r16)
 4010740:	80000015 	stw	zero,0(r16)
 4010744:	80000215 	stw	zero,8(r16)
 4010748:	80000115 	stw	zero,4(r16)
 401074c:	80000415 	stw	zero,16(r16)
 4010750:	80000515 	stw	zero,20(r16)
 4010754:	80000615 	stw	zero,24(r16)
 4010758:	01800204 	movi	r6,8
 401075c:	000b883a 	mov	r5,zero
 4010760:	81001704 	addi	r4,r16,92
 4010764:	40117800 	call	4011780 <memset>
 4010768:	8005883a 	mov	r2,r16
 401076c:	80000c15 	stw	zero,48(r16)
 4010770:	80000d15 	stw	zero,52(r16)
 4010774:	80001115 	stw	zero,68(r16)
 4010778:	80001215 	stw	zero,72(r16)
 401077c:	dfc00417 	ldw	ra,16(sp)
 4010780:	dcc00317 	ldw	r19,12(sp)
 4010784:	dc800217 	ldw	r18,8(sp)
 4010788:	dc400117 	ldw	r17,4(sp)
 401078c:	dc000017 	ldw	r16,0(sp)
 4010790:	dec00504 	addi	sp,sp,20
 4010794:	f800283a 	ret
 4010798:	01400104 	movi	r5,4
 401079c:	9809883a 	mov	r4,r19
 40107a0:	401062c0 	call	401062c <__sfmoreglue>
 40107a4:	90800015 	stw	r2,0(r18)
 40107a8:	103fde1e 	bne	r2,zero,4010724 <__alt_data_end+0xfc010724>
 40107ac:	00800304 	movi	r2,12
 40107b0:	98800015 	stw	r2,0(r19)
 40107b4:	0005883a 	mov	r2,zero
 40107b8:	003ff006 	br	401077c <__alt_data_end+0xfc01077c>

040107bc <_cleanup>:
 40107bc:	008100b4 	movhi	r2,1026
 40107c0:	10b2dc04 	addi	r2,r2,-13456
 40107c4:	11000017 	ldw	r4,0(r2)
 40107c8:	01410074 	movhi	r5,1025
 40107cc:	29525904 	addi	r5,r5,18788
 40107d0:	40111e41 	jmpi	40111e4 <_fwalk_reent>

040107d4 <__sinit>:
 40107d4:	20800e17 	ldw	r2,56(r4)
 40107d8:	10000126 	beq	r2,zero,40107e0 <__sinit+0xc>
 40107dc:	f800283a 	ret
 40107e0:	40104881 	jmpi	4010488 <__sinit.part.1>

040107e4 <__sfp_lock_acquire>:
 40107e4:	f800283a 	ret

040107e8 <__sfp_lock_release>:
 40107e8:	f800283a 	ret

040107ec <__sinit_lock_acquire>:
 40107ec:	f800283a 	ret

040107f0 <__sinit_lock_release>:
 40107f0:	f800283a 	ret

040107f4 <__fp_lock_all>:
 40107f4:	008100b4 	movhi	r2,1026
 40107f8:	10b2dd04 	addi	r2,r2,-13452
 40107fc:	11000017 	ldw	r4,0(r2)
 4010800:	01410074 	movhi	r5,1025
 4010804:	29418904 	addi	r5,r5,1572
 4010808:	40111201 	jmpi	4011120 <_fwalk>

0401080c <__fp_unlock_all>:
 401080c:	008100b4 	movhi	r2,1026
 4010810:	10b2dd04 	addi	r2,r2,-13452
 4010814:	11000017 	ldw	r4,0(r2)
 4010818:	01410074 	movhi	r5,1025
 401081c:	29411d04 	addi	r5,r5,1140
 4010820:	40111201 	jmpi	4011120 <_fwalk>

04010824 <_malloc_trim_r>:
 4010824:	defffb04 	addi	sp,sp,-20
 4010828:	dcc00315 	stw	r19,12(sp)
 401082c:	04c100b4 	movhi	r19,1026
 4010830:	dc800215 	stw	r18,8(sp)
 4010834:	dc400115 	stw	r17,4(sp)
 4010838:	dc000015 	stw	r16,0(sp)
 401083c:	dfc00415 	stw	ra,16(sp)
 4010840:	2821883a 	mov	r16,r5
 4010844:	9ced2704 	addi	r19,r19,-19300
 4010848:	2025883a 	mov	r18,r4
 401084c:	40163240 	call	4016324 <__malloc_lock>
 4010850:	98800217 	ldw	r2,8(r19)
 4010854:	14400117 	ldw	r17,4(r2)
 4010858:	00bfff04 	movi	r2,-4
 401085c:	88a2703a 	and	r17,r17,r2
 4010860:	8c21c83a 	sub	r16,r17,r16
 4010864:	8403fbc4 	addi	r16,r16,4079
 4010868:	8020d33a 	srli	r16,r16,12
 401086c:	0083ffc4 	movi	r2,4095
 4010870:	843fffc4 	addi	r16,r16,-1
 4010874:	8020933a 	slli	r16,r16,12
 4010878:	1400060e 	bge	r2,r16,4010894 <_malloc_trim_r+0x70>
 401087c:	000b883a 	mov	r5,zero
 4010880:	9009883a 	mov	r4,r18
 4010884:	400c3280 	call	400c328 <_sbrk_r>
 4010888:	98c00217 	ldw	r3,8(r19)
 401088c:	1c47883a 	add	r3,r3,r17
 4010890:	10c00a26 	beq	r2,r3,40108bc <_malloc_trim_r+0x98>
 4010894:	9009883a 	mov	r4,r18
 4010898:	40163480 	call	4016348 <__malloc_unlock>
 401089c:	0005883a 	mov	r2,zero
 40108a0:	dfc00417 	ldw	ra,16(sp)
 40108a4:	dcc00317 	ldw	r19,12(sp)
 40108a8:	dc800217 	ldw	r18,8(sp)
 40108ac:	dc400117 	ldw	r17,4(sp)
 40108b0:	dc000017 	ldw	r16,0(sp)
 40108b4:	dec00504 	addi	sp,sp,20
 40108b8:	f800283a 	ret
 40108bc:	040bc83a 	sub	r5,zero,r16
 40108c0:	9009883a 	mov	r4,r18
 40108c4:	400c3280 	call	400c328 <_sbrk_r>
 40108c8:	00ffffc4 	movi	r3,-1
 40108cc:	10c00d26 	beq	r2,r3,4010904 <_malloc_trim_r+0xe0>
 40108d0:	00c100b4 	movhi	r3,1026
 40108d4:	18f9e804 	addi	r3,r3,-6240
 40108d8:	18800017 	ldw	r2,0(r3)
 40108dc:	99000217 	ldw	r4,8(r19)
 40108e0:	8c23c83a 	sub	r17,r17,r16
 40108e4:	8c400054 	ori	r17,r17,1
 40108e8:	1421c83a 	sub	r16,r2,r16
 40108ec:	24400115 	stw	r17,4(r4)
 40108f0:	9009883a 	mov	r4,r18
 40108f4:	1c000015 	stw	r16,0(r3)
 40108f8:	40163480 	call	4016348 <__malloc_unlock>
 40108fc:	00800044 	movi	r2,1
 4010900:	003fe706 	br	40108a0 <__alt_data_end+0xfc0108a0>
 4010904:	000b883a 	mov	r5,zero
 4010908:	9009883a 	mov	r4,r18
 401090c:	400c3280 	call	400c328 <_sbrk_r>
 4010910:	99000217 	ldw	r4,8(r19)
 4010914:	014003c4 	movi	r5,15
 4010918:	1107c83a 	sub	r3,r2,r4
 401091c:	28ffdd0e 	bge	r5,r3,4010894 <__alt_data_end+0xfc010894>
 4010920:	014100b4 	movhi	r5,1026
 4010924:	2972de04 	addi	r5,r5,-13448
 4010928:	29400017 	ldw	r5,0(r5)
 401092c:	18c00054 	ori	r3,r3,1
 4010930:	20c00115 	stw	r3,4(r4)
 4010934:	00c100b4 	movhi	r3,1026
 4010938:	1145c83a 	sub	r2,r2,r5
 401093c:	18f9e804 	addi	r3,r3,-6240
 4010940:	18800015 	stw	r2,0(r3)
 4010944:	003fd306 	br	4010894 <__alt_data_end+0xfc010894>

04010948 <_free_r>:
 4010948:	28004126 	beq	r5,zero,4010a50 <_free_r+0x108>
 401094c:	defffd04 	addi	sp,sp,-12
 4010950:	dc400115 	stw	r17,4(sp)
 4010954:	dc000015 	stw	r16,0(sp)
 4010958:	2023883a 	mov	r17,r4
 401095c:	2821883a 	mov	r16,r5
 4010960:	dfc00215 	stw	ra,8(sp)
 4010964:	40163240 	call	4016324 <__malloc_lock>
 4010968:	81ffff17 	ldw	r7,-4(r16)
 401096c:	00bfff84 	movi	r2,-2
 4010970:	010100b4 	movhi	r4,1026
 4010974:	81bffe04 	addi	r6,r16,-8
 4010978:	3884703a 	and	r2,r7,r2
 401097c:	212d2704 	addi	r4,r4,-19300
 4010980:	308b883a 	add	r5,r6,r2
 4010984:	2a400117 	ldw	r9,4(r5)
 4010988:	22000217 	ldw	r8,8(r4)
 401098c:	00ffff04 	movi	r3,-4
 4010990:	48c6703a 	and	r3,r9,r3
 4010994:	2a005726 	beq	r5,r8,4010af4 <_free_r+0x1ac>
 4010998:	28c00115 	stw	r3,4(r5)
 401099c:	39c0004c 	andi	r7,r7,1
 40109a0:	3800091e 	bne	r7,zero,40109c8 <_free_r+0x80>
 40109a4:	823ffe17 	ldw	r8,-8(r16)
 40109a8:	22400204 	addi	r9,r4,8
 40109ac:	320dc83a 	sub	r6,r6,r8
 40109b0:	31c00217 	ldw	r7,8(r6)
 40109b4:	1205883a 	add	r2,r2,r8
 40109b8:	3a406526 	beq	r7,r9,4010b50 <_free_r+0x208>
 40109bc:	32000317 	ldw	r8,12(r6)
 40109c0:	3a000315 	stw	r8,12(r7)
 40109c4:	41c00215 	stw	r7,8(r8)
 40109c8:	28cf883a 	add	r7,r5,r3
 40109cc:	39c00117 	ldw	r7,4(r7)
 40109d0:	39c0004c 	andi	r7,r7,1
 40109d4:	38003a26 	beq	r7,zero,4010ac0 <_free_r+0x178>
 40109d8:	10c00054 	ori	r3,r2,1
 40109dc:	30c00115 	stw	r3,4(r6)
 40109e0:	3087883a 	add	r3,r6,r2
 40109e4:	18800015 	stw	r2,0(r3)
 40109e8:	00c07fc4 	movi	r3,511
 40109ec:	18801936 	bltu	r3,r2,4010a54 <_free_r+0x10c>
 40109f0:	1004d0fa 	srli	r2,r2,3
 40109f4:	01c00044 	movi	r7,1
 40109f8:	21400117 	ldw	r5,4(r4)
 40109fc:	10c00044 	addi	r3,r2,1
 4010a00:	18c7883a 	add	r3,r3,r3
 4010a04:	1005d0ba 	srai	r2,r2,2
 4010a08:	18c7883a 	add	r3,r3,r3
 4010a0c:	18c7883a 	add	r3,r3,r3
 4010a10:	1907883a 	add	r3,r3,r4
 4010a14:	3884983a 	sll	r2,r7,r2
 4010a18:	19c00017 	ldw	r7,0(r3)
 4010a1c:	1a3ffe04 	addi	r8,r3,-8
 4010a20:	1144b03a 	or	r2,r2,r5
 4010a24:	32000315 	stw	r8,12(r6)
 4010a28:	31c00215 	stw	r7,8(r6)
 4010a2c:	20800115 	stw	r2,4(r4)
 4010a30:	19800015 	stw	r6,0(r3)
 4010a34:	39800315 	stw	r6,12(r7)
 4010a38:	8809883a 	mov	r4,r17
 4010a3c:	dfc00217 	ldw	ra,8(sp)
 4010a40:	dc400117 	ldw	r17,4(sp)
 4010a44:	dc000017 	ldw	r16,0(sp)
 4010a48:	dec00304 	addi	sp,sp,12
 4010a4c:	40163481 	jmpi	4016348 <__malloc_unlock>
 4010a50:	f800283a 	ret
 4010a54:	100ad27a 	srli	r5,r2,9
 4010a58:	00c00104 	movi	r3,4
 4010a5c:	19404a36 	bltu	r3,r5,4010b88 <_free_r+0x240>
 4010a60:	100ad1ba 	srli	r5,r2,6
 4010a64:	28c00e44 	addi	r3,r5,57
 4010a68:	18c7883a 	add	r3,r3,r3
 4010a6c:	29400e04 	addi	r5,r5,56
 4010a70:	18c7883a 	add	r3,r3,r3
 4010a74:	18c7883a 	add	r3,r3,r3
 4010a78:	1909883a 	add	r4,r3,r4
 4010a7c:	20c00017 	ldw	r3,0(r4)
 4010a80:	01c100b4 	movhi	r7,1026
 4010a84:	213ffe04 	addi	r4,r4,-8
 4010a88:	39ed2704 	addi	r7,r7,-19300
 4010a8c:	20c04426 	beq	r4,r3,4010ba0 <_free_r+0x258>
 4010a90:	01ffff04 	movi	r7,-4
 4010a94:	19400117 	ldw	r5,4(r3)
 4010a98:	29ca703a 	and	r5,r5,r7
 4010a9c:	1140022e 	bgeu	r2,r5,4010aa8 <_free_r+0x160>
 4010aa0:	18c00217 	ldw	r3,8(r3)
 4010aa4:	20fffb1e 	bne	r4,r3,4010a94 <__alt_data_end+0xfc010a94>
 4010aa8:	19000317 	ldw	r4,12(r3)
 4010aac:	31000315 	stw	r4,12(r6)
 4010ab0:	30c00215 	stw	r3,8(r6)
 4010ab4:	21800215 	stw	r6,8(r4)
 4010ab8:	19800315 	stw	r6,12(r3)
 4010abc:	003fde06 	br	4010a38 <__alt_data_end+0xfc010a38>
 4010ac0:	29c00217 	ldw	r7,8(r5)
 4010ac4:	10c5883a 	add	r2,r2,r3
 4010ac8:	00c100b4 	movhi	r3,1026
 4010acc:	18ed2904 	addi	r3,r3,-19292
 4010ad0:	38c03b26 	beq	r7,r3,4010bc0 <_free_r+0x278>
 4010ad4:	2a000317 	ldw	r8,12(r5)
 4010ad8:	11400054 	ori	r5,r2,1
 4010adc:	3087883a 	add	r3,r6,r2
 4010ae0:	3a000315 	stw	r8,12(r7)
 4010ae4:	41c00215 	stw	r7,8(r8)
 4010ae8:	31400115 	stw	r5,4(r6)
 4010aec:	18800015 	stw	r2,0(r3)
 4010af0:	003fbd06 	br	40109e8 <__alt_data_end+0xfc0109e8>
 4010af4:	39c0004c 	andi	r7,r7,1
 4010af8:	10c5883a 	add	r2,r2,r3
 4010afc:	3800071e 	bne	r7,zero,4010b1c <_free_r+0x1d4>
 4010b00:	81fffe17 	ldw	r7,-8(r16)
 4010b04:	31cdc83a 	sub	r6,r6,r7
 4010b08:	30c00317 	ldw	r3,12(r6)
 4010b0c:	31400217 	ldw	r5,8(r6)
 4010b10:	11c5883a 	add	r2,r2,r7
 4010b14:	28c00315 	stw	r3,12(r5)
 4010b18:	19400215 	stw	r5,8(r3)
 4010b1c:	10c00054 	ori	r3,r2,1
 4010b20:	30c00115 	stw	r3,4(r6)
 4010b24:	00c100b4 	movhi	r3,1026
 4010b28:	18f2df04 	addi	r3,r3,-13444
 4010b2c:	18c00017 	ldw	r3,0(r3)
 4010b30:	21800215 	stw	r6,8(r4)
 4010b34:	10ffc036 	bltu	r2,r3,4010a38 <__alt_data_end+0xfc010a38>
 4010b38:	008100b4 	movhi	r2,1026
 4010b3c:	10b9d204 	addi	r2,r2,-6328
 4010b40:	11400017 	ldw	r5,0(r2)
 4010b44:	8809883a 	mov	r4,r17
 4010b48:	40108240 	call	4010824 <_malloc_trim_r>
 4010b4c:	003fba06 	br	4010a38 <__alt_data_end+0xfc010a38>
 4010b50:	28c9883a 	add	r4,r5,r3
 4010b54:	21000117 	ldw	r4,4(r4)
 4010b58:	2100004c 	andi	r4,r4,1
 4010b5c:	2000391e 	bne	r4,zero,4010c44 <_free_r+0x2fc>
 4010b60:	29c00217 	ldw	r7,8(r5)
 4010b64:	29000317 	ldw	r4,12(r5)
 4010b68:	1885883a 	add	r2,r3,r2
 4010b6c:	10c00054 	ori	r3,r2,1
 4010b70:	39000315 	stw	r4,12(r7)
 4010b74:	21c00215 	stw	r7,8(r4)
 4010b78:	30c00115 	stw	r3,4(r6)
 4010b7c:	308d883a 	add	r6,r6,r2
 4010b80:	30800015 	stw	r2,0(r6)
 4010b84:	003fac06 	br	4010a38 <__alt_data_end+0xfc010a38>
 4010b88:	00c00504 	movi	r3,20
 4010b8c:	19401536 	bltu	r3,r5,4010be4 <_free_r+0x29c>
 4010b90:	28c01704 	addi	r3,r5,92
 4010b94:	18c7883a 	add	r3,r3,r3
 4010b98:	294016c4 	addi	r5,r5,91
 4010b9c:	003fb406 	br	4010a70 <__alt_data_end+0xfc010a70>
 4010ba0:	280bd0ba 	srai	r5,r5,2
 4010ba4:	00c00044 	movi	r3,1
 4010ba8:	38800117 	ldw	r2,4(r7)
 4010bac:	194a983a 	sll	r5,r3,r5
 4010bb0:	2007883a 	mov	r3,r4
 4010bb4:	2884b03a 	or	r2,r5,r2
 4010bb8:	38800115 	stw	r2,4(r7)
 4010bbc:	003fbb06 	br	4010aac <__alt_data_end+0xfc010aac>
 4010bc0:	21800515 	stw	r6,20(r4)
 4010bc4:	21800415 	stw	r6,16(r4)
 4010bc8:	10c00054 	ori	r3,r2,1
 4010bcc:	31c00315 	stw	r7,12(r6)
 4010bd0:	31c00215 	stw	r7,8(r6)
 4010bd4:	30c00115 	stw	r3,4(r6)
 4010bd8:	308d883a 	add	r6,r6,r2
 4010bdc:	30800015 	stw	r2,0(r6)
 4010be0:	003f9506 	br	4010a38 <__alt_data_end+0xfc010a38>
 4010be4:	00c01504 	movi	r3,84
 4010be8:	19400536 	bltu	r3,r5,4010c00 <_free_r+0x2b8>
 4010bec:	100ad33a 	srli	r5,r2,12
 4010bf0:	28c01bc4 	addi	r3,r5,111
 4010bf4:	18c7883a 	add	r3,r3,r3
 4010bf8:	29401b84 	addi	r5,r5,110
 4010bfc:	003f9c06 	br	4010a70 <__alt_data_end+0xfc010a70>
 4010c00:	00c05504 	movi	r3,340
 4010c04:	19400536 	bltu	r3,r5,4010c1c <_free_r+0x2d4>
 4010c08:	100ad3fa 	srli	r5,r2,15
 4010c0c:	28c01e04 	addi	r3,r5,120
 4010c10:	18c7883a 	add	r3,r3,r3
 4010c14:	29401dc4 	addi	r5,r5,119
 4010c18:	003f9506 	br	4010a70 <__alt_data_end+0xfc010a70>
 4010c1c:	00c15504 	movi	r3,1364
 4010c20:	19400536 	bltu	r3,r5,4010c38 <_free_r+0x2f0>
 4010c24:	100ad4ba 	srli	r5,r2,18
 4010c28:	28c01f44 	addi	r3,r5,125
 4010c2c:	18c7883a 	add	r3,r3,r3
 4010c30:	29401f04 	addi	r5,r5,124
 4010c34:	003f8e06 	br	4010a70 <__alt_data_end+0xfc010a70>
 4010c38:	00c03f84 	movi	r3,254
 4010c3c:	01401f84 	movi	r5,126
 4010c40:	003f8b06 	br	4010a70 <__alt_data_end+0xfc010a70>
 4010c44:	10c00054 	ori	r3,r2,1
 4010c48:	30c00115 	stw	r3,4(r6)
 4010c4c:	308d883a 	add	r6,r6,r2
 4010c50:	30800015 	stw	r2,0(r6)
 4010c54:	003f7806 	br	4010a38 <__alt_data_end+0xfc010a38>

04010c58 <__sfvwrite_r>:
 4010c58:	30800217 	ldw	r2,8(r6)
 4010c5c:	10006726 	beq	r2,zero,4010dfc <__sfvwrite_r+0x1a4>
 4010c60:	28c0030b 	ldhu	r3,12(r5)
 4010c64:	defff404 	addi	sp,sp,-48
 4010c68:	dd400715 	stw	r21,28(sp)
 4010c6c:	dd000615 	stw	r20,24(sp)
 4010c70:	dc000215 	stw	r16,8(sp)
 4010c74:	dfc00b15 	stw	ra,44(sp)
 4010c78:	df000a15 	stw	fp,40(sp)
 4010c7c:	ddc00915 	stw	r23,36(sp)
 4010c80:	dd800815 	stw	r22,32(sp)
 4010c84:	dcc00515 	stw	r19,20(sp)
 4010c88:	dc800415 	stw	r18,16(sp)
 4010c8c:	dc400315 	stw	r17,12(sp)
 4010c90:	1880020c 	andi	r2,r3,8
 4010c94:	2821883a 	mov	r16,r5
 4010c98:	202b883a 	mov	r21,r4
 4010c9c:	3029883a 	mov	r20,r6
 4010ca0:	10002726 	beq	r2,zero,4010d40 <__sfvwrite_r+0xe8>
 4010ca4:	28800417 	ldw	r2,16(r5)
 4010ca8:	10002526 	beq	r2,zero,4010d40 <__sfvwrite_r+0xe8>
 4010cac:	1880008c 	andi	r2,r3,2
 4010cb0:	a4400017 	ldw	r17,0(r20)
 4010cb4:	10002a26 	beq	r2,zero,4010d60 <__sfvwrite_r+0x108>
 4010cb8:	05a00034 	movhi	r22,32768
 4010cbc:	0027883a 	mov	r19,zero
 4010cc0:	0025883a 	mov	r18,zero
 4010cc4:	b5bf0004 	addi	r22,r22,-1024
 4010cc8:	980d883a 	mov	r6,r19
 4010ccc:	a809883a 	mov	r4,r21
 4010cd0:	90004626 	beq	r18,zero,4010dec <__sfvwrite_r+0x194>
 4010cd4:	900f883a 	mov	r7,r18
 4010cd8:	b480022e 	bgeu	r22,r18,4010ce4 <__sfvwrite_r+0x8c>
 4010cdc:	01e00034 	movhi	r7,32768
 4010ce0:	39ff0004 	addi	r7,r7,-1024
 4010ce4:	80800917 	ldw	r2,36(r16)
 4010ce8:	81400717 	ldw	r5,28(r16)
 4010cec:	103ee83a 	callr	r2
 4010cf0:	00805a0e 	bge	zero,r2,4010e5c <__sfvwrite_r+0x204>
 4010cf4:	a0c00217 	ldw	r3,8(r20)
 4010cf8:	98a7883a 	add	r19,r19,r2
 4010cfc:	90a5c83a 	sub	r18,r18,r2
 4010d00:	1885c83a 	sub	r2,r3,r2
 4010d04:	a0800215 	stw	r2,8(r20)
 4010d08:	103fef1e 	bne	r2,zero,4010cc8 <__alt_data_end+0xfc010cc8>
 4010d0c:	0005883a 	mov	r2,zero
 4010d10:	dfc00b17 	ldw	ra,44(sp)
 4010d14:	df000a17 	ldw	fp,40(sp)
 4010d18:	ddc00917 	ldw	r23,36(sp)
 4010d1c:	dd800817 	ldw	r22,32(sp)
 4010d20:	dd400717 	ldw	r21,28(sp)
 4010d24:	dd000617 	ldw	r20,24(sp)
 4010d28:	dcc00517 	ldw	r19,20(sp)
 4010d2c:	dc800417 	ldw	r18,16(sp)
 4010d30:	dc400317 	ldw	r17,12(sp)
 4010d34:	dc000217 	ldw	r16,8(sp)
 4010d38:	dec00c04 	addi	sp,sp,48
 4010d3c:	f800283a 	ret
 4010d40:	800b883a 	mov	r5,r16
 4010d44:	a809883a 	mov	r4,r21
 4010d48:	400e7c80 	call	400e7c8 <__swsetup_r>
 4010d4c:	1000ee1e 	bne	r2,zero,4011108 <__sfvwrite_r+0x4b0>
 4010d50:	80c0030b 	ldhu	r3,12(r16)
 4010d54:	a4400017 	ldw	r17,0(r20)
 4010d58:	1880008c 	andi	r2,r3,2
 4010d5c:	103fd61e 	bne	r2,zero,4010cb8 <__alt_data_end+0xfc010cb8>
 4010d60:	1880004c 	andi	r2,r3,1
 4010d64:	1000421e 	bne	r2,zero,4010e70 <__sfvwrite_r+0x218>
 4010d68:	0039883a 	mov	fp,zero
 4010d6c:	0025883a 	mov	r18,zero
 4010d70:	90001a26 	beq	r18,zero,4010ddc <__sfvwrite_r+0x184>
 4010d74:	1880800c 	andi	r2,r3,512
 4010d78:	84c00217 	ldw	r19,8(r16)
 4010d7c:	10002126 	beq	r2,zero,4010e04 <__sfvwrite_r+0x1ac>
 4010d80:	982f883a 	mov	r23,r19
 4010d84:	94c09636 	bltu	r18,r19,4010fe0 <__sfvwrite_r+0x388>
 4010d88:	1881200c 	andi	r2,r3,1152
 4010d8c:	1000a11e 	bne	r2,zero,4011014 <__sfvwrite_r+0x3bc>
 4010d90:	81000017 	ldw	r4,0(r16)
 4010d94:	b80d883a 	mov	r6,r23
 4010d98:	e00b883a 	mov	r5,fp
 4010d9c:	40116240 	call	4011624 <memmove>
 4010da0:	80c00217 	ldw	r3,8(r16)
 4010da4:	81000017 	ldw	r4,0(r16)
 4010da8:	9005883a 	mov	r2,r18
 4010dac:	1ce7c83a 	sub	r19,r3,r19
 4010db0:	25cf883a 	add	r7,r4,r23
 4010db4:	84c00215 	stw	r19,8(r16)
 4010db8:	81c00015 	stw	r7,0(r16)
 4010dbc:	a0c00217 	ldw	r3,8(r20)
 4010dc0:	e0b9883a 	add	fp,fp,r2
 4010dc4:	90a5c83a 	sub	r18,r18,r2
 4010dc8:	18a7c83a 	sub	r19,r3,r2
 4010dcc:	a4c00215 	stw	r19,8(r20)
 4010dd0:	983fce26 	beq	r19,zero,4010d0c <__alt_data_end+0xfc010d0c>
 4010dd4:	80c0030b 	ldhu	r3,12(r16)
 4010dd8:	903fe61e 	bne	r18,zero,4010d74 <__alt_data_end+0xfc010d74>
 4010ddc:	8f000017 	ldw	fp,0(r17)
 4010de0:	8c800117 	ldw	r18,4(r17)
 4010de4:	8c400204 	addi	r17,r17,8
 4010de8:	003fe106 	br	4010d70 <__alt_data_end+0xfc010d70>
 4010dec:	8cc00017 	ldw	r19,0(r17)
 4010df0:	8c800117 	ldw	r18,4(r17)
 4010df4:	8c400204 	addi	r17,r17,8
 4010df8:	003fb306 	br	4010cc8 <__alt_data_end+0xfc010cc8>
 4010dfc:	0005883a 	mov	r2,zero
 4010e00:	f800283a 	ret
 4010e04:	81000017 	ldw	r4,0(r16)
 4010e08:	80800417 	ldw	r2,16(r16)
 4010e0c:	11005a36 	bltu	r2,r4,4010f78 <__sfvwrite_r+0x320>
 4010e10:	85c00517 	ldw	r23,20(r16)
 4010e14:	95c05836 	bltu	r18,r23,4010f78 <__sfvwrite_r+0x320>
 4010e18:	00a00034 	movhi	r2,32768
 4010e1c:	10bfffc4 	addi	r2,r2,-1
 4010e20:	9009883a 	mov	r4,r18
 4010e24:	1480012e 	bgeu	r2,r18,4010e2c <__sfvwrite_r+0x1d4>
 4010e28:	1009883a 	mov	r4,r2
 4010e2c:	b80b883a 	mov	r5,r23
 4010e30:	4007d000 	call	4007d00 <__divsi3>
 4010e34:	b80b883a 	mov	r5,r23
 4010e38:	1009883a 	mov	r4,r2
 4010e3c:	4007eb40 	call	4007eb4 <__mulsi3>
 4010e40:	81400717 	ldw	r5,28(r16)
 4010e44:	80c00917 	ldw	r3,36(r16)
 4010e48:	100f883a 	mov	r7,r2
 4010e4c:	e00d883a 	mov	r6,fp
 4010e50:	a809883a 	mov	r4,r21
 4010e54:	183ee83a 	callr	r3
 4010e58:	00bfd816 	blt	zero,r2,4010dbc <__alt_data_end+0xfc010dbc>
 4010e5c:	8080030b 	ldhu	r2,12(r16)
 4010e60:	10801014 	ori	r2,r2,64
 4010e64:	8080030d 	sth	r2,12(r16)
 4010e68:	00bfffc4 	movi	r2,-1
 4010e6c:	003fa806 	br	4010d10 <__alt_data_end+0xfc010d10>
 4010e70:	0027883a 	mov	r19,zero
 4010e74:	0011883a 	mov	r8,zero
 4010e78:	0039883a 	mov	fp,zero
 4010e7c:	0025883a 	mov	r18,zero
 4010e80:	90001f26 	beq	r18,zero,4010f00 <__sfvwrite_r+0x2a8>
 4010e84:	40005a26 	beq	r8,zero,4010ff0 <__sfvwrite_r+0x398>
 4010e88:	982d883a 	mov	r22,r19
 4010e8c:	94c0012e 	bgeu	r18,r19,4010e94 <__sfvwrite_r+0x23c>
 4010e90:	902d883a 	mov	r22,r18
 4010e94:	81000017 	ldw	r4,0(r16)
 4010e98:	80800417 	ldw	r2,16(r16)
 4010e9c:	b02f883a 	mov	r23,r22
 4010ea0:	81c00517 	ldw	r7,20(r16)
 4010ea4:	1100032e 	bgeu	r2,r4,4010eb4 <__sfvwrite_r+0x25c>
 4010ea8:	80c00217 	ldw	r3,8(r16)
 4010eac:	38c7883a 	add	r3,r7,r3
 4010eb0:	1d801816 	blt	r3,r22,4010f14 <__sfvwrite_r+0x2bc>
 4010eb4:	b1c03e16 	blt	r22,r7,4010fb0 <__sfvwrite_r+0x358>
 4010eb8:	80800917 	ldw	r2,36(r16)
 4010ebc:	81400717 	ldw	r5,28(r16)
 4010ec0:	e00d883a 	mov	r6,fp
 4010ec4:	da000115 	stw	r8,4(sp)
 4010ec8:	a809883a 	mov	r4,r21
 4010ecc:	103ee83a 	callr	r2
 4010ed0:	102f883a 	mov	r23,r2
 4010ed4:	da000117 	ldw	r8,4(sp)
 4010ed8:	00bfe00e 	bge	zero,r2,4010e5c <__alt_data_end+0xfc010e5c>
 4010edc:	9de7c83a 	sub	r19,r19,r23
 4010ee0:	98001f26 	beq	r19,zero,4010f60 <__sfvwrite_r+0x308>
 4010ee4:	a0800217 	ldw	r2,8(r20)
 4010ee8:	e5f9883a 	add	fp,fp,r23
 4010eec:	95e5c83a 	sub	r18,r18,r23
 4010ef0:	15efc83a 	sub	r23,r2,r23
 4010ef4:	a5c00215 	stw	r23,8(r20)
 4010ef8:	b83f8426 	beq	r23,zero,4010d0c <__alt_data_end+0xfc010d0c>
 4010efc:	903fe11e 	bne	r18,zero,4010e84 <__alt_data_end+0xfc010e84>
 4010f00:	8f000017 	ldw	fp,0(r17)
 4010f04:	8c800117 	ldw	r18,4(r17)
 4010f08:	0011883a 	mov	r8,zero
 4010f0c:	8c400204 	addi	r17,r17,8
 4010f10:	003fdb06 	br	4010e80 <__alt_data_end+0xfc010e80>
 4010f14:	180d883a 	mov	r6,r3
 4010f18:	e00b883a 	mov	r5,fp
 4010f1c:	da000115 	stw	r8,4(sp)
 4010f20:	d8c00015 	stw	r3,0(sp)
 4010f24:	40116240 	call	4011624 <memmove>
 4010f28:	d8c00017 	ldw	r3,0(sp)
 4010f2c:	80800017 	ldw	r2,0(r16)
 4010f30:	800b883a 	mov	r5,r16
 4010f34:	a809883a 	mov	r4,r21
 4010f38:	10c5883a 	add	r2,r2,r3
 4010f3c:	80800015 	stw	r2,0(r16)
 4010f40:	d8c00015 	stw	r3,0(sp)
 4010f44:	40103e80 	call	40103e8 <_fflush_r>
 4010f48:	d8c00017 	ldw	r3,0(sp)
 4010f4c:	da000117 	ldw	r8,4(sp)
 4010f50:	103fc21e 	bne	r2,zero,4010e5c <__alt_data_end+0xfc010e5c>
 4010f54:	182f883a 	mov	r23,r3
 4010f58:	9de7c83a 	sub	r19,r19,r23
 4010f5c:	983fe11e 	bne	r19,zero,4010ee4 <__alt_data_end+0xfc010ee4>
 4010f60:	800b883a 	mov	r5,r16
 4010f64:	a809883a 	mov	r4,r21
 4010f68:	40103e80 	call	40103e8 <_fflush_r>
 4010f6c:	103fbb1e 	bne	r2,zero,4010e5c <__alt_data_end+0xfc010e5c>
 4010f70:	0011883a 	mov	r8,zero
 4010f74:	003fdb06 	br	4010ee4 <__alt_data_end+0xfc010ee4>
 4010f78:	94c0012e 	bgeu	r18,r19,4010f80 <__sfvwrite_r+0x328>
 4010f7c:	9027883a 	mov	r19,r18
 4010f80:	980d883a 	mov	r6,r19
 4010f84:	e00b883a 	mov	r5,fp
 4010f88:	40116240 	call	4011624 <memmove>
 4010f8c:	80800217 	ldw	r2,8(r16)
 4010f90:	80c00017 	ldw	r3,0(r16)
 4010f94:	14c5c83a 	sub	r2,r2,r19
 4010f98:	1cc7883a 	add	r3,r3,r19
 4010f9c:	80800215 	stw	r2,8(r16)
 4010fa0:	80c00015 	stw	r3,0(r16)
 4010fa4:	10004326 	beq	r2,zero,40110b4 <__sfvwrite_r+0x45c>
 4010fa8:	9805883a 	mov	r2,r19
 4010fac:	003f8306 	br	4010dbc <__alt_data_end+0xfc010dbc>
 4010fb0:	b00d883a 	mov	r6,r22
 4010fb4:	e00b883a 	mov	r5,fp
 4010fb8:	da000115 	stw	r8,4(sp)
 4010fbc:	40116240 	call	4011624 <memmove>
 4010fc0:	80800217 	ldw	r2,8(r16)
 4010fc4:	80c00017 	ldw	r3,0(r16)
 4010fc8:	da000117 	ldw	r8,4(sp)
 4010fcc:	1585c83a 	sub	r2,r2,r22
 4010fd0:	1dad883a 	add	r22,r3,r22
 4010fd4:	80800215 	stw	r2,8(r16)
 4010fd8:	85800015 	stw	r22,0(r16)
 4010fdc:	003fbf06 	br	4010edc <__alt_data_end+0xfc010edc>
 4010fe0:	81000017 	ldw	r4,0(r16)
 4010fe4:	9027883a 	mov	r19,r18
 4010fe8:	902f883a 	mov	r23,r18
 4010fec:	003f6906 	br	4010d94 <__alt_data_end+0xfc010d94>
 4010ff0:	900d883a 	mov	r6,r18
 4010ff4:	01400284 	movi	r5,10
 4010ff8:	e009883a 	mov	r4,fp
 4010ffc:	40115400 	call	4011540 <memchr>
 4011000:	10003e26 	beq	r2,zero,40110fc <__sfvwrite_r+0x4a4>
 4011004:	10800044 	addi	r2,r2,1
 4011008:	1727c83a 	sub	r19,r2,fp
 401100c:	02000044 	movi	r8,1
 4011010:	003f9d06 	br	4010e88 <__alt_data_end+0xfc010e88>
 4011014:	80800517 	ldw	r2,20(r16)
 4011018:	81400417 	ldw	r5,16(r16)
 401101c:	81c00017 	ldw	r7,0(r16)
 4011020:	10a7883a 	add	r19,r2,r2
 4011024:	9885883a 	add	r2,r19,r2
 4011028:	1026d7fa 	srli	r19,r2,31
 401102c:	396dc83a 	sub	r22,r7,r5
 4011030:	b1000044 	addi	r4,r22,1
 4011034:	9885883a 	add	r2,r19,r2
 4011038:	1027d07a 	srai	r19,r2,1
 401103c:	2485883a 	add	r2,r4,r18
 4011040:	980d883a 	mov	r6,r19
 4011044:	9880022e 	bgeu	r19,r2,4011050 <__sfvwrite_r+0x3f8>
 4011048:	1027883a 	mov	r19,r2
 401104c:	100d883a 	mov	r6,r2
 4011050:	18c1000c 	andi	r3,r3,1024
 4011054:	18001c26 	beq	r3,zero,40110c8 <__sfvwrite_r+0x470>
 4011058:	300b883a 	mov	r5,r6
 401105c:	a809883a 	mov	r4,r21
 4011060:	400b8940 	call	400b894 <_malloc_r>
 4011064:	102f883a 	mov	r23,r2
 4011068:	10002926 	beq	r2,zero,4011110 <__sfvwrite_r+0x4b8>
 401106c:	81400417 	ldw	r5,16(r16)
 4011070:	b00d883a 	mov	r6,r22
 4011074:	1009883a 	mov	r4,r2
 4011078:	400c0a00 	call	400c0a0 <memcpy>
 401107c:	8080030b 	ldhu	r2,12(r16)
 4011080:	00fedfc4 	movi	r3,-1153
 4011084:	10c4703a 	and	r2,r2,r3
 4011088:	10802014 	ori	r2,r2,128
 401108c:	8080030d 	sth	r2,12(r16)
 4011090:	bd89883a 	add	r4,r23,r22
 4011094:	9d8fc83a 	sub	r7,r19,r22
 4011098:	85c00415 	stw	r23,16(r16)
 401109c:	84c00515 	stw	r19,20(r16)
 40110a0:	81000015 	stw	r4,0(r16)
 40110a4:	9027883a 	mov	r19,r18
 40110a8:	81c00215 	stw	r7,8(r16)
 40110ac:	902f883a 	mov	r23,r18
 40110b0:	003f3806 	br	4010d94 <__alt_data_end+0xfc010d94>
 40110b4:	800b883a 	mov	r5,r16
 40110b8:	a809883a 	mov	r4,r21
 40110bc:	40103e80 	call	40103e8 <_fflush_r>
 40110c0:	103fb926 	beq	r2,zero,4010fa8 <__alt_data_end+0xfc010fa8>
 40110c4:	003f6506 	br	4010e5c <__alt_data_end+0xfc010e5c>
 40110c8:	a809883a 	mov	r4,r21
 40110cc:	40129600 	call	4012960 <_realloc_r>
 40110d0:	102f883a 	mov	r23,r2
 40110d4:	103fee1e 	bne	r2,zero,4011090 <__alt_data_end+0xfc011090>
 40110d8:	81400417 	ldw	r5,16(r16)
 40110dc:	a809883a 	mov	r4,r21
 40110e0:	40109480 	call	4010948 <_free_r>
 40110e4:	8080030b 	ldhu	r2,12(r16)
 40110e8:	00ffdfc4 	movi	r3,-129
 40110ec:	1884703a 	and	r2,r3,r2
 40110f0:	00c00304 	movi	r3,12
 40110f4:	a8c00015 	stw	r3,0(r21)
 40110f8:	003f5906 	br	4010e60 <__alt_data_end+0xfc010e60>
 40110fc:	94c00044 	addi	r19,r18,1
 4011100:	02000044 	movi	r8,1
 4011104:	003f6006 	br	4010e88 <__alt_data_end+0xfc010e88>
 4011108:	00bfffc4 	movi	r2,-1
 401110c:	003f0006 	br	4010d10 <__alt_data_end+0xfc010d10>
 4011110:	00800304 	movi	r2,12
 4011114:	a8800015 	stw	r2,0(r21)
 4011118:	8080030b 	ldhu	r2,12(r16)
 401111c:	003f5006 	br	4010e60 <__alt_data_end+0xfc010e60>

04011120 <_fwalk>:
 4011120:	defff704 	addi	sp,sp,-36
 4011124:	dd000415 	stw	r20,16(sp)
 4011128:	dfc00815 	stw	ra,32(sp)
 401112c:	ddc00715 	stw	r23,28(sp)
 4011130:	dd800615 	stw	r22,24(sp)
 4011134:	dd400515 	stw	r21,20(sp)
 4011138:	dcc00315 	stw	r19,12(sp)
 401113c:	dc800215 	stw	r18,8(sp)
 4011140:	dc400115 	stw	r17,4(sp)
 4011144:	dc000015 	stw	r16,0(sp)
 4011148:	2500b804 	addi	r20,r4,736
 401114c:	a0002326 	beq	r20,zero,40111dc <_fwalk+0xbc>
 4011150:	282b883a 	mov	r21,r5
 4011154:	002f883a 	mov	r23,zero
 4011158:	05800044 	movi	r22,1
 401115c:	04ffffc4 	movi	r19,-1
 4011160:	a4400117 	ldw	r17,4(r20)
 4011164:	a4800217 	ldw	r18,8(r20)
 4011168:	8c7fffc4 	addi	r17,r17,-1
 401116c:	88000d16 	blt	r17,zero,40111a4 <_fwalk+0x84>
 4011170:	94000304 	addi	r16,r18,12
 4011174:	94800384 	addi	r18,r18,14
 4011178:	8080000b 	ldhu	r2,0(r16)
 401117c:	8c7fffc4 	addi	r17,r17,-1
 4011180:	813ffd04 	addi	r4,r16,-12
 4011184:	b080042e 	bgeu	r22,r2,4011198 <_fwalk+0x78>
 4011188:	9080000f 	ldh	r2,0(r18)
 401118c:	14c00226 	beq	r2,r19,4011198 <_fwalk+0x78>
 4011190:	a83ee83a 	callr	r21
 4011194:	b8aeb03a 	or	r23,r23,r2
 4011198:	84001a04 	addi	r16,r16,104
 401119c:	94801a04 	addi	r18,r18,104
 40111a0:	8cfff51e 	bne	r17,r19,4011178 <__alt_data_end+0xfc011178>
 40111a4:	a5000017 	ldw	r20,0(r20)
 40111a8:	a03fed1e 	bne	r20,zero,4011160 <__alt_data_end+0xfc011160>
 40111ac:	b805883a 	mov	r2,r23
 40111b0:	dfc00817 	ldw	ra,32(sp)
 40111b4:	ddc00717 	ldw	r23,28(sp)
 40111b8:	dd800617 	ldw	r22,24(sp)
 40111bc:	dd400517 	ldw	r21,20(sp)
 40111c0:	dd000417 	ldw	r20,16(sp)
 40111c4:	dcc00317 	ldw	r19,12(sp)
 40111c8:	dc800217 	ldw	r18,8(sp)
 40111cc:	dc400117 	ldw	r17,4(sp)
 40111d0:	dc000017 	ldw	r16,0(sp)
 40111d4:	dec00904 	addi	sp,sp,36
 40111d8:	f800283a 	ret
 40111dc:	002f883a 	mov	r23,zero
 40111e0:	003ff206 	br	40111ac <__alt_data_end+0xfc0111ac>

040111e4 <_fwalk_reent>:
 40111e4:	defff704 	addi	sp,sp,-36
 40111e8:	dd000415 	stw	r20,16(sp)
 40111ec:	dfc00815 	stw	ra,32(sp)
 40111f0:	ddc00715 	stw	r23,28(sp)
 40111f4:	dd800615 	stw	r22,24(sp)
 40111f8:	dd400515 	stw	r21,20(sp)
 40111fc:	dcc00315 	stw	r19,12(sp)
 4011200:	dc800215 	stw	r18,8(sp)
 4011204:	dc400115 	stw	r17,4(sp)
 4011208:	dc000015 	stw	r16,0(sp)
 401120c:	2500b804 	addi	r20,r4,736
 4011210:	a0002326 	beq	r20,zero,40112a0 <_fwalk_reent+0xbc>
 4011214:	282b883a 	mov	r21,r5
 4011218:	2027883a 	mov	r19,r4
 401121c:	002f883a 	mov	r23,zero
 4011220:	05800044 	movi	r22,1
 4011224:	04bfffc4 	movi	r18,-1
 4011228:	a4400117 	ldw	r17,4(r20)
 401122c:	a4000217 	ldw	r16,8(r20)
 4011230:	8c7fffc4 	addi	r17,r17,-1
 4011234:	88000c16 	blt	r17,zero,4011268 <_fwalk_reent+0x84>
 4011238:	84000304 	addi	r16,r16,12
 401123c:	8080000b 	ldhu	r2,0(r16)
 4011240:	8c7fffc4 	addi	r17,r17,-1
 4011244:	817ffd04 	addi	r5,r16,-12
 4011248:	b080052e 	bgeu	r22,r2,4011260 <_fwalk_reent+0x7c>
 401124c:	8080008f 	ldh	r2,2(r16)
 4011250:	9809883a 	mov	r4,r19
 4011254:	14800226 	beq	r2,r18,4011260 <_fwalk_reent+0x7c>
 4011258:	a83ee83a 	callr	r21
 401125c:	b8aeb03a 	or	r23,r23,r2
 4011260:	84001a04 	addi	r16,r16,104
 4011264:	8cbff51e 	bne	r17,r18,401123c <__alt_data_end+0xfc01123c>
 4011268:	a5000017 	ldw	r20,0(r20)
 401126c:	a03fee1e 	bne	r20,zero,4011228 <__alt_data_end+0xfc011228>
 4011270:	b805883a 	mov	r2,r23
 4011274:	dfc00817 	ldw	ra,32(sp)
 4011278:	ddc00717 	ldw	r23,28(sp)
 401127c:	dd800617 	ldw	r22,24(sp)
 4011280:	dd400517 	ldw	r21,20(sp)
 4011284:	dd000417 	ldw	r20,16(sp)
 4011288:	dcc00317 	ldw	r19,12(sp)
 401128c:	dc800217 	ldw	r18,8(sp)
 4011290:	dc400117 	ldw	r17,4(sp)
 4011294:	dc000017 	ldw	r16,0(sp)
 4011298:	dec00904 	addi	sp,sp,36
 401129c:	f800283a 	ret
 40112a0:	002f883a 	mov	r23,zero
 40112a4:	003ff206 	br	4011270 <__alt_data_end+0xfc011270>

040112a8 <_setlocale_r>:
 40112a8:	30001b26 	beq	r6,zero,4011318 <_setlocale_r+0x70>
 40112ac:	014100b4 	movhi	r5,1026
 40112b0:	defffe04 	addi	sp,sp,-8
 40112b4:	296ba604 	addi	r5,r5,-20840
 40112b8:	3009883a 	mov	r4,r6
 40112bc:	dc000015 	stw	r16,0(sp)
 40112c0:	dfc00115 	stw	ra,4(sp)
 40112c4:	3021883a 	mov	r16,r6
 40112c8:	40130000 	call	4013000 <strcmp>
 40112cc:	1000061e 	bne	r2,zero,40112e8 <_setlocale_r+0x40>
 40112d0:	008100b4 	movhi	r2,1026
 40112d4:	10ab8704 	addi	r2,r2,-20964
 40112d8:	dfc00117 	ldw	ra,4(sp)
 40112dc:	dc000017 	ldw	r16,0(sp)
 40112e0:	dec00204 	addi	sp,sp,8
 40112e4:	f800283a 	ret
 40112e8:	014100b4 	movhi	r5,1026
 40112ec:	296b8704 	addi	r5,r5,-20964
 40112f0:	8009883a 	mov	r4,r16
 40112f4:	40130000 	call	4013000 <strcmp>
 40112f8:	103ff526 	beq	r2,zero,40112d0 <__alt_data_end+0xfc0112d0>
 40112fc:	014100b4 	movhi	r5,1026
 4011300:	296b9104 	addi	r5,r5,-20924
 4011304:	8009883a 	mov	r4,r16
 4011308:	40130000 	call	4013000 <strcmp>
 401130c:	103ff026 	beq	r2,zero,40112d0 <__alt_data_end+0xfc0112d0>
 4011310:	0005883a 	mov	r2,zero
 4011314:	003ff006 	br	40112d8 <__alt_data_end+0xfc0112d8>
 4011318:	008100b4 	movhi	r2,1026
 401131c:	10ab8704 	addi	r2,r2,-20964
 4011320:	f800283a 	ret

04011324 <__locale_charset>:
 4011324:	008100b4 	movhi	r2,1026
 4011328:	10ae3104 	addi	r2,r2,-18236
 401132c:	f800283a 	ret

04011330 <__locale_mb_cur_max>:
 4011330:	008100b4 	movhi	r2,1026
 4011334:	10b2e004 	addi	r2,r2,-13440
 4011338:	10800017 	ldw	r2,0(r2)
 401133c:	f800283a 	ret

04011340 <__locale_msgcharset>:
 4011340:	008100b4 	movhi	r2,1026
 4011344:	10ae2904 	addi	r2,r2,-18268
 4011348:	f800283a 	ret

0401134c <__locale_cjk_lang>:
 401134c:	0005883a 	mov	r2,zero
 4011350:	f800283a 	ret

04011354 <_localeconv_r>:
 4011354:	008100b4 	movhi	r2,1026
 4011358:	10ae3904 	addi	r2,r2,-18204
 401135c:	f800283a 	ret

04011360 <setlocale>:
 4011360:	008100b4 	movhi	r2,1026
 4011364:	10b2dd04 	addi	r2,r2,-13452
 4011368:	280d883a 	mov	r6,r5
 401136c:	200b883a 	mov	r5,r4
 4011370:	11000017 	ldw	r4,0(r2)
 4011374:	40112a81 	jmpi	40112a8 <_setlocale_r>

04011378 <localeconv>:
 4011378:	008100b4 	movhi	r2,1026
 401137c:	10ae3904 	addi	r2,r2,-18204
 4011380:	f800283a 	ret

04011384 <__smakebuf_r>:
 4011384:	2880030b 	ldhu	r2,12(r5)
 4011388:	10c0008c 	andi	r3,r2,2
 401138c:	1800411e 	bne	r3,zero,4011494 <__smakebuf_r+0x110>
 4011390:	deffec04 	addi	sp,sp,-80
 4011394:	dc000f15 	stw	r16,60(sp)
 4011398:	2821883a 	mov	r16,r5
 401139c:	2940038f 	ldh	r5,14(r5)
 40113a0:	dc401015 	stw	r17,64(sp)
 40113a4:	dfc01315 	stw	ra,76(sp)
 40113a8:	dcc01215 	stw	r19,72(sp)
 40113ac:	dc801115 	stw	r18,68(sp)
 40113b0:	2023883a 	mov	r17,r4
 40113b4:	28001c16 	blt	r5,zero,4011428 <__smakebuf_r+0xa4>
 40113b8:	d80d883a 	mov	r6,sp
 40113bc:	4014c700 	call	4014c70 <_fstat_r>
 40113c0:	10001816 	blt	r2,zero,4011424 <__smakebuf_r+0xa0>
 40113c4:	d8800117 	ldw	r2,4(sp)
 40113c8:	00e00014 	movui	r3,32768
 40113cc:	10bc000c 	andi	r2,r2,61440
 40113d0:	14c80020 	cmpeqi	r19,r2,8192
 40113d4:	10c03726 	beq	r2,r3,40114b4 <__smakebuf_r+0x130>
 40113d8:	80c0030b 	ldhu	r3,12(r16)
 40113dc:	18c20014 	ori	r3,r3,2048
 40113e0:	80c0030d 	sth	r3,12(r16)
 40113e4:	00c80004 	movi	r3,8192
 40113e8:	10c0521e 	bne	r2,r3,4011534 <__smakebuf_r+0x1b0>
 40113ec:	8140038f 	ldh	r5,14(r16)
 40113f0:	8809883a 	mov	r4,r17
 40113f4:	4014ccc0 	call	4014ccc <_isatty_r>
 40113f8:	10004c26 	beq	r2,zero,401152c <__smakebuf_r+0x1a8>
 40113fc:	8080030b 	ldhu	r2,12(r16)
 4011400:	80c010c4 	addi	r3,r16,67
 4011404:	80c00015 	stw	r3,0(r16)
 4011408:	10800054 	ori	r2,r2,1
 401140c:	8080030d 	sth	r2,12(r16)
 4011410:	00800044 	movi	r2,1
 4011414:	80c00415 	stw	r3,16(r16)
 4011418:	80800515 	stw	r2,20(r16)
 401141c:	04810004 	movi	r18,1024
 4011420:	00000706 	br	4011440 <__smakebuf_r+0xbc>
 4011424:	8080030b 	ldhu	r2,12(r16)
 4011428:	10c0200c 	andi	r3,r2,128
 401142c:	18001f1e 	bne	r3,zero,40114ac <__smakebuf_r+0x128>
 4011430:	04810004 	movi	r18,1024
 4011434:	10820014 	ori	r2,r2,2048
 4011438:	8080030d 	sth	r2,12(r16)
 401143c:	0027883a 	mov	r19,zero
 4011440:	900b883a 	mov	r5,r18
 4011444:	8809883a 	mov	r4,r17
 4011448:	400b8940 	call	400b894 <_malloc_r>
 401144c:	10002c26 	beq	r2,zero,4011500 <__smakebuf_r+0x17c>
 4011450:	80c0030b 	ldhu	r3,12(r16)
 4011454:	01010074 	movhi	r4,1025
 4011458:	21011f04 	addi	r4,r4,1148
 401145c:	89000f15 	stw	r4,60(r17)
 4011460:	18c02014 	ori	r3,r3,128
 4011464:	80c0030d 	sth	r3,12(r16)
 4011468:	80800015 	stw	r2,0(r16)
 401146c:	80800415 	stw	r2,16(r16)
 4011470:	84800515 	stw	r18,20(r16)
 4011474:	98001a1e 	bne	r19,zero,40114e0 <__smakebuf_r+0x15c>
 4011478:	dfc01317 	ldw	ra,76(sp)
 401147c:	dcc01217 	ldw	r19,72(sp)
 4011480:	dc801117 	ldw	r18,68(sp)
 4011484:	dc401017 	ldw	r17,64(sp)
 4011488:	dc000f17 	ldw	r16,60(sp)
 401148c:	dec01404 	addi	sp,sp,80
 4011490:	f800283a 	ret
 4011494:	288010c4 	addi	r2,r5,67
 4011498:	28800015 	stw	r2,0(r5)
 401149c:	28800415 	stw	r2,16(r5)
 40114a0:	00800044 	movi	r2,1
 40114a4:	28800515 	stw	r2,20(r5)
 40114a8:	f800283a 	ret
 40114ac:	04801004 	movi	r18,64
 40114b0:	003fe006 	br	4011434 <__alt_data_end+0xfc011434>
 40114b4:	81000a17 	ldw	r4,40(r16)
 40114b8:	00c10074 	movhi	r3,1025
 40114bc:	18cbe704 	addi	r3,r3,12188
 40114c0:	20ffc51e 	bne	r4,r3,40113d8 <__alt_data_end+0xfc0113d8>
 40114c4:	8080030b 	ldhu	r2,12(r16)
 40114c8:	04810004 	movi	r18,1024
 40114cc:	84801315 	stw	r18,76(r16)
 40114d0:	1484b03a 	or	r2,r2,r18
 40114d4:	8080030d 	sth	r2,12(r16)
 40114d8:	0027883a 	mov	r19,zero
 40114dc:	003fd806 	br	4011440 <__alt_data_end+0xfc011440>
 40114e0:	8140038f 	ldh	r5,14(r16)
 40114e4:	8809883a 	mov	r4,r17
 40114e8:	4014ccc0 	call	4014ccc <_isatty_r>
 40114ec:	103fe226 	beq	r2,zero,4011478 <__alt_data_end+0xfc011478>
 40114f0:	8080030b 	ldhu	r2,12(r16)
 40114f4:	10800054 	ori	r2,r2,1
 40114f8:	8080030d 	sth	r2,12(r16)
 40114fc:	003fde06 	br	4011478 <__alt_data_end+0xfc011478>
 4011500:	8080030b 	ldhu	r2,12(r16)
 4011504:	10c0800c 	andi	r3,r2,512
 4011508:	183fdb1e 	bne	r3,zero,4011478 <__alt_data_end+0xfc011478>
 401150c:	10800094 	ori	r2,r2,2
 4011510:	80c010c4 	addi	r3,r16,67
 4011514:	8080030d 	sth	r2,12(r16)
 4011518:	00800044 	movi	r2,1
 401151c:	80c00015 	stw	r3,0(r16)
 4011520:	80c00415 	stw	r3,16(r16)
 4011524:	80800515 	stw	r2,20(r16)
 4011528:	003fd306 	br	4011478 <__alt_data_end+0xfc011478>
 401152c:	04810004 	movi	r18,1024
 4011530:	003fc306 	br	4011440 <__alt_data_end+0xfc011440>
 4011534:	0027883a 	mov	r19,zero
 4011538:	04810004 	movi	r18,1024
 401153c:	003fc006 	br	4011440 <__alt_data_end+0xfc011440>

04011540 <memchr>:
 4011540:	208000cc 	andi	r2,r4,3
 4011544:	280f883a 	mov	r7,r5
 4011548:	10003426 	beq	r2,zero,401161c <memchr+0xdc>
 401154c:	30bfffc4 	addi	r2,r6,-1
 4011550:	30001a26 	beq	r6,zero,40115bc <memchr+0x7c>
 4011554:	20c00003 	ldbu	r3,0(r4)
 4011558:	29803fcc 	andi	r6,r5,255
 401155c:	30c0051e 	bne	r6,r3,4011574 <memchr+0x34>
 4011560:	00001806 	br	40115c4 <memchr+0x84>
 4011564:	10001526 	beq	r2,zero,40115bc <memchr+0x7c>
 4011568:	20c00003 	ldbu	r3,0(r4)
 401156c:	10bfffc4 	addi	r2,r2,-1
 4011570:	30c01426 	beq	r6,r3,40115c4 <memchr+0x84>
 4011574:	21000044 	addi	r4,r4,1
 4011578:	20c000cc 	andi	r3,r4,3
 401157c:	183ff91e 	bne	r3,zero,4011564 <__alt_data_end+0xfc011564>
 4011580:	020000c4 	movi	r8,3
 4011584:	40801136 	bltu	r8,r2,40115cc <memchr+0x8c>
 4011588:	10000c26 	beq	r2,zero,40115bc <memchr+0x7c>
 401158c:	20c00003 	ldbu	r3,0(r4)
 4011590:	29403fcc 	andi	r5,r5,255
 4011594:	28c00b26 	beq	r5,r3,40115c4 <memchr+0x84>
 4011598:	20c00044 	addi	r3,r4,1
 401159c:	39803fcc 	andi	r6,r7,255
 40115a0:	2089883a 	add	r4,r4,r2
 40115a4:	00000306 	br	40115b4 <memchr+0x74>
 40115a8:	18c00044 	addi	r3,r3,1
 40115ac:	197fffc3 	ldbu	r5,-1(r3)
 40115b0:	31400526 	beq	r6,r5,40115c8 <memchr+0x88>
 40115b4:	1805883a 	mov	r2,r3
 40115b8:	20fffb1e 	bne	r4,r3,40115a8 <__alt_data_end+0xfc0115a8>
 40115bc:	0005883a 	mov	r2,zero
 40115c0:	f800283a 	ret
 40115c4:	2005883a 	mov	r2,r4
 40115c8:	f800283a 	ret
 40115cc:	28c03fcc 	andi	r3,r5,255
 40115d0:	1812923a 	slli	r9,r3,8
 40115d4:	02ffbff4 	movhi	r11,65279
 40115d8:	02a02074 	movhi	r10,32897
 40115dc:	48d2b03a 	or	r9,r9,r3
 40115e0:	4806943a 	slli	r3,r9,16
 40115e4:	5affbfc4 	addi	r11,r11,-257
 40115e8:	52a02004 	addi	r10,r10,-32640
 40115ec:	48d2b03a 	or	r9,r9,r3
 40115f0:	20c00017 	ldw	r3,0(r4)
 40115f4:	48c6f03a 	xor	r3,r9,r3
 40115f8:	1acd883a 	add	r6,r3,r11
 40115fc:	00c6303a 	nor	r3,zero,r3
 4011600:	30c6703a 	and	r3,r6,r3
 4011604:	1a86703a 	and	r3,r3,r10
 4011608:	183fe01e 	bne	r3,zero,401158c <__alt_data_end+0xfc01158c>
 401160c:	10bfff04 	addi	r2,r2,-4
 4011610:	21000104 	addi	r4,r4,4
 4011614:	40bff636 	bltu	r8,r2,40115f0 <__alt_data_end+0xfc0115f0>
 4011618:	003fdb06 	br	4011588 <__alt_data_end+0xfc011588>
 401161c:	3005883a 	mov	r2,r6
 4011620:	003fd706 	br	4011580 <__alt_data_end+0xfc011580>

04011624 <memmove>:
 4011624:	2005883a 	mov	r2,r4
 4011628:	29000b2e 	bgeu	r5,r4,4011658 <memmove+0x34>
 401162c:	298f883a 	add	r7,r5,r6
 4011630:	21c0092e 	bgeu	r4,r7,4011658 <memmove+0x34>
 4011634:	2187883a 	add	r3,r4,r6
 4011638:	198bc83a 	sub	r5,r3,r6
 401163c:	30004826 	beq	r6,zero,4011760 <memmove+0x13c>
 4011640:	39ffffc4 	addi	r7,r7,-1
 4011644:	39000003 	ldbu	r4,0(r7)
 4011648:	18ffffc4 	addi	r3,r3,-1
 401164c:	19000005 	stb	r4,0(r3)
 4011650:	28fffb1e 	bne	r5,r3,4011640 <__alt_data_end+0xfc011640>
 4011654:	f800283a 	ret
 4011658:	00c003c4 	movi	r3,15
 401165c:	1980412e 	bgeu	r3,r6,4011764 <memmove+0x140>
 4011660:	2886b03a 	or	r3,r5,r2
 4011664:	18c000cc 	andi	r3,r3,3
 4011668:	1800401e 	bne	r3,zero,401176c <memmove+0x148>
 401166c:	33fffc04 	addi	r15,r6,-16
 4011670:	781ed13a 	srli	r15,r15,4
 4011674:	28c00104 	addi	r3,r5,4
 4011678:	13400104 	addi	r13,r2,4
 401167c:	781c913a 	slli	r14,r15,4
 4011680:	2b000204 	addi	r12,r5,8
 4011684:	12c00204 	addi	r11,r2,8
 4011688:	73800504 	addi	r14,r14,20
 401168c:	2a800304 	addi	r10,r5,12
 4011690:	12400304 	addi	r9,r2,12
 4011694:	2b9d883a 	add	r14,r5,r14
 4011698:	2811883a 	mov	r8,r5
 401169c:	100f883a 	mov	r7,r2
 40116a0:	41000017 	ldw	r4,0(r8)
 40116a4:	39c00404 	addi	r7,r7,16
 40116a8:	18c00404 	addi	r3,r3,16
 40116ac:	393ffc15 	stw	r4,-16(r7)
 40116b0:	193ffc17 	ldw	r4,-16(r3)
 40116b4:	6b400404 	addi	r13,r13,16
 40116b8:	5ac00404 	addi	r11,r11,16
 40116bc:	693ffc15 	stw	r4,-16(r13)
 40116c0:	61000017 	ldw	r4,0(r12)
 40116c4:	4a400404 	addi	r9,r9,16
 40116c8:	42000404 	addi	r8,r8,16
 40116cc:	593ffc15 	stw	r4,-16(r11)
 40116d0:	51000017 	ldw	r4,0(r10)
 40116d4:	63000404 	addi	r12,r12,16
 40116d8:	52800404 	addi	r10,r10,16
 40116dc:	493ffc15 	stw	r4,-16(r9)
 40116e0:	1bbfef1e 	bne	r3,r14,40116a0 <__alt_data_end+0xfc0116a0>
 40116e4:	79000044 	addi	r4,r15,1
 40116e8:	2008913a 	slli	r4,r4,4
 40116ec:	328003cc 	andi	r10,r6,15
 40116f0:	02c000c4 	movi	r11,3
 40116f4:	1107883a 	add	r3,r2,r4
 40116f8:	290b883a 	add	r5,r5,r4
 40116fc:	5a801e2e 	bgeu	r11,r10,4011778 <memmove+0x154>
 4011700:	1813883a 	mov	r9,r3
 4011704:	2811883a 	mov	r8,r5
 4011708:	500f883a 	mov	r7,r10
 401170c:	41000017 	ldw	r4,0(r8)
 4011710:	4a400104 	addi	r9,r9,4
 4011714:	39ffff04 	addi	r7,r7,-4
 4011718:	493fff15 	stw	r4,-4(r9)
 401171c:	42000104 	addi	r8,r8,4
 4011720:	59fffa36 	bltu	r11,r7,401170c <__alt_data_end+0xfc01170c>
 4011724:	513fff04 	addi	r4,r10,-4
 4011728:	2008d0ba 	srli	r4,r4,2
 401172c:	318000cc 	andi	r6,r6,3
 4011730:	21000044 	addi	r4,r4,1
 4011734:	2109883a 	add	r4,r4,r4
 4011738:	2109883a 	add	r4,r4,r4
 401173c:	1907883a 	add	r3,r3,r4
 4011740:	290b883a 	add	r5,r5,r4
 4011744:	30000b26 	beq	r6,zero,4011774 <memmove+0x150>
 4011748:	198d883a 	add	r6,r3,r6
 401174c:	29c00003 	ldbu	r7,0(r5)
 4011750:	18c00044 	addi	r3,r3,1
 4011754:	29400044 	addi	r5,r5,1
 4011758:	19ffffc5 	stb	r7,-1(r3)
 401175c:	19bffb1e 	bne	r3,r6,401174c <__alt_data_end+0xfc01174c>
 4011760:	f800283a 	ret
 4011764:	1007883a 	mov	r3,r2
 4011768:	003ff606 	br	4011744 <__alt_data_end+0xfc011744>
 401176c:	1007883a 	mov	r3,r2
 4011770:	003ff506 	br	4011748 <__alt_data_end+0xfc011748>
 4011774:	f800283a 	ret
 4011778:	500d883a 	mov	r6,r10
 401177c:	003ff106 	br	4011744 <__alt_data_end+0xfc011744>

04011780 <memset>:
 4011780:	20c000cc 	andi	r3,r4,3
 4011784:	2005883a 	mov	r2,r4
 4011788:	18004426 	beq	r3,zero,401189c <memset+0x11c>
 401178c:	31ffffc4 	addi	r7,r6,-1
 4011790:	30004026 	beq	r6,zero,4011894 <memset+0x114>
 4011794:	2813883a 	mov	r9,r5
 4011798:	200d883a 	mov	r6,r4
 401179c:	2007883a 	mov	r3,r4
 40117a0:	00000406 	br	40117b4 <memset+0x34>
 40117a4:	3a3fffc4 	addi	r8,r7,-1
 40117a8:	31800044 	addi	r6,r6,1
 40117ac:	38003926 	beq	r7,zero,4011894 <memset+0x114>
 40117b0:	400f883a 	mov	r7,r8
 40117b4:	18c00044 	addi	r3,r3,1
 40117b8:	32400005 	stb	r9,0(r6)
 40117bc:	1a0000cc 	andi	r8,r3,3
 40117c0:	403ff81e 	bne	r8,zero,40117a4 <__alt_data_end+0xfc0117a4>
 40117c4:	010000c4 	movi	r4,3
 40117c8:	21c02d2e 	bgeu	r4,r7,4011880 <memset+0x100>
 40117cc:	29003fcc 	andi	r4,r5,255
 40117d0:	200c923a 	slli	r6,r4,8
 40117d4:	3108b03a 	or	r4,r6,r4
 40117d8:	200c943a 	slli	r6,r4,16
 40117dc:	218cb03a 	or	r6,r4,r6
 40117e0:	010003c4 	movi	r4,15
 40117e4:	21c0182e 	bgeu	r4,r7,4011848 <memset+0xc8>
 40117e8:	3b3ffc04 	addi	r12,r7,-16
 40117ec:	6018d13a 	srli	r12,r12,4
 40117f0:	1a000104 	addi	r8,r3,4
 40117f4:	1ac00204 	addi	r11,r3,8
 40117f8:	6008913a 	slli	r4,r12,4
 40117fc:	1a800304 	addi	r10,r3,12
 4011800:	1813883a 	mov	r9,r3
 4011804:	21000504 	addi	r4,r4,20
 4011808:	1909883a 	add	r4,r3,r4
 401180c:	49800015 	stw	r6,0(r9)
 4011810:	41800015 	stw	r6,0(r8)
 4011814:	59800015 	stw	r6,0(r11)
 4011818:	51800015 	stw	r6,0(r10)
 401181c:	42000404 	addi	r8,r8,16
 4011820:	4a400404 	addi	r9,r9,16
 4011824:	5ac00404 	addi	r11,r11,16
 4011828:	52800404 	addi	r10,r10,16
 401182c:	413ff71e 	bne	r8,r4,401180c <__alt_data_end+0xfc01180c>
 4011830:	63000044 	addi	r12,r12,1
 4011834:	6018913a 	slli	r12,r12,4
 4011838:	39c003cc 	andi	r7,r7,15
 401183c:	010000c4 	movi	r4,3
 4011840:	1b07883a 	add	r3,r3,r12
 4011844:	21c00e2e 	bgeu	r4,r7,4011880 <memset+0x100>
 4011848:	1813883a 	mov	r9,r3
 401184c:	3811883a 	mov	r8,r7
 4011850:	010000c4 	movi	r4,3
 4011854:	49800015 	stw	r6,0(r9)
 4011858:	423fff04 	addi	r8,r8,-4
 401185c:	4a400104 	addi	r9,r9,4
 4011860:	223ffc36 	bltu	r4,r8,4011854 <__alt_data_end+0xfc011854>
 4011864:	393fff04 	addi	r4,r7,-4
 4011868:	2008d0ba 	srli	r4,r4,2
 401186c:	39c000cc 	andi	r7,r7,3
 4011870:	21000044 	addi	r4,r4,1
 4011874:	2109883a 	add	r4,r4,r4
 4011878:	2109883a 	add	r4,r4,r4
 401187c:	1907883a 	add	r3,r3,r4
 4011880:	38000526 	beq	r7,zero,4011898 <memset+0x118>
 4011884:	19cf883a 	add	r7,r3,r7
 4011888:	19400005 	stb	r5,0(r3)
 401188c:	18c00044 	addi	r3,r3,1
 4011890:	38fffd1e 	bne	r7,r3,4011888 <__alt_data_end+0xfc011888>
 4011894:	f800283a 	ret
 4011898:	f800283a 	ret
 401189c:	2007883a 	mov	r3,r4
 40118a0:	300f883a 	mov	r7,r6
 40118a4:	003fc706 	br	40117c4 <__alt_data_end+0xfc0117c4>

040118a8 <_Balloc>:
 40118a8:	20801317 	ldw	r2,76(r4)
 40118ac:	defffc04 	addi	sp,sp,-16
 40118b0:	dc400115 	stw	r17,4(sp)
 40118b4:	dc000015 	stw	r16,0(sp)
 40118b8:	dfc00315 	stw	ra,12(sp)
 40118bc:	dc800215 	stw	r18,8(sp)
 40118c0:	2023883a 	mov	r17,r4
 40118c4:	2821883a 	mov	r16,r5
 40118c8:	10000f26 	beq	r2,zero,4011908 <_Balloc+0x60>
 40118cc:	8407883a 	add	r3,r16,r16
 40118d0:	18c7883a 	add	r3,r3,r3
 40118d4:	10c7883a 	add	r3,r2,r3
 40118d8:	18800017 	ldw	r2,0(r3)
 40118dc:	10001126 	beq	r2,zero,4011924 <_Balloc+0x7c>
 40118e0:	11000017 	ldw	r4,0(r2)
 40118e4:	19000015 	stw	r4,0(r3)
 40118e8:	10000415 	stw	zero,16(r2)
 40118ec:	10000315 	stw	zero,12(r2)
 40118f0:	dfc00317 	ldw	ra,12(sp)
 40118f4:	dc800217 	ldw	r18,8(sp)
 40118f8:	dc400117 	ldw	r17,4(sp)
 40118fc:	dc000017 	ldw	r16,0(sp)
 4011900:	dec00404 	addi	sp,sp,16
 4011904:	f800283a 	ret
 4011908:	01800844 	movi	r6,33
 401190c:	01400104 	movi	r5,4
 4011910:	40148880 	call	4014888 <_calloc_r>
 4011914:	88801315 	stw	r2,76(r17)
 4011918:	103fec1e 	bne	r2,zero,40118cc <__alt_data_end+0xfc0118cc>
 401191c:	0005883a 	mov	r2,zero
 4011920:	003ff306 	br	40118f0 <__alt_data_end+0xfc0118f0>
 4011924:	01400044 	movi	r5,1
 4011928:	2c24983a 	sll	r18,r5,r16
 401192c:	8809883a 	mov	r4,r17
 4011930:	91800144 	addi	r6,r18,5
 4011934:	318d883a 	add	r6,r6,r6
 4011938:	318d883a 	add	r6,r6,r6
 401193c:	40148880 	call	4014888 <_calloc_r>
 4011940:	103ff626 	beq	r2,zero,401191c <__alt_data_end+0xfc01191c>
 4011944:	14000115 	stw	r16,4(r2)
 4011948:	14800215 	stw	r18,8(r2)
 401194c:	003fe606 	br	40118e8 <__alt_data_end+0xfc0118e8>

04011950 <_Bfree>:
 4011950:	28000826 	beq	r5,zero,4011974 <_Bfree+0x24>
 4011954:	28c00117 	ldw	r3,4(r5)
 4011958:	20801317 	ldw	r2,76(r4)
 401195c:	18c7883a 	add	r3,r3,r3
 4011960:	18c7883a 	add	r3,r3,r3
 4011964:	10c5883a 	add	r2,r2,r3
 4011968:	10c00017 	ldw	r3,0(r2)
 401196c:	28c00015 	stw	r3,0(r5)
 4011970:	11400015 	stw	r5,0(r2)
 4011974:	f800283a 	ret

04011978 <__multadd>:
 4011978:	defff704 	addi	sp,sp,-36
 401197c:	dc800215 	stw	r18,8(sp)
 4011980:	2c800417 	ldw	r18,16(r5)
 4011984:	dd800615 	stw	r22,24(sp)
 4011988:	dd400515 	stw	r21,20(sp)
 401198c:	dd000415 	stw	r20,16(sp)
 4011990:	dcc00315 	stw	r19,12(sp)
 4011994:	dc400115 	stw	r17,4(sp)
 4011998:	dc000015 	stw	r16,0(sp)
 401199c:	dfc00815 	stw	ra,32(sp)
 40119a0:	ddc00715 	stw	r23,28(sp)
 40119a4:	2827883a 	mov	r19,r5
 40119a8:	2029883a 	mov	r20,r4
 40119ac:	3023883a 	mov	r17,r6
 40119b0:	3821883a 	mov	r16,r7
 40119b4:	2d400504 	addi	r21,r5,20
 40119b8:	002d883a 	mov	r22,zero
 40119bc:	adc00017 	ldw	r23,0(r21)
 40119c0:	880b883a 	mov	r5,r17
 40119c4:	ad400104 	addi	r21,r21,4
 40119c8:	b93fffcc 	andi	r4,r23,65535
 40119cc:	4007eb40 	call	4007eb4 <__mulsi3>
 40119d0:	b808d43a 	srli	r4,r23,16
 40119d4:	880b883a 	mov	r5,r17
 40119d8:	1421883a 	add	r16,r2,r16
 40119dc:	4007eb40 	call	4007eb4 <__mulsi3>
 40119e0:	800ed43a 	srli	r7,r16,16
 40119e4:	80ffffcc 	andi	r3,r16,65535
 40119e8:	b5800044 	addi	r22,r22,1
 40119ec:	11c5883a 	add	r2,r2,r7
 40119f0:	100e943a 	slli	r7,r2,16
 40119f4:	1020d43a 	srli	r16,r2,16
 40119f8:	38c7883a 	add	r3,r7,r3
 40119fc:	a8ffff15 	stw	r3,-4(r21)
 4011a00:	b4bfee16 	blt	r22,r18,40119bc <__alt_data_end+0xfc0119bc>
 4011a04:	80000926 	beq	r16,zero,4011a2c <__multadd+0xb4>
 4011a08:	98800217 	ldw	r2,8(r19)
 4011a0c:	9080130e 	bge	r18,r2,4011a5c <__multadd+0xe4>
 4011a10:	90800144 	addi	r2,r18,5
 4011a14:	1085883a 	add	r2,r2,r2
 4011a18:	1085883a 	add	r2,r2,r2
 4011a1c:	9885883a 	add	r2,r19,r2
 4011a20:	14000015 	stw	r16,0(r2)
 4011a24:	94800044 	addi	r18,r18,1
 4011a28:	9c800415 	stw	r18,16(r19)
 4011a2c:	9805883a 	mov	r2,r19
 4011a30:	dfc00817 	ldw	ra,32(sp)
 4011a34:	ddc00717 	ldw	r23,28(sp)
 4011a38:	dd800617 	ldw	r22,24(sp)
 4011a3c:	dd400517 	ldw	r21,20(sp)
 4011a40:	dd000417 	ldw	r20,16(sp)
 4011a44:	dcc00317 	ldw	r19,12(sp)
 4011a48:	dc800217 	ldw	r18,8(sp)
 4011a4c:	dc400117 	ldw	r17,4(sp)
 4011a50:	dc000017 	ldw	r16,0(sp)
 4011a54:	dec00904 	addi	sp,sp,36
 4011a58:	f800283a 	ret
 4011a5c:	99400117 	ldw	r5,4(r19)
 4011a60:	a009883a 	mov	r4,r20
 4011a64:	29400044 	addi	r5,r5,1
 4011a68:	40118a80 	call	40118a8 <_Balloc>
 4011a6c:	99800417 	ldw	r6,16(r19)
 4011a70:	99400304 	addi	r5,r19,12
 4011a74:	11000304 	addi	r4,r2,12
 4011a78:	31800084 	addi	r6,r6,2
 4011a7c:	318d883a 	add	r6,r6,r6
 4011a80:	318d883a 	add	r6,r6,r6
 4011a84:	1023883a 	mov	r17,r2
 4011a88:	400c0a00 	call	400c0a0 <memcpy>
 4011a8c:	98000a26 	beq	r19,zero,4011ab8 <__multadd+0x140>
 4011a90:	98c00117 	ldw	r3,4(r19)
 4011a94:	a0801317 	ldw	r2,76(r20)
 4011a98:	18c7883a 	add	r3,r3,r3
 4011a9c:	18c7883a 	add	r3,r3,r3
 4011aa0:	10c5883a 	add	r2,r2,r3
 4011aa4:	10c00017 	ldw	r3,0(r2)
 4011aa8:	98c00015 	stw	r3,0(r19)
 4011aac:	14c00015 	stw	r19,0(r2)
 4011ab0:	8827883a 	mov	r19,r17
 4011ab4:	003fd606 	br	4011a10 <__alt_data_end+0xfc011a10>
 4011ab8:	8827883a 	mov	r19,r17
 4011abc:	003fd406 	br	4011a10 <__alt_data_end+0xfc011a10>

04011ac0 <__s2b>:
 4011ac0:	defff904 	addi	sp,sp,-28
 4011ac4:	dc400115 	stw	r17,4(sp)
 4011ac8:	dc000015 	stw	r16,0(sp)
 4011acc:	2023883a 	mov	r17,r4
 4011ad0:	2821883a 	mov	r16,r5
 4011ad4:	39000204 	addi	r4,r7,8
 4011ad8:	01400244 	movi	r5,9
 4011adc:	dcc00315 	stw	r19,12(sp)
 4011ae0:	dc800215 	stw	r18,8(sp)
 4011ae4:	dfc00615 	stw	ra,24(sp)
 4011ae8:	dd400515 	stw	r21,20(sp)
 4011aec:	dd000415 	stw	r20,16(sp)
 4011af0:	3825883a 	mov	r18,r7
 4011af4:	3027883a 	mov	r19,r6
 4011af8:	4007d000 	call	4007d00 <__divsi3>
 4011afc:	00c00044 	movi	r3,1
 4011b00:	000b883a 	mov	r5,zero
 4011b04:	1880030e 	bge	r3,r2,4011b14 <__s2b+0x54>
 4011b08:	18c7883a 	add	r3,r3,r3
 4011b0c:	29400044 	addi	r5,r5,1
 4011b10:	18bffd16 	blt	r3,r2,4011b08 <__alt_data_end+0xfc011b08>
 4011b14:	8809883a 	mov	r4,r17
 4011b18:	40118a80 	call	40118a8 <_Balloc>
 4011b1c:	d8c00717 	ldw	r3,28(sp)
 4011b20:	10c00515 	stw	r3,20(r2)
 4011b24:	00c00044 	movi	r3,1
 4011b28:	10c00415 	stw	r3,16(r2)
 4011b2c:	00c00244 	movi	r3,9
 4011b30:	1cc0210e 	bge	r3,r19,4011bb8 <__s2b+0xf8>
 4011b34:	80eb883a 	add	r21,r16,r3
 4011b38:	a829883a 	mov	r20,r21
 4011b3c:	84e1883a 	add	r16,r16,r19
 4011b40:	a1c00007 	ldb	r7,0(r20)
 4011b44:	01800284 	movi	r6,10
 4011b48:	a5000044 	addi	r20,r20,1
 4011b4c:	100b883a 	mov	r5,r2
 4011b50:	39fff404 	addi	r7,r7,-48
 4011b54:	8809883a 	mov	r4,r17
 4011b58:	40119780 	call	4011978 <__multadd>
 4011b5c:	a43ff81e 	bne	r20,r16,4011b40 <__alt_data_end+0xfc011b40>
 4011b60:	ace1883a 	add	r16,r21,r19
 4011b64:	843ffe04 	addi	r16,r16,-8
 4011b68:	9c800a0e 	bge	r19,r18,4011b94 <__s2b+0xd4>
 4011b6c:	94e5c83a 	sub	r18,r18,r19
 4011b70:	84a5883a 	add	r18,r16,r18
 4011b74:	81c00007 	ldb	r7,0(r16)
 4011b78:	01800284 	movi	r6,10
 4011b7c:	84000044 	addi	r16,r16,1
 4011b80:	100b883a 	mov	r5,r2
 4011b84:	39fff404 	addi	r7,r7,-48
 4011b88:	8809883a 	mov	r4,r17
 4011b8c:	40119780 	call	4011978 <__multadd>
 4011b90:	84bff81e 	bne	r16,r18,4011b74 <__alt_data_end+0xfc011b74>
 4011b94:	dfc00617 	ldw	ra,24(sp)
 4011b98:	dd400517 	ldw	r21,20(sp)
 4011b9c:	dd000417 	ldw	r20,16(sp)
 4011ba0:	dcc00317 	ldw	r19,12(sp)
 4011ba4:	dc800217 	ldw	r18,8(sp)
 4011ba8:	dc400117 	ldw	r17,4(sp)
 4011bac:	dc000017 	ldw	r16,0(sp)
 4011bb0:	dec00704 	addi	sp,sp,28
 4011bb4:	f800283a 	ret
 4011bb8:	84000284 	addi	r16,r16,10
 4011bbc:	1827883a 	mov	r19,r3
 4011bc0:	003fe906 	br	4011b68 <__alt_data_end+0xfc011b68>

04011bc4 <__hi0bits>:
 4011bc4:	20bfffec 	andhi	r2,r4,65535
 4011bc8:	1000141e 	bne	r2,zero,4011c1c <__hi0bits+0x58>
 4011bcc:	2008943a 	slli	r4,r4,16
 4011bd0:	00800404 	movi	r2,16
 4011bd4:	20ffc02c 	andhi	r3,r4,65280
 4011bd8:	1800021e 	bne	r3,zero,4011be4 <__hi0bits+0x20>
 4011bdc:	2008923a 	slli	r4,r4,8
 4011be0:	10800204 	addi	r2,r2,8
 4011be4:	20fc002c 	andhi	r3,r4,61440
 4011be8:	1800021e 	bne	r3,zero,4011bf4 <__hi0bits+0x30>
 4011bec:	2008913a 	slli	r4,r4,4
 4011bf0:	10800104 	addi	r2,r2,4
 4011bf4:	20f0002c 	andhi	r3,r4,49152
 4011bf8:	1800031e 	bne	r3,zero,4011c08 <__hi0bits+0x44>
 4011bfc:	2109883a 	add	r4,r4,r4
 4011c00:	10800084 	addi	r2,r2,2
 4011c04:	2109883a 	add	r4,r4,r4
 4011c08:	20000316 	blt	r4,zero,4011c18 <__hi0bits+0x54>
 4011c0c:	2110002c 	andhi	r4,r4,16384
 4011c10:	2000041e 	bne	r4,zero,4011c24 <__hi0bits+0x60>
 4011c14:	00800804 	movi	r2,32
 4011c18:	f800283a 	ret
 4011c1c:	0005883a 	mov	r2,zero
 4011c20:	003fec06 	br	4011bd4 <__alt_data_end+0xfc011bd4>
 4011c24:	10800044 	addi	r2,r2,1
 4011c28:	f800283a 	ret

04011c2c <__lo0bits>:
 4011c2c:	20c00017 	ldw	r3,0(r4)
 4011c30:	188001cc 	andi	r2,r3,7
 4011c34:	10000826 	beq	r2,zero,4011c58 <__lo0bits+0x2c>
 4011c38:	1880004c 	andi	r2,r3,1
 4011c3c:	1000211e 	bne	r2,zero,4011cc4 <__lo0bits+0x98>
 4011c40:	1880008c 	andi	r2,r3,2
 4011c44:	1000211e 	bne	r2,zero,4011ccc <__lo0bits+0xa0>
 4011c48:	1806d0ba 	srli	r3,r3,2
 4011c4c:	00800084 	movi	r2,2
 4011c50:	20c00015 	stw	r3,0(r4)
 4011c54:	f800283a 	ret
 4011c58:	18bfffcc 	andi	r2,r3,65535
 4011c5c:	10001326 	beq	r2,zero,4011cac <__lo0bits+0x80>
 4011c60:	0005883a 	mov	r2,zero
 4011c64:	19403fcc 	andi	r5,r3,255
 4011c68:	2800021e 	bne	r5,zero,4011c74 <__lo0bits+0x48>
 4011c6c:	1806d23a 	srli	r3,r3,8
 4011c70:	10800204 	addi	r2,r2,8
 4011c74:	194003cc 	andi	r5,r3,15
 4011c78:	2800021e 	bne	r5,zero,4011c84 <__lo0bits+0x58>
 4011c7c:	1806d13a 	srli	r3,r3,4
 4011c80:	10800104 	addi	r2,r2,4
 4011c84:	194000cc 	andi	r5,r3,3
 4011c88:	2800021e 	bne	r5,zero,4011c94 <__lo0bits+0x68>
 4011c8c:	1806d0ba 	srli	r3,r3,2
 4011c90:	10800084 	addi	r2,r2,2
 4011c94:	1940004c 	andi	r5,r3,1
 4011c98:	2800081e 	bne	r5,zero,4011cbc <__lo0bits+0x90>
 4011c9c:	1806d07a 	srli	r3,r3,1
 4011ca0:	1800051e 	bne	r3,zero,4011cb8 <__lo0bits+0x8c>
 4011ca4:	00800804 	movi	r2,32
 4011ca8:	f800283a 	ret
 4011cac:	1806d43a 	srli	r3,r3,16
 4011cb0:	00800404 	movi	r2,16
 4011cb4:	003feb06 	br	4011c64 <__alt_data_end+0xfc011c64>
 4011cb8:	10800044 	addi	r2,r2,1
 4011cbc:	20c00015 	stw	r3,0(r4)
 4011cc0:	f800283a 	ret
 4011cc4:	0005883a 	mov	r2,zero
 4011cc8:	f800283a 	ret
 4011ccc:	1806d07a 	srli	r3,r3,1
 4011cd0:	00800044 	movi	r2,1
 4011cd4:	20c00015 	stw	r3,0(r4)
 4011cd8:	f800283a 	ret

04011cdc <__i2b>:
 4011cdc:	defffd04 	addi	sp,sp,-12
 4011ce0:	dc000015 	stw	r16,0(sp)
 4011ce4:	04000044 	movi	r16,1
 4011ce8:	dc400115 	stw	r17,4(sp)
 4011cec:	2823883a 	mov	r17,r5
 4011cf0:	800b883a 	mov	r5,r16
 4011cf4:	dfc00215 	stw	ra,8(sp)
 4011cf8:	40118a80 	call	40118a8 <_Balloc>
 4011cfc:	14400515 	stw	r17,20(r2)
 4011d00:	14000415 	stw	r16,16(r2)
 4011d04:	dfc00217 	ldw	ra,8(sp)
 4011d08:	dc400117 	ldw	r17,4(sp)
 4011d0c:	dc000017 	ldw	r16,0(sp)
 4011d10:	dec00304 	addi	sp,sp,12
 4011d14:	f800283a 	ret

04011d18 <__multiply>:
 4011d18:	deffef04 	addi	sp,sp,-68
 4011d1c:	dc400815 	stw	r17,32(sp)
 4011d20:	dc000715 	stw	r16,28(sp)
 4011d24:	34400417 	ldw	r17,16(r6)
 4011d28:	2c000417 	ldw	r16,16(r5)
 4011d2c:	dd800d15 	stw	r22,52(sp)
 4011d30:	dc800915 	stw	r18,36(sp)
 4011d34:	dfc01015 	stw	ra,64(sp)
 4011d38:	df000f15 	stw	fp,60(sp)
 4011d3c:	ddc00e15 	stw	r23,56(sp)
 4011d40:	dd400c15 	stw	r21,48(sp)
 4011d44:	dd000b15 	stw	r20,44(sp)
 4011d48:	dcc00a15 	stw	r19,40(sp)
 4011d4c:	2825883a 	mov	r18,r5
 4011d50:	302d883a 	mov	r22,r6
 4011d54:	8440050e 	bge	r16,r17,4011d6c <__multiply+0x54>
 4011d58:	8007883a 	mov	r3,r16
 4011d5c:	3025883a 	mov	r18,r6
 4011d60:	8821883a 	mov	r16,r17
 4011d64:	282d883a 	mov	r22,r5
 4011d68:	1823883a 	mov	r17,r3
 4011d6c:	90800217 	ldw	r2,8(r18)
 4011d70:	8447883a 	add	r3,r16,r17
 4011d74:	d8c00215 	stw	r3,8(sp)
 4011d78:	91400117 	ldw	r5,4(r18)
 4011d7c:	10c0010e 	bge	r2,r3,4011d84 <__multiply+0x6c>
 4011d80:	29400044 	addi	r5,r5,1
 4011d84:	40118a80 	call	40118a8 <_Balloc>
 4011d88:	d8c00217 	ldw	r3,8(sp)
 4011d8c:	d8800615 	stw	r2,24(sp)
 4011d90:	18eb883a 	add	r21,r3,r3
 4011d94:	ad6b883a 	add	r21,r21,r21
 4011d98:	10c00504 	addi	r3,r2,20
 4011d9c:	1d6b883a 	add	r21,r3,r21
 4011da0:	d8c00115 	stw	r3,4(sp)
 4011da4:	dd400315 	stw	r21,12(sp)
 4011da8:	1805883a 	mov	r2,r3
 4011dac:	1d40042e 	bgeu	r3,r21,4011dc0 <__multiply+0xa8>
 4011db0:	d8c00317 	ldw	r3,12(sp)
 4011db4:	10000015 	stw	zero,0(r2)
 4011db8:	10800104 	addi	r2,r2,4
 4011dbc:	10fffc36 	bltu	r2,r3,4011db0 <__alt_data_end+0xfc011db0>
 4011dc0:	8c63883a 	add	r17,r17,r17
 4011dc4:	b5800504 	addi	r22,r22,20
 4011dc8:	8c63883a 	add	r17,r17,r17
 4011dcc:	94800504 	addi	r18,r18,20
 4011dd0:	8421883a 	add	r16,r16,r16
 4011dd4:	b463883a 	add	r17,r22,r17
 4011dd8:	8421883a 	add	r16,r16,r16
 4011ddc:	dd800015 	stw	r22,0(sp)
 4011de0:	dc800415 	stw	r18,16(sp)
 4011de4:	dc400515 	stw	r17,20(sp)
 4011de8:	9429883a 	add	r20,r18,r16
 4011dec:	b4404f2e 	bgeu	r22,r17,4011f2c <__multiply+0x214>
 4011df0:	d8c00017 	ldw	r3,0(sp)
 4011df4:	1c800017 	ldw	r18,0(r3)
 4011df8:	947fffcc 	andi	r17,r18,65535
 4011dfc:	88001e26 	beq	r17,zero,4011e78 <__multiply+0x160>
 4011e00:	dd800117 	ldw	r22,4(sp)
 4011e04:	dd400417 	ldw	r21,16(sp)
 4011e08:	0027883a 	mov	r19,zero
 4011e0c:	ac800017 	ldw	r18,0(r21)
 4011e10:	b4000017 	ldw	r16,0(r22)
 4011e14:	880b883a 	mov	r5,r17
 4011e18:	913fffcc 	andi	r4,r18,65535
 4011e1c:	4007eb40 	call	4007eb4 <__mulsi3>
 4011e20:	9008d43a 	srli	r4,r18,16
 4011e24:	84bfffcc 	andi	r18,r16,65535
 4011e28:	1485883a 	add	r2,r2,r18
 4011e2c:	14e5883a 	add	r18,r2,r19
 4011e30:	8020d43a 	srli	r16,r16,16
 4011e34:	9026d43a 	srli	r19,r18,16
 4011e38:	880b883a 	mov	r5,r17
 4011e3c:	4007eb40 	call	4007eb4 <__mulsi3>
 4011e40:	1405883a 	add	r2,r2,r16
 4011e44:	14e1883a 	add	r16,r2,r19
 4011e48:	90ffffcc 	andi	r3,r18,65535
 4011e4c:	8024943a 	slli	r18,r16,16
 4011e50:	ad400104 	addi	r21,r21,4
 4011e54:	b005883a 	mov	r2,r22
 4011e58:	90c6b03a 	or	r3,r18,r3
 4011e5c:	b0c00015 	stw	r3,0(r22)
 4011e60:	8026d43a 	srli	r19,r16,16
 4011e64:	b5800104 	addi	r22,r22,4
 4011e68:	ad3fe836 	bltu	r21,r20,4011e0c <__alt_data_end+0xfc011e0c>
 4011e6c:	d8c00017 	ldw	r3,0(sp)
 4011e70:	14c00115 	stw	r19,4(r2)
 4011e74:	1c800017 	ldw	r18,0(r3)
 4011e78:	9024d43a 	srli	r18,r18,16
 4011e7c:	90002226 	beq	r18,zero,4011f08 <__multiply+0x1f0>
 4011e80:	d8c00117 	ldw	r3,4(sp)
 4011e84:	dd800417 	ldw	r22,16(sp)
 4011e88:	002f883a 	mov	r23,zero
 4011e8c:	1f000017 	ldw	fp,0(r3)
 4011e90:	1823883a 	mov	r17,r3
 4011e94:	182b883a 	mov	r21,r3
 4011e98:	e021883a 	mov	r16,fp
 4011e9c:	00000106 	br	4011ea4 <__multiply+0x18c>
 4011ea0:	982b883a 	mov	r21,r19
 4011ea4:	b100000b 	ldhu	r4,0(r22)
 4011ea8:	8020d43a 	srli	r16,r16,16
 4011eac:	900b883a 	mov	r5,r18
 4011eb0:	4007eb40 	call	4007eb4 <__mulsi3>
 4011eb4:	1405883a 	add	r2,r2,r16
 4011eb8:	15ef883a 	add	r23,r2,r23
 4011ebc:	b804943a 	slli	r2,r23,16
 4011ec0:	e0ffffcc 	andi	r3,fp,65535
 4011ec4:	8c400104 	addi	r17,r17,4
 4011ec8:	10c6b03a 	or	r3,r2,r3
 4011ecc:	88ffff15 	stw	r3,-4(r17)
 4011ed0:	b5800104 	addi	r22,r22,4
 4011ed4:	b13fff17 	ldw	r4,-4(r22)
 4011ed8:	acc00104 	addi	r19,r21,4
 4011edc:	900b883a 	mov	r5,r18
 4011ee0:	2008d43a 	srli	r4,r4,16
 4011ee4:	9c000017 	ldw	r16,0(r19)
 4011ee8:	4007eb40 	call	4007eb4 <__mulsi3>
 4011eec:	b806d43a 	srli	r3,r23,16
 4011ef0:	813fffcc 	andi	r4,r16,65535
 4011ef4:	1105883a 	add	r2,r2,r4
 4011ef8:	10f9883a 	add	fp,r2,r3
 4011efc:	e02ed43a 	srli	r23,fp,16
 4011f00:	b53fe736 	bltu	r22,r20,4011ea0 <__alt_data_end+0xfc011ea0>
 4011f04:	af000115 	stw	fp,4(r21)
 4011f08:	d8c00017 	ldw	r3,0(sp)
 4011f0c:	d9000517 	ldw	r4,20(sp)
 4011f10:	18c00104 	addi	r3,r3,4
 4011f14:	d8c00015 	stw	r3,0(sp)
 4011f18:	d8c00117 	ldw	r3,4(sp)
 4011f1c:	18c00104 	addi	r3,r3,4
 4011f20:	d8c00115 	stw	r3,4(sp)
 4011f24:	d8c00017 	ldw	r3,0(sp)
 4011f28:	193fb136 	bltu	r3,r4,4011df0 <__alt_data_end+0xfc011df0>
 4011f2c:	d8c00217 	ldw	r3,8(sp)
 4011f30:	00c00c0e 	bge	zero,r3,4011f64 <__multiply+0x24c>
 4011f34:	d8c00317 	ldw	r3,12(sp)
 4011f38:	18bfff17 	ldw	r2,-4(r3)
 4011f3c:	1d7fff04 	addi	r21,r3,-4
 4011f40:	10000326 	beq	r2,zero,4011f50 <__multiply+0x238>
 4011f44:	00000706 	br	4011f64 <__multiply+0x24c>
 4011f48:	a8800017 	ldw	r2,0(r21)
 4011f4c:	1000051e 	bne	r2,zero,4011f64 <__multiply+0x24c>
 4011f50:	d8c00217 	ldw	r3,8(sp)
 4011f54:	ad7fff04 	addi	r21,r21,-4
 4011f58:	18ffffc4 	addi	r3,r3,-1
 4011f5c:	d8c00215 	stw	r3,8(sp)
 4011f60:	183ff91e 	bne	r3,zero,4011f48 <__alt_data_end+0xfc011f48>
 4011f64:	d8c00617 	ldw	r3,24(sp)
 4011f68:	d9000217 	ldw	r4,8(sp)
 4011f6c:	1805883a 	mov	r2,r3
 4011f70:	19000415 	stw	r4,16(r3)
 4011f74:	dfc01017 	ldw	ra,64(sp)
 4011f78:	df000f17 	ldw	fp,60(sp)
 4011f7c:	ddc00e17 	ldw	r23,56(sp)
 4011f80:	dd800d17 	ldw	r22,52(sp)
 4011f84:	dd400c17 	ldw	r21,48(sp)
 4011f88:	dd000b17 	ldw	r20,44(sp)
 4011f8c:	dcc00a17 	ldw	r19,40(sp)
 4011f90:	dc800917 	ldw	r18,36(sp)
 4011f94:	dc400817 	ldw	r17,32(sp)
 4011f98:	dc000717 	ldw	r16,28(sp)
 4011f9c:	dec01104 	addi	sp,sp,68
 4011fa0:	f800283a 	ret

04011fa4 <__pow5mult>:
 4011fa4:	defffa04 	addi	sp,sp,-24
 4011fa8:	dcc00315 	stw	r19,12(sp)
 4011fac:	dc000015 	stw	r16,0(sp)
 4011fb0:	dfc00515 	stw	ra,20(sp)
 4011fb4:	dd000415 	stw	r20,16(sp)
 4011fb8:	dc800215 	stw	r18,8(sp)
 4011fbc:	dc400115 	stw	r17,4(sp)
 4011fc0:	308000cc 	andi	r2,r6,3
 4011fc4:	3021883a 	mov	r16,r6
 4011fc8:	2027883a 	mov	r19,r4
 4011fcc:	10002f1e 	bne	r2,zero,401208c <__pow5mult+0xe8>
 4011fd0:	2825883a 	mov	r18,r5
 4011fd4:	8021d0ba 	srai	r16,r16,2
 4011fd8:	80001a26 	beq	r16,zero,4012044 <__pow5mult+0xa0>
 4011fdc:	9c401217 	ldw	r17,72(r19)
 4011fe0:	8800061e 	bne	r17,zero,4011ffc <__pow5mult+0x58>
 4011fe4:	00003406 	br	40120b8 <__pow5mult+0x114>
 4011fe8:	8021d07a 	srai	r16,r16,1
 4011fec:	80001526 	beq	r16,zero,4012044 <__pow5mult+0xa0>
 4011ff0:	88800017 	ldw	r2,0(r17)
 4011ff4:	10001c26 	beq	r2,zero,4012068 <__pow5mult+0xc4>
 4011ff8:	1023883a 	mov	r17,r2
 4011ffc:	8080004c 	andi	r2,r16,1
 4012000:	103ff926 	beq	r2,zero,4011fe8 <__alt_data_end+0xfc011fe8>
 4012004:	880d883a 	mov	r6,r17
 4012008:	900b883a 	mov	r5,r18
 401200c:	9809883a 	mov	r4,r19
 4012010:	4011d180 	call	4011d18 <__multiply>
 4012014:	90001b26 	beq	r18,zero,4012084 <__pow5mult+0xe0>
 4012018:	91000117 	ldw	r4,4(r18)
 401201c:	98c01317 	ldw	r3,76(r19)
 4012020:	8021d07a 	srai	r16,r16,1
 4012024:	2109883a 	add	r4,r4,r4
 4012028:	2109883a 	add	r4,r4,r4
 401202c:	1907883a 	add	r3,r3,r4
 4012030:	19000017 	ldw	r4,0(r3)
 4012034:	91000015 	stw	r4,0(r18)
 4012038:	1c800015 	stw	r18,0(r3)
 401203c:	1025883a 	mov	r18,r2
 4012040:	803feb1e 	bne	r16,zero,4011ff0 <__alt_data_end+0xfc011ff0>
 4012044:	9005883a 	mov	r2,r18
 4012048:	dfc00517 	ldw	ra,20(sp)
 401204c:	dd000417 	ldw	r20,16(sp)
 4012050:	dcc00317 	ldw	r19,12(sp)
 4012054:	dc800217 	ldw	r18,8(sp)
 4012058:	dc400117 	ldw	r17,4(sp)
 401205c:	dc000017 	ldw	r16,0(sp)
 4012060:	dec00604 	addi	sp,sp,24
 4012064:	f800283a 	ret
 4012068:	880d883a 	mov	r6,r17
 401206c:	880b883a 	mov	r5,r17
 4012070:	9809883a 	mov	r4,r19
 4012074:	4011d180 	call	4011d18 <__multiply>
 4012078:	88800015 	stw	r2,0(r17)
 401207c:	10000015 	stw	zero,0(r2)
 4012080:	003fdd06 	br	4011ff8 <__alt_data_end+0xfc011ff8>
 4012084:	1025883a 	mov	r18,r2
 4012088:	003fd706 	br	4011fe8 <__alt_data_end+0xfc011fe8>
 401208c:	10bfffc4 	addi	r2,r2,-1
 4012090:	1085883a 	add	r2,r2,r2
 4012094:	00c100b4 	movhi	r3,1026
 4012098:	18eba904 	addi	r3,r3,-20828
 401209c:	1085883a 	add	r2,r2,r2
 40120a0:	1885883a 	add	r2,r3,r2
 40120a4:	11800017 	ldw	r6,0(r2)
 40120a8:	000f883a 	mov	r7,zero
 40120ac:	40119780 	call	4011978 <__multadd>
 40120b0:	1025883a 	mov	r18,r2
 40120b4:	003fc706 	br	4011fd4 <__alt_data_end+0xfc011fd4>
 40120b8:	05000044 	movi	r20,1
 40120bc:	a00b883a 	mov	r5,r20
 40120c0:	9809883a 	mov	r4,r19
 40120c4:	40118a80 	call	40118a8 <_Balloc>
 40120c8:	1023883a 	mov	r17,r2
 40120cc:	00809c44 	movi	r2,625
 40120d0:	88800515 	stw	r2,20(r17)
 40120d4:	8d000415 	stw	r20,16(r17)
 40120d8:	9c401215 	stw	r17,72(r19)
 40120dc:	88000015 	stw	zero,0(r17)
 40120e0:	003fc606 	br	4011ffc <__alt_data_end+0xfc011ffc>

040120e4 <__lshift>:
 40120e4:	defff904 	addi	sp,sp,-28
 40120e8:	dd400515 	stw	r21,20(sp)
 40120ec:	dcc00315 	stw	r19,12(sp)
 40120f0:	302bd17a 	srai	r21,r6,5
 40120f4:	2cc00417 	ldw	r19,16(r5)
 40120f8:	28800217 	ldw	r2,8(r5)
 40120fc:	dd000415 	stw	r20,16(sp)
 4012100:	ace7883a 	add	r19,r21,r19
 4012104:	dc800215 	stw	r18,8(sp)
 4012108:	dc400115 	stw	r17,4(sp)
 401210c:	dc000015 	stw	r16,0(sp)
 4012110:	dfc00615 	stw	ra,24(sp)
 4012114:	9c000044 	addi	r16,r19,1
 4012118:	2823883a 	mov	r17,r5
 401211c:	3029883a 	mov	r20,r6
 4012120:	2025883a 	mov	r18,r4
 4012124:	29400117 	ldw	r5,4(r5)
 4012128:	1400030e 	bge	r2,r16,4012138 <__lshift+0x54>
 401212c:	1085883a 	add	r2,r2,r2
 4012130:	29400044 	addi	r5,r5,1
 4012134:	143ffd16 	blt	r2,r16,401212c <__alt_data_end+0xfc01212c>
 4012138:	9009883a 	mov	r4,r18
 401213c:	40118a80 	call	40118a8 <_Balloc>
 4012140:	10c00504 	addi	r3,r2,20
 4012144:	0540070e 	bge	zero,r21,4012164 <__lshift+0x80>
 4012148:	ad6b883a 	add	r21,r21,r21
 401214c:	ad6b883a 	add	r21,r21,r21
 4012150:	1809883a 	mov	r4,r3
 4012154:	1d47883a 	add	r3,r3,r21
 4012158:	20000015 	stw	zero,0(r4)
 401215c:	21000104 	addi	r4,r4,4
 4012160:	193ffd1e 	bne	r3,r4,4012158 <__alt_data_end+0xfc012158>
 4012164:	8a000417 	ldw	r8,16(r17)
 4012168:	89000504 	addi	r4,r17,20
 401216c:	a18007cc 	andi	r6,r20,31
 4012170:	4211883a 	add	r8,r8,r8
 4012174:	4211883a 	add	r8,r8,r8
 4012178:	2211883a 	add	r8,r4,r8
 401217c:	30002326 	beq	r6,zero,401220c <__lshift+0x128>
 4012180:	02400804 	movi	r9,32
 4012184:	4993c83a 	sub	r9,r9,r6
 4012188:	000b883a 	mov	r5,zero
 401218c:	21c00017 	ldw	r7,0(r4)
 4012190:	1815883a 	mov	r10,r3
 4012194:	18c00104 	addi	r3,r3,4
 4012198:	398e983a 	sll	r7,r7,r6
 401219c:	21000104 	addi	r4,r4,4
 40121a0:	394ab03a 	or	r5,r7,r5
 40121a4:	197fff15 	stw	r5,-4(r3)
 40121a8:	217fff17 	ldw	r5,-4(r4)
 40121ac:	2a4ad83a 	srl	r5,r5,r9
 40121b0:	223ff636 	bltu	r4,r8,401218c <__alt_data_end+0xfc01218c>
 40121b4:	51400115 	stw	r5,4(r10)
 40121b8:	28001a1e 	bne	r5,zero,4012224 <__lshift+0x140>
 40121bc:	843fffc4 	addi	r16,r16,-1
 40121c0:	14000415 	stw	r16,16(r2)
 40121c4:	88000826 	beq	r17,zero,40121e8 <__lshift+0x104>
 40121c8:	89000117 	ldw	r4,4(r17)
 40121cc:	90c01317 	ldw	r3,76(r18)
 40121d0:	2109883a 	add	r4,r4,r4
 40121d4:	2109883a 	add	r4,r4,r4
 40121d8:	1907883a 	add	r3,r3,r4
 40121dc:	19000017 	ldw	r4,0(r3)
 40121e0:	89000015 	stw	r4,0(r17)
 40121e4:	1c400015 	stw	r17,0(r3)
 40121e8:	dfc00617 	ldw	ra,24(sp)
 40121ec:	dd400517 	ldw	r21,20(sp)
 40121f0:	dd000417 	ldw	r20,16(sp)
 40121f4:	dcc00317 	ldw	r19,12(sp)
 40121f8:	dc800217 	ldw	r18,8(sp)
 40121fc:	dc400117 	ldw	r17,4(sp)
 4012200:	dc000017 	ldw	r16,0(sp)
 4012204:	dec00704 	addi	sp,sp,28
 4012208:	f800283a 	ret
 401220c:	21400017 	ldw	r5,0(r4)
 4012210:	18c00104 	addi	r3,r3,4
 4012214:	21000104 	addi	r4,r4,4
 4012218:	197fff15 	stw	r5,-4(r3)
 401221c:	223ffb36 	bltu	r4,r8,401220c <__alt_data_end+0xfc01220c>
 4012220:	003fe606 	br	40121bc <__alt_data_end+0xfc0121bc>
 4012224:	9c000084 	addi	r16,r19,2
 4012228:	003fe406 	br	40121bc <__alt_data_end+0xfc0121bc>

0401222c <__mcmp>:
 401222c:	20800417 	ldw	r2,16(r4)
 4012230:	28c00417 	ldw	r3,16(r5)
 4012234:	10c5c83a 	sub	r2,r2,r3
 4012238:	1000111e 	bne	r2,zero,4012280 <__mcmp+0x54>
 401223c:	18c7883a 	add	r3,r3,r3
 4012240:	18c7883a 	add	r3,r3,r3
 4012244:	21000504 	addi	r4,r4,20
 4012248:	29400504 	addi	r5,r5,20
 401224c:	20c5883a 	add	r2,r4,r3
 4012250:	28cb883a 	add	r5,r5,r3
 4012254:	00000106 	br	401225c <__mcmp+0x30>
 4012258:	20800a2e 	bgeu	r4,r2,4012284 <__mcmp+0x58>
 401225c:	10bfff04 	addi	r2,r2,-4
 4012260:	297fff04 	addi	r5,r5,-4
 4012264:	11800017 	ldw	r6,0(r2)
 4012268:	28c00017 	ldw	r3,0(r5)
 401226c:	30fffa26 	beq	r6,r3,4012258 <__alt_data_end+0xfc012258>
 4012270:	30c00236 	bltu	r6,r3,401227c <__mcmp+0x50>
 4012274:	00800044 	movi	r2,1
 4012278:	f800283a 	ret
 401227c:	00bfffc4 	movi	r2,-1
 4012280:	f800283a 	ret
 4012284:	0005883a 	mov	r2,zero
 4012288:	f800283a 	ret

0401228c <__mdiff>:
 401228c:	28c00417 	ldw	r3,16(r5)
 4012290:	30800417 	ldw	r2,16(r6)
 4012294:	defffa04 	addi	sp,sp,-24
 4012298:	dcc00315 	stw	r19,12(sp)
 401229c:	dc800215 	stw	r18,8(sp)
 40122a0:	dfc00515 	stw	ra,20(sp)
 40122a4:	dd000415 	stw	r20,16(sp)
 40122a8:	dc400115 	stw	r17,4(sp)
 40122ac:	dc000015 	stw	r16,0(sp)
 40122b0:	1887c83a 	sub	r3,r3,r2
 40122b4:	2825883a 	mov	r18,r5
 40122b8:	3027883a 	mov	r19,r6
 40122bc:	1800141e 	bne	r3,zero,4012310 <__mdiff+0x84>
 40122c0:	1085883a 	add	r2,r2,r2
 40122c4:	1085883a 	add	r2,r2,r2
 40122c8:	2a000504 	addi	r8,r5,20
 40122cc:	34000504 	addi	r16,r6,20
 40122d0:	4087883a 	add	r3,r8,r2
 40122d4:	8085883a 	add	r2,r16,r2
 40122d8:	00000106 	br	40122e0 <__mdiff+0x54>
 40122dc:	40c0592e 	bgeu	r8,r3,4012444 <__mdiff+0x1b8>
 40122e0:	18ffff04 	addi	r3,r3,-4
 40122e4:	10bfff04 	addi	r2,r2,-4
 40122e8:	19c00017 	ldw	r7,0(r3)
 40122ec:	11400017 	ldw	r5,0(r2)
 40122f0:	397ffa26 	beq	r7,r5,40122dc <__alt_data_end+0xfc0122dc>
 40122f4:	3940592e 	bgeu	r7,r5,401245c <__mdiff+0x1d0>
 40122f8:	9005883a 	mov	r2,r18
 40122fc:	4023883a 	mov	r17,r8
 4012300:	9825883a 	mov	r18,r19
 4012304:	05000044 	movi	r20,1
 4012308:	1027883a 	mov	r19,r2
 401230c:	00000406 	br	4012320 <__mdiff+0x94>
 4012310:	18005616 	blt	r3,zero,401246c <__mdiff+0x1e0>
 4012314:	34400504 	addi	r17,r6,20
 4012318:	2c000504 	addi	r16,r5,20
 401231c:	0029883a 	mov	r20,zero
 4012320:	91400117 	ldw	r5,4(r18)
 4012324:	40118a80 	call	40118a8 <_Balloc>
 4012328:	92400417 	ldw	r9,16(r18)
 401232c:	9b000417 	ldw	r12,16(r19)
 4012330:	12c00504 	addi	r11,r2,20
 4012334:	4a51883a 	add	r8,r9,r9
 4012338:	6319883a 	add	r12,r12,r12
 401233c:	4211883a 	add	r8,r8,r8
 4012340:	6319883a 	add	r12,r12,r12
 4012344:	15000315 	stw	r20,12(r2)
 4012348:	8211883a 	add	r8,r16,r8
 401234c:	8b19883a 	add	r12,r17,r12
 4012350:	0007883a 	mov	r3,zero
 4012354:	81400017 	ldw	r5,0(r16)
 4012358:	89c00017 	ldw	r7,0(r17)
 401235c:	59800104 	addi	r6,r11,4
 4012360:	293fffcc 	andi	r4,r5,65535
 4012364:	20c7883a 	add	r3,r4,r3
 4012368:	393fffcc 	andi	r4,r7,65535
 401236c:	1909c83a 	sub	r4,r3,r4
 4012370:	280ad43a 	srli	r5,r5,16
 4012374:	380ed43a 	srli	r7,r7,16
 4012378:	2007d43a 	srai	r3,r4,16
 401237c:	213fffcc 	andi	r4,r4,65535
 4012380:	29cbc83a 	sub	r5,r5,r7
 4012384:	28c7883a 	add	r3,r5,r3
 4012388:	180a943a 	slli	r5,r3,16
 401238c:	8c400104 	addi	r17,r17,4
 4012390:	84000104 	addi	r16,r16,4
 4012394:	2908b03a 	or	r4,r5,r4
 4012398:	59000015 	stw	r4,0(r11)
 401239c:	1807d43a 	srai	r3,r3,16
 40123a0:	3015883a 	mov	r10,r6
 40123a4:	3017883a 	mov	r11,r6
 40123a8:	8b3fea36 	bltu	r17,r12,4012354 <__alt_data_end+0xfc012354>
 40123ac:	8200162e 	bgeu	r16,r8,4012408 <__mdiff+0x17c>
 40123b0:	8017883a 	mov	r11,r16
 40123b4:	59400017 	ldw	r5,0(r11)
 40123b8:	31800104 	addi	r6,r6,4
 40123bc:	5ac00104 	addi	r11,r11,4
 40123c0:	293fffcc 	andi	r4,r5,65535
 40123c4:	20c7883a 	add	r3,r4,r3
 40123c8:	280ed43a 	srli	r7,r5,16
 40123cc:	180bd43a 	srai	r5,r3,16
 40123d0:	193fffcc 	andi	r4,r3,65535
 40123d4:	3947883a 	add	r3,r7,r5
 40123d8:	180a943a 	slli	r5,r3,16
 40123dc:	1807d43a 	srai	r3,r3,16
 40123e0:	2908b03a 	or	r4,r5,r4
 40123e4:	313fff15 	stw	r4,-4(r6)
 40123e8:	5a3ff236 	bltu	r11,r8,40123b4 <__alt_data_end+0xfc0123b4>
 40123ec:	0406303a 	nor	r3,zero,r16
 40123f0:	1a07883a 	add	r3,r3,r8
 40123f4:	1806d0ba 	srli	r3,r3,2
 40123f8:	18c00044 	addi	r3,r3,1
 40123fc:	18c7883a 	add	r3,r3,r3
 4012400:	18c7883a 	add	r3,r3,r3
 4012404:	50d5883a 	add	r10,r10,r3
 4012408:	50ffff04 	addi	r3,r10,-4
 401240c:	2000041e 	bne	r4,zero,4012420 <__mdiff+0x194>
 4012410:	18ffff04 	addi	r3,r3,-4
 4012414:	19000017 	ldw	r4,0(r3)
 4012418:	4a7fffc4 	addi	r9,r9,-1
 401241c:	203ffc26 	beq	r4,zero,4012410 <__alt_data_end+0xfc012410>
 4012420:	12400415 	stw	r9,16(r2)
 4012424:	dfc00517 	ldw	ra,20(sp)
 4012428:	dd000417 	ldw	r20,16(sp)
 401242c:	dcc00317 	ldw	r19,12(sp)
 4012430:	dc800217 	ldw	r18,8(sp)
 4012434:	dc400117 	ldw	r17,4(sp)
 4012438:	dc000017 	ldw	r16,0(sp)
 401243c:	dec00604 	addi	sp,sp,24
 4012440:	f800283a 	ret
 4012444:	000b883a 	mov	r5,zero
 4012448:	40118a80 	call	40118a8 <_Balloc>
 401244c:	00c00044 	movi	r3,1
 4012450:	10c00415 	stw	r3,16(r2)
 4012454:	10000515 	stw	zero,20(r2)
 4012458:	003ff206 	br	4012424 <__alt_data_end+0xfc012424>
 401245c:	8023883a 	mov	r17,r16
 4012460:	0029883a 	mov	r20,zero
 4012464:	4021883a 	mov	r16,r8
 4012468:	003fad06 	br	4012320 <__alt_data_end+0xfc012320>
 401246c:	9005883a 	mov	r2,r18
 4012470:	94400504 	addi	r17,r18,20
 4012474:	9c000504 	addi	r16,r19,20
 4012478:	9825883a 	mov	r18,r19
 401247c:	05000044 	movi	r20,1
 4012480:	1027883a 	mov	r19,r2
 4012484:	003fa606 	br	4012320 <__alt_data_end+0xfc012320>

04012488 <__ulp>:
 4012488:	295ffc2c 	andhi	r5,r5,32752
 401248c:	00bf3034 	movhi	r2,64704
 4012490:	2887883a 	add	r3,r5,r2
 4012494:	00c0020e 	bge	zero,r3,40124a0 <__ulp+0x18>
 4012498:	0005883a 	mov	r2,zero
 401249c:	f800283a 	ret
 40124a0:	00c7c83a 	sub	r3,zero,r3
 40124a4:	1807d53a 	srai	r3,r3,20
 40124a8:	008004c4 	movi	r2,19
 40124ac:	10c00b0e 	bge	r2,r3,40124dc <__ulp+0x54>
 40124b0:	18bffb04 	addi	r2,r3,-20
 40124b4:	01000784 	movi	r4,30
 40124b8:	0007883a 	mov	r3,zero
 40124bc:	20800516 	blt	r4,r2,40124d4 <__ulp+0x4c>
 40124c0:	010007c4 	movi	r4,31
 40124c4:	2089c83a 	sub	r4,r4,r2
 40124c8:	00800044 	movi	r2,1
 40124cc:	1104983a 	sll	r2,r2,r4
 40124d0:	f800283a 	ret
 40124d4:	00800044 	movi	r2,1
 40124d8:	f800283a 	ret
 40124dc:	01400234 	movhi	r5,8
 40124e0:	28c7d83a 	sra	r3,r5,r3
 40124e4:	0005883a 	mov	r2,zero
 40124e8:	f800283a 	ret

040124ec <__b2d>:
 40124ec:	defffa04 	addi	sp,sp,-24
 40124f0:	dc000015 	stw	r16,0(sp)
 40124f4:	24000417 	ldw	r16,16(r4)
 40124f8:	dc400115 	stw	r17,4(sp)
 40124fc:	24400504 	addi	r17,r4,20
 4012500:	8421883a 	add	r16,r16,r16
 4012504:	8421883a 	add	r16,r16,r16
 4012508:	8c21883a 	add	r16,r17,r16
 401250c:	dc800215 	stw	r18,8(sp)
 4012510:	84bfff17 	ldw	r18,-4(r16)
 4012514:	dd000415 	stw	r20,16(sp)
 4012518:	dcc00315 	stw	r19,12(sp)
 401251c:	9009883a 	mov	r4,r18
 4012520:	2829883a 	mov	r20,r5
 4012524:	dfc00515 	stw	ra,20(sp)
 4012528:	4011bc40 	call	4011bc4 <__hi0bits>
 401252c:	00c00804 	movi	r3,32
 4012530:	1889c83a 	sub	r4,r3,r2
 4012534:	a1000015 	stw	r4,0(r20)
 4012538:	01000284 	movi	r4,10
 401253c:	84ffff04 	addi	r19,r16,-4
 4012540:	20801216 	blt	r4,r2,401258c <__b2d+0xa0>
 4012544:	018002c4 	movi	r6,11
 4012548:	308dc83a 	sub	r6,r6,r2
 401254c:	9186d83a 	srl	r3,r18,r6
 4012550:	18cffc34 	orhi	r3,r3,16368
 4012554:	8cc0212e 	bgeu	r17,r19,40125dc <__b2d+0xf0>
 4012558:	813ffe17 	ldw	r4,-8(r16)
 401255c:	218cd83a 	srl	r6,r4,r6
 4012560:	10800544 	addi	r2,r2,21
 4012564:	9084983a 	sll	r2,r18,r2
 4012568:	1184b03a 	or	r2,r2,r6
 401256c:	dfc00517 	ldw	ra,20(sp)
 4012570:	dd000417 	ldw	r20,16(sp)
 4012574:	dcc00317 	ldw	r19,12(sp)
 4012578:	dc800217 	ldw	r18,8(sp)
 401257c:	dc400117 	ldw	r17,4(sp)
 4012580:	dc000017 	ldw	r16,0(sp)
 4012584:	dec00604 	addi	sp,sp,24
 4012588:	f800283a 	ret
 401258c:	8cc00f2e 	bgeu	r17,r19,40125cc <__b2d+0xe0>
 4012590:	117ffd44 	addi	r5,r2,-11
 4012594:	80bffe17 	ldw	r2,-8(r16)
 4012598:	28000e26 	beq	r5,zero,40125d4 <__b2d+0xe8>
 401259c:	1949c83a 	sub	r4,r3,r5
 40125a0:	9164983a 	sll	r18,r18,r5
 40125a4:	1106d83a 	srl	r3,r2,r4
 40125a8:	81bffe04 	addi	r6,r16,-8
 40125ac:	948ffc34 	orhi	r18,r18,16368
 40125b0:	90c6b03a 	or	r3,r18,r3
 40125b4:	89800e2e 	bgeu	r17,r6,40125f0 <__b2d+0x104>
 40125b8:	81bffd17 	ldw	r6,-12(r16)
 40125bc:	1144983a 	sll	r2,r2,r5
 40125c0:	310ad83a 	srl	r5,r6,r4
 40125c4:	2884b03a 	or	r2,r5,r2
 40125c8:	003fe806 	br	401256c <__alt_data_end+0xfc01256c>
 40125cc:	10bffd44 	addi	r2,r2,-11
 40125d0:	1000041e 	bne	r2,zero,40125e4 <__b2d+0xf8>
 40125d4:	90cffc34 	orhi	r3,r18,16368
 40125d8:	003fe406 	br	401256c <__alt_data_end+0xfc01256c>
 40125dc:	000d883a 	mov	r6,zero
 40125e0:	003fdf06 	br	4012560 <__alt_data_end+0xfc012560>
 40125e4:	90a4983a 	sll	r18,r18,r2
 40125e8:	0005883a 	mov	r2,zero
 40125ec:	003ff906 	br	40125d4 <__alt_data_end+0xfc0125d4>
 40125f0:	1144983a 	sll	r2,r2,r5
 40125f4:	003fdd06 	br	401256c <__alt_data_end+0xfc01256c>

040125f8 <__d2b>:
 40125f8:	defff804 	addi	sp,sp,-32
 40125fc:	dc000215 	stw	r16,8(sp)
 4012600:	3021883a 	mov	r16,r6
 4012604:	dc400315 	stw	r17,12(sp)
 4012608:	8022907a 	slli	r17,r16,1
 401260c:	dd000615 	stw	r20,24(sp)
 4012610:	2829883a 	mov	r20,r5
 4012614:	01400044 	movi	r5,1
 4012618:	dcc00515 	stw	r19,20(sp)
 401261c:	dc800415 	stw	r18,16(sp)
 4012620:	dfc00715 	stw	ra,28(sp)
 4012624:	3825883a 	mov	r18,r7
 4012628:	8822d57a 	srli	r17,r17,21
 401262c:	40118a80 	call	40118a8 <_Balloc>
 4012630:	1027883a 	mov	r19,r2
 4012634:	00800434 	movhi	r2,16
 4012638:	10bfffc4 	addi	r2,r2,-1
 401263c:	808c703a 	and	r6,r16,r2
 4012640:	88000126 	beq	r17,zero,4012648 <__d2b+0x50>
 4012644:	31800434 	orhi	r6,r6,16
 4012648:	d9800015 	stw	r6,0(sp)
 401264c:	a0002426 	beq	r20,zero,40126e0 <__d2b+0xe8>
 4012650:	d9000104 	addi	r4,sp,4
 4012654:	dd000115 	stw	r20,4(sp)
 4012658:	4011c2c0 	call	4011c2c <__lo0bits>
 401265c:	d8c00017 	ldw	r3,0(sp)
 4012660:	10002f1e 	bne	r2,zero,4012720 <__d2b+0x128>
 4012664:	d9000117 	ldw	r4,4(sp)
 4012668:	99000515 	stw	r4,20(r19)
 401266c:	1821003a 	cmpeq	r16,r3,zero
 4012670:	01000084 	movi	r4,2
 4012674:	2421c83a 	sub	r16,r4,r16
 4012678:	98c00615 	stw	r3,24(r19)
 401267c:	9c000415 	stw	r16,16(r19)
 4012680:	88001f1e 	bne	r17,zero,4012700 <__d2b+0x108>
 4012684:	10bef384 	addi	r2,r2,-1074
 4012688:	90800015 	stw	r2,0(r18)
 401268c:	00900034 	movhi	r2,16384
 4012690:	10bfffc4 	addi	r2,r2,-1
 4012694:	8085883a 	add	r2,r16,r2
 4012698:	1085883a 	add	r2,r2,r2
 401269c:	1085883a 	add	r2,r2,r2
 40126a0:	9885883a 	add	r2,r19,r2
 40126a4:	11000517 	ldw	r4,20(r2)
 40126a8:	8020917a 	slli	r16,r16,5
 40126ac:	4011bc40 	call	4011bc4 <__hi0bits>
 40126b0:	d8c00817 	ldw	r3,32(sp)
 40126b4:	8085c83a 	sub	r2,r16,r2
 40126b8:	18800015 	stw	r2,0(r3)
 40126bc:	9805883a 	mov	r2,r19
 40126c0:	dfc00717 	ldw	ra,28(sp)
 40126c4:	dd000617 	ldw	r20,24(sp)
 40126c8:	dcc00517 	ldw	r19,20(sp)
 40126cc:	dc800417 	ldw	r18,16(sp)
 40126d0:	dc400317 	ldw	r17,12(sp)
 40126d4:	dc000217 	ldw	r16,8(sp)
 40126d8:	dec00804 	addi	sp,sp,32
 40126dc:	f800283a 	ret
 40126e0:	d809883a 	mov	r4,sp
 40126e4:	4011c2c0 	call	4011c2c <__lo0bits>
 40126e8:	d8c00017 	ldw	r3,0(sp)
 40126ec:	04000044 	movi	r16,1
 40126f0:	9c000415 	stw	r16,16(r19)
 40126f4:	98c00515 	stw	r3,20(r19)
 40126f8:	10800804 	addi	r2,r2,32
 40126fc:	883fe126 	beq	r17,zero,4012684 <__alt_data_end+0xfc012684>
 4012700:	00c00d44 	movi	r3,53
 4012704:	8c7ef344 	addi	r17,r17,-1075
 4012708:	88a3883a 	add	r17,r17,r2
 401270c:	1885c83a 	sub	r2,r3,r2
 4012710:	d8c00817 	ldw	r3,32(sp)
 4012714:	94400015 	stw	r17,0(r18)
 4012718:	18800015 	stw	r2,0(r3)
 401271c:	003fe706 	br	40126bc <__alt_data_end+0xfc0126bc>
 4012720:	01000804 	movi	r4,32
 4012724:	2089c83a 	sub	r4,r4,r2
 4012728:	1908983a 	sll	r4,r3,r4
 401272c:	d9400117 	ldw	r5,4(sp)
 4012730:	1886d83a 	srl	r3,r3,r2
 4012734:	2148b03a 	or	r4,r4,r5
 4012738:	99000515 	stw	r4,20(r19)
 401273c:	d8c00015 	stw	r3,0(sp)
 4012740:	003fca06 	br	401266c <__alt_data_end+0xfc01266c>

04012744 <__ratio>:
 4012744:	defff904 	addi	sp,sp,-28
 4012748:	dc400315 	stw	r17,12(sp)
 401274c:	2823883a 	mov	r17,r5
 4012750:	d9400104 	addi	r5,sp,4
 4012754:	dfc00615 	stw	ra,24(sp)
 4012758:	dcc00515 	stw	r19,20(sp)
 401275c:	dc800415 	stw	r18,16(sp)
 4012760:	2027883a 	mov	r19,r4
 4012764:	dc000215 	stw	r16,8(sp)
 4012768:	40124ec0 	call	40124ec <__b2d>
 401276c:	d80b883a 	mov	r5,sp
 4012770:	8809883a 	mov	r4,r17
 4012774:	1025883a 	mov	r18,r2
 4012778:	1821883a 	mov	r16,r3
 401277c:	40124ec0 	call	40124ec <__b2d>
 4012780:	8a000417 	ldw	r8,16(r17)
 4012784:	99000417 	ldw	r4,16(r19)
 4012788:	d9400117 	ldw	r5,4(sp)
 401278c:	2209c83a 	sub	r4,r4,r8
 4012790:	2010917a 	slli	r8,r4,5
 4012794:	d9000017 	ldw	r4,0(sp)
 4012798:	2909c83a 	sub	r4,r5,r4
 401279c:	4109883a 	add	r4,r8,r4
 40127a0:	01000e0e 	bge	zero,r4,40127dc <__ratio+0x98>
 40127a4:	2008953a 	slli	r4,r4,20
 40127a8:	2421883a 	add	r16,r4,r16
 40127ac:	100d883a 	mov	r6,r2
 40127b0:	180f883a 	mov	r7,r3
 40127b4:	9009883a 	mov	r4,r18
 40127b8:	800b883a 	mov	r5,r16
 40127bc:	40096540 	call	4009654 <__divdf3>
 40127c0:	dfc00617 	ldw	ra,24(sp)
 40127c4:	dcc00517 	ldw	r19,20(sp)
 40127c8:	dc800417 	ldw	r18,16(sp)
 40127cc:	dc400317 	ldw	r17,12(sp)
 40127d0:	dc000217 	ldw	r16,8(sp)
 40127d4:	dec00704 	addi	sp,sp,28
 40127d8:	f800283a 	ret
 40127dc:	2008953a 	slli	r4,r4,20
 40127e0:	1907c83a 	sub	r3,r3,r4
 40127e4:	003ff106 	br	40127ac <__alt_data_end+0xfc0127ac>

040127e8 <_mprec_log10>:
 40127e8:	defffe04 	addi	sp,sp,-8
 40127ec:	dc000015 	stw	r16,0(sp)
 40127f0:	dfc00115 	stw	ra,4(sp)
 40127f4:	008005c4 	movi	r2,23
 40127f8:	2021883a 	mov	r16,r4
 40127fc:	11000d0e 	bge	r2,r4,4012834 <_mprec_log10+0x4c>
 4012800:	0005883a 	mov	r2,zero
 4012804:	00cffc34 	movhi	r3,16368
 4012808:	843fffc4 	addi	r16,r16,-1
 401280c:	000d883a 	mov	r6,zero
 4012810:	01d00934 	movhi	r7,16420
 4012814:	1009883a 	mov	r4,r2
 4012818:	180b883a 	mov	r5,r3
 401281c:	400a27c0 	call	400a27c <__muldf3>
 4012820:	803ff91e 	bne	r16,zero,4012808 <__alt_data_end+0xfc012808>
 4012824:	dfc00117 	ldw	ra,4(sp)
 4012828:	dc000017 	ldw	r16,0(sp)
 401282c:	dec00204 	addi	sp,sp,8
 4012830:	f800283a 	ret
 4012834:	202090fa 	slli	r16,r4,3
 4012838:	008100b4 	movhi	r2,1026
 401283c:	10abc004 	addi	r2,r2,-20736
 4012840:	1421883a 	add	r16,r2,r16
 4012844:	80800017 	ldw	r2,0(r16)
 4012848:	80c00117 	ldw	r3,4(r16)
 401284c:	dfc00117 	ldw	ra,4(sp)
 4012850:	dc000017 	ldw	r16,0(sp)
 4012854:	dec00204 	addi	sp,sp,8
 4012858:	f800283a 	ret

0401285c <__copybits>:
 401285c:	297fffc4 	addi	r5,r5,-1
 4012860:	280fd17a 	srai	r7,r5,5
 4012864:	30c00417 	ldw	r3,16(r6)
 4012868:	30800504 	addi	r2,r6,20
 401286c:	39c00044 	addi	r7,r7,1
 4012870:	18c7883a 	add	r3,r3,r3
 4012874:	39cf883a 	add	r7,r7,r7
 4012878:	18c7883a 	add	r3,r3,r3
 401287c:	39cf883a 	add	r7,r7,r7
 4012880:	10c7883a 	add	r3,r2,r3
 4012884:	21cf883a 	add	r7,r4,r7
 4012888:	10c00d2e 	bgeu	r2,r3,40128c0 <__copybits+0x64>
 401288c:	200b883a 	mov	r5,r4
 4012890:	12000017 	ldw	r8,0(r2)
 4012894:	29400104 	addi	r5,r5,4
 4012898:	10800104 	addi	r2,r2,4
 401289c:	2a3fff15 	stw	r8,-4(r5)
 40128a0:	10fffb36 	bltu	r2,r3,4012890 <__alt_data_end+0xfc012890>
 40128a4:	1985c83a 	sub	r2,r3,r6
 40128a8:	10bffac4 	addi	r2,r2,-21
 40128ac:	1004d0ba 	srli	r2,r2,2
 40128b0:	10800044 	addi	r2,r2,1
 40128b4:	1085883a 	add	r2,r2,r2
 40128b8:	1085883a 	add	r2,r2,r2
 40128bc:	2089883a 	add	r4,r4,r2
 40128c0:	21c0032e 	bgeu	r4,r7,40128d0 <__copybits+0x74>
 40128c4:	20000015 	stw	zero,0(r4)
 40128c8:	21000104 	addi	r4,r4,4
 40128cc:	21fffd36 	bltu	r4,r7,40128c4 <__alt_data_end+0xfc0128c4>
 40128d0:	f800283a 	ret

040128d4 <__any_on>:
 40128d4:	20c00417 	ldw	r3,16(r4)
 40128d8:	2805d17a 	srai	r2,r5,5
 40128dc:	21000504 	addi	r4,r4,20
 40128e0:	18800d0e 	bge	r3,r2,4012918 <__any_on+0x44>
 40128e4:	18c7883a 	add	r3,r3,r3
 40128e8:	18c7883a 	add	r3,r3,r3
 40128ec:	20c7883a 	add	r3,r4,r3
 40128f0:	20c0192e 	bgeu	r4,r3,4012958 <__any_on+0x84>
 40128f4:	18bfff17 	ldw	r2,-4(r3)
 40128f8:	18ffff04 	addi	r3,r3,-4
 40128fc:	1000041e 	bne	r2,zero,4012910 <__any_on+0x3c>
 4012900:	20c0142e 	bgeu	r4,r3,4012954 <__any_on+0x80>
 4012904:	18ffff04 	addi	r3,r3,-4
 4012908:	19400017 	ldw	r5,0(r3)
 401290c:	283ffc26 	beq	r5,zero,4012900 <__alt_data_end+0xfc012900>
 4012910:	00800044 	movi	r2,1
 4012914:	f800283a 	ret
 4012918:	10c00a0e 	bge	r2,r3,4012944 <__any_on+0x70>
 401291c:	1085883a 	add	r2,r2,r2
 4012920:	1085883a 	add	r2,r2,r2
 4012924:	294007cc 	andi	r5,r5,31
 4012928:	2087883a 	add	r3,r4,r2
 401292c:	283ff026 	beq	r5,zero,40128f0 <__alt_data_end+0xfc0128f0>
 4012930:	19800017 	ldw	r6,0(r3)
 4012934:	3144d83a 	srl	r2,r6,r5
 4012938:	114a983a 	sll	r5,r2,r5
 401293c:	317ff41e 	bne	r6,r5,4012910 <__alt_data_end+0xfc012910>
 4012940:	003feb06 	br	40128f0 <__alt_data_end+0xfc0128f0>
 4012944:	1085883a 	add	r2,r2,r2
 4012948:	1085883a 	add	r2,r2,r2
 401294c:	2087883a 	add	r3,r4,r2
 4012950:	003fe706 	br	40128f0 <__alt_data_end+0xfc0128f0>
 4012954:	f800283a 	ret
 4012958:	0005883a 	mov	r2,zero
 401295c:	f800283a 	ret

04012960 <_realloc_r>:
 4012960:	defff604 	addi	sp,sp,-40
 4012964:	dc800215 	stw	r18,8(sp)
 4012968:	dfc00915 	stw	ra,36(sp)
 401296c:	df000815 	stw	fp,32(sp)
 4012970:	ddc00715 	stw	r23,28(sp)
 4012974:	dd800615 	stw	r22,24(sp)
 4012978:	dd400515 	stw	r21,20(sp)
 401297c:	dd000415 	stw	r20,16(sp)
 4012980:	dcc00315 	stw	r19,12(sp)
 4012984:	dc400115 	stw	r17,4(sp)
 4012988:	dc000015 	stw	r16,0(sp)
 401298c:	3025883a 	mov	r18,r6
 4012990:	2800b726 	beq	r5,zero,4012c70 <_realloc_r+0x310>
 4012994:	282b883a 	mov	r21,r5
 4012998:	2029883a 	mov	r20,r4
 401299c:	40163240 	call	4016324 <__malloc_lock>
 40129a0:	a8bfff17 	ldw	r2,-4(r21)
 40129a4:	043fff04 	movi	r16,-4
 40129a8:	90c002c4 	addi	r3,r18,11
 40129ac:	01000584 	movi	r4,22
 40129b0:	acfffe04 	addi	r19,r21,-8
 40129b4:	1420703a 	and	r16,r2,r16
 40129b8:	20c0332e 	bgeu	r4,r3,4012a88 <_realloc_r+0x128>
 40129bc:	047ffe04 	movi	r17,-8
 40129c0:	1c62703a 	and	r17,r3,r17
 40129c4:	8807883a 	mov	r3,r17
 40129c8:	88005816 	blt	r17,zero,4012b2c <_realloc_r+0x1cc>
 40129cc:	8c805736 	bltu	r17,r18,4012b2c <_realloc_r+0x1cc>
 40129d0:	80c0300e 	bge	r16,r3,4012a94 <_realloc_r+0x134>
 40129d4:	070100b4 	movhi	fp,1026
 40129d8:	e72d2704 	addi	fp,fp,-19300
 40129dc:	e1c00217 	ldw	r7,8(fp)
 40129e0:	9c09883a 	add	r4,r19,r16
 40129e4:	22000117 	ldw	r8,4(r4)
 40129e8:	21c06326 	beq	r4,r7,4012b78 <_realloc_r+0x218>
 40129ec:	017fff84 	movi	r5,-2
 40129f0:	414a703a 	and	r5,r8,r5
 40129f4:	214b883a 	add	r5,r4,r5
 40129f8:	29800117 	ldw	r6,4(r5)
 40129fc:	3180004c 	andi	r6,r6,1
 4012a00:	30003f26 	beq	r6,zero,4012b00 <_realloc_r+0x1a0>
 4012a04:	1080004c 	andi	r2,r2,1
 4012a08:	10008326 	beq	r2,zero,4012c18 <_realloc_r+0x2b8>
 4012a0c:	900b883a 	mov	r5,r18
 4012a10:	a009883a 	mov	r4,r20
 4012a14:	400b8940 	call	400b894 <_malloc_r>
 4012a18:	1025883a 	mov	r18,r2
 4012a1c:	10011e26 	beq	r2,zero,4012e98 <_realloc_r+0x538>
 4012a20:	a93fff17 	ldw	r4,-4(r21)
 4012a24:	10fffe04 	addi	r3,r2,-8
 4012a28:	00bfff84 	movi	r2,-2
 4012a2c:	2084703a 	and	r2,r4,r2
 4012a30:	9885883a 	add	r2,r19,r2
 4012a34:	1880ee26 	beq	r3,r2,4012df0 <_realloc_r+0x490>
 4012a38:	81bfff04 	addi	r6,r16,-4
 4012a3c:	00800904 	movi	r2,36
 4012a40:	1180b836 	bltu	r2,r6,4012d24 <_realloc_r+0x3c4>
 4012a44:	00c004c4 	movi	r3,19
 4012a48:	19809636 	bltu	r3,r6,4012ca4 <_realloc_r+0x344>
 4012a4c:	9005883a 	mov	r2,r18
 4012a50:	a807883a 	mov	r3,r21
 4012a54:	19000017 	ldw	r4,0(r3)
 4012a58:	11000015 	stw	r4,0(r2)
 4012a5c:	19000117 	ldw	r4,4(r3)
 4012a60:	11000115 	stw	r4,4(r2)
 4012a64:	18c00217 	ldw	r3,8(r3)
 4012a68:	10c00215 	stw	r3,8(r2)
 4012a6c:	a80b883a 	mov	r5,r21
 4012a70:	a009883a 	mov	r4,r20
 4012a74:	40109480 	call	4010948 <_free_r>
 4012a78:	a009883a 	mov	r4,r20
 4012a7c:	40163480 	call	4016348 <__malloc_unlock>
 4012a80:	9005883a 	mov	r2,r18
 4012a84:	00001206 	br	4012ad0 <_realloc_r+0x170>
 4012a88:	00c00404 	movi	r3,16
 4012a8c:	1823883a 	mov	r17,r3
 4012a90:	003fce06 	br	40129cc <__alt_data_end+0xfc0129cc>
 4012a94:	a825883a 	mov	r18,r21
 4012a98:	8445c83a 	sub	r2,r16,r17
 4012a9c:	00c003c4 	movi	r3,15
 4012aa0:	18802636 	bltu	r3,r2,4012b3c <_realloc_r+0x1dc>
 4012aa4:	99800117 	ldw	r6,4(r19)
 4012aa8:	9c07883a 	add	r3,r19,r16
 4012aac:	3180004c 	andi	r6,r6,1
 4012ab0:	3420b03a 	or	r16,r6,r16
 4012ab4:	9c000115 	stw	r16,4(r19)
 4012ab8:	18800117 	ldw	r2,4(r3)
 4012abc:	10800054 	ori	r2,r2,1
 4012ac0:	18800115 	stw	r2,4(r3)
 4012ac4:	a009883a 	mov	r4,r20
 4012ac8:	40163480 	call	4016348 <__malloc_unlock>
 4012acc:	9005883a 	mov	r2,r18
 4012ad0:	dfc00917 	ldw	ra,36(sp)
 4012ad4:	df000817 	ldw	fp,32(sp)
 4012ad8:	ddc00717 	ldw	r23,28(sp)
 4012adc:	dd800617 	ldw	r22,24(sp)
 4012ae0:	dd400517 	ldw	r21,20(sp)
 4012ae4:	dd000417 	ldw	r20,16(sp)
 4012ae8:	dcc00317 	ldw	r19,12(sp)
 4012aec:	dc800217 	ldw	r18,8(sp)
 4012af0:	dc400117 	ldw	r17,4(sp)
 4012af4:	dc000017 	ldw	r16,0(sp)
 4012af8:	dec00a04 	addi	sp,sp,40
 4012afc:	f800283a 	ret
 4012b00:	017fff04 	movi	r5,-4
 4012b04:	414a703a 	and	r5,r8,r5
 4012b08:	814d883a 	add	r6,r16,r5
 4012b0c:	30c01f16 	blt	r6,r3,4012b8c <_realloc_r+0x22c>
 4012b10:	20800317 	ldw	r2,12(r4)
 4012b14:	20c00217 	ldw	r3,8(r4)
 4012b18:	a825883a 	mov	r18,r21
 4012b1c:	3021883a 	mov	r16,r6
 4012b20:	18800315 	stw	r2,12(r3)
 4012b24:	10c00215 	stw	r3,8(r2)
 4012b28:	003fdb06 	br	4012a98 <__alt_data_end+0xfc012a98>
 4012b2c:	00800304 	movi	r2,12
 4012b30:	a0800015 	stw	r2,0(r20)
 4012b34:	0005883a 	mov	r2,zero
 4012b38:	003fe506 	br	4012ad0 <__alt_data_end+0xfc012ad0>
 4012b3c:	98c00117 	ldw	r3,4(r19)
 4012b40:	9c4b883a 	add	r5,r19,r17
 4012b44:	11000054 	ori	r4,r2,1
 4012b48:	18c0004c 	andi	r3,r3,1
 4012b4c:	1c62b03a 	or	r17,r3,r17
 4012b50:	9c400115 	stw	r17,4(r19)
 4012b54:	29000115 	stw	r4,4(r5)
 4012b58:	2885883a 	add	r2,r5,r2
 4012b5c:	10c00117 	ldw	r3,4(r2)
 4012b60:	29400204 	addi	r5,r5,8
 4012b64:	a009883a 	mov	r4,r20
 4012b68:	18c00054 	ori	r3,r3,1
 4012b6c:	10c00115 	stw	r3,4(r2)
 4012b70:	40109480 	call	4010948 <_free_r>
 4012b74:	003fd306 	br	4012ac4 <__alt_data_end+0xfc012ac4>
 4012b78:	017fff04 	movi	r5,-4
 4012b7c:	414a703a 	and	r5,r8,r5
 4012b80:	89800404 	addi	r6,r17,16
 4012b84:	8151883a 	add	r8,r16,r5
 4012b88:	4180590e 	bge	r8,r6,4012cf0 <_realloc_r+0x390>
 4012b8c:	1080004c 	andi	r2,r2,1
 4012b90:	103f9e1e 	bne	r2,zero,4012a0c <__alt_data_end+0xfc012a0c>
 4012b94:	adbffe17 	ldw	r22,-8(r21)
 4012b98:	00bfff04 	movi	r2,-4
 4012b9c:	9dadc83a 	sub	r22,r19,r22
 4012ba0:	b1800117 	ldw	r6,4(r22)
 4012ba4:	3084703a 	and	r2,r6,r2
 4012ba8:	20002026 	beq	r4,zero,4012c2c <_realloc_r+0x2cc>
 4012bac:	80af883a 	add	r23,r16,r2
 4012bb0:	b96f883a 	add	r23,r23,r5
 4012bb4:	21c05f26 	beq	r4,r7,4012d34 <_realloc_r+0x3d4>
 4012bb8:	b8c01c16 	blt	r23,r3,4012c2c <_realloc_r+0x2cc>
 4012bbc:	20800317 	ldw	r2,12(r4)
 4012bc0:	20c00217 	ldw	r3,8(r4)
 4012bc4:	81bfff04 	addi	r6,r16,-4
 4012bc8:	01000904 	movi	r4,36
 4012bcc:	18800315 	stw	r2,12(r3)
 4012bd0:	10c00215 	stw	r3,8(r2)
 4012bd4:	b0c00217 	ldw	r3,8(r22)
 4012bd8:	b0800317 	ldw	r2,12(r22)
 4012bdc:	b4800204 	addi	r18,r22,8
 4012be0:	18800315 	stw	r2,12(r3)
 4012be4:	10c00215 	stw	r3,8(r2)
 4012be8:	21801b36 	bltu	r4,r6,4012c58 <_realloc_r+0x2f8>
 4012bec:	008004c4 	movi	r2,19
 4012bf0:	1180352e 	bgeu	r2,r6,4012cc8 <_realloc_r+0x368>
 4012bf4:	a8800017 	ldw	r2,0(r21)
 4012bf8:	b0800215 	stw	r2,8(r22)
 4012bfc:	a8800117 	ldw	r2,4(r21)
 4012c00:	b0800315 	stw	r2,12(r22)
 4012c04:	008006c4 	movi	r2,27
 4012c08:	11807f36 	bltu	r2,r6,4012e08 <_realloc_r+0x4a8>
 4012c0c:	b0800404 	addi	r2,r22,16
 4012c10:	ad400204 	addi	r21,r21,8
 4012c14:	00002d06 	br	4012ccc <_realloc_r+0x36c>
 4012c18:	adbffe17 	ldw	r22,-8(r21)
 4012c1c:	00bfff04 	movi	r2,-4
 4012c20:	9dadc83a 	sub	r22,r19,r22
 4012c24:	b1000117 	ldw	r4,4(r22)
 4012c28:	2084703a 	and	r2,r4,r2
 4012c2c:	b03f7726 	beq	r22,zero,4012a0c <__alt_data_end+0xfc012a0c>
 4012c30:	80af883a 	add	r23,r16,r2
 4012c34:	b8ff7516 	blt	r23,r3,4012a0c <__alt_data_end+0xfc012a0c>
 4012c38:	b0800317 	ldw	r2,12(r22)
 4012c3c:	b0c00217 	ldw	r3,8(r22)
 4012c40:	81bfff04 	addi	r6,r16,-4
 4012c44:	01000904 	movi	r4,36
 4012c48:	18800315 	stw	r2,12(r3)
 4012c4c:	10c00215 	stw	r3,8(r2)
 4012c50:	b4800204 	addi	r18,r22,8
 4012c54:	21bfe52e 	bgeu	r4,r6,4012bec <__alt_data_end+0xfc012bec>
 4012c58:	a80b883a 	mov	r5,r21
 4012c5c:	9009883a 	mov	r4,r18
 4012c60:	40116240 	call	4011624 <memmove>
 4012c64:	b821883a 	mov	r16,r23
 4012c68:	b027883a 	mov	r19,r22
 4012c6c:	003f8a06 	br	4012a98 <__alt_data_end+0xfc012a98>
 4012c70:	300b883a 	mov	r5,r6
 4012c74:	dfc00917 	ldw	ra,36(sp)
 4012c78:	df000817 	ldw	fp,32(sp)
 4012c7c:	ddc00717 	ldw	r23,28(sp)
 4012c80:	dd800617 	ldw	r22,24(sp)
 4012c84:	dd400517 	ldw	r21,20(sp)
 4012c88:	dd000417 	ldw	r20,16(sp)
 4012c8c:	dcc00317 	ldw	r19,12(sp)
 4012c90:	dc800217 	ldw	r18,8(sp)
 4012c94:	dc400117 	ldw	r17,4(sp)
 4012c98:	dc000017 	ldw	r16,0(sp)
 4012c9c:	dec00a04 	addi	sp,sp,40
 4012ca0:	400b8941 	jmpi	400b894 <_malloc_r>
 4012ca4:	a8c00017 	ldw	r3,0(r21)
 4012ca8:	90c00015 	stw	r3,0(r18)
 4012cac:	a8c00117 	ldw	r3,4(r21)
 4012cb0:	90c00115 	stw	r3,4(r18)
 4012cb4:	00c006c4 	movi	r3,27
 4012cb8:	19804536 	bltu	r3,r6,4012dd0 <_realloc_r+0x470>
 4012cbc:	90800204 	addi	r2,r18,8
 4012cc0:	a8c00204 	addi	r3,r21,8
 4012cc4:	003f6306 	br	4012a54 <__alt_data_end+0xfc012a54>
 4012cc8:	9005883a 	mov	r2,r18
 4012ccc:	a8c00017 	ldw	r3,0(r21)
 4012cd0:	b821883a 	mov	r16,r23
 4012cd4:	b027883a 	mov	r19,r22
 4012cd8:	10c00015 	stw	r3,0(r2)
 4012cdc:	a8c00117 	ldw	r3,4(r21)
 4012ce0:	10c00115 	stw	r3,4(r2)
 4012ce4:	a8c00217 	ldw	r3,8(r21)
 4012ce8:	10c00215 	stw	r3,8(r2)
 4012cec:	003f6a06 	br	4012a98 <__alt_data_end+0xfc012a98>
 4012cf0:	9c67883a 	add	r19,r19,r17
 4012cf4:	4445c83a 	sub	r2,r8,r17
 4012cf8:	e4c00215 	stw	r19,8(fp)
 4012cfc:	10800054 	ori	r2,r2,1
 4012d00:	98800115 	stw	r2,4(r19)
 4012d04:	a8bfff17 	ldw	r2,-4(r21)
 4012d08:	a009883a 	mov	r4,r20
 4012d0c:	1080004c 	andi	r2,r2,1
 4012d10:	1462b03a 	or	r17,r2,r17
 4012d14:	ac7fff15 	stw	r17,-4(r21)
 4012d18:	40163480 	call	4016348 <__malloc_unlock>
 4012d1c:	a805883a 	mov	r2,r21
 4012d20:	003f6b06 	br	4012ad0 <__alt_data_end+0xfc012ad0>
 4012d24:	a80b883a 	mov	r5,r21
 4012d28:	9009883a 	mov	r4,r18
 4012d2c:	40116240 	call	4011624 <memmove>
 4012d30:	003f4e06 	br	4012a6c <__alt_data_end+0xfc012a6c>
 4012d34:	89000404 	addi	r4,r17,16
 4012d38:	b93fbc16 	blt	r23,r4,4012c2c <__alt_data_end+0xfc012c2c>
 4012d3c:	b0800317 	ldw	r2,12(r22)
 4012d40:	b0c00217 	ldw	r3,8(r22)
 4012d44:	81bfff04 	addi	r6,r16,-4
 4012d48:	01000904 	movi	r4,36
 4012d4c:	18800315 	stw	r2,12(r3)
 4012d50:	10c00215 	stw	r3,8(r2)
 4012d54:	b4800204 	addi	r18,r22,8
 4012d58:	21804336 	bltu	r4,r6,4012e68 <_realloc_r+0x508>
 4012d5c:	008004c4 	movi	r2,19
 4012d60:	11803f2e 	bgeu	r2,r6,4012e60 <_realloc_r+0x500>
 4012d64:	a8800017 	ldw	r2,0(r21)
 4012d68:	b0800215 	stw	r2,8(r22)
 4012d6c:	a8800117 	ldw	r2,4(r21)
 4012d70:	b0800315 	stw	r2,12(r22)
 4012d74:	008006c4 	movi	r2,27
 4012d78:	11803f36 	bltu	r2,r6,4012e78 <_realloc_r+0x518>
 4012d7c:	b0800404 	addi	r2,r22,16
 4012d80:	ad400204 	addi	r21,r21,8
 4012d84:	a8c00017 	ldw	r3,0(r21)
 4012d88:	10c00015 	stw	r3,0(r2)
 4012d8c:	a8c00117 	ldw	r3,4(r21)
 4012d90:	10c00115 	stw	r3,4(r2)
 4012d94:	a8c00217 	ldw	r3,8(r21)
 4012d98:	10c00215 	stw	r3,8(r2)
 4012d9c:	b447883a 	add	r3,r22,r17
 4012da0:	bc45c83a 	sub	r2,r23,r17
 4012da4:	e0c00215 	stw	r3,8(fp)
 4012da8:	10800054 	ori	r2,r2,1
 4012dac:	18800115 	stw	r2,4(r3)
 4012db0:	b0800117 	ldw	r2,4(r22)
 4012db4:	a009883a 	mov	r4,r20
 4012db8:	1080004c 	andi	r2,r2,1
 4012dbc:	1462b03a 	or	r17,r2,r17
 4012dc0:	b4400115 	stw	r17,4(r22)
 4012dc4:	40163480 	call	4016348 <__malloc_unlock>
 4012dc8:	9005883a 	mov	r2,r18
 4012dcc:	003f4006 	br	4012ad0 <__alt_data_end+0xfc012ad0>
 4012dd0:	a8c00217 	ldw	r3,8(r21)
 4012dd4:	90c00215 	stw	r3,8(r18)
 4012dd8:	a8c00317 	ldw	r3,12(r21)
 4012ddc:	90c00315 	stw	r3,12(r18)
 4012de0:	30801126 	beq	r6,r2,4012e28 <_realloc_r+0x4c8>
 4012de4:	90800404 	addi	r2,r18,16
 4012de8:	a8c00404 	addi	r3,r21,16
 4012dec:	003f1906 	br	4012a54 <__alt_data_end+0xfc012a54>
 4012df0:	90ffff17 	ldw	r3,-4(r18)
 4012df4:	00bfff04 	movi	r2,-4
 4012df8:	a825883a 	mov	r18,r21
 4012dfc:	1884703a 	and	r2,r3,r2
 4012e00:	80a1883a 	add	r16,r16,r2
 4012e04:	003f2406 	br	4012a98 <__alt_data_end+0xfc012a98>
 4012e08:	a8800217 	ldw	r2,8(r21)
 4012e0c:	b0800415 	stw	r2,16(r22)
 4012e10:	a8800317 	ldw	r2,12(r21)
 4012e14:	b0800515 	stw	r2,20(r22)
 4012e18:	31000a26 	beq	r6,r4,4012e44 <_realloc_r+0x4e4>
 4012e1c:	b0800604 	addi	r2,r22,24
 4012e20:	ad400404 	addi	r21,r21,16
 4012e24:	003fa906 	br	4012ccc <__alt_data_end+0xfc012ccc>
 4012e28:	a9000417 	ldw	r4,16(r21)
 4012e2c:	90800604 	addi	r2,r18,24
 4012e30:	a8c00604 	addi	r3,r21,24
 4012e34:	91000415 	stw	r4,16(r18)
 4012e38:	a9000517 	ldw	r4,20(r21)
 4012e3c:	91000515 	stw	r4,20(r18)
 4012e40:	003f0406 	br	4012a54 <__alt_data_end+0xfc012a54>
 4012e44:	a8c00417 	ldw	r3,16(r21)
 4012e48:	ad400604 	addi	r21,r21,24
 4012e4c:	b0800804 	addi	r2,r22,32
 4012e50:	b0c00615 	stw	r3,24(r22)
 4012e54:	a8ffff17 	ldw	r3,-4(r21)
 4012e58:	b0c00715 	stw	r3,28(r22)
 4012e5c:	003f9b06 	br	4012ccc <__alt_data_end+0xfc012ccc>
 4012e60:	9005883a 	mov	r2,r18
 4012e64:	003fc706 	br	4012d84 <__alt_data_end+0xfc012d84>
 4012e68:	a80b883a 	mov	r5,r21
 4012e6c:	9009883a 	mov	r4,r18
 4012e70:	40116240 	call	4011624 <memmove>
 4012e74:	003fc906 	br	4012d9c <__alt_data_end+0xfc012d9c>
 4012e78:	a8800217 	ldw	r2,8(r21)
 4012e7c:	b0800415 	stw	r2,16(r22)
 4012e80:	a8800317 	ldw	r2,12(r21)
 4012e84:	b0800515 	stw	r2,20(r22)
 4012e88:	31000726 	beq	r6,r4,4012ea8 <_realloc_r+0x548>
 4012e8c:	b0800604 	addi	r2,r22,24
 4012e90:	ad400404 	addi	r21,r21,16
 4012e94:	003fbb06 	br	4012d84 <__alt_data_end+0xfc012d84>
 4012e98:	a009883a 	mov	r4,r20
 4012e9c:	40163480 	call	4016348 <__malloc_unlock>
 4012ea0:	0005883a 	mov	r2,zero
 4012ea4:	003f0a06 	br	4012ad0 <__alt_data_end+0xfc012ad0>
 4012ea8:	a8c00417 	ldw	r3,16(r21)
 4012eac:	ad400604 	addi	r21,r21,24
 4012eb0:	b0800804 	addi	r2,r22,32
 4012eb4:	b0c00615 	stw	r3,24(r22)
 4012eb8:	a8ffff17 	ldw	r3,-4(r21)
 4012ebc:	b0c00715 	stw	r3,28(r22)
 4012ec0:	003fb006 	br	4012d84 <__alt_data_end+0xfc012d84>

04012ec4 <__sread>:
 4012ec4:	defffe04 	addi	sp,sp,-8
 4012ec8:	dc000015 	stw	r16,0(sp)
 4012ecc:	2821883a 	mov	r16,r5
 4012ed0:	2940038f 	ldh	r5,14(r5)
 4012ed4:	dfc00115 	stw	ra,4(sp)
 4012ed8:	4014d800 	call	4014d80 <_read_r>
 4012edc:	10000716 	blt	r2,zero,4012efc <__sread+0x38>
 4012ee0:	80c01417 	ldw	r3,80(r16)
 4012ee4:	1887883a 	add	r3,r3,r2
 4012ee8:	80c01415 	stw	r3,80(r16)
 4012eec:	dfc00117 	ldw	ra,4(sp)
 4012ef0:	dc000017 	ldw	r16,0(sp)
 4012ef4:	dec00204 	addi	sp,sp,8
 4012ef8:	f800283a 	ret
 4012efc:	80c0030b 	ldhu	r3,12(r16)
 4012f00:	18fbffcc 	andi	r3,r3,61439
 4012f04:	80c0030d 	sth	r3,12(r16)
 4012f08:	dfc00117 	ldw	ra,4(sp)
 4012f0c:	dc000017 	ldw	r16,0(sp)
 4012f10:	dec00204 	addi	sp,sp,8
 4012f14:	f800283a 	ret

04012f18 <__seofread>:
 4012f18:	0005883a 	mov	r2,zero
 4012f1c:	f800283a 	ret

04012f20 <__swrite>:
 4012f20:	2880030b 	ldhu	r2,12(r5)
 4012f24:	defffb04 	addi	sp,sp,-20
 4012f28:	dcc00315 	stw	r19,12(sp)
 4012f2c:	dc800215 	stw	r18,8(sp)
 4012f30:	dc400115 	stw	r17,4(sp)
 4012f34:	dc000015 	stw	r16,0(sp)
 4012f38:	dfc00415 	stw	ra,16(sp)
 4012f3c:	10c0400c 	andi	r3,r2,256
 4012f40:	2821883a 	mov	r16,r5
 4012f44:	2023883a 	mov	r17,r4
 4012f48:	3025883a 	mov	r18,r6
 4012f4c:	3827883a 	mov	r19,r7
 4012f50:	18000526 	beq	r3,zero,4012f68 <__swrite+0x48>
 4012f54:	2940038f 	ldh	r5,14(r5)
 4012f58:	01c00084 	movi	r7,2
 4012f5c:	000d883a 	mov	r6,zero
 4012f60:	4014d200 	call	4014d20 <_lseek_r>
 4012f64:	8080030b 	ldhu	r2,12(r16)
 4012f68:	8140038f 	ldh	r5,14(r16)
 4012f6c:	10bbffcc 	andi	r2,r2,61439
 4012f70:	980f883a 	mov	r7,r19
 4012f74:	900d883a 	mov	r6,r18
 4012f78:	8809883a 	mov	r4,r17
 4012f7c:	8080030d 	sth	r2,12(r16)
 4012f80:	dfc00417 	ldw	ra,16(sp)
 4012f84:	dcc00317 	ldw	r19,12(sp)
 4012f88:	dc800217 	ldw	r18,8(sp)
 4012f8c:	dc400117 	ldw	r17,4(sp)
 4012f90:	dc000017 	ldw	r16,0(sp)
 4012f94:	dec00504 	addi	sp,sp,20
 4012f98:	40147d41 	jmpi	40147d4 <_write_r>

04012f9c <__sseek>:
 4012f9c:	defffe04 	addi	sp,sp,-8
 4012fa0:	dc000015 	stw	r16,0(sp)
 4012fa4:	2821883a 	mov	r16,r5
 4012fa8:	2940038f 	ldh	r5,14(r5)
 4012fac:	dfc00115 	stw	ra,4(sp)
 4012fb0:	4014d200 	call	4014d20 <_lseek_r>
 4012fb4:	00ffffc4 	movi	r3,-1
 4012fb8:	10c00826 	beq	r2,r3,4012fdc <__sseek+0x40>
 4012fbc:	80c0030b 	ldhu	r3,12(r16)
 4012fc0:	80801415 	stw	r2,80(r16)
 4012fc4:	18c40014 	ori	r3,r3,4096
 4012fc8:	80c0030d 	sth	r3,12(r16)
 4012fcc:	dfc00117 	ldw	ra,4(sp)
 4012fd0:	dc000017 	ldw	r16,0(sp)
 4012fd4:	dec00204 	addi	sp,sp,8
 4012fd8:	f800283a 	ret
 4012fdc:	80c0030b 	ldhu	r3,12(r16)
 4012fe0:	18fbffcc 	andi	r3,r3,61439
 4012fe4:	80c0030d 	sth	r3,12(r16)
 4012fe8:	dfc00117 	ldw	ra,4(sp)
 4012fec:	dc000017 	ldw	r16,0(sp)
 4012ff0:	dec00204 	addi	sp,sp,8
 4012ff4:	f800283a 	ret

04012ff8 <__sclose>:
 4012ff8:	2940038f 	ldh	r5,14(r5)
 4012ffc:	40148341 	jmpi	4014834 <_close_r>

04013000 <strcmp>:
 4013000:	2144b03a 	or	r2,r4,r5
 4013004:	108000cc 	andi	r2,r2,3
 4013008:	1000171e 	bne	r2,zero,4013068 <strcmp+0x68>
 401300c:	20800017 	ldw	r2,0(r4)
 4013010:	28c00017 	ldw	r3,0(r5)
 4013014:	10c0141e 	bne	r2,r3,4013068 <strcmp+0x68>
 4013018:	027fbff4 	movhi	r9,65279
 401301c:	4a7fbfc4 	addi	r9,r9,-257
 4013020:	0086303a 	nor	r3,zero,r2
 4013024:	02202074 	movhi	r8,32897
 4013028:	1245883a 	add	r2,r2,r9
 401302c:	42202004 	addi	r8,r8,-32640
 4013030:	10c4703a 	and	r2,r2,r3
 4013034:	1204703a 	and	r2,r2,r8
 4013038:	10000226 	beq	r2,zero,4013044 <strcmp+0x44>
 401303c:	00002306 	br	40130cc <strcmp+0xcc>
 4013040:	1000221e 	bne	r2,zero,40130cc <strcmp+0xcc>
 4013044:	21000104 	addi	r4,r4,4
 4013048:	20c00017 	ldw	r3,0(r4)
 401304c:	29400104 	addi	r5,r5,4
 4013050:	29800017 	ldw	r6,0(r5)
 4013054:	1a4f883a 	add	r7,r3,r9
 4013058:	00c4303a 	nor	r2,zero,r3
 401305c:	3884703a 	and	r2,r7,r2
 4013060:	1204703a 	and	r2,r2,r8
 4013064:	19bff626 	beq	r3,r6,4013040 <__alt_data_end+0xfc013040>
 4013068:	20800003 	ldbu	r2,0(r4)
 401306c:	10c03fcc 	andi	r3,r2,255
 4013070:	18c0201c 	xori	r3,r3,128
 4013074:	18ffe004 	addi	r3,r3,-128
 4013078:	18000c26 	beq	r3,zero,40130ac <strcmp+0xac>
 401307c:	29800007 	ldb	r6,0(r5)
 4013080:	19800326 	beq	r3,r6,4013090 <strcmp+0x90>
 4013084:	00001306 	br	40130d4 <strcmp+0xd4>
 4013088:	29800007 	ldb	r6,0(r5)
 401308c:	11800b1e 	bne	r2,r6,40130bc <strcmp+0xbc>
 4013090:	21000044 	addi	r4,r4,1
 4013094:	20c00003 	ldbu	r3,0(r4)
 4013098:	29400044 	addi	r5,r5,1
 401309c:	18803fcc 	andi	r2,r3,255
 40130a0:	1080201c 	xori	r2,r2,128
 40130a4:	10bfe004 	addi	r2,r2,-128
 40130a8:	103ff71e 	bne	r2,zero,4013088 <__alt_data_end+0xfc013088>
 40130ac:	0007883a 	mov	r3,zero
 40130b0:	28800003 	ldbu	r2,0(r5)
 40130b4:	1885c83a 	sub	r2,r3,r2
 40130b8:	f800283a 	ret
 40130bc:	28800003 	ldbu	r2,0(r5)
 40130c0:	18c03fcc 	andi	r3,r3,255
 40130c4:	1885c83a 	sub	r2,r3,r2
 40130c8:	f800283a 	ret
 40130cc:	0005883a 	mov	r2,zero
 40130d0:	f800283a 	ret
 40130d4:	10c03fcc 	andi	r3,r2,255
 40130d8:	003ff506 	br	40130b0 <__alt_data_end+0xfc0130b0>

040130dc <__sprint_r.part.0>:
 40130dc:	28801917 	ldw	r2,100(r5)
 40130e0:	defff604 	addi	sp,sp,-40
 40130e4:	dd400515 	stw	r21,20(sp)
 40130e8:	dfc00915 	stw	ra,36(sp)
 40130ec:	df000815 	stw	fp,32(sp)
 40130f0:	ddc00715 	stw	r23,28(sp)
 40130f4:	dd800615 	stw	r22,24(sp)
 40130f8:	dd000415 	stw	r20,16(sp)
 40130fc:	dcc00315 	stw	r19,12(sp)
 4013100:	dc800215 	stw	r18,8(sp)
 4013104:	dc400115 	stw	r17,4(sp)
 4013108:	dc000015 	stw	r16,0(sp)
 401310c:	1088000c 	andi	r2,r2,8192
 4013110:	302b883a 	mov	r21,r6
 4013114:	10002e26 	beq	r2,zero,40131d0 <__sprint_r.part.0+0xf4>
 4013118:	30800217 	ldw	r2,8(r6)
 401311c:	35800017 	ldw	r22,0(r6)
 4013120:	10002926 	beq	r2,zero,40131c8 <__sprint_r.part.0+0xec>
 4013124:	2827883a 	mov	r19,r5
 4013128:	2029883a 	mov	r20,r4
 401312c:	b5c00104 	addi	r23,r22,4
 4013130:	04bfffc4 	movi	r18,-1
 4013134:	bc400017 	ldw	r17,0(r23)
 4013138:	b4000017 	ldw	r16,0(r22)
 401313c:	0039883a 	mov	fp,zero
 4013140:	8822d0ba 	srli	r17,r17,2
 4013144:	8800031e 	bne	r17,zero,4013154 <__sprint_r.part.0+0x78>
 4013148:	00001806 	br	40131ac <__sprint_r.part.0+0xd0>
 401314c:	84000104 	addi	r16,r16,4
 4013150:	8f001526 	beq	r17,fp,40131a8 <__sprint_r.part.0+0xcc>
 4013154:	81400017 	ldw	r5,0(r16)
 4013158:	980d883a 	mov	r6,r19
 401315c:	a009883a 	mov	r4,r20
 4013160:	4014bcc0 	call	4014bcc <_fputwc_r>
 4013164:	e7000044 	addi	fp,fp,1
 4013168:	14bff81e 	bne	r2,r18,401314c <__alt_data_end+0xfc01314c>
 401316c:	9005883a 	mov	r2,r18
 4013170:	a8000215 	stw	zero,8(r21)
 4013174:	a8000115 	stw	zero,4(r21)
 4013178:	dfc00917 	ldw	ra,36(sp)
 401317c:	df000817 	ldw	fp,32(sp)
 4013180:	ddc00717 	ldw	r23,28(sp)
 4013184:	dd800617 	ldw	r22,24(sp)
 4013188:	dd400517 	ldw	r21,20(sp)
 401318c:	dd000417 	ldw	r20,16(sp)
 4013190:	dcc00317 	ldw	r19,12(sp)
 4013194:	dc800217 	ldw	r18,8(sp)
 4013198:	dc400117 	ldw	r17,4(sp)
 401319c:	dc000017 	ldw	r16,0(sp)
 40131a0:	dec00a04 	addi	sp,sp,40
 40131a4:	f800283a 	ret
 40131a8:	a8800217 	ldw	r2,8(r21)
 40131ac:	8c63883a 	add	r17,r17,r17
 40131b0:	8c63883a 	add	r17,r17,r17
 40131b4:	1445c83a 	sub	r2,r2,r17
 40131b8:	a8800215 	stw	r2,8(r21)
 40131bc:	b5800204 	addi	r22,r22,8
 40131c0:	bdc00204 	addi	r23,r23,8
 40131c4:	103fdb1e 	bne	r2,zero,4013134 <__alt_data_end+0xfc013134>
 40131c8:	0005883a 	mov	r2,zero
 40131cc:	003fe806 	br	4013170 <__alt_data_end+0xfc013170>
 40131d0:	4010c580 	call	4010c58 <__sfvwrite_r>
 40131d4:	003fe606 	br	4013170 <__alt_data_end+0xfc013170>

040131d8 <__sprint_r>:
 40131d8:	30c00217 	ldw	r3,8(r6)
 40131dc:	18000126 	beq	r3,zero,40131e4 <__sprint_r+0xc>
 40131e0:	40130dc1 	jmpi	40130dc <__sprint_r.part.0>
 40131e4:	30000115 	stw	zero,4(r6)
 40131e8:	0005883a 	mov	r2,zero
 40131ec:	f800283a 	ret

040131f0 <___vfiprintf_internal_r>:
 40131f0:	deffca04 	addi	sp,sp,-216
 40131f4:	dd403115 	stw	r21,196(sp)
 40131f8:	dfc03515 	stw	ra,212(sp)
 40131fc:	df003415 	stw	fp,208(sp)
 4013200:	ddc03315 	stw	r23,204(sp)
 4013204:	dd803215 	stw	r22,200(sp)
 4013208:	dd003015 	stw	r20,192(sp)
 401320c:	dcc02f15 	stw	r19,188(sp)
 4013210:	dc802e15 	stw	r18,184(sp)
 4013214:	dc402d15 	stw	r17,180(sp)
 4013218:	dc002c15 	stw	r16,176(sp)
 401321c:	d9002115 	stw	r4,132(sp)
 4013220:	d9402015 	stw	r5,128(sp)
 4013224:	d9c02215 	stw	r7,136(sp)
 4013228:	302b883a 	mov	r21,r6
 401322c:	20000226 	beq	r4,zero,4013238 <___vfiprintf_internal_r+0x48>
 4013230:	20800e17 	ldw	r2,56(r4)
 4013234:	1000cf26 	beq	r2,zero,4013574 <___vfiprintf_internal_r+0x384>
 4013238:	d8c02017 	ldw	r3,128(sp)
 401323c:	1880030b 	ldhu	r2,12(r3)
 4013240:	10c8000c 	andi	r3,r2,8192
 4013244:	1800071e 	bne	r3,zero,4013264 <___vfiprintf_internal_r+0x74>
 4013248:	d9402017 	ldw	r5,128(sp)
 401324c:	00f7ffc4 	movi	r3,-8193
 4013250:	10880014 	ori	r2,r2,8192
 4013254:	29001917 	ldw	r4,100(r5)
 4013258:	2880030d 	sth	r2,12(r5)
 401325c:	20c6703a 	and	r3,r4,r3
 4013260:	28c01915 	stw	r3,100(r5)
 4013264:	10c0020c 	andi	r3,r2,8
 4013268:	1800a526 	beq	r3,zero,4013500 <___vfiprintf_internal_r+0x310>
 401326c:	d9002017 	ldw	r4,128(sp)
 4013270:	20c00417 	ldw	r3,16(r4)
 4013274:	1800a226 	beq	r3,zero,4013500 <___vfiprintf_internal_r+0x310>
 4013278:	1080068c 	andi	r2,r2,26
 401327c:	00c00284 	movi	r3,10
 4013280:	10c0a826 	beq	r2,r3,4013524 <___vfiprintf_internal_r+0x334>
 4013284:	d9001a04 	addi	r4,sp,104
 4013288:	d94019c4 	addi	r5,sp,103
 401328c:	048100b4 	movhi	r18,1026
 4013290:	2145c83a 	sub	r2,r4,r5
 4013294:	94abf204 	addi	r18,r18,-20536
 4013298:	d9001e15 	stw	r4,120(sp)
 401329c:	d9401f15 	stw	r5,124(sp)
 40132a0:	dec01a15 	stw	sp,104(sp)
 40132a4:	d8001c15 	stw	zero,112(sp)
 40132a8:	d8001b15 	stw	zero,108(sp)
 40132ac:	d811883a 	mov	r8,sp
 40132b0:	d8002615 	stw	zero,152(sp)
 40132b4:	d8002415 	stw	zero,144(sp)
 40132b8:	d8802815 	stw	r2,160(sp)
 40132bc:	a82d883a 	mov	r22,r21
 40132c0:	b0800007 	ldb	r2,0(r22)
 40132c4:	10040d26 	beq	r2,zero,40142fc <___vfiprintf_internal_r+0x110c>
 40132c8:	00c00944 	movi	r3,37
 40132cc:	b029883a 	mov	r20,r22
 40132d0:	10c0021e 	bne	r2,r3,40132dc <___vfiprintf_internal_r+0xec>
 40132d4:	00001606 	br	4013330 <___vfiprintf_internal_r+0x140>
 40132d8:	10c00326 	beq	r2,r3,40132e8 <___vfiprintf_internal_r+0xf8>
 40132dc:	a5000044 	addi	r20,r20,1
 40132e0:	a0800007 	ldb	r2,0(r20)
 40132e4:	103ffc1e 	bne	r2,zero,40132d8 <__alt_data_end+0xfc0132d8>
 40132e8:	a5a1c83a 	sub	r16,r20,r22
 40132ec:	80001026 	beq	r16,zero,4013330 <___vfiprintf_internal_r+0x140>
 40132f0:	d8c01c17 	ldw	r3,112(sp)
 40132f4:	d8801b17 	ldw	r2,108(sp)
 40132f8:	45800015 	stw	r22,0(r8)
 40132fc:	80c7883a 	add	r3,r16,r3
 4013300:	10800044 	addi	r2,r2,1
 4013304:	44000115 	stw	r16,4(r8)
 4013308:	d8c01c15 	stw	r3,112(sp)
 401330c:	d8801b15 	stw	r2,108(sp)
 4013310:	010001c4 	movi	r4,7
 4013314:	2080750e 	bge	r4,r2,40134ec <___vfiprintf_internal_r+0x2fc>
 4013318:	1803951e 	bne	r3,zero,4014170 <___vfiprintf_internal_r+0xf80>
 401331c:	d8c02417 	ldw	r3,144(sp)
 4013320:	d8001b15 	stw	zero,108(sp)
 4013324:	d811883a 	mov	r8,sp
 4013328:	1c07883a 	add	r3,r3,r16
 401332c:	d8c02415 	stw	r3,144(sp)
 4013330:	a0800007 	ldb	r2,0(r20)
 4013334:	1002e026 	beq	r2,zero,4013eb8 <___vfiprintf_internal_r+0xcc8>
 4013338:	a5800044 	addi	r22,r20,1
 401333c:	a0c00047 	ldb	r3,1(r20)
 4013340:	d8001d85 	stb	zero,118(sp)
 4013344:	0027883a 	mov	r19,zero
 4013348:	d8002305 	stb	zero,140(sp)
 401334c:	043fffc4 	movi	r16,-1
 4013350:	d8002515 	stw	zero,148(sp)
 4013354:	0023883a 	mov	r17,zero
 4013358:	05001604 	movi	r20,88
 401335c:	05400244 	movi	r21,9
 4013360:	402f883a 	mov	r23,r8
 4013364:	b5800044 	addi	r22,r22,1
 4013368:	18bff804 	addi	r2,r3,-32
 401336c:	a0827736 	bltu	r20,r2,4013d4c <___vfiprintf_internal_r+0xb5c>
 4013370:	100490ba 	slli	r2,r2,2
 4013374:	01010074 	movhi	r4,1025
 4013378:	210ce204 	addi	r4,r4,13192
 401337c:	1105883a 	add	r2,r2,r4
 4013380:	10800017 	ldw	r2,0(r2)
 4013384:	1000683a 	jmp	r2
 4013388:	04013a4c 	andi	r16,zero,1257
 401338c:	04013d4c 	andi	r16,zero,1269
 4013390:	04013d4c 	andi	r16,zero,1269
 4013394:	04013a68 	cmpgeui	r16,zero,1257
 4013398:	04013d4c 	andi	r16,zero,1269
 401339c:	04013d4c 	andi	r16,zero,1269
 40133a0:	04013d4c 	andi	r16,zero,1269
 40133a4:	04013d4c 	andi	r16,zero,1269
 40133a8:	04013d4c 	andi	r16,zero,1269
 40133ac:	04013d4c 	andi	r16,zero,1269
 40133b0:	04013c70 	cmpltui	r16,zero,1265
 40133b4:	04013c94 	movui	r16,1266
 40133b8:	04013d4c 	andi	r16,zero,1269
 40133bc:	0401358c 	andi	r16,zero,1238
 40133c0:	04013ca8 	cmpgeui	r16,zero,1266
 40133c4:	04013d4c 	andi	r16,zero,1269
 40133c8:	04013a74 	movhi	r16,1257
 40133cc:	04013a80 	call	4013a8 <__alt_mem_sdram-0x3bfec58>
 40133d0:	04013a80 	call	4013a8 <__alt_mem_sdram-0x3bfec58>
 40133d4:	04013a80 	call	4013a8 <__alt_mem_sdram-0x3bfec58>
 40133d8:	04013a80 	call	4013a8 <__alt_mem_sdram-0x3bfec58>
 40133dc:	04013a80 	call	4013a8 <__alt_mem_sdram-0x3bfec58>
 40133e0:	04013a80 	call	4013a8 <__alt_mem_sdram-0x3bfec58>
 40133e4:	04013a80 	call	4013a8 <__alt_mem_sdram-0x3bfec58>
 40133e8:	04013a80 	call	4013a8 <__alt_mem_sdram-0x3bfec58>
 40133ec:	04013a80 	call	4013a8 <__alt_mem_sdram-0x3bfec58>
 40133f0:	04013d4c 	andi	r16,zero,1269
 40133f4:	04013d4c 	andi	r16,zero,1269
 40133f8:	04013d4c 	andi	r16,zero,1269
 40133fc:	04013d4c 	andi	r16,zero,1269
 4013400:	04013d4c 	andi	r16,zero,1269
 4013404:	04013d4c 	andi	r16,zero,1269
 4013408:	04013d4c 	andi	r16,zero,1269
 401340c:	04013d4c 	andi	r16,zero,1269
 4013410:	04013d4c 	andi	r16,zero,1269
 4013414:	04013d4c 	andi	r16,zero,1269
 4013418:	04013ac0 	call	4013ac <__alt_mem_sdram-0x3bfec54>
 401341c:	04013d4c 	andi	r16,zero,1269
 4013420:	04013d4c 	andi	r16,zero,1269
 4013424:	04013d4c 	andi	r16,zero,1269
 4013428:	04013d4c 	andi	r16,zero,1269
 401342c:	04013d4c 	andi	r16,zero,1269
 4013430:	04013d4c 	andi	r16,zero,1269
 4013434:	04013d4c 	andi	r16,zero,1269
 4013438:	04013d4c 	andi	r16,zero,1269
 401343c:	04013d4c 	andi	r16,zero,1269
 4013440:	04013d4c 	andi	r16,zero,1269
 4013444:	04013afc 	xorhi	r16,zero,1259
 4013448:	04013d4c 	andi	r16,zero,1269
 401344c:	04013d4c 	andi	r16,zero,1269
 4013450:	04013d4c 	andi	r16,zero,1269
 4013454:	04013d4c 	andi	r16,zero,1269
 4013458:	04013d4c 	andi	r16,zero,1269
 401345c:	04013b58 	cmpnei	r16,zero,1261
 4013460:	04013d4c 	andi	r16,zero,1269
 4013464:	04013d4c 	andi	r16,zero,1269
 4013468:	04013bcc 	andi	r16,zero,1263
 401346c:	04013d4c 	andi	r16,zero,1269
 4013470:	04013d4c 	andi	r16,zero,1269
 4013474:	04013d4c 	andi	r16,zero,1269
 4013478:	04013d4c 	andi	r16,zero,1269
 401347c:	04013d4c 	andi	r16,zero,1269
 4013480:	04013d4c 	andi	r16,zero,1269
 4013484:	04013d4c 	andi	r16,zero,1269
 4013488:	04013d4c 	andi	r16,zero,1269
 401348c:	04013d4c 	andi	r16,zero,1269
 4013490:	04013d4c 	andi	r16,zero,1269
 4013494:	04013974 	movhi	r16,1253
 4013498:	040139a4 	muli	r16,zero,1254
 401349c:	04013d4c 	andi	r16,zero,1269
 40134a0:	04013d4c 	andi	r16,zero,1269
 40134a4:	04013d4c 	andi	r16,zero,1269
 40134a8:	04013cf4 	movhi	r16,1267
 40134ac:	040139a4 	muli	r16,zero,1254
 40134b0:	04013d4c 	andi	r16,zero,1269
 40134b4:	04013d4c 	andi	r16,zero,1269
 40134b8:	0401384c 	andi	r16,zero,1249
 40134bc:	04013d4c 	andi	r16,zero,1269
 40134c0:	04013860 	cmpeqi	r16,zero,1249
 40134c4:	04013898 	cmpnei	r16,zero,1250
 40134c8:	04013598 	cmpnei	r16,zero,1238
 40134cc:	04013840 	call	401384 <__alt_mem_sdram-0x3bfec7c>
 40134d0:	04013d4c 	andi	r16,zero,1269
 40134d4:	04013c0c 	andi	r16,zero,1264
 40134d8:	04013d4c 	andi	r16,zero,1269
 40134dc:	04013c58 	cmpnei	r16,zero,1265
 40134e0:	04013d4c 	andi	r16,zero,1269
 40134e4:	04013d4c 	andi	r16,zero,1269
 40134e8:	0401391c 	xori	r16,zero,1252
 40134ec:	42000204 	addi	r8,r8,8
 40134f0:	d8c02417 	ldw	r3,144(sp)
 40134f4:	1c07883a 	add	r3,r3,r16
 40134f8:	d8c02415 	stw	r3,144(sp)
 40134fc:	003f8c06 	br	4013330 <__alt_data_end+0xfc013330>
 4013500:	d9402017 	ldw	r5,128(sp)
 4013504:	d9002117 	ldw	r4,132(sp)
 4013508:	400e7c80 	call	400e7c8 <__swsetup_r>
 401350c:	1003c11e 	bne	r2,zero,4014414 <___vfiprintf_internal_r+0x1224>
 4013510:	d9402017 	ldw	r5,128(sp)
 4013514:	00c00284 	movi	r3,10
 4013518:	2880030b 	ldhu	r2,12(r5)
 401351c:	1080068c 	andi	r2,r2,26
 4013520:	10ff581e 	bne	r2,r3,4013284 <__alt_data_end+0xfc013284>
 4013524:	d8c02017 	ldw	r3,128(sp)
 4013528:	1880038f 	ldh	r2,14(r3)
 401352c:	103f5516 	blt	r2,zero,4013284 <__alt_data_end+0xfc013284>
 4013530:	d9c02217 	ldw	r7,136(sp)
 4013534:	d9002117 	ldw	r4,132(sp)
 4013538:	a80d883a 	mov	r6,r21
 401353c:	180b883a 	mov	r5,r3
 4013540:	40147180 	call	4014718 <__sbprintf>
 4013544:	dfc03517 	ldw	ra,212(sp)
 4013548:	df003417 	ldw	fp,208(sp)
 401354c:	ddc03317 	ldw	r23,204(sp)
 4013550:	dd803217 	ldw	r22,200(sp)
 4013554:	dd403117 	ldw	r21,196(sp)
 4013558:	dd003017 	ldw	r20,192(sp)
 401355c:	dcc02f17 	ldw	r19,188(sp)
 4013560:	dc802e17 	ldw	r18,184(sp)
 4013564:	dc402d17 	ldw	r17,180(sp)
 4013568:	dc002c17 	ldw	r16,176(sp)
 401356c:	dec03604 	addi	sp,sp,216
 4013570:	f800283a 	ret
 4013574:	40107d40 	call	40107d4 <__sinit>
 4013578:	003f2f06 	br	4013238 <__alt_data_end+0xfc013238>
 401357c:	d8c02517 	ldw	r3,148(sp)
 4013580:	d8802215 	stw	r2,136(sp)
 4013584:	00c7c83a 	sub	r3,zero,r3
 4013588:	d8c02515 	stw	r3,148(sp)
 401358c:	8c400114 	ori	r17,r17,4
 4013590:	b0c00007 	ldb	r3,0(r22)
 4013594:	003f7306 	br	4013364 <__alt_data_end+0xfc013364>
 4013598:	00800c04 	movi	r2,48
 401359c:	d9402217 	ldw	r5,136(sp)
 40135a0:	d8801d05 	stb	r2,116(sp)
 40135a4:	00801e04 	movi	r2,120
 40135a8:	d8801d45 	stb	r2,117(sp)
 40135ac:	d8001d85 	stb	zero,118(sp)
 40135b0:	b811883a 	mov	r8,r23
 40135b4:	28c00104 	addi	r3,r5,4
 40135b8:	2cc00017 	ldw	r19,0(r5)
 40135bc:	0029883a 	mov	r20,zero
 40135c0:	88800094 	ori	r2,r17,2
 40135c4:	80032516 	blt	r16,zero,401425c <___vfiprintf_internal_r+0x106c>
 40135c8:	00bfdfc4 	movi	r2,-129
 40135cc:	88a2703a 	and	r17,r17,r2
 40135d0:	d8c02215 	stw	r3,136(sp)
 40135d4:	8c400094 	ori	r17,r17,2
 40135d8:	98032a1e 	bne	r19,zero,4014284 <___vfiprintf_internal_r+0x1094>
 40135dc:	008100b4 	movhi	r2,1026
 40135e0:	10ab9204 	addi	r2,r2,-20920
 40135e4:	d8802615 	stw	r2,152(sp)
 40135e8:	002b883a 	mov	r21,zero
 40135ec:	8001741e 	bne	r16,zero,4013bc0 <___vfiprintf_internal_r+0x9d0>
 40135f0:	0021883a 	mov	r16,zero
 40135f4:	0029883a 	mov	r20,zero
 40135f8:	ddc01a04 	addi	r23,sp,104
 40135fc:	8027883a 	mov	r19,r16
 4013600:	8500010e 	bge	r16,r20,4013608 <___vfiprintf_internal_r+0x418>
 4013604:	a027883a 	mov	r19,r20
 4013608:	ad403fcc 	andi	r21,r21,255
 401360c:	ad40201c 	xori	r21,r21,128
 4013610:	ad7fe004 	addi	r21,r21,-128
 4013614:	a8000126 	beq	r21,zero,401361c <___vfiprintf_internal_r+0x42c>
 4013618:	9cc00044 	addi	r19,r19,1
 401361c:	89c0008c 	andi	r7,r17,2
 4013620:	38000126 	beq	r7,zero,4013628 <___vfiprintf_internal_r+0x438>
 4013624:	9cc00084 	addi	r19,r19,2
 4013628:	88c0210c 	andi	r3,r17,132
 401362c:	1801dd1e 	bne	r3,zero,4013da4 <___vfiprintf_internal_r+0xbb4>
 4013630:	d9402517 	ldw	r5,148(sp)
 4013634:	2cebc83a 	sub	r21,r5,r19
 4013638:	0541da0e 	bge	zero,r21,4013da4 <___vfiprintf_internal_r+0xbb4>
 401363c:	07000404 	movi	fp,16
 4013640:	d8801c17 	ldw	r2,112(sp)
 4013644:	e543be0e 	bge	fp,r21,4014540 <___vfiprintf_internal_r+0x1350>
 4013648:	014100b4 	movhi	r5,1026
 401364c:	296bf604 	addi	r5,r5,-20520
 4013650:	dc002715 	stw	r16,156(sp)
 4013654:	d9801b17 	ldw	r6,108(sp)
 4013658:	a821883a 	mov	r16,r21
 401365c:	d9402315 	stw	r5,140(sp)
 4013660:	028001c4 	movi	r10,7
 4013664:	d9c02915 	stw	r7,164(sp)
 4013668:	182b883a 	mov	r21,r3
 401366c:	00000506 	br	4013684 <___vfiprintf_internal_r+0x494>
 4013670:	31000084 	addi	r4,r6,2
 4013674:	42000204 	addi	r8,r8,8
 4013678:	180d883a 	mov	r6,r3
 401367c:	843ffc04 	addi	r16,r16,-16
 4013680:	e4000f0e 	bge	fp,r16,40136c0 <___vfiprintf_internal_r+0x4d0>
 4013684:	010100b4 	movhi	r4,1026
 4013688:	10800404 	addi	r2,r2,16
 401368c:	30c00044 	addi	r3,r6,1
 4013690:	212bf604 	addi	r4,r4,-20520
 4013694:	41000015 	stw	r4,0(r8)
 4013698:	47000115 	stw	fp,4(r8)
 401369c:	d8801c15 	stw	r2,112(sp)
 40136a0:	d8c01b15 	stw	r3,108(sp)
 40136a4:	50fff20e 	bge	r10,r3,4013670 <__alt_data_end+0xfc013670>
 40136a8:	1001b21e 	bne	r2,zero,4013d74 <___vfiprintf_internal_r+0xb84>
 40136ac:	843ffc04 	addi	r16,r16,-16
 40136b0:	000d883a 	mov	r6,zero
 40136b4:	01000044 	movi	r4,1
 40136b8:	d811883a 	mov	r8,sp
 40136bc:	e43ff116 	blt	fp,r16,4013684 <__alt_data_end+0xfc013684>
 40136c0:	a807883a 	mov	r3,r21
 40136c4:	d9c02917 	ldw	r7,164(sp)
 40136c8:	802b883a 	mov	r21,r16
 40136cc:	dc002717 	ldw	r16,156(sp)
 40136d0:	d9402317 	ldw	r5,140(sp)
 40136d4:	a885883a 	add	r2,r21,r2
 40136d8:	45400115 	stw	r21,4(r8)
 40136dc:	41400015 	stw	r5,0(r8)
 40136e0:	d8801c15 	stw	r2,112(sp)
 40136e4:	d9001b15 	stw	r4,108(sp)
 40136e8:	014001c4 	movi	r5,7
 40136ec:	29026216 	blt	r5,r4,4014078 <___vfiprintf_internal_r+0xe88>
 40136f0:	d9801d87 	ldb	r6,118(sp)
 40136f4:	42000204 	addi	r8,r8,8
 40136f8:	21400044 	addi	r5,r4,1
 40136fc:	3001ae1e 	bne	r6,zero,4013db8 <___vfiprintf_internal_r+0xbc8>
 4013700:	3801bb26 	beq	r7,zero,4013df0 <___vfiprintf_internal_r+0xc00>
 4013704:	d9001d04 	addi	r4,sp,116
 4013708:	10800084 	addi	r2,r2,2
 401370c:	41000015 	stw	r4,0(r8)
 4013710:	01000084 	movi	r4,2
 4013714:	41000115 	stw	r4,4(r8)
 4013718:	d8801c15 	stw	r2,112(sp)
 401371c:	d9401b15 	stw	r5,108(sp)
 4013720:	010001c4 	movi	r4,7
 4013724:	2142680e 	bge	r4,r5,40140c8 <___vfiprintf_internal_r+0xed8>
 4013728:	1002b11e 	bne	r2,zero,40141f0 <___vfiprintf_internal_r+0x1000>
 401372c:	01802004 	movi	r6,128
 4013730:	01400044 	movi	r5,1
 4013734:	0009883a 	mov	r4,zero
 4013738:	d811883a 	mov	r8,sp
 401373c:	1981ae1e 	bne	r3,r6,4013df8 <___vfiprintf_internal_r+0xc08>
 4013740:	d8c02517 	ldw	r3,148(sp)
 4013744:	1cf9c83a 	sub	fp,r3,r19
 4013748:	0701ab0e 	bge	zero,fp,4013df8 <___vfiprintf_internal_r+0xc08>
 401374c:	05400404 	movi	r21,16
 4013750:	af03a90e 	bge	r21,fp,40145f8 <___vfiprintf_internal_r+0x1408>
 4013754:	014100b4 	movhi	r5,1026
 4013758:	296bf204 	addi	r5,r5,-20536
 401375c:	d9402315 	stw	r5,140(sp)
 4013760:	01c001c4 	movi	r7,7
 4013764:	00000506 	br	401377c <___vfiprintf_internal_r+0x58c>
 4013768:	21800084 	addi	r6,r4,2
 401376c:	42000204 	addi	r8,r8,8
 4013770:	1809883a 	mov	r4,r3
 4013774:	e73ffc04 	addi	fp,fp,-16
 4013778:	af000d0e 	bge	r21,fp,40137b0 <___vfiprintf_internal_r+0x5c0>
 401377c:	10800404 	addi	r2,r2,16
 4013780:	20c00044 	addi	r3,r4,1
 4013784:	44800015 	stw	r18,0(r8)
 4013788:	45400115 	stw	r21,4(r8)
 401378c:	d8801c15 	stw	r2,112(sp)
 4013790:	d8c01b15 	stw	r3,108(sp)
 4013794:	38fff40e 	bge	r7,r3,4013768 <__alt_data_end+0xfc013768>
 4013798:	10022b1e 	bne	r2,zero,4014048 <___vfiprintf_internal_r+0xe58>
 401379c:	e73ffc04 	addi	fp,fp,-16
 40137a0:	01800044 	movi	r6,1
 40137a4:	0009883a 	mov	r4,zero
 40137a8:	d811883a 	mov	r8,sp
 40137ac:	af3ff316 	blt	r21,fp,401377c <__alt_data_end+0xfc01377c>
 40137b0:	d8c02317 	ldw	r3,140(sp)
 40137b4:	1705883a 	add	r2,r2,fp
 40137b8:	47000115 	stw	fp,4(r8)
 40137bc:	40c00015 	stw	r3,0(r8)
 40137c0:	d8801c15 	stw	r2,112(sp)
 40137c4:	d9801b15 	stw	r6,108(sp)
 40137c8:	00c001c4 	movi	r3,7
 40137cc:	19829416 	blt	r3,r6,4014220 <___vfiprintf_internal_r+0x1030>
 40137d0:	8521c83a 	sub	r16,r16,r20
 40137d4:	42000204 	addi	r8,r8,8
 40137d8:	31400044 	addi	r5,r6,1
 40137dc:	3009883a 	mov	r4,r6
 40137e0:	04018716 	blt	zero,r16,4013e00 <___vfiprintf_internal_r+0xc10>
 40137e4:	a085883a 	add	r2,r20,r2
 40137e8:	45c00015 	stw	r23,0(r8)
 40137ec:	45000115 	stw	r20,4(r8)
 40137f0:	d8801c15 	stw	r2,112(sp)
 40137f4:	d9401b15 	stw	r5,108(sp)
 40137f8:	00c001c4 	movi	r3,7
 40137fc:	1941c20e 	bge	r3,r5,4013f08 <___vfiprintf_internal_r+0xd18>
 4013800:	1002531e 	bne	r2,zero,4014150 <___vfiprintf_internal_r+0xf60>
 4013804:	d8001b15 	stw	zero,108(sp)
 4013808:	8c40010c 	andi	r17,r17,4
 401380c:	88023226 	beq	r17,zero,40140d8 <___vfiprintf_internal_r+0xee8>
 4013810:	d9002517 	ldw	r4,148(sp)
 4013814:	24e3c83a 	sub	r17,r4,r19
 4013818:	04432916 	blt	zero,r17,40144c0 <___vfiprintf_internal_r+0x12d0>
 401381c:	d8802517 	ldw	r2,148(sp)
 4013820:	14c0010e 	bge	r2,r19,4013828 <___vfiprintf_internal_r+0x638>
 4013824:	9805883a 	mov	r2,r19
 4013828:	d8c02417 	ldw	r3,144(sp)
 401382c:	1887883a 	add	r3,r3,r2
 4013830:	d8c02415 	stw	r3,144(sp)
 4013834:	d8001b15 	stw	zero,108(sp)
 4013838:	d811883a 	mov	r8,sp
 401383c:	003ea006 	br	40132c0 <__alt_data_end+0xfc0132c0>
 4013840:	8c400814 	ori	r17,r17,32
 4013844:	b0c00007 	ldb	r3,0(r22)
 4013848:	003ec606 	br	4013364 <__alt_data_end+0xfc013364>
 401384c:	b0c00007 	ldb	r3,0(r22)
 4013850:	00801b04 	movi	r2,108
 4013854:	18832026 	beq	r3,r2,40144d8 <___vfiprintf_internal_r+0x12e8>
 4013858:	8c400414 	ori	r17,r17,16
 401385c:	003ec106 	br	4013364 <__alt_data_end+0xfc013364>
 4013860:	9cc03fcc 	andi	r19,r19,255
 4013864:	b811883a 	mov	r8,r23
 4013868:	9803981e 	bne	r19,zero,40146cc <___vfiprintf_internal_r+0x14dc>
 401386c:	8880080c 	andi	r2,r17,32
 4013870:	1002be26 	beq	r2,zero,401436c <___vfiprintf_internal_r+0x117c>
 4013874:	d9002217 	ldw	r4,136(sp)
 4013878:	d9402417 	ldw	r5,144(sp)
 401387c:	20800017 	ldw	r2,0(r4)
 4013880:	2807d7fa 	srai	r3,r5,31
 4013884:	21000104 	addi	r4,r4,4
 4013888:	d9002215 	stw	r4,136(sp)
 401388c:	11400015 	stw	r5,0(r2)
 4013890:	10c00115 	stw	r3,4(r2)
 4013894:	003e8a06 	br	40132c0 <__alt_data_end+0xfc0132c0>
 4013898:	9cc03fcc 	andi	r19,r19,255
 401389c:	b811883a 	mov	r8,r23
 40138a0:	9803871e 	bne	r19,zero,40146c0 <___vfiprintf_internal_r+0x14d0>
 40138a4:	8880080c 	andi	r2,r17,32
 40138a8:	10009a26 	beq	r2,zero,4013b14 <___vfiprintf_internal_r+0x924>
 40138ac:	d9002217 	ldw	r4,136(sp)
 40138b0:	d8001d85 	stb	zero,118(sp)
 40138b4:	20800204 	addi	r2,r4,8
 40138b8:	24c00017 	ldw	r19,0(r4)
 40138bc:	25000117 	ldw	r20,4(r4)
 40138c0:	8002a416 	blt	r16,zero,4014354 <___vfiprintf_internal_r+0x1164>
 40138c4:	013fdfc4 	movi	r4,-129
 40138c8:	9d06b03a 	or	r3,r19,r20
 40138cc:	d8802215 	stw	r2,136(sp)
 40138d0:	8922703a 	and	r17,r17,r4
 40138d4:	18009b26 	beq	r3,zero,4013b44 <___vfiprintf_internal_r+0x954>
 40138d8:	002b883a 	mov	r21,zero
 40138dc:	ddc01a04 	addi	r23,sp,104
 40138e0:	9806d0fa 	srli	r3,r19,3
 40138e4:	a008977a 	slli	r4,r20,29
 40138e8:	a028d0fa 	srli	r20,r20,3
 40138ec:	9cc001cc 	andi	r19,r19,7
 40138f0:	98800c04 	addi	r2,r19,48
 40138f4:	bdffffc4 	addi	r23,r23,-1
 40138f8:	20e6b03a 	or	r19,r4,r3
 40138fc:	b8800005 	stb	r2,0(r23)
 4013900:	9d06b03a 	or	r3,r19,r20
 4013904:	183ff61e 	bne	r3,zero,40138e0 <__alt_data_end+0xfc0138e0>
 4013908:	88c0004c 	andi	r3,r17,1
 401390c:	18021f1e 	bne	r3,zero,401418c <___vfiprintf_internal_r+0xf9c>
 4013910:	d9401e17 	ldw	r5,120(sp)
 4013914:	2de9c83a 	sub	r20,r5,r23
 4013918:	003f3806 	br	40135fc <__alt_data_end+0xfc0135fc>
 401391c:	9cc03fcc 	andi	r19,r19,255
 4013920:	b811883a 	mov	r8,r23
 4013924:	98034f1e 	bne	r19,zero,4014664 <___vfiprintf_internal_r+0x1474>
 4013928:	008100b4 	movhi	r2,1026
 401392c:	10ab9204 	addi	r2,r2,-20920
 4013930:	d8802615 	stw	r2,152(sp)
 4013934:	8880080c 	andi	r2,r17,32
 4013938:	1000ac26 	beq	r2,zero,4013bec <___vfiprintf_internal_r+0x9fc>
 401393c:	d9002217 	ldw	r4,136(sp)
 4013940:	24c00017 	ldw	r19,0(r4)
 4013944:	25000117 	ldw	r20,4(r4)
 4013948:	21000204 	addi	r4,r4,8
 401394c:	d9002215 	stw	r4,136(sp)
 4013950:	8880004c 	andi	r2,r17,1
 4013954:	1001e726 	beq	r2,zero,40140f4 <___vfiprintf_internal_r+0xf04>
 4013958:	9d04b03a 	or	r2,r19,r20
 401395c:	10025c1e 	bne	r2,zero,40142d0 <___vfiprintf_internal_r+0x10e0>
 4013960:	d8001d85 	stb	zero,118(sp)
 4013964:	80024416 	blt	r16,zero,4014278 <___vfiprintf_internal_r+0x1088>
 4013968:	00bfdfc4 	movi	r2,-129
 401396c:	88a2703a 	and	r17,r17,r2
 4013970:	003f1d06 	br	40135e8 <__alt_data_end+0xfc0135e8>
 4013974:	d8c02217 	ldw	r3,136(sp)
 4013978:	04c00044 	movi	r19,1
 401397c:	b811883a 	mov	r8,r23
 4013980:	18800017 	ldw	r2,0(r3)
 4013984:	18c00104 	addi	r3,r3,4
 4013988:	d8001d85 	stb	zero,118(sp)
 401398c:	d8801005 	stb	r2,64(sp)
 4013990:	d8c02215 	stw	r3,136(sp)
 4013994:	9829883a 	mov	r20,r19
 4013998:	ddc01004 	addi	r23,sp,64
 401399c:	0021883a 	mov	r16,zero
 40139a0:	003f1e06 	br	401361c <__alt_data_end+0xfc01361c>
 40139a4:	9cc03fcc 	andi	r19,r19,255
 40139a8:	b811883a 	mov	r8,r23
 40139ac:	9803331e 	bne	r19,zero,401467c <___vfiprintf_internal_r+0x148c>
 40139b0:	8880080c 	andi	r2,r17,32
 40139b4:	10004826 	beq	r2,zero,4013ad8 <___vfiprintf_internal_r+0x8e8>
 40139b8:	d9002217 	ldw	r4,136(sp)
 40139bc:	20800117 	ldw	r2,4(r4)
 40139c0:	24c00017 	ldw	r19,0(r4)
 40139c4:	21000204 	addi	r4,r4,8
 40139c8:	d9002215 	stw	r4,136(sp)
 40139cc:	1029883a 	mov	r20,r2
 40139d0:	10024c16 	blt	r2,zero,4014304 <___vfiprintf_internal_r+0x1114>
 40139d4:	dd401d83 	ldbu	r21,118(sp)
 40139d8:	80007116 	blt	r16,zero,4013ba0 <___vfiprintf_internal_r+0x9b0>
 40139dc:	00ffdfc4 	movi	r3,-129
 40139e0:	9d04b03a 	or	r2,r19,r20
 40139e4:	88e2703a 	and	r17,r17,r3
 40139e8:	1000d126 	beq	r2,zero,4013d30 <___vfiprintf_internal_r+0xb40>
 40139ec:	a0023526 	beq	r20,zero,40142c4 <___vfiprintf_internal_r+0x10d4>
 40139f0:	ddc01a04 	addi	r23,sp,104
 40139f4:	4039883a 	mov	fp,r8
 40139f8:	9809883a 	mov	r4,r19
 40139fc:	a00b883a 	mov	r5,r20
 4013a00:	01800284 	movi	r6,10
 4013a04:	000f883a 	mov	r7,zero
 4013a08:	401571c0 	call	401571c <__umoddi3>
 4013a0c:	10800c04 	addi	r2,r2,48
 4013a10:	bdffffc4 	addi	r23,r23,-1
 4013a14:	9809883a 	mov	r4,r19
 4013a18:	a00b883a 	mov	r5,r20
 4013a1c:	b8800005 	stb	r2,0(r23)
 4013a20:	01800284 	movi	r6,10
 4013a24:	000f883a 	mov	r7,zero
 4013a28:	40151200 	call	4015120 <__udivdi3>
 4013a2c:	1027883a 	mov	r19,r2
 4013a30:	10c4b03a 	or	r2,r2,r3
 4013a34:	1829883a 	mov	r20,r3
 4013a38:	103fef1e 	bne	r2,zero,40139f8 <__alt_data_end+0xfc0139f8>
 4013a3c:	d9001e17 	ldw	r4,120(sp)
 4013a40:	e011883a 	mov	r8,fp
 4013a44:	25e9c83a 	sub	r20,r4,r23
 4013a48:	003eec06 	br	40135fc <__alt_data_end+0xfc0135fc>
 4013a4c:	d8802307 	ldb	r2,140(sp)
 4013a50:	1002361e 	bne	r2,zero,401432c <___vfiprintf_internal_r+0x113c>
 4013a54:	00c00804 	movi	r3,32
 4013a58:	d8c02305 	stb	r3,140(sp)
 4013a5c:	04c00044 	movi	r19,1
 4013a60:	b0c00007 	ldb	r3,0(r22)
 4013a64:	003e3f06 	br	4013364 <__alt_data_end+0xfc013364>
 4013a68:	8c400054 	ori	r17,r17,1
 4013a6c:	b0c00007 	ldb	r3,0(r22)
 4013a70:	003e3c06 	br	4013364 <__alt_data_end+0xfc013364>
 4013a74:	8c402014 	ori	r17,r17,128
 4013a78:	b0c00007 	ldb	r3,0(r22)
 4013a7c:	003e3906 	br	4013364 <__alt_data_end+0xfc013364>
 4013a80:	dc002715 	stw	r16,156(sp)
 4013a84:	d8002515 	stw	zero,148(sp)
 4013a88:	1f3ff404 	addi	fp,r3,-48
 4013a8c:	0009883a 	mov	r4,zero
 4013a90:	b021883a 	mov	r16,r22
 4013a94:	01400284 	movi	r5,10
 4013a98:	4007eb40 	call	4007eb4 <__mulsi3>
 4013a9c:	80c00007 	ldb	r3,0(r16)
 4013aa0:	e089883a 	add	r4,fp,r2
 4013aa4:	b5800044 	addi	r22,r22,1
 4013aa8:	1f3ff404 	addi	fp,r3,-48
 4013aac:	b021883a 	mov	r16,r22
 4013ab0:	af3ff82e 	bgeu	r21,fp,4013a94 <__alt_data_end+0xfc013a94>
 4013ab4:	d9002515 	stw	r4,148(sp)
 4013ab8:	dc002717 	ldw	r16,156(sp)
 4013abc:	003e2a06 	br	4013368 <__alt_data_end+0xfc013368>
 4013ac0:	9cc03fcc 	andi	r19,r19,255
 4013ac4:	b811883a 	mov	r8,r23
 4013ac8:	9802e91e 	bne	r19,zero,4014670 <___vfiprintf_internal_r+0x1480>
 4013acc:	8c400414 	ori	r17,r17,16
 4013ad0:	8880080c 	andi	r2,r17,32
 4013ad4:	103fb81e 	bne	r2,zero,40139b8 <__alt_data_end+0xfc0139b8>
 4013ad8:	8880040c 	andi	r2,r17,16
 4013adc:	10022e26 	beq	r2,zero,4014398 <___vfiprintf_internal_r+0x11a8>
 4013ae0:	d9402217 	ldw	r5,136(sp)
 4013ae4:	2cc00017 	ldw	r19,0(r5)
 4013ae8:	29400104 	addi	r5,r5,4
 4013aec:	d9402215 	stw	r5,136(sp)
 4013af0:	9829d7fa 	srai	r20,r19,31
 4013af4:	a005883a 	mov	r2,r20
 4013af8:	003fb506 	br	40139d0 <__alt_data_end+0xfc0139d0>
 4013afc:	9cc03fcc 	andi	r19,r19,255
 4013b00:	b811883a 	mov	r8,r23
 4013b04:	9802fa1e 	bne	r19,zero,40146f0 <___vfiprintf_internal_r+0x1500>
 4013b08:	8c400414 	ori	r17,r17,16
 4013b0c:	8880080c 	andi	r2,r17,32
 4013b10:	103f661e 	bne	r2,zero,40138ac <__alt_data_end+0xfc0138ac>
 4013b14:	8880040c 	andi	r2,r17,16
 4013b18:	10020626 	beq	r2,zero,4014334 <___vfiprintf_internal_r+0x1144>
 4013b1c:	d9402217 	ldw	r5,136(sp)
 4013b20:	d8001d85 	stb	zero,118(sp)
 4013b24:	0029883a 	mov	r20,zero
 4013b28:	28800104 	addi	r2,r5,4
 4013b2c:	2cc00017 	ldw	r19,0(r5)
 4013b30:	80020816 	blt	r16,zero,4014354 <___vfiprintf_internal_r+0x1164>
 4013b34:	00ffdfc4 	movi	r3,-129
 4013b38:	d8802215 	stw	r2,136(sp)
 4013b3c:	88e2703a 	and	r17,r17,r3
 4013b40:	983f651e 	bne	r19,zero,40138d8 <__alt_data_end+0xfc0138d8>
 4013b44:	002b883a 	mov	r21,zero
 4013b48:	8002cf26 	beq	r16,zero,4014688 <___vfiprintf_internal_r+0x1498>
 4013b4c:	0027883a 	mov	r19,zero
 4013b50:	0029883a 	mov	r20,zero
 4013b54:	003f6106 	br	40138dc <__alt_data_end+0xfc0138dc>
 4013b58:	9cc03fcc 	andi	r19,r19,255
 4013b5c:	b811883a 	mov	r8,r23
 4013b60:	9802e01e 	bne	r19,zero,40146e4 <___vfiprintf_internal_r+0x14f4>
 4013b64:	8c400414 	ori	r17,r17,16
 4013b68:	8880080c 	andi	r2,r17,32
 4013b6c:	1000641e 	bne	r2,zero,4013d00 <___vfiprintf_internal_r+0xb10>
 4013b70:	8880040c 	andi	r2,r17,16
 4013b74:	1001c81e 	bne	r2,zero,4014298 <___vfiprintf_internal_r+0x10a8>
 4013b78:	8880100c 	andi	r2,r17,64
 4013b7c:	d8001d85 	stb	zero,118(sp)
 4013b80:	1002281e 	bne	r2,zero,4014424 <___vfiprintf_internal_r+0x1234>
 4013b84:	d9002217 	ldw	r4,136(sp)
 4013b88:	0029883a 	mov	r20,zero
 4013b8c:	20800104 	addi	r2,r4,4
 4013b90:	24c00017 	ldw	r19,0(r4)
 4013b94:	8001c60e 	bge	r16,zero,40142b0 <___vfiprintf_internal_r+0x10c0>
 4013b98:	d8802215 	stw	r2,136(sp)
 4013b9c:	002b883a 	mov	r21,zero
 4013ba0:	9d04b03a 	or	r2,r19,r20
 4013ba4:	103f911e 	bne	r2,zero,40139ec <__alt_data_end+0xfc0139ec>
 4013ba8:	00800044 	movi	r2,1
 4013bac:	10803fcc 	andi	r2,r2,255
 4013bb0:	00c00044 	movi	r3,1
 4013bb4:	10c05f26 	beq	r2,r3,4013d34 <___vfiprintf_internal_r+0xb44>
 4013bb8:	00c00084 	movi	r3,2
 4013bbc:	10ffe31e 	bne	r2,r3,4013b4c <__alt_data_end+0xfc013b4c>
 4013bc0:	0027883a 	mov	r19,zero
 4013bc4:	0029883a 	mov	r20,zero
 4013bc8:	00015106 	br	4014110 <___vfiprintf_internal_r+0xf20>
 4013bcc:	9cc03fcc 	andi	r19,r19,255
 4013bd0:	b811883a 	mov	r8,r23
 4013bd4:	9802c01e 	bne	r19,zero,40146d8 <___vfiprintf_internal_r+0x14e8>
 4013bd8:	014100b4 	movhi	r5,1026
 4013bdc:	296b8d04 	addi	r5,r5,-20940
 4013be0:	d9402615 	stw	r5,152(sp)
 4013be4:	8880080c 	andi	r2,r17,32
 4013be8:	103f541e 	bne	r2,zero,401393c <__alt_data_end+0xfc01393c>
 4013bec:	8880040c 	andi	r2,r17,16
 4013bf0:	1001f226 	beq	r2,zero,40143bc <___vfiprintf_internal_r+0x11cc>
 4013bf4:	d9402217 	ldw	r5,136(sp)
 4013bf8:	0029883a 	mov	r20,zero
 4013bfc:	2cc00017 	ldw	r19,0(r5)
 4013c00:	29400104 	addi	r5,r5,4
 4013c04:	d9402215 	stw	r5,136(sp)
 4013c08:	003f5106 	br	4013950 <__alt_data_end+0xfc013950>
 4013c0c:	d8c02217 	ldw	r3,136(sp)
 4013c10:	b811883a 	mov	r8,r23
 4013c14:	d8001d85 	stb	zero,118(sp)
 4013c18:	1dc00017 	ldw	r23,0(r3)
 4013c1c:	1f000104 	addi	fp,r3,4
 4013c20:	b8025926 	beq	r23,zero,4014588 <___vfiprintf_internal_r+0x1398>
 4013c24:	80023316 	blt	r16,zero,40144f4 <___vfiprintf_internal_r+0x1304>
 4013c28:	800d883a 	mov	r6,r16
 4013c2c:	000b883a 	mov	r5,zero
 4013c30:	b809883a 	mov	r4,r23
 4013c34:	da002a15 	stw	r8,168(sp)
 4013c38:	40115400 	call	4011540 <memchr>
 4013c3c:	da002a17 	ldw	r8,168(sp)
 4013c40:	10026826 	beq	r2,zero,40145e4 <___vfiprintf_internal_r+0x13f4>
 4013c44:	15e9c83a 	sub	r20,r2,r23
 4013c48:	dd401d83 	ldbu	r21,118(sp)
 4013c4c:	df002215 	stw	fp,136(sp)
 4013c50:	0021883a 	mov	r16,zero
 4013c54:	003e6906 	br	40135fc <__alt_data_end+0xfc0135fc>
 4013c58:	9cc03fcc 	andi	r19,r19,255
 4013c5c:	b811883a 	mov	r8,r23
 4013c60:	983fc126 	beq	r19,zero,4013b68 <__alt_data_end+0xfc013b68>
 4013c64:	d8c02303 	ldbu	r3,140(sp)
 4013c68:	d8c01d85 	stb	r3,118(sp)
 4013c6c:	003fbe06 	br	4013b68 <__alt_data_end+0xfc013b68>
 4013c70:	d9002217 	ldw	r4,136(sp)
 4013c74:	d9402217 	ldw	r5,136(sp)
 4013c78:	21000017 	ldw	r4,0(r4)
 4013c7c:	28800104 	addi	r2,r5,4
 4013c80:	d9002515 	stw	r4,148(sp)
 4013c84:	203e3d16 	blt	r4,zero,401357c <__alt_data_end+0xfc01357c>
 4013c88:	d8802215 	stw	r2,136(sp)
 4013c8c:	b0c00007 	ldb	r3,0(r22)
 4013c90:	003db406 	br	4013364 <__alt_data_end+0xfc013364>
 4013c94:	00c00ac4 	movi	r3,43
 4013c98:	d8c02305 	stb	r3,140(sp)
 4013c9c:	04c00044 	movi	r19,1
 4013ca0:	b0c00007 	ldb	r3,0(r22)
 4013ca4:	003daf06 	br	4013364 <__alt_data_end+0xfc013364>
 4013ca8:	b0c00007 	ldb	r3,0(r22)
 4013cac:	01000a84 	movi	r4,42
 4013cb0:	b4000044 	addi	r16,r22,1
 4013cb4:	19025e26 	beq	r3,r4,4014630 <___vfiprintf_internal_r+0x1440>
 4013cb8:	1f3ff404 	addi	fp,r3,-48
 4013cbc:	0009883a 	mov	r4,zero
 4013cc0:	af025236 	bltu	r21,fp,401460c <___vfiprintf_internal_r+0x141c>
 4013cc4:	01400284 	movi	r5,10
 4013cc8:	4007eb40 	call	4007eb4 <__mulsi3>
 4013ccc:	80c00007 	ldb	r3,0(r16)
 4013cd0:	1709883a 	add	r4,r2,fp
 4013cd4:	85800044 	addi	r22,r16,1
 4013cd8:	1f3ff404 	addi	fp,r3,-48
 4013cdc:	b021883a 	mov	r16,r22
 4013ce0:	af3ff82e 	bgeu	r21,fp,4013cc4 <__alt_data_end+0xfc013cc4>
 4013ce4:	2021883a 	mov	r16,r4
 4013ce8:	203d9f0e 	bge	r4,zero,4013368 <__alt_data_end+0xfc013368>
 4013cec:	043fffc4 	movi	r16,-1
 4013cf0:	003d9d06 	br	4013368 <__alt_data_end+0xfc013368>
 4013cf4:	8c401014 	ori	r17,r17,64
 4013cf8:	b0c00007 	ldb	r3,0(r22)
 4013cfc:	003d9906 	br	4013364 <__alt_data_end+0xfc013364>
 4013d00:	d9002217 	ldw	r4,136(sp)
 4013d04:	d8001d85 	stb	zero,118(sp)
 4013d08:	20c00204 	addi	r3,r4,8
 4013d0c:	24c00017 	ldw	r19,0(r4)
 4013d10:	25000117 	ldw	r20,4(r4)
 4013d14:	8001e716 	blt	r16,zero,40144b4 <___vfiprintf_internal_r+0x12c4>
 4013d18:	013fdfc4 	movi	r4,-129
 4013d1c:	9d04b03a 	or	r2,r19,r20
 4013d20:	d8c02215 	stw	r3,136(sp)
 4013d24:	8922703a 	and	r17,r17,r4
 4013d28:	002b883a 	mov	r21,zero
 4013d2c:	103f2f1e 	bne	r2,zero,40139ec <__alt_data_end+0xfc0139ec>
 4013d30:	803e2f26 	beq	r16,zero,40135f0 <__alt_data_end+0xfc0135f0>
 4013d34:	0027883a 	mov	r19,zero
 4013d38:	9cc00c04 	addi	r19,r19,48
 4013d3c:	dcc019c5 	stb	r19,103(sp)
 4013d40:	dd002817 	ldw	r20,160(sp)
 4013d44:	ddc019c4 	addi	r23,sp,103
 4013d48:	003e2c06 	br	40135fc <__alt_data_end+0xfc0135fc>
 4013d4c:	9cc03fcc 	andi	r19,r19,255
 4013d50:	b811883a 	mov	r8,r23
 4013d54:	9802571e 	bne	r19,zero,40146b4 <___vfiprintf_internal_r+0x14c4>
 4013d58:	18005726 	beq	r3,zero,4013eb8 <___vfiprintf_internal_r+0xcc8>
 4013d5c:	04c00044 	movi	r19,1
 4013d60:	d8c01005 	stb	r3,64(sp)
 4013d64:	d8001d85 	stb	zero,118(sp)
 4013d68:	9829883a 	mov	r20,r19
 4013d6c:	ddc01004 	addi	r23,sp,64
 4013d70:	003f0a06 	br	401399c <__alt_data_end+0xfc01399c>
 4013d74:	d9402017 	ldw	r5,128(sp)
 4013d78:	d9002117 	ldw	r4,132(sp)
 4013d7c:	d9801a04 	addi	r6,sp,104
 4013d80:	da802a15 	stw	r10,168(sp)
 4013d84:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4013d88:	da802a17 	ldw	r10,168(sp)
 4013d8c:	1000501e 	bne	r2,zero,4013ed0 <___vfiprintf_internal_r+0xce0>
 4013d90:	d9801b17 	ldw	r6,108(sp)
 4013d94:	d8801c17 	ldw	r2,112(sp)
 4013d98:	d811883a 	mov	r8,sp
 4013d9c:	31000044 	addi	r4,r6,1
 4013da0:	003e3606 	br	401367c <__alt_data_end+0xfc01367c>
 4013da4:	d9001b17 	ldw	r4,108(sp)
 4013da8:	d8801c17 	ldw	r2,112(sp)
 4013dac:	21400044 	addi	r5,r4,1
 4013db0:	d9801d87 	ldb	r6,118(sp)
 4013db4:	303e5226 	beq	r6,zero,4013700 <__alt_data_end+0xfc013700>
 4013db8:	01800044 	movi	r6,1
 4013dbc:	d9001d84 	addi	r4,sp,118
 4013dc0:	1185883a 	add	r2,r2,r6
 4013dc4:	41000015 	stw	r4,0(r8)
 4013dc8:	41800115 	stw	r6,4(r8)
 4013dcc:	d8801c15 	stw	r2,112(sp)
 4013dd0:	d9401b15 	stw	r5,108(sp)
 4013dd4:	010001c4 	movi	r4,7
 4013dd8:	2140b00e 	bge	r4,r5,401409c <___vfiprintf_internal_r+0xeac>
 4013ddc:	1000f61e 	bne	r2,zero,40141b8 <___vfiprintf_internal_r+0xfc8>
 4013de0:	3800b31e 	bne	r7,zero,40140b0 <___vfiprintf_internal_r+0xec0>
 4013de4:	0009883a 	mov	r4,zero
 4013de8:	300b883a 	mov	r5,r6
 4013dec:	d811883a 	mov	r8,sp
 4013df0:	01802004 	movi	r6,128
 4013df4:	19be5226 	beq	r3,r6,4013740 <__alt_data_end+0xfc013740>
 4013df8:	8521c83a 	sub	r16,r16,r20
 4013dfc:	043e790e 	bge	zero,r16,40137e4 <__alt_data_end+0xfc0137e4>
 4013e00:	05400404 	movi	r21,16
 4013e04:	ac01b00e 	bge	r21,r16,40144c8 <___vfiprintf_internal_r+0x12d8>
 4013e08:	014100b4 	movhi	r5,1026
 4013e0c:	296bf204 	addi	r5,r5,-20536
 4013e10:	d9402315 	stw	r5,140(sp)
 4013e14:	070001c4 	movi	fp,7
 4013e18:	00000506 	br	4013e30 <___vfiprintf_internal_r+0xc40>
 4013e1c:	21400084 	addi	r5,r4,2
 4013e20:	42000204 	addi	r8,r8,8
 4013e24:	1809883a 	mov	r4,r3
 4013e28:	843ffc04 	addi	r16,r16,-16
 4013e2c:	ac000d0e 	bge	r21,r16,4013e64 <___vfiprintf_internal_r+0xc74>
 4013e30:	10800404 	addi	r2,r2,16
 4013e34:	20c00044 	addi	r3,r4,1
 4013e38:	44800015 	stw	r18,0(r8)
 4013e3c:	45400115 	stw	r21,4(r8)
 4013e40:	d8801c15 	stw	r2,112(sp)
 4013e44:	d8c01b15 	stw	r3,108(sp)
 4013e48:	e0fff40e 	bge	fp,r3,4013e1c <__alt_data_end+0xfc013e1c>
 4013e4c:	1000101e 	bne	r2,zero,4013e90 <___vfiprintf_internal_r+0xca0>
 4013e50:	843ffc04 	addi	r16,r16,-16
 4013e54:	01400044 	movi	r5,1
 4013e58:	0009883a 	mov	r4,zero
 4013e5c:	d811883a 	mov	r8,sp
 4013e60:	ac3ff316 	blt	r21,r16,4013e30 <__alt_data_end+0xfc013e30>
 4013e64:	d8c02317 	ldw	r3,140(sp)
 4013e68:	1405883a 	add	r2,r2,r16
 4013e6c:	44000115 	stw	r16,4(r8)
 4013e70:	40c00015 	stw	r3,0(r8)
 4013e74:	d8801c15 	stw	r2,112(sp)
 4013e78:	d9401b15 	stw	r5,108(sp)
 4013e7c:	00c001c4 	movi	r3,7
 4013e80:	19401916 	blt	r3,r5,4013ee8 <___vfiprintf_internal_r+0xcf8>
 4013e84:	42000204 	addi	r8,r8,8
 4013e88:	29400044 	addi	r5,r5,1
 4013e8c:	003e5506 	br	40137e4 <__alt_data_end+0xfc0137e4>
 4013e90:	d9402017 	ldw	r5,128(sp)
 4013e94:	d9002117 	ldw	r4,132(sp)
 4013e98:	d9801a04 	addi	r6,sp,104
 4013e9c:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4013ea0:	10000b1e 	bne	r2,zero,4013ed0 <___vfiprintf_internal_r+0xce0>
 4013ea4:	d9001b17 	ldw	r4,108(sp)
 4013ea8:	d8801c17 	ldw	r2,112(sp)
 4013eac:	d811883a 	mov	r8,sp
 4013eb0:	21400044 	addi	r5,r4,1
 4013eb4:	003fdc06 	br	4013e28 <__alt_data_end+0xfc013e28>
 4013eb8:	d8801c17 	ldw	r2,112(sp)
 4013ebc:	10000426 	beq	r2,zero,4013ed0 <___vfiprintf_internal_r+0xce0>
 4013ec0:	d9402017 	ldw	r5,128(sp)
 4013ec4:	d9002117 	ldw	r4,132(sp)
 4013ec8:	d9801a04 	addi	r6,sp,104
 4013ecc:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4013ed0:	d9402017 	ldw	r5,128(sp)
 4013ed4:	2880030b 	ldhu	r2,12(r5)
 4013ed8:	1080100c 	andi	r2,r2,64
 4013edc:	10014d1e 	bne	r2,zero,4014414 <___vfiprintf_internal_r+0x1224>
 4013ee0:	d8802417 	ldw	r2,144(sp)
 4013ee4:	003d9706 	br	4013544 <__alt_data_end+0xfc013544>
 4013ee8:	1000d21e 	bne	r2,zero,4014234 <___vfiprintf_internal_r+0x1044>
 4013eec:	00c00044 	movi	r3,1
 4013ef0:	a005883a 	mov	r2,r20
 4013ef4:	ddc00015 	stw	r23,0(sp)
 4013ef8:	dd000115 	stw	r20,4(sp)
 4013efc:	dd001c15 	stw	r20,112(sp)
 4013f00:	d8c01b15 	stw	r3,108(sp)
 4013f04:	d811883a 	mov	r8,sp
 4013f08:	42000204 	addi	r8,r8,8
 4013f0c:	8c40010c 	andi	r17,r17,4
 4013f10:	88004026 	beq	r17,zero,4014014 <___vfiprintf_internal_r+0xe24>
 4013f14:	d9002517 	ldw	r4,148(sp)
 4013f18:	24e3c83a 	sub	r17,r4,r19
 4013f1c:	04403d0e 	bge	zero,r17,4014014 <___vfiprintf_internal_r+0xe24>
 4013f20:	04000404 	movi	r16,16
 4013f24:	8441a90e 	bge	r16,r17,40145cc <___vfiprintf_internal_r+0x13dc>
 4013f28:	00c100b4 	movhi	r3,1026
 4013f2c:	18ebf604 	addi	r3,r3,-20520
 4013f30:	d9001b17 	ldw	r4,108(sp)
 4013f34:	d8c02315 	stw	r3,140(sp)
 4013f38:	050001c4 	movi	r20,7
 4013f3c:	dd402117 	ldw	r21,132(sp)
 4013f40:	ddc02017 	ldw	r23,128(sp)
 4013f44:	00000506 	br	4013f5c <___vfiprintf_internal_r+0xd6c>
 4013f48:	21400084 	addi	r5,r4,2
 4013f4c:	42000204 	addi	r8,r8,8
 4013f50:	1809883a 	mov	r4,r3
 4013f54:	8c7ffc04 	addi	r17,r17,-16
 4013f58:	84400f0e 	bge	r16,r17,4013f98 <___vfiprintf_internal_r+0xda8>
 4013f5c:	014100b4 	movhi	r5,1026
 4013f60:	10800404 	addi	r2,r2,16
 4013f64:	20c00044 	addi	r3,r4,1
 4013f68:	296bf604 	addi	r5,r5,-20520
 4013f6c:	41400015 	stw	r5,0(r8)
 4013f70:	44000115 	stw	r16,4(r8)
 4013f74:	d8801c15 	stw	r2,112(sp)
 4013f78:	d8c01b15 	stw	r3,108(sp)
 4013f7c:	a0fff20e 	bge	r20,r3,4013f48 <__alt_data_end+0xfc013f48>
 4013f80:	1000141e 	bne	r2,zero,4013fd4 <___vfiprintf_internal_r+0xde4>
 4013f84:	8c7ffc04 	addi	r17,r17,-16
 4013f88:	01400044 	movi	r5,1
 4013f8c:	0009883a 	mov	r4,zero
 4013f90:	d811883a 	mov	r8,sp
 4013f94:	847ff116 	blt	r16,r17,4013f5c <__alt_data_end+0xfc013f5c>
 4013f98:	d8c02317 	ldw	r3,140(sp)
 4013f9c:	1445883a 	add	r2,r2,r17
 4013fa0:	44400115 	stw	r17,4(r8)
 4013fa4:	40c00015 	stw	r3,0(r8)
 4013fa8:	d8801c15 	stw	r2,112(sp)
 4013fac:	d9401b15 	stw	r5,108(sp)
 4013fb0:	00c001c4 	movi	r3,7
 4013fb4:	1940170e 	bge	r3,r5,4014014 <___vfiprintf_internal_r+0xe24>
 4013fb8:	1000101e 	bne	r2,zero,4013ffc <___vfiprintf_internal_r+0xe0c>
 4013fbc:	d8802517 	ldw	r2,148(sp)
 4013fc0:	14c11616 	blt	r2,r19,401441c <___vfiprintf_internal_r+0x122c>
 4013fc4:	d9002417 	ldw	r4,144(sp)
 4013fc8:	2089883a 	add	r4,r4,r2
 4013fcc:	d9002415 	stw	r4,144(sp)
 4013fd0:	003e1806 	br	4013834 <__alt_data_end+0xfc013834>
 4013fd4:	d9801a04 	addi	r6,sp,104
 4013fd8:	b80b883a 	mov	r5,r23
 4013fdc:	a809883a 	mov	r4,r21
 4013fe0:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4013fe4:	103fba1e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 4013fe8:	d9001b17 	ldw	r4,108(sp)
 4013fec:	d8801c17 	ldw	r2,112(sp)
 4013ff0:	d811883a 	mov	r8,sp
 4013ff4:	21400044 	addi	r5,r4,1
 4013ff8:	003fd606 	br	4013f54 <__alt_data_end+0xfc013f54>
 4013ffc:	d9402017 	ldw	r5,128(sp)
 4014000:	d9002117 	ldw	r4,132(sp)
 4014004:	d9801a04 	addi	r6,sp,104
 4014008:	40130dc0 	call	40130dc <__sprint_r.part.0>
 401400c:	103fb01e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 4014010:	d8801c17 	ldw	r2,112(sp)
 4014014:	d8c02517 	ldw	r3,148(sp)
 4014018:	1cc0010e 	bge	r3,r19,4014020 <___vfiprintf_internal_r+0xe30>
 401401c:	9807883a 	mov	r3,r19
 4014020:	d9002417 	ldw	r4,144(sp)
 4014024:	20c9883a 	add	r4,r4,r3
 4014028:	d9002415 	stw	r4,144(sp)
 401402c:	103e0126 	beq	r2,zero,4013834 <__alt_data_end+0xfc013834>
 4014030:	d9402017 	ldw	r5,128(sp)
 4014034:	d9002117 	ldw	r4,132(sp)
 4014038:	d9801a04 	addi	r6,sp,104
 401403c:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4014040:	103dfc26 	beq	r2,zero,4013834 <__alt_data_end+0xfc013834>
 4014044:	003fa206 	br	4013ed0 <__alt_data_end+0xfc013ed0>
 4014048:	d9402017 	ldw	r5,128(sp)
 401404c:	d9002117 	ldw	r4,132(sp)
 4014050:	d9801a04 	addi	r6,sp,104
 4014054:	d9c02b15 	stw	r7,172(sp)
 4014058:	40130dc0 	call	40130dc <__sprint_r.part.0>
 401405c:	d9c02b17 	ldw	r7,172(sp)
 4014060:	103f9b1e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 4014064:	d9001b17 	ldw	r4,108(sp)
 4014068:	d8801c17 	ldw	r2,112(sp)
 401406c:	d811883a 	mov	r8,sp
 4014070:	21800044 	addi	r6,r4,1
 4014074:	003dbf06 	br	4013774 <__alt_data_end+0xfc013774>
 4014078:	1000d81e 	bne	r2,zero,40143dc <___vfiprintf_internal_r+0x11ec>
 401407c:	d9001d87 	ldb	r4,118(sp)
 4014080:	20000a26 	beq	r4,zero,40140ac <___vfiprintf_internal_r+0xebc>
 4014084:	00800044 	movi	r2,1
 4014088:	d9001d84 	addi	r4,sp,118
 401408c:	100b883a 	mov	r5,r2
 4014090:	d9000015 	stw	r4,0(sp)
 4014094:	d8800115 	stw	r2,4(sp)
 4014098:	d811883a 	mov	r8,sp
 401409c:	2809883a 	mov	r4,r5
 40140a0:	42000204 	addi	r8,r8,8
 40140a4:	29400044 	addi	r5,r5,1
 40140a8:	003d9506 	br	4013700 <__alt_data_end+0xfc013700>
 40140ac:	3800fd26 	beq	r7,zero,40144a4 <___vfiprintf_internal_r+0x12b4>
 40140b0:	00800084 	movi	r2,2
 40140b4:	d9001d04 	addi	r4,sp,116
 40140b8:	d9000015 	stw	r4,0(sp)
 40140bc:	d8800115 	stw	r2,4(sp)
 40140c0:	01400044 	movi	r5,1
 40140c4:	d811883a 	mov	r8,sp
 40140c8:	2809883a 	mov	r4,r5
 40140cc:	42000204 	addi	r8,r8,8
 40140d0:	29400044 	addi	r5,r5,1
 40140d4:	003f4606 	br	4013df0 <__alt_data_end+0xfc013df0>
 40140d8:	d8802517 	ldw	r2,148(sp)
 40140dc:	14c0010e 	bge	r2,r19,40140e4 <___vfiprintf_internal_r+0xef4>
 40140e0:	9805883a 	mov	r2,r19
 40140e4:	d9402417 	ldw	r5,144(sp)
 40140e8:	288b883a 	add	r5,r5,r2
 40140ec:	d9402415 	stw	r5,144(sp)
 40140f0:	003dd006 	br	4013834 <__alt_data_end+0xfc013834>
 40140f4:	d8001d85 	stb	zero,118(sp)
 40140f8:	80005d16 	blt	r16,zero,4014270 <___vfiprintf_internal_r+0x1080>
 40140fc:	00ffdfc4 	movi	r3,-129
 4014100:	9d04b03a 	or	r2,r19,r20
 4014104:	88e2703a 	and	r17,r17,r3
 4014108:	103d3726 	beq	r2,zero,40135e8 <__alt_data_end+0xfc0135e8>
 401410c:	002b883a 	mov	r21,zero
 4014110:	d9002617 	ldw	r4,152(sp)
 4014114:	ddc01a04 	addi	r23,sp,104
 4014118:	988003cc 	andi	r2,r19,15
 401411c:	a006973a 	slli	r3,r20,28
 4014120:	2085883a 	add	r2,r4,r2
 4014124:	9826d13a 	srli	r19,r19,4
 4014128:	10800003 	ldbu	r2,0(r2)
 401412c:	a028d13a 	srli	r20,r20,4
 4014130:	bdffffc4 	addi	r23,r23,-1
 4014134:	1ce6b03a 	or	r19,r3,r19
 4014138:	b8800005 	stb	r2,0(r23)
 401413c:	9d04b03a 	or	r2,r19,r20
 4014140:	103ff51e 	bne	r2,zero,4014118 <__alt_data_end+0xfc014118>
 4014144:	d8801e17 	ldw	r2,120(sp)
 4014148:	15e9c83a 	sub	r20,r2,r23
 401414c:	003d2b06 	br	40135fc <__alt_data_end+0xfc0135fc>
 4014150:	d9402017 	ldw	r5,128(sp)
 4014154:	d9002117 	ldw	r4,132(sp)
 4014158:	d9801a04 	addi	r6,sp,104
 401415c:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4014160:	103f5b1e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 4014164:	d8801c17 	ldw	r2,112(sp)
 4014168:	d811883a 	mov	r8,sp
 401416c:	003f6706 	br	4013f0c <__alt_data_end+0xfc013f0c>
 4014170:	d9402017 	ldw	r5,128(sp)
 4014174:	d9002117 	ldw	r4,132(sp)
 4014178:	d9801a04 	addi	r6,sp,104
 401417c:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4014180:	103f531e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 4014184:	d811883a 	mov	r8,sp
 4014188:	003cd906 	br	40134f0 <__alt_data_end+0xfc0134f0>
 401418c:	10803fcc 	andi	r2,r2,255
 4014190:	1080201c 	xori	r2,r2,128
 4014194:	10bfe004 	addi	r2,r2,-128
 4014198:	00c00c04 	movi	r3,48
 401419c:	10ffe926 	beq	r2,r3,4014144 <__alt_data_end+0xfc014144>
 40141a0:	b8ffffc5 	stb	r3,-1(r23)
 40141a4:	d8c01e17 	ldw	r3,120(sp)
 40141a8:	b8bfffc4 	addi	r2,r23,-1
 40141ac:	102f883a 	mov	r23,r2
 40141b0:	18a9c83a 	sub	r20,r3,r2
 40141b4:	003d1106 	br	40135fc <__alt_data_end+0xfc0135fc>
 40141b8:	d9402017 	ldw	r5,128(sp)
 40141bc:	d9002117 	ldw	r4,132(sp)
 40141c0:	d9801a04 	addi	r6,sp,104
 40141c4:	d8c02a15 	stw	r3,168(sp)
 40141c8:	d9c02b15 	stw	r7,172(sp)
 40141cc:	40130dc0 	call	40130dc <__sprint_r.part.0>
 40141d0:	d8c02a17 	ldw	r3,168(sp)
 40141d4:	d9c02b17 	ldw	r7,172(sp)
 40141d8:	103f3d1e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 40141dc:	d9001b17 	ldw	r4,108(sp)
 40141e0:	d8801c17 	ldw	r2,112(sp)
 40141e4:	d811883a 	mov	r8,sp
 40141e8:	21400044 	addi	r5,r4,1
 40141ec:	003d4406 	br	4013700 <__alt_data_end+0xfc013700>
 40141f0:	d9402017 	ldw	r5,128(sp)
 40141f4:	d9002117 	ldw	r4,132(sp)
 40141f8:	d9801a04 	addi	r6,sp,104
 40141fc:	d8c02a15 	stw	r3,168(sp)
 4014200:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4014204:	d8c02a17 	ldw	r3,168(sp)
 4014208:	103f311e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 401420c:	d9001b17 	ldw	r4,108(sp)
 4014210:	d8801c17 	ldw	r2,112(sp)
 4014214:	d811883a 	mov	r8,sp
 4014218:	21400044 	addi	r5,r4,1
 401421c:	003ef406 	br	4013df0 <__alt_data_end+0xfc013df0>
 4014220:	1000bd1e 	bne	r2,zero,4014518 <___vfiprintf_internal_r+0x1328>
 4014224:	01400044 	movi	r5,1
 4014228:	0009883a 	mov	r4,zero
 401422c:	d811883a 	mov	r8,sp
 4014230:	003ef106 	br	4013df8 <__alt_data_end+0xfc013df8>
 4014234:	d9402017 	ldw	r5,128(sp)
 4014238:	d9002117 	ldw	r4,132(sp)
 401423c:	d9801a04 	addi	r6,sp,104
 4014240:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4014244:	103f221e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 4014248:	d9401b17 	ldw	r5,108(sp)
 401424c:	d8801c17 	ldw	r2,112(sp)
 4014250:	d811883a 	mov	r8,sp
 4014254:	29400044 	addi	r5,r5,1
 4014258:	003d6206 	br	40137e4 <__alt_data_end+0xfc0137e4>
 401425c:	014100b4 	movhi	r5,1026
 4014260:	296b9204 	addi	r5,r5,-20920
 4014264:	d9402615 	stw	r5,152(sp)
 4014268:	d8c02215 	stw	r3,136(sp)
 401426c:	1023883a 	mov	r17,r2
 4014270:	9d04b03a 	or	r2,r19,r20
 4014274:	103fa51e 	bne	r2,zero,401410c <__alt_data_end+0xfc01410c>
 4014278:	002b883a 	mov	r21,zero
 401427c:	00800084 	movi	r2,2
 4014280:	003e4a06 	br	4013bac <__alt_data_end+0xfc013bac>
 4014284:	014100b4 	movhi	r5,1026
 4014288:	296b9204 	addi	r5,r5,-20920
 401428c:	002b883a 	mov	r21,zero
 4014290:	d9402615 	stw	r5,152(sp)
 4014294:	003f9e06 	br	4014110 <__alt_data_end+0xfc014110>
 4014298:	d9402217 	ldw	r5,136(sp)
 401429c:	d8001d85 	stb	zero,118(sp)
 40142a0:	0029883a 	mov	r20,zero
 40142a4:	28800104 	addi	r2,r5,4
 40142a8:	2cc00017 	ldw	r19,0(r5)
 40142ac:	803e3a16 	blt	r16,zero,4013b98 <__alt_data_end+0xfc013b98>
 40142b0:	00ffdfc4 	movi	r3,-129
 40142b4:	d8802215 	stw	r2,136(sp)
 40142b8:	88e2703a 	and	r17,r17,r3
 40142bc:	002b883a 	mov	r21,zero
 40142c0:	983e9b26 	beq	r19,zero,4013d30 <__alt_data_end+0xfc013d30>
 40142c4:	00800244 	movi	r2,9
 40142c8:	14fdc936 	bltu	r2,r19,40139f0 <__alt_data_end+0xfc0139f0>
 40142cc:	003e9a06 	br	4013d38 <__alt_data_end+0xfc013d38>
 40142d0:	00800c04 	movi	r2,48
 40142d4:	d8c01d45 	stb	r3,117(sp)
 40142d8:	d8801d05 	stb	r2,116(sp)
 40142dc:	d8001d85 	stb	zero,118(sp)
 40142e0:	88c00094 	ori	r3,r17,2
 40142e4:	80009c16 	blt	r16,zero,4014558 <___vfiprintf_internal_r+0x1368>
 40142e8:	00bfdfc4 	movi	r2,-129
 40142ec:	88a2703a 	and	r17,r17,r2
 40142f0:	8c400094 	ori	r17,r17,2
 40142f4:	002b883a 	mov	r21,zero
 40142f8:	003f8506 	br	4014110 <__alt_data_end+0xfc014110>
 40142fc:	b029883a 	mov	r20,r22
 4014300:	003c0b06 	br	4013330 <__alt_data_end+0xfc013330>
 4014304:	04e7c83a 	sub	r19,zero,r19
 4014308:	05400b44 	movi	r21,45
 401430c:	9804c03a 	cmpne	r2,r19,zero
 4014310:	0529c83a 	sub	r20,zero,r20
 4014314:	dd401d85 	stb	r21,118(sp)
 4014318:	a0a9c83a 	sub	r20,r20,r2
 401431c:	80009716 	blt	r16,zero,401457c <___vfiprintf_internal_r+0x138c>
 4014320:	00bfdfc4 	movi	r2,-129
 4014324:	88a2703a 	and	r17,r17,r2
 4014328:	003db006 	br	40139ec <__alt_data_end+0xfc0139ec>
 401432c:	b0c00007 	ldb	r3,0(r22)
 4014330:	003c0c06 	br	4013364 <__alt_data_end+0xfc013364>
 4014334:	8880100c 	andi	r2,r17,64
 4014338:	d8001d85 	stb	zero,118(sp)
 401433c:	1000461e 	bne	r2,zero,4014458 <___vfiprintf_internal_r+0x1268>
 4014340:	d9002217 	ldw	r4,136(sp)
 4014344:	0029883a 	mov	r20,zero
 4014348:	20800104 	addi	r2,r4,4
 401434c:	24c00017 	ldw	r19,0(r4)
 4014350:	803df80e 	bge	r16,zero,4013b34 <__alt_data_end+0xfc013b34>
 4014354:	9d06b03a 	or	r3,r19,r20
 4014358:	d8802215 	stw	r2,136(sp)
 401435c:	183d5e1e 	bne	r3,zero,40138d8 <__alt_data_end+0xfc0138d8>
 4014360:	002b883a 	mov	r21,zero
 4014364:	0005883a 	mov	r2,zero
 4014368:	003e1006 	br	4013bac <__alt_data_end+0xfc013bac>
 401436c:	8880040c 	andi	r2,r17,16
 4014370:	1000321e 	bne	r2,zero,401443c <___vfiprintf_internal_r+0x124c>
 4014374:	8c40100c 	andi	r17,r17,64
 4014378:	88008d26 	beq	r17,zero,40145b0 <___vfiprintf_internal_r+0x13c0>
 401437c:	d9402217 	ldw	r5,136(sp)
 4014380:	d8c02417 	ldw	r3,144(sp)
 4014384:	28800017 	ldw	r2,0(r5)
 4014388:	29400104 	addi	r5,r5,4
 401438c:	d9402215 	stw	r5,136(sp)
 4014390:	10c0000d 	sth	r3,0(r2)
 4014394:	003bca06 	br	40132c0 <__alt_data_end+0xfc0132c0>
 4014398:	8880100c 	andi	r2,r17,64
 401439c:	10003a26 	beq	r2,zero,4014488 <___vfiprintf_internal_r+0x1298>
 40143a0:	d8802217 	ldw	r2,136(sp)
 40143a4:	14c0000f 	ldh	r19,0(r2)
 40143a8:	10800104 	addi	r2,r2,4
 40143ac:	d8802215 	stw	r2,136(sp)
 40143b0:	9829d7fa 	srai	r20,r19,31
 40143b4:	a005883a 	mov	r2,r20
 40143b8:	003d8506 	br	40139d0 <__alt_data_end+0xfc0139d0>
 40143bc:	8880100c 	andi	r2,r17,64
 40143c0:	10002b26 	beq	r2,zero,4014470 <___vfiprintf_internal_r+0x1280>
 40143c4:	d8802217 	ldw	r2,136(sp)
 40143c8:	0029883a 	mov	r20,zero
 40143cc:	14c0000b 	ldhu	r19,0(r2)
 40143d0:	10800104 	addi	r2,r2,4
 40143d4:	d8802215 	stw	r2,136(sp)
 40143d8:	003d5d06 	br	4013950 <__alt_data_end+0xfc013950>
 40143dc:	d9402017 	ldw	r5,128(sp)
 40143e0:	d9002117 	ldw	r4,132(sp)
 40143e4:	d9801a04 	addi	r6,sp,104
 40143e8:	d8c02a15 	stw	r3,168(sp)
 40143ec:	d9c02b15 	stw	r7,172(sp)
 40143f0:	40130dc0 	call	40130dc <__sprint_r.part.0>
 40143f4:	d8c02a17 	ldw	r3,168(sp)
 40143f8:	d9c02b17 	ldw	r7,172(sp)
 40143fc:	103eb41e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 4014400:	d9001b17 	ldw	r4,108(sp)
 4014404:	d8801c17 	ldw	r2,112(sp)
 4014408:	d811883a 	mov	r8,sp
 401440c:	21400044 	addi	r5,r4,1
 4014410:	003e6706 	br	4013db0 <__alt_data_end+0xfc013db0>
 4014414:	00bfffc4 	movi	r2,-1
 4014418:	003c4a06 	br	4013544 <__alt_data_end+0xfc013544>
 401441c:	9805883a 	mov	r2,r19
 4014420:	003ee806 	br	4013fc4 <__alt_data_end+0xfc013fc4>
 4014424:	d8c02217 	ldw	r3,136(sp)
 4014428:	0029883a 	mov	r20,zero
 401442c:	18800104 	addi	r2,r3,4
 4014430:	1cc0000b 	ldhu	r19,0(r3)
 4014434:	803f9e0e 	bge	r16,zero,40142b0 <__alt_data_end+0xfc0142b0>
 4014438:	003dd706 	br	4013b98 <__alt_data_end+0xfc013b98>
 401443c:	d8c02217 	ldw	r3,136(sp)
 4014440:	d9002417 	ldw	r4,144(sp)
 4014444:	18800017 	ldw	r2,0(r3)
 4014448:	18c00104 	addi	r3,r3,4
 401444c:	d8c02215 	stw	r3,136(sp)
 4014450:	11000015 	stw	r4,0(r2)
 4014454:	003b9a06 	br	40132c0 <__alt_data_end+0xfc0132c0>
 4014458:	d8c02217 	ldw	r3,136(sp)
 401445c:	0029883a 	mov	r20,zero
 4014460:	18800104 	addi	r2,r3,4
 4014464:	1cc0000b 	ldhu	r19,0(r3)
 4014468:	803db20e 	bge	r16,zero,4013b34 <__alt_data_end+0xfc013b34>
 401446c:	003fb906 	br	4014354 <__alt_data_end+0xfc014354>
 4014470:	d9002217 	ldw	r4,136(sp)
 4014474:	0029883a 	mov	r20,zero
 4014478:	24c00017 	ldw	r19,0(r4)
 401447c:	21000104 	addi	r4,r4,4
 4014480:	d9002215 	stw	r4,136(sp)
 4014484:	003d3206 	br	4013950 <__alt_data_end+0xfc013950>
 4014488:	d8c02217 	ldw	r3,136(sp)
 401448c:	1cc00017 	ldw	r19,0(r3)
 4014490:	18c00104 	addi	r3,r3,4
 4014494:	d8c02215 	stw	r3,136(sp)
 4014498:	9829d7fa 	srai	r20,r19,31
 401449c:	a005883a 	mov	r2,r20
 40144a0:	003d4b06 	br	40139d0 <__alt_data_end+0xfc0139d0>
 40144a4:	0009883a 	mov	r4,zero
 40144a8:	01400044 	movi	r5,1
 40144ac:	d811883a 	mov	r8,sp
 40144b0:	003e4f06 	br	4013df0 <__alt_data_end+0xfc013df0>
 40144b4:	d8c02215 	stw	r3,136(sp)
 40144b8:	002b883a 	mov	r21,zero
 40144bc:	003db806 	br	4013ba0 <__alt_data_end+0xfc013ba0>
 40144c0:	d811883a 	mov	r8,sp
 40144c4:	003e9606 	br	4013f20 <__alt_data_end+0xfc013f20>
 40144c8:	010100b4 	movhi	r4,1026
 40144cc:	212bf204 	addi	r4,r4,-20536
 40144d0:	d9002315 	stw	r4,140(sp)
 40144d4:	003e6306 	br	4013e64 <__alt_data_end+0xfc013e64>
 40144d8:	b0c00043 	ldbu	r3,1(r22)
 40144dc:	8c400814 	ori	r17,r17,32
 40144e0:	b5800044 	addi	r22,r22,1
 40144e4:	18c03fcc 	andi	r3,r3,255
 40144e8:	18c0201c 	xori	r3,r3,128
 40144ec:	18ffe004 	addi	r3,r3,-128
 40144f0:	003b9c06 	br	4013364 <__alt_data_end+0xfc013364>
 40144f4:	b809883a 	mov	r4,r23
 40144f8:	da002a15 	stw	r8,168(sp)
 40144fc:	400c37c0 	call	400c37c <strlen>
 4014500:	1029883a 	mov	r20,r2
 4014504:	dd401d83 	ldbu	r21,118(sp)
 4014508:	df002215 	stw	fp,136(sp)
 401450c:	0021883a 	mov	r16,zero
 4014510:	da002a17 	ldw	r8,168(sp)
 4014514:	003c3906 	br	40135fc <__alt_data_end+0xfc0135fc>
 4014518:	d9402017 	ldw	r5,128(sp)
 401451c:	d9002117 	ldw	r4,132(sp)
 4014520:	d9801a04 	addi	r6,sp,104
 4014524:	40130dc0 	call	40130dc <__sprint_r.part.0>
 4014528:	103e691e 	bne	r2,zero,4013ed0 <__alt_data_end+0xfc013ed0>
 401452c:	d9001b17 	ldw	r4,108(sp)
 4014530:	d8801c17 	ldw	r2,112(sp)
 4014534:	d811883a 	mov	r8,sp
 4014538:	21400044 	addi	r5,r4,1
 401453c:	003e2e06 	br	4013df8 <__alt_data_end+0xfc013df8>
 4014540:	010100b4 	movhi	r4,1026
 4014544:	212bf604 	addi	r4,r4,-20520
 4014548:	d9002315 	stw	r4,140(sp)
 401454c:	d9001b17 	ldw	r4,108(sp)
 4014550:	21000044 	addi	r4,r4,1
 4014554:	003c5e06 	br	40136d0 <__alt_data_end+0xfc0136d0>
 4014558:	002b883a 	mov	r21,zero
 401455c:	00800084 	movi	r2,2
 4014560:	10803fcc 	andi	r2,r2,255
 4014564:	01000044 	movi	r4,1
 4014568:	11002b26 	beq	r2,r4,4014618 <___vfiprintf_internal_r+0x1428>
 401456c:	01000084 	movi	r4,2
 4014570:	11002b1e 	bne	r2,r4,4014620 <___vfiprintf_internal_r+0x1430>
 4014574:	1823883a 	mov	r17,r3
 4014578:	003ee506 	br	4014110 <__alt_data_end+0xfc014110>
 401457c:	8807883a 	mov	r3,r17
 4014580:	00800044 	movi	r2,1
 4014584:	003ff606 	br	4014560 <__alt_data_end+0xfc014560>
 4014588:	00800184 	movi	r2,6
 401458c:	1400012e 	bgeu	r2,r16,4014594 <___vfiprintf_internal_r+0x13a4>
 4014590:	1021883a 	mov	r16,r2
 4014594:	8029883a 	mov	r20,r16
 4014598:	8027883a 	mov	r19,r16
 401459c:	80002216 	blt	r16,zero,4014628 <___vfiprintf_internal_r+0x1438>
 40145a0:	05c100b4 	movhi	r23,1026
 40145a4:	df002215 	stw	fp,136(sp)
 40145a8:	bdeb9704 	addi	r23,r23,-20900
 40145ac:	003cfb06 	br	401399c <__alt_data_end+0xfc01399c>
 40145b0:	d9002217 	ldw	r4,136(sp)
 40145b4:	d9402417 	ldw	r5,144(sp)
 40145b8:	20800017 	ldw	r2,0(r4)
 40145bc:	21000104 	addi	r4,r4,4
 40145c0:	d9002215 	stw	r4,136(sp)
 40145c4:	11400015 	stw	r5,0(r2)
 40145c8:	003b3d06 	br	40132c0 <__alt_data_end+0xfc0132c0>
 40145cc:	014100b4 	movhi	r5,1026
 40145d0:	296bf604 	addi	r5,r5,-20520
 40145d4:	d9402315 	stw	r5,140(sp)
 40145d8:	d9401b17 	ldw	r5,108(sp)
 40145dc:	29400044 	addi	r5,r5,1
 40145e0:	003e6d06 	br	4013f98 <__alt_data_end+0xfc013f98>
 40145e4:	8029883a 	mov	r20,r16
 40145e8:	dd401d83 	ldbu	r21,118(sp)
 40145ec:	df002215 	stw	fp,136(sp)
 40145f0:	0021883a 	mov	r16,zero
 40145f4:	003c0106 	br	40135fc <__alt_data_end+0xfc0135fc>
 40145f8:	00c100b4 	movhi	r3,1026
 40145fc:	18ebf204 	addi	r3,r3,-20536
 4014600:	d8c02315 	stw	r3,140(sp)
 4014604:	280d883a 	mov	r6,r5
 4014608:	003c6906 	br	40137b0 <__alt_data_end+0xfc0137b0>
 401460c:	802d883a 	mov	r22,r16
 4014610:	0021883a 	mov	r16,zero
 4014614:	003b5406 	br	4013368 <__alt_data_end+0xfc013368>
 4014618:	1823883a 	mov	r17,r3
 401461c:	003cf306 	br	40139ec <__alt_data_end+0xfc0139ec>
 4014620:	1823883a 	mov	r17,r3
 4014624:	003cad06 	br	40138dc <__alt_data_end+0xfc0138dc>
 4014628:	0027883a 	mov	r19,zero
 401462c:	003fdc06 	br	40145a0 <__alt_data_end+0xfc0145a0>
 4014630:	d9402217 	ldw	r5,136(sp)
 4014634:	8005883a 	mov	r2,r16
 4014638:	b0c00043 	ldbu	r3,1(r22)
 401463c:	2c000017 	ldw	r16,0(r5)
 4014640:	29000104 	addi	r4,r5,4
 4014644:	d9002215 	stw	r4,136(sp)
 4014648:	102d883a 	mov	r22,r2
 401464c:	803fa50e 	bge	r16,zero,40144e4 <__alt_data_end+0xfc0144e4>
 4014650:	18c03fcc 	andi	r3,r3,255
 4014654:	18c0201c 	xori	r3,r3,128
 4014658:	043fffc4 	movi	r16,-1
 401465c:	18ffe004 	addi	r3,r3,-128
 4014660:	003b4006 	br	4013364 <__alt_data_end+0xfc013364>
 4014664:	d9402303 	ldbu	r5,140(sp)
 4014668:	d9401d85 	stb	r5,118(sp)
 401466c:	003cae06 	br	4013928 <__alt_data_end+0xfc013928>
 4014670:	d8c02303 	ldbu	r3,140(sp)
 4014674:	d8c01d85 	stb	r3,118(sp)
 4014678:	003d1406 	br	4013acc <__alt_data_end+0xfc013acc>
 401467c:	d8c02303 	ldbu	r3,140(sp)
 4014680:	d8c01d85 	stb	r3,118(sp)
 4014684:	003cca06 	br	40139b0 <__alt_data_end+0xfc0139b0>
 4014688:	8880004c 	andi	r2,r17,1
 401468c:	002b883a 	mov	r21,zero
 4014690:	10000526 	beq	r2,zero,40146a8 <___vfiprintf_internal_r+0x14b8>
 4014694:	00800c04 	movi	r2,48
 4014698:	d88019c5 	stb	r2,103(sp)
 401469c:	dd002817 	ldw	r20,160(sp)
 40146a0:	ddc019c4 	addi	r23,sp,103
 40146a4:	003bd506 	br	40135fc <__alt_data_end+0xfc0135fc>
 40146a8:	0029883a 	mov	r20,zero
 40146ac:	ddc01a04 	addi	r23,sp,104
 40146b0:	003bd206 	br	40135fc <__alt_data_end+0xfc0135fc>
 40146b4:	d9002303 	ldbu	r4,140(sp)
 40146b8:	d9001d85 	stb	r4,118(sp)
 40146bc:	003da606 	br	4013d58 <__alt_data_end+0xfc013d58>
 40146c0:	d8c02303 	ldbu	r3,140(sp)
 40146c4:	d8c01d85 	stb	r3,118(sp)
 40146c8:	003c7606 	br	40138a4 <__alt_data_end+0xfc0138a4>
 40146cc:	d8c02303 	ldbu	r3,140(sp)
 40146d0:	d8c01d85 	stb	r3,118(sp)
 40146d4:	003c6506 	br	401386c <__alt_data_end+0xfc01386c>
 40146d8:	d9002303 	ldbu	r4,140(sp)
 40146dc:	d9001d85 	stb	r4,118(sp)
 40146e0:	003d3d06 	br	4013bd8 <__alt_data_end+0xfc013bd8>
 40146e4:	d8c02303 	ldbu	r3,140(sp)
 40146e8:	d8c01d85 	stb	r3,118(sp)
 40146ec:	003d1d06 	br	4013b64 <__alt_data_end+0xfc013b64>
 40146f0:	d8c02303 	ldbu	r3,140(sp)
 40146f4:	d8c01d85 	stb	r3,118(sp)
 40146f8:	003d0306 	br	4013b08 <__alt_data_end+0xfc013b08>

040146fc <__vfiprintf_internal>:
 40146fc:	008100b4 	movhi	r2,1026
 4014700:	10b2dd04 	addi	r2,r2,-13452
 4014704:	300f883a 	mov	r7,r6
 4014708:	280d883a 	mov	r6,r5
 401470c:	200b883a 	mov	r5,r4
 4014710:	11000017 	ldw	r4,0(r2)
 4014714:	40131f01 	jmpi	40131f0 <___vfiprintf_internal_r>

04014718 <__sbprintf>:
 4014718:	2880030b 	ldhu	r2,12(r5)
 401471c:	2ac01917 	ldw	r11,100(r5)
 4014720:	2a80038b 	ldhu	r10,14(r5)
 4014724:	2a400717 	ldw	r9,28(r5)
 4014728:	2a000917 	ldw	r8,36(r5)
 401472c:	defee204 	addi	sp,sp,-1144
 4014730:	00c10004 	movi	r3,1024
 4014734:	dc011a15 	stw	r16,1128(sp)
 4014738:	10bfff4c 	andi	r2,r2,65533
 401473c:	2821883a 	mov	r16,r5
 4014740:	d8cb883a 	add	r5,sp,r3
 4014744:	dc811c15 	stw	r18,1136(sp)
 4014748:	dc411b15 	stw	r17,1132(sp)
 401474c:	dfc11d15 	stw	ra,1140(sp)
 4014750:	2025883a 	mov	r18,r4
 4014754:	d881030d 	sth	r2,1036(sp)
 4014758:	dac11915 	stw	r11,1124(sp)
 401475c:	da81038d 	sth	r10,1038(sp)
 4014760:	da410715 	stw	r9,1052(sp)
 4014764:	da010915 	stw	r8,1060(sp)
 4014768:	dec10015 	stw	sp,1024(sp)
 401476c:	dec10415 	stw	sp,1040(sp)
 4014770:	d8c10215 	stw	r3,1032(sp)
 4014774:	d8c10515 	stw	r3,1044(sp)
 4014778:	d8010615 	stw	zero,1048(sp)
 401477c:	40131f00 	call	40131f0 <___vfiprintf_internal_r>
 4014780:	1023883a 	mov	r17,r2
 4014784:	10000416 	blt	r2,zero,4014798 <__sbprintf+0x80>
 4014788:	d9410004 	addi	r5,sp,1024
 401478c:	9009883a 	mov	r4,r18
 4014790:	40103e80 	call	40103e8 <_fflush_r>
 4014794:	10000d1e 	bne	r2,zero,40147cc <__sbprintf+0xb4>
 4014798:	d881030b 	ldhu	r2,1036(sp)
 401479c:	1080100c 	andi	r2,r2,64
 40147a0:	10000326 	beq	r2,zero,40147b0 <__sbprintf+0x98>
 40147a4:	8080030b 	ldhu	r2,12(r16)
 40147a8:	10801014 	ori	r2,r2,64
 40147ac:	8080030d 	sth	r2,12(r16)
 40147b0:	8805883a 	mov	r2,r17
 40147b4:	dfc11d17 	ldw	ra,1140(sp)
 40147b8:	dc811c17 	ldw	r18,1136(sp)
 40147bc:	dc411b17 	ldw	r17,1132(sp)
 40147c0:	dc011a17 	ldw	r16,1128(sp)
 40147c4:	dec11e04 	addi	sp,sp,1144
 40147c8:	f800283a 	ret
 40147cc:	047fffc4 	movi	r17,-1
 40147d0:	003ff106 	br	4014798 <__alt_data_end+0xfc014798>

040147d4 <_write_r>:
 40147d4:	defffd04 	addi	sp,sp,-12
 40147d8:	2805883a 	mov	r2,r5
 40147dc:	dc000015 	stw	r16,0(sp)
 40147e0:	040100b4 	movhi	r16,1026
 40147e4:	dc400115 	stw	r17,4(sp)
 40147e8:	300b883a 	mov	r5,r6
 40147ec:	8439d304 	addi	r16,r16,-6324
 40147f0:	2023883a 	mov	r17,r4
 40147f4:	380d883a 	mov	r6,r7
 40147f8:	1009883a 	mov	r4,r2
 40147fc:	dfc00215 	stw	ra,8(sp)
 4014800:	80000015 	stw	zero,0(r16)
 4014804:	4016a580 	call	4016a58 <write>
 4014808:	00ffffc4 	movi	r3,-1
 401480c:	10c00526 	beq	r2,r3,4014824 <_write_r+0x50>
 4014810:	dfc00217 	ldw	ra,8(sp)
 4014814:	dc400117 	ldw	r17,4(sp)
 4014818:	dc000017 	ldw	r16,0(sp)
 401481c:	dec00304 	addi	sp,sp,12
 4014820:	f800283a 	ret
 4014824:	80c00017 	ldw	r3,0(r16)
 4014828:	183ff926 	beq	r3,zero,4014810 <__alt_data_end+0xfc014810>
 401482c:	88c00015 	stw	r3,0(r17)
 4014830:	003ff706 	br	4014810 <__alt_data_end+0xfc014810>

04014834 <_close_r>:
 4014834:	defffd04 	addi	sp,sp,-12
 4014838:	dc000015 	stw	r16,0(sp)
 401483c:	040100b4 	movhi	r16,1026
 4014840:	dc400115 	stw	r17,4(sp)
 4014844:	8439d304 	addi	r16,r16,-6324
 4014848:	2023883a 	mov	r17,r4
 401484c:	2809883a 	mov	r4,r5
 4014850:	dfc00215 	stw	ra,8(sp)
 4014854:	80000015 	stw	zero,0(r16)
 4014858:	4015dc40 	call	4015dc4 <close>
 401485c:	00ffffc4 	movi	r3,-1
 4014860:	10c00526 	beq	r2,r3,4014878 <_close_r+0x44>
 4014864:	dfc00217 	ldw	ra,8(sp)
 4014868:	dc400117 	ldw	r17,4(sp)
 401486c:	dc000017 	ldw	r16,0(sp)
 4014870:	dec00304 	addi	sp,sp,12
 4014874:	f800283a 	ret
 4014878:	80c00017 	ldw	r3,0(r16)
 401487c:	183ff926 	beq	r3,zero,4014864 <__alt_data_end+0xfc014864>
 4014880:	88c00015 	stw	r3,0(r17)
 4014884:	003ff706 	br	4014864 <__alt_data_end+0xfc014864>

04014888 <_calloc_r>:
 4014888:	defffe04 	addi	sp,sp,-8
 401488c:	2805883a 	mov	r2,r5
 4014890:	dc000015 	stw	r16,0(sp)
 4014894:	300b883a 	mov	r5,r6
 4014898:	2021883a 	mov	r16,r4
 401489c:	1009883a 	mov	r4,r2
 40148a0:	dfc00115 	stw	ra,4(sp)
 40148a4:	4007eb40 	call	4007eb4 <__mulsi3>
 40148a8:	100b883a 	mov	r5,r2
 40148ac:	8009883a 	mov	r4,r16
 40148b0:	400b8940 	call	400b894 <_malloc_r>
 40148b4:	10002926 	beq	r2,zero,401495c <_calloc_r+0xd4>
 40148b8:	11bfff17 	ldw	r6,-4(r2)
 40148bc:	1021883a 	mov	r16,r2
 40148c0:	00bfff04 	movi	r2,-4
 40148c4:	308c703a 	and	r6,r6,r2
 40148c8:	00c00904 	movi	r3,36
 40148cc:	308d883a 	add	r6,r6,r2
 40148d0:	19801636 	bltu	r3,r6,401492c <_calloc_r+0xa4>
 40148d4:	008004c4 	movi	r2,19
 40148d8:	11800b2e 	bgeu	r2,r6,4014908 <_calloc_r+0x80>
 40148dc:	80000015 	stw	zero,0(r16)
 40148e0:	80000115 	stw	zero,4(r16)
 40148e4:	008006c4 	movi	r2,27
 40148e8:	11801a2e 	bgeu	r2,r6,4014954 <_calloc_r+0xcc>
 40148ec:	80000215 	stw	zero,8(r16)
 40148f0:	80000315 	stw	zero,12(r16)
 40148f4:	30c0151e 	bne	r6,r3,401494c <_calloc_r+0xc4>
 40148f8:	80000415 	stw	zero,16(r16)
 40148fc:	80800604 	addi	r2,r16,24
 4014900:	80000515 	stw	zero,20(r16)
 4014904:	00000106 	br	401490c <_calloc_r+0x84>
 4014908:	8005883a 	mov	r2,r16
 401490c:	10000015 	stw	zero,0(r2)
 4014910:	10000115 	stw	zero,4(r2)
 4014914:	10000215 	stw	zero,8(r2)
 4014918:	8005883a 	mov	r2,r16
 401491c:	dfc00117 	ldw	ra,4(sp)
 4014920:	dc000017 	ldw	r16,0(sp)
 4014924:	dec00204 	addi	sp,sp,8
 4014928:	f800283a 	ret
 401492c:	000b883a 	mov	r5,zero
 4014930:	8009883a 	mov	r4,r16
 4014934:	40117800 	call	4011780 <memset>
 4014938:	8005883a 	mov	r2,r16
 401493c:	dfc00117 	ldw	ra,4(sp)
 4014940:	dc000017 	ldw	r16,0(sp)
 4014944:	dec00204 	addi	sp,sp,8
 4014948:	f800283a 	ret
 401494c:	80800404 	addi	r2,r16,16
 4014950:	003fee06 	br	401490c <__alt_data_end+0xfc01490c>
 4014954:	80800204 	addi	r2,r16,8
 4014958:	003fec06 	br	401490c <__alt_data_end+0xfc01490c>
 401495c:	0005883a 	mov	r2,zero
 4014960:	003fee06 	br	401491c <__alt_data_end+0xfc01491c>

04014964 <_fclose_r>:
 4014964:	28003926 	beq	r5,zero,4014a4c <_fclose_r+0xe8>
 4014968:	defffc04 	addi	sp,sp,-16
 401496c:	dc400115 	stw	r17,4(sp)
 4014970:	dc000015 	stw	r16,0(sp)
 4014974:	dfc00315 	stw	ra,12(sp)
 4014978:	dc800215 	stw	r18,8(sp)
 401497c:	2023883a 	mov	r17,r4
 4014980:	2821883a 	mov	r16,r5
 4014984:	20000226 	beq	r4,zero,4014990 <_fclose_r+0x2c>
 4014988:	20800e17 	ldw	r2,56(r4)
 401498c:	10002726 	beq	r2,zero,4014a2c <_fclose_r+0xc8>
 4014990:	8080030f 	ldh	r2,12(r16)
 4014994:	1000071e 	bne	r2,zero,40149b4 <_fclose_r+0x50>
 4014998:	0005883a 	mov	r2,zero
 401499c:	dfc00317 	ldw	ra,12(sp)
 40149a0:	dc800217 	ldw	r18,8(sp)
 40149a4:	dc400117 	ldw	r17,4(sp)
 40149a8:	dc000017 	ldw	r16,0(sp)
 40149ac:	dec00404 	addi	sp,sp,16
 40149b0:	f800283a 	ret
 40149b4:	800b883a 	mov	r5,r16
 40149b8:	8809883a 	mov	r4,r17
 40149bc:	40101cc0 	call	40101cc <__sflush_r>
 40149c0:	1025883a 	mov	r18,r2
 40149c4:	80800b17 	ldw	r2,44(r16)
 40149c8:	10000426 	beq	r2,zero,40149dc <_fclose_r+0x78>
 40149cc:	81400717 	ldw	r5,28(r16)
 40149d0:	8809883a 	mov	r4,r17
 40149d4:	103ee83a 	callr	r2
 40149d8:	10001616 	blt	r2,zero,4014a34 <_fclose_r+0xd0>
 40149dc:	8080030b 	ldhu	r2,12(r16)
 40149e0:	1080200c 	andi	r2,r2,128
 40149e4:	1000151e 	bne	r2,zero,4014a3c <_fclose_r+0xd8>
 40149e8:	81400c17 	ldw	r5,48(r16)
 40149ec:	28000526 	beq	r5,zero,4014a04 <_fclose_r+0xa0>
 40149f0:	80801004 	addi	r2,r16,64
 40149f4:	28800226 	beq	r5,r2,4014a00 <_fclose_r+0x9c>
 40149f8:	8809883a 	mov	r4,r17
 40149fc:	40109480 	call	4010948 <_free_r>
 4014a00:	80000c15 	stw	zero,48(r16)
 4014a04:	81401117 	ldw	r5,68(r16)
 4014a08:	28000326 	beq	r5,zero,4014a18 <_fclose_r+0xb4>
 4014a0c:	8809883a 	mov	r4,r17
 4014a10:	40109480 	call	4010948 <_free_r>
 4014a14:	80001115 	stw	zero,68(r16)
 4014a18:	40107e40 	call	40107e4 <__sfp_lock_acquire>
 4014a1c:	8000030d 	sth	zero,12(r16)
 4014a20:	40107e80 	call	40107e8 <__sfp_lock_release>
 4014a24:	9005883a 	mov	r2,r18
 4014a28:	003fdc06 	br	401499c <__alt_data_end+0xfc01499c>
 4014a2c:	40107d40 	call	40107d4 <__sinit>
 4014a30:	003fd706 	br	4014990 <__alt_data_end+0xfc014990>
 4014a34:	04bfffc4 	movi	r18,-1
 4014a38:	003fe806 	br	40149dc <__alt_data_end+0xfc0149dc>
 4014a3c:	81400417 	ldw	r5,16(r16)
 4014a40:	8809883a 	mov	r4,r17
 4014a44:	40109480 	call	4010948 <_free_r>
 4014a48:	003fe706 	br	40149e8 <__alt_data_end+0xfc0149e8>
 4014a4c:	0005883a 	mov	r2,zero
 4014a50:	f800283a 	ret

04014a54 <fclose>:
 4014a54:	008100b4 	movhi	r2,1026
 4014a58:	10b2dd04 	addi	r2,r2,-13452
 4014a5c:	200b883a 	mov	r5,r4
 4014a60:	11000017 	ldw	r4,0(r2)
 4014a64:	40149641 	jmpi	4014964 <_fclose_r>

04014a68 <__fputwc>:
 4014a68:	defff804 	addi	sp,sp,-32
 4014a6c:	dcc00415 	stw	r19,16(sp)
 4014a70:	dc800315 	stw	r18,12(sp)
 4014a74:	dc000115 	stw	r16,4(sp)
 4014a78:	dfc00715 	stw	ra,28(sp)
 4014a7c:	dd400615 	stw	r21,24(sp)
 4014a80:	dd000515 	stw	r20,20(sp)
 4014a84:	dc400215 	stw	r17,8(sp)
 4014a88:	2027883a 	mov	r19,r4
 4014a8c:	2825883a 	mov	r18,r5
 4014a90:	3021883a 	mov	r16,r6
 4014a94:	40113300 	call	4011330 <__locale_mb_cur_max>
 4014a98:	00c00044 	movi	r3,1
 4014a9c:	10c03e26 	beq	r2,r3,4014b98 <__fputwc+0x130>
 4014aa0:	81c01704 	addi	r7,r16,92
 4014aa4:	900d883a 	mov	r6,r18
 4014aa8:	d80b883a 	mov	r5,sp
 4014aac:	9809883a 	mov	r4,r19
 4014ab0:	4014f380 	call	4014f38 <_wcrtomb_r>
 4014ab4:	1029883a 	mov	r20,r2
 4014ab8:	00bfffc4 	movi	r2,-1
 4014abc:	a0802026 	beq	r20,r2,4014b40 <__fputwc+0xd8>
 4014ac0:	d9400003 	ldbu	r5,0(sp)
 4014ac4:	a0001c26 	beq	r20,zero,4014b38 <__fputwc+0xd0>
 4014ac8:	0023883a 	mov	r17,zero
 4014acc:	05400284 	movi	r21,10
 4014ad0:	00000906 	br	4014af8 <__fputwc+0x90>
 4014ad4:	80800017 	ldw	r2,0(r16)
 4014ad8:	11400005 	stb	r5,0(r2)
 4014adc:	80c00017 	ldw	r3,0(r16)
 4014ae0:	18c00044 	addi	r3,r3,1
 4014ae4:	80c00015 	stw	r3,0(r16)
 4014ae8:	8c400044 	addi	r17,r17,1
 4014aec:	dc45883a 	add	r2,sp,r17
 4014af0:	8d00112e 	bgeu	r17,r20,4014b38 <__fputwc+0xd0>
 4014af4:	11400003 	ldbu	r5,0(r2)
 4014af8:	80c00217 	ldw	r3,8(r16)
 4014afc:	18ffffc4 	addi	r3,r3,-1
 4014b00:	80c00215 	stw	r3,8(r16)
 4014b04:	183ff30e 	bge	r3,zero,4014ad4 <__alt_data_end+0xfc014ad4>
 4014b08:	80800617 	ldw	r2,24(r16)
 4014b0c:	18801916 	blt	r3,r2,4014b74 <__fputwc+0x10c>
 4014b10:	80800017 	ldw	r2,0(r16)
 4014b14:	11400005 	stb	r5,0(r2)
 4014b18:	80800017 	ldw	r2,0(r16)
 4014b1c:	10c00003 	ldbu	r3,0(r2)
 4014b20:	10800044 	addi	r2,r2,1
 4014b24:	1d402326 	beq	r3,r21,4014bb4 <__fputwc+0x14c>
 4014b28:	80800015 	stw	r2,0(r16)
 4014b2c:	8c400044 	addi	r17,r17,1
 4014b30:	dc45883a 	add	r2,sp,r17
 4014b34:	8d3fef36 	bltu	r17,r20,4014af4 <__alt_data_end+0xfc014af4>
 4014b38:	9005883a 	mov	r2,r18
 4014b3c:	00000406 	br	4014b50 <__fputwc+0xe8>
 4014b40:	80c0030b 	ldhu	r3,12(r16)
 4014b44:	a005883a 	mov	r2,r20
 4014b48:	18c01014 	ori	r3,r3,64
 4014b4c:	80c0030d 	sth	r3,12(r16)
 4014b50:	dfc00717 	ldw	ra,28(sp)
 4014b54:	dd400617 	ldw	r21,24(sp)
 4014b58:	dd000517 	ldw	r20,20(sp)
 4014b5c:	dcc00417 	ldw	r19,16(sp)
 4014b60:	dc800317 	ldw	r18,12(sp)
 4014b64:	dc400217 	ldw	r17,8(sp)
 4014b68:	dc000117 	ldw	r16,4(sp)
 4014b6c:	dec00804 	addi	sp,sp,32
 4014b70:	f800283a 	ret
 4014b74:	800d883a 	mov	r6,r16
 4014b78:	29403fcc 	andi	r5,r5,255
 4014b7c:	9809883a 	mov	r4,r19
 4014b80:	4014de00 	call	4014de0 <__swbuf_r>
 4014b84:	10bfffe0 	cmpeqi	r2,r2,-1
 4014b88:	10803fcc 	andi	r2,r2,255
 4014b8c:	103fd626 	beq	r2,zero,4014ae8 <__alt_data_end+0xfc014ae8>
 4014b90:	00bfffc4 	movi	r2,-1
 4014b94:	003fee06 	br	4014b50 <__alt_data_end+0xfc014b50>
 4014b98:	90ffffc4 	addi	r3,r18,-1
 4014b9c:	01003f84 	movi	r4,254
 4014ba0:	20ffbf36 	bltu	r4,r3,4014aa0 <__alt_data_end+0xfc014aa0>
 4014ba4:	900b883a 	mov	r5,r18
 4014ba8:	dc800005 	stb	r18,0(sp)
 4014bac:	1029883a 	mov	r20,r2
 4014bb0:	003fc506 	br	4014ac8 <__alt_data_end+0xfc014ac8>
 4014bb4:	800d883a 	mov	r6,r16
 4014bb8:	a80b883a 	mov	r5,r21
 4014bbc:	9809883a 	mov	r4,r19
 4014bc0:	4014de00 	call	4014de0 <__swbuf_r>
 4014bc4:	10bfffe0 	cmpeqi	r2,r2,-1
 4014bc8:	003fef06 	br	4014b88 <__alt_data_end+0xfc014b88>

04014bcc <_fputwc_r>:
 4014bcc:	3080030b 	ldhu	r2,12(r6)
 4014bd0:	10c8000c 	andi	r3,r2,8192
 4014bd4:	1800051e 	bne	r3,zero,4014bec <_fputwc_r+0x20>
 4014bd8:	30c01917 	ldw	r3,100(r6)
 4014bdc:	10880014 	ori	r2,r2,8192
 4014be0:	3080030d 	sth	r2,12(r6)
 4014be4:	18880014 	ori	r2,r3,8192
 4014be8:	30801915 	stw	r2,100(r6)
 4014bec:	4014a681 	jmpi	4014a68 <__fputwc>

04014bf0 <fputwc>:
 4014bf0:	008100b4 	movhi	r2,1026
 4014bf4:	defffc04 	addi	sp,sp,-16
 4014bf8:	10b2dd04 	addi	r2,r2,-13452
 4014bfc:	dc000115 	stw	r16,4(sp)
 4014c00:	14000017 	ldw	r16,0(r2)
 4014c04:	dc400215 	stw	r17,8(sp)
 4014c08:	dfc00315 	stw	ra,12(sp)
 4014c0c:	2023883a 	mov	r17,r4
 4014c10:	80000226 	beq	r16,zero,4014c1c <fputwc+0x2c>
 4014c14:	80800e17 	ldw	r2,56(r16)
 4014c18:	10001026 	beq	r2,zero,4014c5c <fputwc+0x6c>
 4014c1c:	2880030b 	ldhu	r2,12(r5)
 4014c20:	10c8000c 	andi	r3,r2,8192
 4014c24:	1800051e 	bne	r3,zero,4014c3c <fputwc+0x4c>
 4014c28:	28c01917 	ldw	r3,100(r5)
 4014c2c:	10880014 	ori	r2,r2,8192
 4014c30:	2880030d 	sth	r2,12(r5)
 4014c34:	18880014 	ori	r2,r3,8192
 4014c38:	28801915 	stw	r2,100(r5)
 4014c3c:	280d883a 	mov	r6,r5
 4014c40:	8009883a 	mov	r4,r16
 4014c44:	880b883a 	mov	r5,r17
 4014c48:	dfc00317 	ldw	ra,12(sp)
 4014c4c:	dc400217 	ldw	r17,8(sp)
 4014c50:	dc000117 	ldw	r16,4(sp)
 4014c54:	dec00404 	addi	sp,sp,16
 4014c58:	4014a681 	jmpi	4014a68 <__fputwc>
 4014c5c:	8009883a 	mov	r4,r16
 4014c60:	d9400015 	stw	r5,0(sp)
 4014c64:	40107d40 	call	40107d4 <__sinit>
 4014c68:	d9400017 	ldw	r5,0(sp)
 4014c6c:	003feb06 	br	4014c1c <__alt_data_end+0xfc014c1c>

04014c70 <_fstat_r>:
 4014c70:	defffd04 	addi	sp,sp,-12
 4014c74:	2805883a 	mov	r2,r5
 4014c78:	dc000015 	stw	r16,0(sp)
 4014c7c:	040100b4 	movhi	r16,1026
 4014c80:	dc400115 	stw	r17,4(sp)
 4014c84:	8439d304 	addi	r16,r16,-6324
 4014c88:	2023883a 	mov	r17,r4
 4014c8c:	300b883a 	mov	r5,r6
 4014c90:	1009883a 	mov	r4,r2
 4014c94:	dfc00215 	stw	ra,8(sp)
 4014c98:	80000015 	stw	zero,0(r16)
 4014c9c:	4015f040 	call	4015f04 <fstat>
 4014ca0:	00ffffc4 	movi	r3,-1
 4014ca4:	10c00526 	beq	r2,r3,4014cbc <_fstat_r+0x4c>
 4014ca8:	dfc00217 	ldw	ra,8(sp)
 4014cac:	dc400117 	ldw	r17,4(sp)
 4014cb0:	dc000017 	ldw	r16,0(sp)
 4014cb4:	dec00304 	addi	sp,sp,12
 4014cb8:	f800283a 	ret
 4014cbc:	80c00017 	ldw	r3,0(r16)
 4014cc0:	183ff926 	beq	r3,zero,4014ca8 <__alt_data_end+0xfc014ca8>
 4014cc4:	88c00015 	stw	r3,0(r17)
 4014cc8:	003ff706 	br	4014ca8 <__alt_data_end+0xfc014ca8>

04014ccc <_isatty_r>:
 4014ccc:	defffd04 	addi	sp,sp,-12
 4014cd0:	dc000015 	stw	r16,0(sp)
 4014cd4:	040100b4 	movhi	r16,1026
 4014cd8:	dc400115 	stw	r17,4(sp)
 4014cdc:	8439d304 	addi	r16,r16,-6324
 4014ce0:	2023883a 	mov	r17,r4
 4014ce4:	2809883a 	mov	r4,r5
 4014ce8:	dfc00215 	stw	ra,8(sp)
 4014cec:	80000015 	stw	zero,0(r16)
 4014cf0:	4015ff80 	call	4015ff8 <isatty>
 4014cf4:	00ffffc4 	movi	r3,-1
 4014cf8:	10c00526 	beq	r2,r3,4014d10 <_isatty_r+0x44>
 4014cfc:	dfc00217 	ldw	ra,8(sp)
 4014d00:	dc400117 	ldw	r17,4(sp)
 4014d04:	dc000017 	ldw	r16,0(sp)
 4014d08:	dec00304 	addi	sp,sp,12
 4014d0c:	f800283a 	ret
 4014d10:	80c00017 	ldw	r3,0(r16)
 4014d14:	183ff926 	beq	r3,zero,4014cfc <__alt_data_end+0xfc014cfc>
 4014d18:	88c00015 	stw	r3,0(r17)
 4014d1c:	003ff706 	br	4014cfc <__alt_data_end+0xfc014cfc>

04014d20 <_lseek_r>:
 4014d20:	defffd04 	addi	sp,sp,-12
 4014d24:	2805883a 	mov	r2,r5
 4014d28:	dc000015 	stw	r16,0(sp)
 4014d2c:	040100b4 	movhi	r16,1026
 4014d30:	dc400115 	stw	r17,4(sp)
 4014d34:	300b883a 	mov	r5,r6
 4014d38:	8439d304 	addi	r16,r16,-6324
 4014d3c:	2023883a 	mov	r17,r4
 4014d40:	380d883a 	mov	r6,r7
 4014d44:	1009883a 	mov	r4,r2
 4014d48:	dfc00215 	stw	ra,8(sp)
 4014d4c:	80000015 	stw	zero,0(r16)
 4014d50:	40161cc0 	call	40161cc <lseek>
 4014d54:	00ffffc4 	movi	r3,-1
 4014d58:	10c00526 	beq	r2,r3,4014d70 <_lseek_r+0x50>
 4014d5c:	dfc00217 	ldw	ra,8(sp)
 4014d60:	dc400117 	ldw	r17,4(sp)
 4014d64:	dc000017 	ldw	r16,0(sp)
 4014d68:	dec00304 	addi	sp,sp,12
 4014d6c:	f800283a 	ret
 4014d70:	80c00017 	ldw	r3,0(r16)
 4014d74:	183ff926 	beq	r3,zero,4014d5c <__alt_data_end+0xfc014d5c>
 4014d78:	88c00015 	stw	r3,0(r17)
 4014d7c:	003ff706 	br	4014d5c <__alt_data_end+0xfc014d5c>

04014d80 <_read_r>:
 4014d80:	defffd04 	addi	sp,sp,-12
 4014d84:	2805883a 	mov	r2,r5
 4014d88:	dc000015 	stw	r16,0(sp)
 4014d8c:	040100b4 	movhi	r16,1026
 4014d90:	dc400115 	stw	r17,4(sp)
 4014d94:	300b883a 	mov	r5,r6
 4014d98:	8439d304 	addi	r16,r16,-6324
 4014d9c:	2023883a 	mov	r17,r4
 4014da0:	380d883a 	mov	r6,r7
 4014da4:	1009883a 	mov	r4,r2
 4014da8:	dfc00215 	stw	ra,8(sp)
 4014dac:	80000015 	stw	zero,0(r16)
 4014db0:	40166100 	call	4016610 <read>
 4014db4:	00ffffc4 	movi	r3,-1
 4014db8:	10c00526 	beq	r2,r3,4014dd0 <_read_r+0x50>
 4014dbc:	dfc00217 	ldw	ra,8(sp)
 4014dc0:	dc400117 	ldw	r17,4(sp)
 4014dc4:	dc000017 	ldw	r16,0(sp)
 4014dc8:	dec00304 	addi	sp,sp,12
 4014dcc:	f800283a 	ret
 4014dd0:	80c00017 	ldw	r3,0(r16)
 4014dd4:	183ff926 	beq	r3,zero,4014dbc <__alt_data_end+0xfc014dbc>
 4014dd8:	88c00015 	stw	r3,0(r17)
 4014ddc:	003ff706 	br	4014dbc <__alt_data_end+0xfc014dbc>

04014de0 <__swbuf_r>:
 4014de0:	defffb04 	addi	sp,sp,-20
 4014de4:	dcc00315 	stw	r19,12(sp)
 4014de8:	dc800215 	stw	r18,8(sp)
 4014dec:	dc000015 	stw	r16,0(sp)
 4014df0:	dfc00415 	stw	ra,16(sp)
 4014df4:	dc400115 	stw	r17,4(sp)
 4014df8:	2025883a 	mov	r18,r4
 4014dfc:	2827883a 	mov	r19,r5
 4014e00:	3021883a 	mov	r16,r6
 4014e04:	20000226 	beq	r4,zero,4014e10 <__swbuf_r+0x30>
 4014e08:	20800e17 	ldw	r2,56(r4)
 4014e0c:	10004226 	beq	r2,zero,4014f18 <__swbuf_r+0x138>
 4014e10:	80800617 	ldw	r2,24(r16)
 4014e14:	8100030b 	ldhu	r4,12(r16)
 4014e18:	80800215 	stw	r2,8(r16)
 4014e1c:	2080020c 	andi	r2,r4,8
 4014e20:	10003626 	beq	r2,zero,4014efc <__swbuf_r+0x11c>
 4014e24:	80c00417 	ldw	r3,16(r16)
 4014e28:	18003426 	beq	r3,zero,4014efc <__swbuf_r+0x11c>
 4014e2c:	2088000c 	andi	r2,r4,8192
 4014e30:	9c403fcc 	andi	r17,r19,255
 4014e34:	10001a26 	beq	r2,zero,4014ea0 <__swbuf_r+0xc0>
 4014e38:	80800017 	ldw	r2,0(r16)
 4014e3c:	81000517 	ldw	r4,20(r16)
 4014e40:	10c7c83a 	sub	r3,r2,r3
 4014e44:	1900200e 	bge	r3,r4,4014ec8 <__swbuf_r+0xe8>
 4014e48:	18c00044 	addi	r3,r3,1
 4014e4c:	81000217 	ldw	r4,8(r16)
 4014e50:	11400044 	addi	r5,r2,1
 4014e54:	81400015 	stw	r5,0(r16)
 4014e58:	213fffc4 	addi	r4,r4,-1
 4014e5c:	81000215 	stw	r4,8(r16)
 4014e60:	14c00005 	stb	r19,0(r2)
 4014e64:	80800517 	ldw	r2,20(r16)
 4014e68:	10c01e26 	beq	r2,r3,4014ee4 <__swbuf_r+0x104>
 4014e6c:	8080030b 	ldhu	r2,12(r16)
 4014e70:	1080004c 	andi	r2,r2,1
 4014e74:	10000226 	beq	r2,zero,4014e80 <__swbuf_r+0xa0>
 4014e78:	00800284 	movi	r2,10
 4014e7c:	88801926 	beq	r17,r2,4014ee4 <__swbuf_r+0x104>
 4014e80:	8805883a 	mov	r2,r17
 4014e84:	dfc00417 	ldw	ra,16(sp)
 4014e88:	dcc00317 	ldw	r19,12(sp)
 4014e8c:	dc800217 	ldw	r18,8(sp)
 4014e90:	dc400117 	ldw	r17,4(sp)
 4014e94:	dc000017 	ldw	r16,0(sp)
 4014e98:	dec00504 	addi	sp,sp,20
 4014e9c:	f800283a 	ret
 4014ea0:	81401917 	ldw	r5,100(r16)
 4014ea4:	00b7ffc4 	movi	r2,-8193
 4014ea8:	21080014 	ori	r4,r4,8192
 4014eac:	2884703a 	and	r2,r5,r2
 4014eb0:	80801915 	stw	r2,100(r16)
 4014eb4:	80800017 	ldw	r2,0(r16)
 4014eb8:	8100030d 	sth	r4,12(r16)
 4014ebc:	81000517 	ldw	r4,20(r16)
 4014ec0:	10c7c83a 	sub	r3,r2,r3
 4014ec4:	193fe016 	blt	r3,r4,4014e48 <__alt_data_end+0xfc014e48>
 4014ec8:	800b883a 	mov	r5,r16
 4014ecc:	9009883a 	mov	r4,r18
 4014ed0:	40103e80 	call	40103e8 <_fflush_r>
 4014ed4:	1000071e 	bne	r2,zero,4014ef4 <__swbuf_r+0x114>
 4014ed8:	80800017 	ldw	r2,0(r16)
 4014edc:	00c00044 	movi	r3,1
 4014ee0:	003fda06 	br	4014e4c <__alt_data_end+0xfc014e4c>
 4014ee4:	800b883a 	mov	r5,r16
 4014ee8:	9009883a 	mov	r4,r18
 4014eec:	40103e80 	call	40103e8 <_fflush_r>
 4014ef0:	103fe326 	beq	r2,zero,4014e80 <__alt_data_end+0xfc014e80>
 4014ef4:	00bfffc4 	movi	r2,-1
 4014ef8:	003fe206 	br	4014e84 <__alt_data_end+0xfc014e84>
 4014efc:	800b883a 	mov	r5,r16
 4014f00:	9009883a 	mov	r4,r18
 4014f04:	400e7c80 	call	400e7c8 <__swsetup_r>
 4014f08:	103ffa1e 	bne	r2,zero,4014ef4 <__alt_data_end+0xfc014ef4>
 4014f0c:	8100030b 	ldhu	r4,12(r16)
 4014f10:	80c00417 	ldw	r3,16(r16)
 4014f14:	003fc506 	br	4014e2c <__alt_data_end+0xfc014e2c>
 4014f18:	40107d40 	call	40107d4 <__sinit>
 4014f1c:	003fbc06 	br	4014e10 <__alt_data_end+0xfc014e10>

04014f20 <__swbuf>:
 4014f20:	008100b4 	movhi	r2,1026
 4014f24:	10b2dd04 	addi	r2,r2,-13452
 4014f28:	280d883a 	mov	r6,r5
 4014f2c:	200b883a 	mov	r5,r4
 4014f30:	11000017 	ldw	r4,0(r2)
 4014f34:	4014de01 	jmpi	4014de0 <__swbuf_r>

04014f38 <_wcrtomb_r>:
 4014f38:	defff604 	addi	sp,sp,-40
 4014f3c:	008100b4 	movhi	r2,1026
 4014f40:	dc800815 	stw	r18,32(sp)
 4014f44:	dc400715 	stw	r17,28(sp)
 4014f48:	dc000615 	stw	r16,24(sp)
 4014f4c:	10b2e104 	addi	r2,r2,-13436
 4014f50:	dfc00915 	stw	ra,36(sp)
 4014f54:	2021883a 	mov	r16,r4
 4014f58:	3823883a 	mov	r17,r7
 4014f5c:	14800017 	ldw	r18,0(r2)
 4014f60:	28001426 	beq	r5,zero,4014fb4 <_wcrtomb_r+0x7c>
 4014f64:	d9400415 	stw	r5,16(sp)
 4014f68:	d9800515 	stw	r6,20(sp)
 4014f6c:	40113240 	call	4011324 <__locale_charset>
 4014f70:	d9800517 	ldw	r6,20(sp)
 4014f74:	d9400417 	ldw	r5,16(sp)
 4014f78:	100f883a 	mov	r7,r2
 4014f7c:	dc400015 	stw	r17,0(sp)
 4014f80:	8009883a 	mov	r4,r16
 4014f84:	903ee83a 	callr	r18
 4014f88:	00ffffc4 	movi	r3,-1
 4014f8c:	10c0031e 	bne	r2,r3,4014f9c <_wcrtomb_r+0x64>
 4014f90:	88000015 	stw	zero,0(r17)
 4014f94:	00c02284 	movi	r3,138
 4014f98:	80c00015 	stw	r3,0(r16)
 4014f9c:	dfc00917 	ldw	ra,36(sp)
 4014fa0:	dc800817 	ldw	r18,32(sp)
 4014fa4:	dc400717 	ldw	r17,28(sp)
 4014fa8:	dc000617 	ldw	r16,24(sp)
 4014fac:	dec00a04 	addi	sp,sp,40
 4014fb0:	f800283a 	ret
 4014fb4:	40113240 	call	4011324 <__locale_charset>
 4014fb8:	100f883a 	mov	r7,r2
 4014fbc:	dc400015 	stw	r17,0(sp)
 4014fc0:	000d883a 	mov	r6,zero
 4014fc4:	d9400104 	addi	r5,sp,4
 4014fc8:	8009883a 	mov	r4,r16
 4014fcc:	903ee83a 	callr	r18
 4014fd0:	003fed06 	br	4014f88 <__alt_data_end+0xfc014f88>

04014fd4 <wcrtomb>:
 4014fd4:	defff604 	addi	sp,sp,-40
 4014fd8:	008100b4 	movhi	r2,1026
 4014fdc:	dc800615 	stw	r18,24(sp)
 4014fe0:	dc400515 	stw	r17,20(sp)
 4014fe4:	10b2dd04 	addi	r2,r2,-13452
 4014fe8:	dfc00915 	stw	ra,36(sp)
 4014fec:	dd000815 	stw	r20,32(sp)
 4014ff0:	dcc00715 	stw	r19,28(sp)
 4014ff4:	dc000415 	stw	r16,16(sp)
 4014ff8:	3025883a 	mov	r18,r6
 4014ffc:	14400017 	ldw	r17,0(r2)
 4015000:	20001926 	beq	r4,zero,4015068 <wcrtomb+0x94>
 4015004:	008100b4 	movhi	r2,1026
 4015008:	10b2e104 	addi	r2,r2,-13436
 401500c:	15000017 	ldw	r20,0(r2)
 4015010:	2021883a 	mov	r16,r4
 4015014:	2827883a 	mov	r19,r5
 4015018:	40113240 	call	4011324 <__locale_charset>
 401501c:	100f883a 	mov	r7,r2
 4015020:	dc800015 	stw	r18,0(sp)
 4015024:	980d883a 	mov	r6,r19
 4015028:	800b883a 	mov	r5,r16
 401502c:	8809883a 	mov	r4,r17
 4015030:	a03ee83a 	callr	r20
 4015034:	00ffffc4 	movi	r3,-1
 4015038:	10c0031e 	bne	r2,r3,4015048 <wcrtomb+0x74>
 401503c:	90000015 	stw	zero,0(r18)
 4015040:	00c02284 	movi	r3,138
 4015044:	88c00015 	stw	r3,0(r17)
 4015048:	dfc00917 	ldw	ra,36(sp)
 401504c:	dd000817 	ldw	r20,32(sp)
 4015050:	dcc00717 	ldw	r19,28(sp)
 4015054:	dc800617 	ldw	r18,24(sp)
 4015058:	dc400517 	ldw	r17,20(sp)
 401505c:	dc000417 	ldw	r16,16(sp)
 4015060:	dec00a04 	addi	sp,sp,40
 4015064:	f800283a 	ret
 4015068:	008100b4 	movhi	r2,1026
 401506c:	10b2e104 	addi	r2,r2,-13436
 4015070:	14000017 	ldw	r16,0(r2)
 4015074:	40113240 	call	4011324 <__locale_charset>
 4015078:	100f883a 	mov	r7,r2
 401507c:	dc800015 	stw	r18,0(sp)
 4015080:	000d883a 	mov	r6,zero
 4015084:	d9400104 	addi	r5,sp,4
 4015088:	8809883a 	mov	r4,r17
 401508c:	803ee83a 	callr	r16
 4015090:	003fe806 	br	4015034 <__alt_data_end+0xfc015034>

04015094 <__ascii_wctomb>:
 4015094:	28000526 	beq	r5,zero,40150ac <__ascii_wctomb+0x18>
 4015098:	00803fc4 	movi	r2,255
 401509c:	11800536 	bltu	r2,r6,40150b4 <__ascii_wctomb+0x20>
 40150a0:	29800005 	stb	r6,0(r5)
 40150a4:	00800044 	movi	r2,1
 40150a8:	f800283a 	ret
 40150ac:	0005883a 	mov	r2,zero
 40150b0:	f800283a 	ret
 40150b4:	00802284 	movi	r2,138
 40150b8:	20800015 	stw	r2,0(r4)
 40150bc:	00bfffc4 	movi	r2,-1
 40150c0:	f800283a 	ret

040150c4 <_wctomb_r>:
 40150c4:	008100b4 	movhi	r2,1026
 40150c8:	defff904 	addi	sp,sp,-28
 40150cc:	10b2e104 	addi	r2,r2,-13436
 40150d0:	dfc00615 	stw	ra,24(sp)
 40150d4:	dc400515 	stw	r17,20(sp)
 40150d8:	dc000415 	stw	r16,16(sp)
 40150dc:	3823883a 	mov	r17,r7
 40150e0:	14000017 	ldw	r16,0(r2)
 40150e4:	d9000115 	stw	r4,4(sp)
 40150e8:	d9400215 	stw	r5,8(sp)
 40150ec:	d9800315 	stw	r6,12(sp)
 40150f0:	40113240 	call	4011324 <__locale_charset>
 40150f4:	d9800317 	ldw	r6,12(sp)
 40150f8:	d9400217 	ldw	r5,8(sp)
 40150fc:	d9000117 	ldw	r4,4(sp)
 4015100:	100f883a 	mov	r7,r2
 4015104:	dc400015 	stw	r17,0(sp)
 4015108:	803ee83a 	callr	r16
 401510c:	dfc00617 	ldw	ra,24(sp)
 4015110:	dc400517 	ldw	r17,20(sp)
 4015114:	dc000417 	ldw	r16,16(sp)
 4015118:	dec00704 	addi	sp,sp,28
 401511c:	f800283a 	ret

04015120 <__udivdi3>:
 4015120:	defff404 	addi	sp,sp,-48
 4015124:	dcc00515 	stw	r19,20(sp)
 4015128:	dc000215 	stw	r16,8(sp)
 401512c:	dfc00b15 	stw	ra,44(sp)
 4015130:	df000a15 	stw	fp,40(sp)
 4015134:	ddc00915 	stw	r23,36(sp)
 4015138:	dd800815 	stw	r22,32(sp)
 401513c:	dd400715 	stw	r21,28(sp)
 4015140:	dd000615 	stw	r20,24(sp)
 4015144:	dc800415 	stw	r18,16(sp)
 4015148:	dc400315 	stw	r17,12(sp)
 401514c:	2027883a 	mov	r19,r4
 4015150:	2821883a 	mov	r16,r5
 4015154:	3800461e 	bne	r7,zero,4015270 <__udivdi3+0x150>
 4015158:	3023883a 	mov	r17,r6
 401515c:	2025883a 	mov	r18,r4
 4015160:	2980572e 	bgeu	r5,r6,40152c0 <__udivdi3+0x1a0>
 4015164:	00bfffd4 	movui	r2,65535
 4015168:	282d883a 	mov	r22,r5
 401516c:	1180b236 	bltu	r2,r6,4015438 <__udivdi3+0x318>
 4015170:	00803fc4 	movi	r2,255
 4015174:	1185803a 	cmpltu	r2,r2,r6
 4015178:	100490fa 	slli	r2,r2,3
 401517c:	3086d83a 	srl	r3,r6,r2
 4015180:	010100b4 	movhi	r4,1026
 4015184:	212b4704 	addi	r4,r4,-21220
 4015188:	20c7883a 	add	r3,r4,r3
 401518c:	18c00003 	ldbu	r3,0(r3)
 4015190:	1885883a 	add	r2,r3,r2
 4015194:	00c00804 	movi	r3,32
 4015198:	1887c83a 	sub	r3,r3,r2
 401519c:	18000526 	beq	r3,zero,40151b4 <__udivdi3+0x94>
 40151a0:	80e0983a 	sll	r16,r16,r3
 40151a4:	9884d83a 	srl	r2,r19,r2
 40151a8:	30e2983a 	sll	r17,r6,r3
 40151ac:	98e4983a 	sll	r18,r19,r3
 40151b0:	142cb03a 	or	r22,r2,r16
 40151b4:	882ad43a 	srli	r21,r17,16
 40151b8:	b009883a 	mov	r4,r22
 40151bc:	8d3fffcc 	andi	r20,r17,65535
 40151c0:	a80b883a 	mov	r5,r21
 40151c4:	4007e5c0 	call	4007e5c <__umodsi3>
 40151c8:	b009883a 	mov	r4,r22
 40151cc:	a80b883a 	mov	r5,r21
 40151d0:	1027883a 	mov	r19,r2
 40151d4:	4007df80 	call	4007df8 <__udivsi3>
 40151d8:	100b883a 	mov	r5,r2
 40151dc:	a009883a 	mov	r4,r20
 40151e0:	102d883a 	mov	r22,r2
 40151e4:	4007eb40 	call	4007eb4 <__mulsi3>
 40151e8:	9826943a 	slli	r19,r19,16
 40151ec:	9006d43a 	srli	r3,r18,16
 40151f0:	1cc6b03a 	or	r3,r3,r19
 40151f4:	1880052e 	bgeu	r3,r2,401520c <__udivdi3+0xec>
 40151f8:	1c47883a 	add	r3,r3,r17
 40151fc:	b13fffc4 	addi	r4,r22,-1
 4015200:	1c400136 	bltu	r3,r17,4015208 <__udivdi3+0xe8>
 4015204:	18814236 	bltu	r3,r2,4015710 <__udivdi3+0x5f0>
 4015208:	202d883a 	mov	r22,r4
 401520c:	18a1c83a 	sub	r16,r3,r2
 4015210:	8009883a 	mov	r4,r16
 4015214:	a80b883a 	mov	r5,r21
 4015218:	4007e5c0 	call	4007e5c <__umodsi3>
 401521c:	1027883a 	mov	r19,r2
 4015220:	8009883a 	mov	r4,r16
 4015224:	a80b883a 	mov	r5,r21
 4015228:	9826943a 	slli	r19,r19,16
 401522c:	4007df80 	call	4007df8 <__udivsi3>
 4015230:	100b883a 	mov	r5,r2
 4015234:	a009883a 	mov	r4,r20
 4015238:	94bfffcc 	andi	r18,r18,65535
 401523c:	1021883a 	mov	r16,r2
 4015240:	94e4b03a 	or	r18,r18,r19
 4015244:	4007eb40 	call	4007eb4 <__mulsi3>
 4015248:	9080052e 	bgeu	r18,r2,4015260 <__udivdi3+0x140>
 401524c:	8ca5883a 	add	r18,r17,r18
 4015250:	80ffffc4 	addi	r3,r16,-1
 4015254:	94410c36 	bltu	r18,r17,4015688 <__udivdi3+0x568>
 4015258:	90810b2e 	bgeu	r18,r2,4015688 <__udivdi3+0x568>
 401525c:	843fff84 	addi	r16,r16,-2
 4015260:	b004943a 	slli	r2,r22,16
 4015264:	0007883a 	mov	r3,zero
 4015268:	1404b03a 	or	r2,r2,r16
 401526c:	00005e06 	br	40153e8 <__udivdi3+0x2c8>
 4015270:	29c05b36 	bltu	r5,r7,40153e0 <__udivdi3+0x2c0>
 4015274:	00bfffd4 	movui	r2,65535
 4015278:	11c0672e 	bgeu	r2,r7,4015418 <__udivdi3+0x2f8>
 401527c:	00804034 	movhi	r2,256
 4015280:	10bfffc4 	addi	r2,r2,-1
 4015284:	11c10a36 	bltu	r2,r7,40156b0 <__udivdi3+0x590>
 4015288:	00800404 	movi	r2,16
 401528c:	3886d83a 	srl	r3,r7,r2
 4015290:	010100b4 	movhi	r4,1026
 4015294:	212b4704 	addi	r4,r4,-21220
 4015298:	20c7883a 	add	r3,r4,r3
 401529c:	18c00003 	ldbu	r3,0(r3)
 40152a0:	05c00804 	movi	r23,32
 40152a4:	1885883a 	add	r2,r3,r2
 40152a8:	b8afc83a 	sub	r23,r23,r2
 40152ac:	b800671e 	bne	r23,zero,401544c <__udivdi3+0x32c>
 40152b0:	3c010536 	bltu	r7,r16,40156c8 <__udivdi3+0x5a8>
 40152b4:	9985403a 	cmpgeu	r2,r19,r6
 40152b8:	0007883a 	mov	r3,zero
 40152bc:	00004a06 	br	40153e8 <__udivdi3+0x2c8>
 40152c0:	3000041e 	bne	r6,zero,40152d4 <__udivdi3+0x1b4>
 40152c4:	000b883a 	mov	r5,zero
 40152c8:	01000044 	movi	r4,1
 40152cc:	4007df80 	call	4007df8 <__udivsi3>
 40152d0:	1023883a 	mov	r17,r2
 40152d4:	00bfffd4 	movui	r2,65535
 40152d8:	1440532e 	bgeu	r2,r17,4015428 <__udivdi3+0x308>
 40152dc:	00804034 	movhi	r2,256
 40152e0:	10bfffc4 	addi	r2,r2,-1
 40152e4:	1440f436 	bltu	r2,r17,40156b8 <__udivdi3+0x598>
 40152e8:	00800404 	movi	r2,16
 40152ec:	8886d83a 	srl	r3,r17,r2
 40152f0:	010100b4 	movhi	r4,1026
 40152f4:	212b4704 	addi	r4,r4,-21220
 40152f8:	20c7883a 	add	r3,r4,r3
 40152fc:	18c00003 	ldbu	r3,0(r3)
 4015300:	1885883a 	add	r2,r3,r2
 4015304:	00c00804 	movi	r3,32
 4015308:	1887c83a 	sub	r3,r3,r2
 401530c:	1800a51e 	bne	r3,zero,40155a4 <__udivdi3+0x484>
 4015310:	882ad43a 	srli	r21,r17,16
 4015314:	8461c83a 	sub	r16,r16,r17
 4015318:	8d3fffcc 	andi	r20,r17,65535
 401531c:	00c00044 	movi	r3,1
 4015320:	a80b883a 	mov	r5,r21
 4015324:	8009883a 	mov	r4,r16
 4015328:	d8c00115 	stw	r3,4(sp)
 401532c:	4007e5c0 	call	4007e5c <__umodsi3>
 4015330:	a80b883a 	mov	r5,r21
 4015334:	8009883a 	mov	r4,r16
 4015338:	1027883a 	mov	r19,r2
 401533c:	4007df80 	call	4007df8 <__udivsi3>
 4015340:	a00b883a 	mov	r5,r20
 4015344:	1009883a 	mov	r4,r2
 4015348:	102d883a 	mov	r22,r2
 401534c:	4007eb40 	call	4007eb4 <__mulsi3>
 4015350:	9826943a 	slli	r19,r19,16
 4015354:	900ed43a 	srli	r7,r18,16
 4015358:	d8c00117 	ldw	r3,4(sp)
 401535c:	3cceb03a 	or	r7,r7,r19
 4015360:	3880052e 	bgeu	r7,r2,4015378 <__udivdi3+0x258>
 4015364:	3c4f883a 	add	r7,r7,r17
 4015368:	b13fffc4 	addi	r4,r22,-1
 401536c:	3c400136 	bltu	r7,r17,4015374 <__udivdi3+0x254>
 4015370:	3880e436 	bltu	r7,r2,4015704 <__udivdi3+0x5e4>
 4015374:	202d883a 	mov	r22,r4
 4015378:	38a1c83a 	sub	r16,r7,r2
 401537c:	8009883a 	mov	r4,r16
 4015380:	a80b883a 	mov	r5,r21
 4015384:	d8c00115 	stw	r3,4(sp)
 4015388:	4007e5c0 	call	4007e5c <__umodsi3>
 401538c:	1027883a 	mov	r19,r2
 4015390:	8009883a 	mov	r4,r16
 4015394:	a80b883a 	mov	r5,r21
 4015398:	9826943a 	slli	r19,r19,16
 401539c:	4007df80 	call	4007df8 <__udivsi3>
 40153a0:	a00b883a 	mov	r5,r20
 40153a4:	1009883a 	mov	r4,r2
 40153a8:	94bfffcc 	andi	r18,r18,65535
 40153ac:	1021883a 	mov	r16,r2
 40153b0:	94e4b03a 	or	r18,r18,r19
 40153b4:	4007eb40 	call	4007eb4 <__mulsi3>
 40153b8:	d8c00117 	ldw	r3,4(sp)
 40153bc:	9080052e 	bgeu	r18,r2,40153d4 <__udivdi3+0x2b4>
 40153c0:	8ca5883a 	add	r18,r17,r18
 40153c4:	813fffc4 	addi	r4,r16,-1
 40153c8:	9440ad36 	bltu	r18,r17,4015680 <__udivdi3+0x560>
 40153cc:	9080ac2e 	bgeu	r18,r2,4015680 <__udivdi3+0x560>
 40153d0:	843fff84 	addi	r16,r16,-2
 40153d4:	b004943a 	slli	r2,r22,16
 40153d8:	1404b03a 	or	r2,r2,r16
 40153dc:	00000206 	br	40153e8 <__udivdi3+0x2c8>
 40153e0:	0007883a 	mov	r3,zero
 40153e4:	0005883a 	mov	r2,zero
 40153e8:	dfc00b17 	ldw	ra,44(sp)
 40153ec:	df000a17 	ldw	fp,40(sp)
 40153f0:	ddc00917 	ldw	r23,36(sp)
 40153f4:	dd800817 	ldw	r22,32(sp)
 40153f8:	dd400717 	ldw	r21,28(sp)
 40153fc:	dd000617 	ldw	r20,24(sp)
 4015400:	dcc00517 	ldw	r19,20(sp)
 4015404:	dc800417 	ldw	r18,16(sp)
 4015408:	dc400317 	ldw	r17,12(sp)
 401540c:	dc000217 	ldw	r16,8(sp)
 4015410:	dec00c04 	addi	sp,sp,48
 4015414:	f800283a 	ret
 4015418:	00803fc4 	movi	r2,255
 401541c:	11c5803a 	cmpltu	r2,r2,r7
 4015420:	100490fa 	slli	r2,r2,3
 4015424:	003f9906 	br	401528c <__alt_data_end+0xfc01528c>
 4015428:	00803fc4 	movi	r2,255
 401542c:	1445803a 	cmpltu	r2,r2,r17
 4015430:	100490fa 	slli	r2,r2,3
 4015434:	003fad06 	br	40152ec <__alt_data_end+0xfc0152ec>
 4015438:	00804034 	movhi	r2,256
 401543c:	10bfffc4 	addi	r2,r2,-1
 4015440:	11809f36 	bltu	r2,r6,40156c0 <__udivdi3+0x5a0>
 4015444:	00800404 	movi	r2,16
 4015448:	003f4c06 	br	401517c <__alt_data_end+0xfc01517c>
 401544c:	3dce983a 	sll	r7,r7,r23
 4015450:	30b8d83a 	srl	fp,r6,r2
 4015454:	80a2d83a 	srl	r17,r16,r2
 4015458:	35cc983a 	sll	r6,r6,r23
 401545c:	3f38b03a 	or	fp,r7,fp
 4015460:	e024d43a 	srli	r18,fp,16
 4015464:	9884d83a 	srl	r2,r19,r2
 4015468:	85e0983a 	sll	r16,r16,r23
 401546c:	8809883a 	mov	r4,r17
 4015470:	900b883a 	mov	r5,r18
 4015474:	d9800015 	stw	r6,0(sp)
 4015478:	1420b03a 	or	r16,r2,r16
 401547c:	4007e5c0 	call	4007e5c <__umodsi3>
 4015480:	900b883a 	mov	r5,r18
 4015484:	8809883a 	mov	r4,r17
 4015488:	1029883a 	mov	r20,r2
 401548c:	e5bfffcc 	andi	r22,fp,65535
 4015490:	4007df80 	call	4007df8 <__udivsi3>
 4015494:	100b883a 	mov	r5,r2
 4015498:	b009883a 	mov	r4,r22
 401549c:	102b883a 	mov	r21,r2
 40154a0:	4007eb40 	call	4007eb4 <__mulsi3>
 40154a4:	a028943a 	slli	r20,r20,16
 40154a8:	8006d43a 	srli	r3,r16,16
 40154ac:	1d06b03a 	or	r3,r3,r20
 40154b0:	1880042e 	bgeu	r3,r2,40154c4 <__udivdi3+0x3a4>
 40154b4:	1f07883a 	add	r3,r3,fp
 40154b8:	a93fffc4 	addi	r4,r21,-1
 40154bc:	1f00892e 	bgeu	r3,fp,40156e4 <__udivdi3+0x5c4>
 40154c0:	202b883a 	mov	r21,r4
 40154c4:	18a3c83a 	sub	r17,r3,r2
 40154c8:	8809883a 	mov	r4,r17
 40154cc:	900b883a 	mov	r5,r18
 40154d0:	4007e5c0 	call	4007e5c <__umodsi3>
 40154d4:	1029883a 	mov	r20,r2
 40154d8:	8809883a 	mov	r4,r17
 40154dc:	900b883a 	mov	r5,r18
 40154e0:	a028943a 	slli	r20,r20,16
 40154e4:	4007df80 	call	4007df8 <__udivsi3>
 40154e8:	100b883a 	mov	r5,r2
 40154ec:	b009883a 	mov	r4,r22
 40154f0:	843fffcc 	andi	r16,r16,65535
 40154f4:	1023883a 	mov	r17,r2
 40154f8:	8520b03a 	or	r16,r16,r20
 40154fc:	4007eb40 	call	4007eb4 <__mulsi3>
 4015500:	8080042e 	bgeu	r16,r2,4015514 <__udivdi3+0x3f4>
 4015504:	8721883a 	add	r16,r16,fp
 4015508:	88ffffc4 	addi	r3,r17,-1
 401550c:	8700712e 	bgeu	r16,fp,40156d4 <__udivdi3+0x5b4>
 4015510:	1823883a 	mov	r17,r3
 4015514:	a80e943a 	slli	r7,r21,16
 4015518:	d8c00017 	ldw	r3,0(sp)
 401551c:	80a1c83a 	sub	r16,r16,r2
 4015520:	3c64b03a 	or	r18,r7,r17
 4015524:	1d3fffcc 	andi	r20,r3,65535
 4015528:	9022d43a 	srli	r17,r18,16
 401552c:	95bfffcc 	andi	r22,r18,65535
 4015530:	a00b883a 	mov	r5,r20
 4015534:	b009883a 	mov	r4,r22
 4015538:	182ad43a 	srli	r21,r3,16
 401553c:	4007eb40 	call	4007eb4 <__mulsi3>
 4015540:	a00b883a 	mov	r5,r20
 4015544:	8809883a 	mov	r4,r17
 4015548:	1039883a 	mov	fp,r2
 401554c:	4007eb40 	call	4007eb4 <__mulsi3>
 4015550:	8809883a 	mov	r4,r17
 4015554:	a80b883a 	mov	r5,r21
 4015558:	1029883a 	mov	r20,r2
 401555c:	4007eb40 	call	4007eb4 <__mulsi3>
 4015560:	a80b883a 	mov	r5,r21
 4015564:	b009883a 	mov	r4,r22
 4015568:	1023883a 	mov	r17,r2
 401556c:	4007eb40 	call	4007eb4 <__mulsi3>
 4015570:	e006d43a 	srli	r3,fp,16
 4015574:	1505883a 	add	r2,r2,r20
 4015578:	1887883a 	add	r3,r3,r2
 401557c:	1d00022e 	bgeu	r3,r20,4015588 <__udivdi3+0x468>
 4015580:	00800074 	movhi	r2,1
 4015584:	88a3883a 	add	r17,r17,r2
 4015588:	1804d43a 	srli	r2,r3,16
 401558c:	1463883a 	add	r17,r2,r17
 4015590:	84404436 	bltu	r16,r17,40156a4 <__udivdi3+0x584>
 4015594:	84403e26 	beq	r16,r17,4015690 <__udivdi3+0x570>
 4015598:	9005883a 	mov	r2,r18
 401559c:	0007883a 	mov	r3,zero
 40155a0:	003f9106 	br	40153e8 <__alt_data_end+0xfc0153e8>
 40155a4:	88e2983a 	sll	r17,r17,r3
 40155a8:	80aed83a 	srl	r23,r16,r2
 40155ac:	80e0983a 	sll	r16,r16,r3
 40155b0:	882ad43a 	srli	r21,r17,16
 40155b4:	9884d83a 	srl	r2,r19,r2
 40155b8:	b809883a 	mov	r4,r23
 40155bc:	a80b883a 	mov	r5,r21
 40155c0:	98e4983a 	sll	r18,r19,r3
 40155c4:	142cb03a 	or	r22,r2,r16
 40155c8:	4007e5c0 	call	4007e5c <__umodsi3>
 40155cc:	b809883a 	mov	r4,r23
 40155d0:	a80b883a 	mov	r5,r21
 40155d4:	1027883a 	mov	r19,r2
 40155d8:	8d3fffcc 	andi	r20,r17,65535
 40155dc:	4007df80 	call	4007df8 <__udivsi3>
 40155e0:	a009883a 	mov	r4,r20
 40155e4:	100b883a 	mov	r5,r2
 40155e8:	102f883a 	mov	r23,r2
 40155ec:	4007eb40 	call	4007eb4 <__mulsi3>
 40155f0:	9826943a 	slli	r19,r19,16
 40155f4:	b008d43a 	srli	r4,r22,16
 40155f8:	24c8b03a 	or	r4,r4,r19
 40155fc:	2080062e 	bgeu	r4,r2,4015618 <__udivdi3+0x4f8>
 4015600:	2449883a 	add	r4,r4,r17
 4015604:	b8ffffc4 	addi	r3,r23,-1
 4015608:	24403c36 	bltu	r4,r17,40156fc <__udivdi3+0x5dc>
 401560c:	20803b2e 	bgeu	r4,r2,40156fc <__udivdi3+0x5dc>
 4015610:	bdffff84 	addi	r23,r23,-2
 4015614:	2449883a 	add	r4,r4,r17
 4015618:	20a1c83a 	sub	r16,r4,r2
 401561c:	a80b883a 	mov	r5,r21
 4015620:	8009883a 	mov	r4,r16
 4015624:	4007e5c0 	call	4007e5c <__umodsi3>
 4015628:	a80b883a 	mov	r5,r21
 401562c:	8009883a 	mov	r4,r16
 4015630:	1027883a 	mov	r19,r2
 4015634:	4007df80 	call	4007df8 <__udivsi3>
 4015638:	a009883a 	mov	r4,r20
 401563c:	100b883a 	mov	r5,r2
 4015640:	9826943a 	slli	r19,r19,16
 4015644:	1039883a 	mov	fp,r2
 4015648:	4007eb40 	call	4007eb4 <__mulsi3>
 401564c:	b13fffcc 	andi	r4,r22,65535
 4015650:	24c8b03a 	or	r4,r4,r19
 4015654:	2080062e 	bgeu	r4,r2,4015670 <__udivdi3+0x550>
 4015658:	2449883a 	add	r4,r4,r17
 401565c:	e0ffffc4 	addi	r3,fp,-1
 4015660:	24402436 	bltu	r4,r17,40156f4 <__udivdi3+0x5d4>
 4015664:	2080232e 	bgeu	r4,r2,40156f4 <__udivdi3+0x5d4>
 4015668:	e73fff84 	addi	fp,fp,-2
 401566c:	2449883a 	add	r4,r4,r17
 4015670:	b82e943a 	slli	r23,r23,16
 4015674:	20a1c83a 	sub	r16,r4,r2
 4015678:	bf06b03a 	or	r3,r23,fp
 401567c:	003f2806 	br	4015320 <__alt_data_end+0xfc015320>
 4015680:	2021883a 	mov	r16,r4
 4015684:	003f5306 	br	40153d4 <__alt_data_end+0xfc0153d4>
 4015688:	1821883a 	mov	r16,r3
 401568c:	003ef406 	br	4015260 <__alt_data_end+0xfc015260>
 4015690:	1806943a 	slli	r3,r3,16
 4015694:	9de6983a 	sll	r19,r19,r23
 4015698:	e73fffcc 	andi	fp,fp,65535
 401569c:	1f07883a 	add	r3,r3,fp
 40156a0:	98ffbd2e 	bgeu	r19,r3,4015598 <__alt_data_end+0xfc015598>
 40156a4:	90bfffc4 	addi	r2,r18,-1
 40156a8:	0007883a 	mov	r3,zero
 40156ac:	003f4e06 	br	40153e8 <__alt_data_end+0xfc0153e8>
 40156b0:	00800604 	movi	r2,24
 40156b4:	003ef506 	br	401528c <__alt_data_end+0xfc01528c>
 40156b8:	00800604 	movi	r2,24
 40156bc:	003f0b06 	br	40152ec <__alt_data_end+0xfc0152ec>
 40156c0:	00800604 	movi	r2,24
 40156c4:	003ead06 	br	401517c <__alt_data_end+0xfc01517c>
 40156c8:	0007883a 	mov	r3,zero
 40156cc:	00800044 	movi	r2,1
 40156d0:	003f4506 	br	40153e8 <__alt_data_end+0xfc0153e8>
 40156d4:	80bf8e2e 	bgeu	r16,r2,4015510 <__alt_data_end+0xfc015510>
 40156d8:	8c7fff84 	addi	r17,r17,-2
 40156dc:	8721883a 	add	r16,r16,fp
 40156e0:	003f8c06 	br	4015514 <__alt_data_end+0xfc015514>
 40156e4:	18bf762e 	bgeu	r3,r2,40154c0 <__alt_data_end+0xfc0154c0>
 40156e8:	ad7fff84 	addi	r21,r21,-2
 40156ec:	1f07883a 	add	r3,r3,fp
 40156f0:	003f7406 	br	40154c4 <__alt_data_end+0xfc0154c4>
 40156f4:	1839883a 	mov	fp,r3
 40156f8:	003fdd06 	br	4015670 <__alt_data_end+0xfc015670>
 40156fc:	182f883a 	mov	r23,r3
 4015700:	003fc506 	br	4015618 <__alt_data_end+0xfc015618>
 4015704:	b5bfff84 	addi	r22,r22,-2
 4015708:	3c4f883a 	add	r7,r7,r17
 401570c:	003f1a06 	br	4015378 <__alt_data_end+0xfc015378>
 4015710:	b5bfff84 	addi	r22,r22,-2
 4015714:	1c47883a 	add	r3,r3,r17
 4015718:	003ebc06 	br	401520c <__alt_data_end+0xfc01520c>

0401571c <__umoddi3>:
 401571c:	defff304 	addi	sp,sp,-52
 4015720:	df000b15 	stw	fp,44(sp)
 4015724:	dc400415 	stw	r17,16(sp)
 4015728:	dc000315 	stw	r16,12(sp)
 401572c:	dfc00c15 	stw	ra,48(sp)
 4015730:	ddc00a15 	stw	r23,40(sp)
 4015734:	dd800915 	stw	r22,36(sp)
 4015738:	dd400815 	stw	r21,32(sp)
 401573c:	dd000715 	stw	r20,28(sp)
 4015740:	dcc00615 	stw	r19,24(sp)
 4015744:	dc800515 	stw	r18,20(sp)
 4015748:	2021883a 	mov	r16,r4
 401574c:	2823883a 	mov	r17,r5
 4015750:	2839883a 	mov	fp,r5
 4015754:	3800401e 	bne	r7,zero,4015858 <__umoddi3+0x13c>
 4015758:	3027883a 	mov	r19,r6
 401575c:	2029883a 	mov	r20,r4
 4015760:	2980552e 	bgeu	r5,r6,40158b8 <__umoddi3+0x19c>
 4015764:	00bfffd4 	movui	r2,65535
 4015768:	1180a236 	bltu	r2,r6,40159f4 <__umoddi3+0x2d8>
 401576c:	01003fc4 	movi	r4,255
 4015770:	2189803a 	cmpltu	r4,r4,r6
 4015774:	200890fa 	slli	r4,r4,3
 4015778:	3104d83a 	srl	r2,r6,r4
 401577c:	00c100b4 	movhi	r3,1026
 4015780:	18eb4704 	addi	r3,r3,-21220
 4015784:	1885883a 	add	r2,r3,r2
 4015788:	10c00003 	ldbu	r3,0(r2)
 401578c:	00800804 	movi	r2,32
 4015790:	1909883a 	add	r4,r3,r4
 4015794:	1125c83a 	sub	r18,r2,r4
 4015798:	90000526 	beq	r18,zero,40157b0 <__umoddi3+0x94>
 401579c:	8ca2983a 	sll	r17,r17,r18
 40157a0:	8108d83a 	srl	r4,r16,r4
 40157a4:	34a6983a 	sll	r19,r6,r18
 40157a8:	84a8983a 	sll	r20,r16,r18
 40157ac:	2478b03a 	or	fp,r4,r17
 40157b0:	982cd43a 	srli	r22,r19,16
 40157b4:	e009883a 	mov	r4,fp
 40157b8:	9dffffcc 	andi	r23,r19,65535
 40157bc:	b00b883a 	mov	r5,r22
 40157c0:	4007e5c0 	call	4007e5c <__umodsi3>
 40157c4:	b00b883a 	mov	r5,r22
 40157c8:	e009883a 	mov	r4,fp
 40157cc:	102b883a 	mov	r21,r2
 40157d0:	4007df80 	call	4007df8 <__udivsi3>
 40157d4:	100b883a 	mov	r5,r2
 40157d8:	b809883a 	mov	r4,r23
 40157dc:	4007eb40 	call	4007eb4 <__mulsi3>
 40157e0:	a82a943a 	slli	r21,r21,16
 40157e4:	a006d43a 	srli	r3,r20,16
 40157e8:	1d46b03a 	or	r3,r3,r21
 40157ec:	1880032e 	bgeu	r3,r2,40157fc <__umoddi3+0xe0>
 40157f0:	1cc7883a 	add	r3,r3,r19
 40157f4:	1cc00136 	bltu	r3,r19,40157fc <__umoddi3+0xe0>
 40157f8:	18813136 	bltu	r3,r2,4015cc0 <__umoddi3+0x5a4>
 40157fc:	18a1c83a 	sub	r16,r3,r2
 4015800:	b00b883a 	mov	r5,r22
 4015804:	8009883a 	mov	r4,r16
 4015808:	4007e5c0 	call	4007e5c <__umodsi3>
 401580c:	b00b883a 	mov	r5,r22
 4015810:	8009883a 	mov	r4,r16
 4015814:	1023883a 	mov	r17,r2
 4015818:	4007df80 	call	4007df8 <__udivsi3>
 401581c:	100b883a 	mov	r5,r2
 4015820:	b809883a 	mov	r4,r23
 4015824:	8822943a 	slli	r17,r17,16
 4015828:	4007eb40 	call	4007eb4 <__mulsi3>
 401582c:	a0ffffcc 	andi	r3,r20,65535
 4015830:	1c46b03a 	or	r3,r3,r17
 4015834:	1880042e 	bgeu	r3,r2,4015848 <__umoddi3+0x12c>
 4015838:	1cc7883a 	add	r3,r3,r19
 401583c:	1cc00236 	bltu	r3,r19,4015848 <__umoddi3+0x12c>
 4015840:	1880012e 	bgeu	r3,r2,4015848 <__umoddi3+0x12c>
 4015844:	1cc7883a 	add	r3,r3,r19
 4015848:	1885c83a 	sub	r2,r3,r2
 401584c:	1484d83a 	srl	r2,r2,r18
 4015850:	0007883a 	mov	r3,zero
 4015854:	00005306 	br	40159a4 <__umoddi3+0x288>
 4015858:	29c05036 	bltu	r5,r7,401599c <__umoddi3+0x280>
 401585c:	00bfffd4 	movui	r2,65535
 4015860:	11c05c2e 	bgeu	r2,r7,40159d4 <__umoddi3+0x2b8>
 4015864:	00804034 	movhi	r2,256
 4015868:	10bfffc4 	addi	r2,r2,-1
 401586c:	11c10636 	bltu	r2,r7,4015c88 <__umoddi3+0x56c>
 4015870:	01000404 	movi	r4,16
 4015874:	3904d83a 	srl	r2,r7,r4
 4015878:	00c100b4 	movhi	r3,1026
 401587c:	18eb4704 	addi	r3,r3,-21220
 4015880:	1885883a 	add	r2,r3,r2
 4015884:	14c00003 	ldbu	r19,0(r2)
 4015888:	00c00804 	movi	r3,32
 401588c:	9927883a 	add	r19,r19,r4
 4015890:	1ce9c83a 	sub	r20,r3,r19
 4015894:	a0005c1e 	bne	r20,zero,4015a08 <__umoddi3+0x2ec>
 4015898:	3c400136 	bltu	r7,r17,40158a0 <__umoddi3+0x184>
 401589c:	81810a36 	bltu	r16,r6,4015cc8 <__umoddi3+0x5ac>
 40158a0:	8185c83a 	sub	r2,r16,r6
 40158a4:	89e3c83a 	sub	r17,r17,r7
 40158a8:	8089803a 	cmpltu	r4,r16,r2
 40158ac:	8939c83a 	sub	fp,r17,r4
 40158b0:	e007883a 	mov	r3,fp
 40158b4:	00003b06 	br	40159a4 <__umoddi3+0x288>
 40158b8:	3000041e 	bne	r6,zero,40158cc <__umoddi3+0x1b0>
 40158bc:	000b883a 	mov	r5,zero
 40158c0:	01000044 	movi	r4,1
 40158c4:	4007df80 	call	4007df8 <__udivsi3>
 40158c8:	1027883a 	mov	r19,r2
 40158cc:	00bfffd4 	movui	r2,65535
 40158d0:	14c0442e 	bgeu	r2,r19,40159e4 <__umoddi3+0x2c8>
 40158d4:	00804034 	movhi	r2,256
 40158d8:	10bfffc4 	addi	r2,r2,-1
 40158dc:	14c0ec36 	bltu	r2,r19,4015c90 <__umoddi3+0x574>
 40158e0:	00800404 	movi	r2,16
 40158e4:	9886d83a 	srl	r3,r19,r2
 40158e8:	010100b4 	movhi	r4,1026
 40158ec:	212b4704 	addi	r4,r4,-21220
 40158f0:	20c7883a 	add	r3,r4,r3
 40158f4:	18c00003 	ldbu	r3,0(r3)
 40158f8:	1887883a 	add	r3,r3,r2
 40158fc:	00800804 	movi	r2,32
 4015900:	10e5c83a 	sub	r18,r2,r3
 4015904:	9000ab1e 	bne	r18,zero,4015bb4 <__umoddi3+0x498>
 4015908:	982cd43a 	srli	r22,r19,16
 401590c:	8ce3c83a 	sub	r17,r17,r19
 4015910:	9dffffcc 	andi	r23,r19,65535
 4015914:	b00b883a 	mov	r5,r22
 4015918:	8809883a 	mov	r4,r17
 401591c:	4007e5c0 	call	4007e5c <__umodsi3>
 4015920:	b00b883a 	mov	r5,r22
 4015924:	8809883a 	mov	r4,r17
 4015928:	102b883a 	mov	r21,r2
 401592c:	4007df80 	call	4007df8 <__udivsi3>
 4015930:	b80b883a 	mov	r5,r23
 4015934:	1009883a 	mov	r4,r2
 4015938:	4007eb40 	call	4007eb4 <__mulsi3>
 401593c:	a82a943a 	slli	r21,r21,16
 4015940:	a006d43a 	srli	r3,r20,16
 4015944:	1d46b03a 	or	r3,r3,r21
 4015948:	1880042e 	bgeu	r3,r2,401595c <__umoddi3+0x240>
 401594c:	1cc7883a 	add	r3,r3,r19
 4015950:	1cc00236 	bltu	r3,r19,401595c <__umoddi3+0x240>
 4015954:	1880012e 	bgeu	r3,r2,401595c <__umoddi3+0x240>
 4015958:	1cc7883a 	add	r3,r3,r19
 401595c:	18a1c83a 	sub	r16,r3,r2
 4015960:	b00b883a 	mov	r5,r22
 4015964:	8009883a 	mov	r4,r16
 4015968:	4007e5c0 	call	4007e5c <__umodsi3>
 401596c:	1023883a 	mov	r17,r2
 4015970:	b00b883a 	mov	r5,r22
 4015974:	8009883a 	mov	r4,r16
 4015978:	4007df80 	call	4007df8 <__udivsi3>
 401597c:	8822943a 	slli	r17,r17,16
 4015980:	b80b883a 	mov	r5,r23
 4015984:	1009883a 	mov	r4,r2
 4015988:	4007eb40 	call	4007eb4 <__mulsi3>
 401598c:	a53fffcc 	andi	r20,r20,65535
 4015990:	a446b03a 	or	r3,r20,r17
 4015994:	18bfac2e 	bgeu	r3,r2,4015848 <__alt_data_end+0xfc015848>
 4015998:	003fa706 	br	4015838 <__alt_data_end+0xfc015838>
 401599c:	2005883a 	mov	r2,r4
 40159a0:	2807883a 	mov	r3,r5
 40159a4:	dfc00c17 	ldw	ra,48(sp)
 40159a8:	df000b17 	ldw	fp,44(sp)
 40159ac:	ddc00a17 	ldw	r23,40(sp)
 40159b0:	dd800917 	ldw	r22,36(sp)
 40159b4:	dd400817 	ldw	r21,32(sp)
 40159b8:	dd000717 	ldw	r20,28(sp)
 40159bc:	dcc00617 	ldw	r19,24(sp)
 40159c0:	dc800517 	ldw	r18,20(sp)
 40159c4:	dc400417 	ldw	r17,16(sp)
 40159c8:	dc000317 	ldw	r16,12(sp)
 40159cc:	dec00d04 	addi	sp,sp,52
 40159d0:	f800283a 	ret
 40159d4:	04c03fc4 	movi	r19,255
 40159d8:	99c9803a 	cmpltu	r4,r19,r7
 40159dc:	200890fa 	slli	r4,r4,3
 40159e0:	003fa406 	br	4015874 <__alt_data_end+0xfc015874>
 40159e4:	00803fc4 	movi	r2,255
 40159e8:	14c5803a 	cmpltu	r2,r2,r19
 40159ec:	100490fa 	slli	r2,r2,3
 40159f0:	003fbc06 	br	40158e4 <__alt_data_end+0xfc0158e4>
 40159f4:	00804034 	movhi	r2,256
 40159f8:	10bfffc4 	addi	r2,r2,-1
 40159fc:	1180a636 	bltu	r2,r6,4015c98 <__umoddi3+0x57c>
 4015a00:	01000404 	movi	r4,16
 4015a04:	003f5c06 	br	4015778 <__alt_data_end+0xfc015778>
 4015a08:	3d0e983a 	sll	r7,r7,r20
 4015a0c:	34ead83a 	srl	r21,r6,r19
 4015a10:	8cc6d83a 	srl	r3,r17,r19
 4015a14:	8d10983a 	sll	r8,r17,r20
 4015a18:	3d6ab03a 	or	r21,r7,r21
 4015a1c:	a82cd43a 	srli	r22,r21,16
 4015a20:	84e2d83a 	srl	r17,r16,r19
 4015a24:	1809883a 	mov	r4,r3
 4015a28:	b00b883a 	mov	r5,r22
 4015a2c:	8a22b03a 	or	r17,r17,r8
 4015a30:	3524983a 	sll	r18,r6,r20
 4015a34:	dc400015 	stw	r17,0(sp)
 4015a38:	d8c00115 	stw	r3,4(sp)
 4015a3c:	4007e5c0 	call	4007e5c <__umodsi3>
 4015a40:	d8c00117 	ldw	r3,4(sp)
 4015a44:	b00b883a 	mov	r5,r22
 4015a48:	1039883a 	mov	fp,r2
 4015a4c:	1809883a 	mov	r4,r3
 4015a50:	4007df80 	call	4007df8 <__udivsi3>
 4015a54:	adffffcc 	andi	r23,r21,65535
 4015a58:	100b883a 	mov	r5,r2
 4015a5c:	b809883a 	mov	r4,r23
 4015a60:	1023883a 	mov	r17,r2
 4015a64:	4007eb40 	call	4007eb4 <__mulsi3>
 4015a68:	d9400017 	ldw	r5,0(sp)
 4015a6c:	e008943a 	slli	r4,fp,16
 4015a70:	8520983a 	sll	r16,r16,r20
 4015a74:	2806d43a 	srli	r3,r5,16
 4015a78:	1906b03a 	or	r3,r3,r4
 4015a7c:	1880042e 	bgeu	r3,r2,4015a90 <__umoddi3+0x374>
 4015a80:	1d47883a 	add	r3,r3,r21
 4015a84:	893fffc4 	addi	r4,r17,-1
 4015a88:	1d40892e 	bgeu	r3,r21,4015cb0 <__umoddi3+0x594>
 4015a8c:	2023883a 	mov	r17,r4
 4015a90:	18b9c83a 	sub	fp,r3,r2
 4015a94:	b00b883a 	mov	r5,r22
 4015a98:	e009883a 	mov	r4,fp
 4015a9c:	4007e5c0 	call	4007e5c <__umodsi3>
 4015aa0:	b00b883a 	mov	r5,r22
 4015aa4:	e009883a 	mov	r4,fp
 4015aa8:	d8800215 	stw	r2,8(sp)
 4015aac:	4007df80 	call	4007df8 <__udivsi3>
 4015ab0:	100b883a 	mov	r5,r2
 4015ab4:	b809883a 	mov	r4,r23
 4015ab8:	102d883a 	mov	r22,r2
 4015abc:	4007eb40 	call	4007eb4 <__mulsi3>
 4015ac0:	d9800217 	ldw	r6,8(sp)
 4015ac4:	d8c00017 	ldw	r3,0(sp)
 4015ac8:	300c943a 	slli	r6,r6,16
 4015acc:	1a3fffcc 	andi	r8,r3,65535
 4015ad0:	4190b03a 	or	r8,r8,r6
 4015ad4:	4080042e 	bgeu	r8,r2,4015ae8 <__umoddi3+0x3cc>
 4015ad8:	4551883a 	add	r8,r8,r21
 4015adc:	b0ffffc4 	addi	r3,r22,-1
 4015ae0:	45406f2e 	bgeu	r8,r21,4015ca0 <__umoddi3+0x584>
 4015ae4:	182d883a 	mov	r22,r3
 4015ae8:	880e943a 	slli	r7,r17,16
 4015aec:	9006d43a 	srli	r3,r18,16
 4015af0:	91bfffcc 	andi	r6,r18,65535
 4015af4:	3dacb03a 	or	r22,r7,r22
 4015af8:	b02ed43a 	srli	r23,r22,16
 4015afc:	b5bfffcc 	andi	r22,r22,65535
 4015b00:	300b883a 	mov	r5,r6
 4015b04:	b009883a 	mov	r4,r22
 4015b08:	40a3c83a 	sub	r17,r8,r2
 4015b0c:	d8c00115 	stw	r3,4(sp)
 4015b10:	d9800215 	stw	r6,8(sp)
 4015b14:	4007eb40 	call	4007eb4 <__mulsi3>
 4015b18:	d9800217 	ldw	r6,8(sp)
 4015b1c:	b809883a 	mov	r4,r23
 4015b20:	1039883a 	mov	fp,r2
 4015b24:	300b883a 	mov	r5,r6
 4015b28:	4007eb40 	call	4007eb4 <__mulsi3>
 4015b2c:	d8c00117 	ldw	r3,4(sp)
 4015b30:	b809883a 	mov	r4,r23
 4015b34:	d8800215 	stw	r2,8(sp)
 4015b38:	180b883a 	mov	r5,r3
 4015b3c:	4007eb40 	call	4007eb4 <__mulsi3>
 4015b40:	d8c00117 	ldw	r3,4(sp)
 4015b44:	b009883a 	mov	r4,r22
 4015b48:	102f883a 	mov	r23,r2
 4015b4c:	180b883a 	mov	r5,r3
 4015b50:	4007eb40 	call	4007eb4 <__mulsi3>
 4015b54:	d9800217 	ldw	r6,8(sp)
 4015b58:	e006d43a 	srli	r3,fp,16
 4015b5c:	1185883a 	add	r2,r2,r6
 4015b60:	1885883a 	add	r2,r3,r2
 4015b64:	1180022e 	bgeu	r2,r6,4015b70 <__umoddi3+0x454>
 4015b68:	00c00074 	movhi	r3,1
 4015b6c:	b8ef883a 	add	r23,r23,r3
 4015b70:	1006d43a 	srli	r3,r2,16
 4015b74:	1004943a 	slli	r2,r2,16
 4015b78:	e73fffcc 	andi	fp,fp,65535
 4015b7c:	1dc7883a 	add	r3,r3,r23
 4015b80:	1739883a 	add	fp,r2,fp
 4015b84:	88c03a36 	bltu	r17,r3,4015c70 <__umoddi3+0x554>
 4015b88:	88c05126 	beq	r17,r3,4015cd0 <__umoddi3+0x5b4>
 4015b8c:	88c9c83a 	sub	r4,r17,r3
 4015b90:	e00f883a 	mov	r7,fp
 4015b94:	81cfc83a 	sub	r7,r16,r7
 4015b98:	81c7803a 	cmpltu	r3,r16,r7
 4015b9c:	20c7c83a 	sub	r3,r4,r3
 4015ba0:	1cc4983a 	sll	r2,r3,r19
 4015ba4:	3d0ed83a 	srl	r7,r7,r20
 4015ba8:	1d06d83a 	srl	r3,r3,r20
 4015bac:	11c4b03a 	or	r2,r2,r7
 4015bb0:	003f7c06 	br	40159a4 <__alt_data_end+0xfc0159a4>
 4015bb4:	9ca6983a 	sll	r19,r19,r18
 4015bb8:	88f8d83a 	srl	fp,r17,r3
 4015bbc:	80c4d83a 	srl	r2,r16,r3
 4015bc0:	982cd43a 	srli	r22,r19,16
 4015bc4:	8ca2983a 	sll	r17,r17,r18
 4015bc8:	e009883a 	mov	r4,fp
 4015bcc:	b00b883a 	mov	r5,r22
 4015bd0:	146ab03a 	or	r21,r2,r17
 4015bd4:	4007e5c0 	call	4007e5c <__umodsi3>
 4015bd8:	b00b883a 	mov	r5,r22
 4015bdc:	e009883a 	mov	r4,fp
 4015be0:	1029883a 	mov	r20,r2
 4015be4:	9dffffcc 	andi	r23,r19,65535
 4015be8:	4007df80 	call	4007df8 <__udivsi3>
 4015bec:	b809883a 	mov	r4,r23
 4015bf0:	100b883a 	mov	r5,r2
 4015bf4:	4007eb40 	call	4007eb4 <__mulsi3>
 4015bf8:	a008943a 	slli	r4,r20,16
 4015bfc:	a806d43a 	srli	r3,r21,16
 4015c00:	84a8983a 	sll	r20,r16,r18
 4015c04:	1906b03a 	or	r3,r3,r4
 4015c08:	1880042e 	bgeu	r3,r2,4015c1c <__umoddi3+0x500>
 4015c0c:	1cc7883a 	add	r3,r3,r19
 4015c10:	1cc00236 	bltu	r3,r19,4015c1c <__umoddi3+0x500>
 4015c14:	1880012e 	bgeu	r3,r2,4015c1c <__umoddi3+0x500>
 4015c18:	1cc7883a 	add	r3,r3,r19
 4015c1c:	18a3c83a 	sub	r17,r3,r2
 4015c20:	b00b883a 	mov	r5,r22
 4015c24:	8809883a 	mov	r4,r17
 4015c28:	4007e5c0 	call	4007e5c <__umodsi3>
 4015c2c:	b00b883a 	mov	r5,r22
 4015c30:	8809883a 	mov	r4,r17
 4015c34:	1021883a 	mov	r16,r2
 4015c38:	4007df80 	call	4007df8 <__udivsi3>
 4015c3c:	100b883a 	mov	r5,r2
 4015c40:	b809883a 	mov	r4,r23
 4015c44:	8020943a 	slli	r16,r16,16
 4015c48:	4007eb40 	call	4007eb4 <__mulsi3>
 4015c4c:	a8ffffcc 	andi	r3,r21,65535
 4015c50:	1c06b03a 	or	r3,r3,r16
 4015c54:	1880042e 	bgeu	r3,r2,4015c68 <__umoddi3+0x54c>
 4015c58:	1cc7883a 	add	r3,r3,r19
 4015c5c:	1cc00236 	bltu	r3,r19,4015c68 <__umoddi3+0x54c>
 4015c60:	1880012e 	bgeu	r3,r2,4015c68 <__umoddi3+0x54c>
 4015c64:	1cc7883a 	add	r3,r3,r19
 4015c68:	18a3c83a 	sub	r17,r3,r2
 4015c6c:	003f2906 	br	4015914 <__alt_data_end+0xfc015914>
 4015c70:	e48fc83a 	sub	r7,fp,r18
 4015c74:	1d49c83a 	sub	r4,r3,r21
 4015c78:	e1f9803a 	cmpltu	fp,fp,r7
 4015c7c:	2739c83a 	sub	fp,r4,fp
 4015c80:	8f09c83a 	sub	r4,r17,fp
 4015c84:	003fc306 	br	4015b94 <__alt_data_end+0xfc015b94>
 4015c88:	01000604 	movi	r4,24
 4015c8c:	003ef906 	br	4015874 <__alt_data_end+0xfc015874>
 4015c90:	00800604 	movi	r2,24
 4015c94:	003f1306 	br	40158e4 <__alt_data_end+0xfc0158e4>
 4015c98:	01000604 	movi	r4,24
 4015c9c:	003eb606 	br	4015778 <__alt_data_end+0xfc015778>
 4015ca0:	40bf902e 	bgeu	r8,r2,4015ae4 <__alt_data_end+0xfc015ae4>
 4015ca4:	b5bfff84 	addi	r22,r22,-2
 4015ca8:	4551883a 	add	r8,r8,r21
 4015cac:	003f8e06 	br	4015ae8 <__alt_data_end+0xfc015ae8>
 4015cb0:	18bf762e 	bgeu	r3,r2,4015a8c <__alt_data_end+0xfc015a8c>
 4015cb4:	8c7fff84 	addi	r17,r17,-2
 4015cb8:	1d47883a 	add	r3,r3,r21
 4015cbc:	003f7406 	br	4015a90 <__alt_data_end+0xfc015a90>
 4015cc0:	1cc7883a 	add	r3,r3,r19
 4015cc4:	003ecd06 	br	40157fc <__alt_data_end+0xfc0157fc>
 4015cc8:	8005883a 	mov	r2,r16
 4015ccc:	003ef806 	br	40158b0 <__alt_data_end+0xfc0158b0>
 4015cd0:	873fe736 	bltu	r16,fp,4015c70 <__alt_data_end+0xfc015c70>
 4015cd4:	e00f883a 	mov	r7,fp
 4015cd8:	0009883a 	mov	r4,zero
 4015cdc:	003fad06 	br	4015b94 <__alt_data_end+0xfc015b94>

04015ce0 <__floatunsidf>:
 4015ce0:	defffe04 	addi	sp,sp,-8
 4015ce4:	dc000015 	stw	r16,0(sp)
 4015ce8:	dfc00115 	stw	ra,4(sp)
 4015cec:	2021883a 	mov	r16,r4
 4015cf0:	20002226 	beq	r4,zero,4015d7c <__floatunsidf+0x9c>
 4015cf4:	400b7f80 	call	400b7f8 <__clzsi2>
 4015cf8:	01010784 	movi	r4,1054
 4015cfc:	2089c83a 	sub	r4,r4,r2
 4015d00:	01810cc4 	movi	r6,1075
 4015d04:	310dc83a 	sub	r6,r6,r4
 4015d08:	00c007c4 	movi	r3,31
 4015d0c:	1980120e 	bge	r3,r6,4015d58 <__floatunsidf+0x78>
 4015d10:	00c104c4 	movi	r3,1043
 4015d14:	1907c83a 	sub	r3,r3,r4
 4015d18:	80ca983a 	sll	r5,r16,r3
 4015d1c:	00800434 	movhi	r2,16
 4015d20:	10bfffc4 	addi	r2,r2,-1
 4015d24:	2101ffcc 	andi	r4,r4,2047
 4015d28:	0021883a 	mov	r16,zero
 4015d2c:	288a703a 	and	r5,r5,r2
 4015d30:	2008953a 	slli	r4,r4,20
 4015d34:	00c00434 	movhi	r3,16
 4015d38:	18ffffc4 	addi	r3,r3,-1
 4015d3c:	28c6703a 	and	r3,r5,r3
 4015d40:	8005883a 	mov	r2,r16
 4015d44:	1906b03a 	or	r3,r3,r4
 4015d48:	dfc00117 	ldw	ra,4(sp)
 4015d4c:	dc000017 	ldw	r16,0(sp)
 4015d50:	dec00204 	addi	sp,sp,8
 4015d54:	f800283a 	ret
 4015d58:	00c002c4 	movi	r3,11
 4015d5c:	188bc83a 	sub	r5,r3,r2
 4015d60:	814ad83a 	srl	r5,r16,r5
 4015d64:	00c00434 	movhi	r3,16
 4015d68:	18ffffc4 	addi	r3,r3,-1
 4015d6c:	81a0983a 	sll	r16,r16,r6
 4015d70:	2101ffcc 	andi	r4,r4,2047
 4015d74:	28ca703a 	and	r5,r5,r3
 4015d78:	003fed06 	br	4015d30 <__alt_data_end+0xfc015d30>
 4015d7c:	0009883a 	mov	r4,zero
 4015d80:	000b883a 	mov	r5,zero
 4015d84:	003fea06 	br	4015d30 <__alt_data_end+0xfc015d30>

04015d88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4015d88:	defffe04 	addi	sp,sp,-8
 4015d8c:	dfc00115 	stw	ra,4(sp)
 4015d90:	df000015 	stw	fp,0(sp)
 4015d94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4015d98:	d0a01017 	ldw	r2,-32704(gp)
 4015d9c:	10000326 	beq	r2,zero,4015dac <alt_get_errno+0x24>
 4015da0:	d0a01017 	ldw	r2,-32704(gp)
 4015da4:	103ee83a 	callr	r2
 4015da8:	00000106 	br	4015db0 <alt_get_errno+0x28>
 4015dac:	d0a6fc04 	addi	r2,gp,-25616
}
 4015db0:	e037883a 	mov	sp,fp
 4015db4:	dfc00117 	ldw	ra,4(sp)
 4015db8:	df000017 	ldw	fp,0(sp)
 4015dbc:	dec00204 	addi	sp,sp,8
 4015dc0:	f800283a 	ret

04015dc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4015dc4:	defffb04 	addi	sp,sp,-20
 4015dc8:	dfc00415 	stw	ra,16(sp)
 4015dcc:	df000315 	stw	fp,12(sp)
 4015dd0:	df000304 	addi	fp,sp,12
 4015dd4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4015dd8:	e0bfff17 	ldw	r2,-4(fp)
 4015ddc:	10000816 	blt	r2,zero,4015e00 <close+0x3c>
 4015de0:	01400304 	movi	r5,12
 4015de4:	e13fff17 	ldw	r4,-4(fp)
 4015de8:	4007eb40 	call	4007eb4 <__mulsi3>
 4015dec:	1007883a 	mov	r3,r2
 4015df0:	008100b4 	movhi	r2,1026
 4015df4:	10ae5104 	addi	r2,r2,-18108
 4015df8:	1885883a 	add	r2,r3,r2
 4015dfc:	00000106 	br	4015e04 <close+0x40>
 4015e00:	0005883a 	mov	r2,zero
 4015e04:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4015e08:	e0bffd17 	ldw	r2,-12(fp)
 4015e0c:	10001926 	beq	r2,zero,4015e74 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4015e10:	e0bffd17 	ldw	r2,-12(fp)
 4015e14:	10800017 	ldw	r2,0(r2)
 4015e18:	10800417 	ldw	r2,16(r2)
 4015e1c:	10000626 	beq	r2,zero,4015e38 <close+0x74>
 4015e20:	e0bffd17 	ldw	r2,-12(fp)
 4015e24:	10800017 	ldw	r2,0(r2)
 4015e28:	10800417 	ldw	r2,16(r2)
 4015e2c:	e13ffd17 	ldw	r4,-12(fp)
 4015e30:	103ee83a 	callr	r2
 4015e34:	00000106 	br	4015e3c <close+0x78>
 4015e38:	0005883a 	mov	r2,zero
 4015e3c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4015e40:	e13fff17 	ldw	r4,-4(fp)
 4015e44:	40167140 	call	4016714 <alt_release_fd>
    if (rval < 0)
 4015e48:	e0bffe17 	ldw	r2,-8(fp)
 4015e4c:	1000070e 	bge	r2,zero,4015e6c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4015e50:	4015d880 	call	4015d88 <alt_get_errno>
 4015e54:	1007883a 	mov	r3,r2
 4015e58:	e0bffe17 	ldw	r2,-8(fp)
 4015e5c:	0085c83a 	sub	r2,zero,r2
 4015e60:	18800015 	stw	r2,0(r3)
      return -1;
 4015e64:	00bfffc4 	movi	r2,-1
 4015e68:	00000706 	br	4015e88 <close+0xc4>
    }
    return 0;
 4015e6c:	0005883a 	mov	r2,zero
 4015e70:	00000506 	br	4015e88 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4015e74:	4015d880 	call	4015d88 <alt_get_errno>
 4015e78:	1007883a 	mov	r3,r2
 4015e7c:	00801444 	movi	r2,81
 4015e80:	18800015 	stw	r2,0(r3)
    return -1;
 4015e84:	00bfffc4 	movi	r2,-1
  }
}
 4015e88:	e037883a 	mov	sp,fp
 4015e8c:	dfc00117 	ldw	ra,4(sp)
 4015e90:	df000017 	ldw	fp,0(sp)
 4015e94:	dec00204 	addi	sp,sp,8
 4015e98:	f800283a 	ret

04015e9c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4015e9c:	defffc04 	addi	sp,sp,-16
 4015ea0:	df000315 	stw	fp,12(sp)
 4015ea4:	df000304 	addi	fp,sp,12
 4015ea8:	e13ffd15 	stw	r4,-12(fp)
 4015eac:	e17ffe15 	stw	r5,-8(fp)
 4015eb0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4015eb4:	e0bfff17 	ldw	r2,-4(fp)
}
 4015eb8:	e037883a 	mov	sp,fp
 4015ebc:	df000017 	ldw	fp,0(sp)
 4015ec0:	dec00104 	addi	sp,sp,4
 4015ec4:	f800283a 	ret

04015ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4015ec8:	defffe04 	addi	sp,sp,-8
 4015ecc:	dfc00115 	stw	ra,4(sp)
 4015ed0:	df000015 	stw	fp,0(sp)
 4015ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4015ed8:	d0a01017 	ldw	r2,-32704(gp)
 4015edc:	10000326 	beq	r2,zero,4015eec <alt_get_errno+0x24>
 4015ee0:	d0a01017 	ldw	r2,-32704(gp)
 4015ee4:	103ee83a 	callr	r2
 4015ee8:	00000106 	br	4015ef0 <alt_get_errno+0x28>
 4015eec:	d0a6fc04 	addi	r2,gp,-25616
}
 4015ef0:	e037883a 	mov	sp,fp
 4015ef4:	dfc00117 	ldw	ra,4(sp)
 4015ef8:	df000017 	ldw	fp,0(sp)
 4015efc:	dec00204 	addi	sp,sp,8
 4015f00:	f800283a 	ret

04015f04 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4015f04:	defffb04 	addi	sp,sp,-20
 4015f08:	dfc00415 	stw	ra,16(sp)
 4015f0c:	df000315 	stw	fp,12(sp)
 4015f10:	df000304 	addi	fp,sp,12
 4015f14:	e13ffe15 	stw	r4,-8(fp)
 4015f18:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4015f1c:	e0bffe17 	ldw	r2,-8(fp)
 4015f20:	10000816 	blt	r2,zero,4015f44 <fstat+0x40>
 4015f24:	01400304 	movi	r5,12
 4015f28:	e13ffe17 	ldw	r4,-8(fp)
 4015f2c:	4007eb40 	call	4007eb4 <__mulsi3>
 4015f30:	1007883a 	mov	r3,r2
 4015f34:	008100b4 	movhi	r2,1026
 4015f38:	10ae5104 	addi	r2,r2,-18108
 4015f3c:	1885883a 	add	r2,r3,r2
 4015f40:	00000106 	br	4015f48 <fstat+0x44>
 4015f44:	0005883a 	mov	r2,zero
 4015f48:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4015f4c:	e0bffd17 	ldw	r2,-12(fp)
 4015f50:	10001026 	beq	r2,zero,4015f94 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4015f54:	e0bffd17 	ldw	r2,-12(fp)
 4015f58:	10800017 	ldw	r2,0(r2)
 4015f5c:	10800817 	ldw	r2,32(r2)
 4015f60:	10000726 	beq	r2,zero,4015f80 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 4015f64:	e0bffd17 	ldw	r2,-12(fp)
 4015f68:	10800017 	ldw	r2,0(r2)
 4015f6c:	10800817 	ldw	r2,32(r2)
 4015f70:	e17fff17 	ldw	r5,-4(fp)
 4015f74:	e13ffd17 	ldw	r4,-12(fp)
 4015f78:	103ee83a 	callr	r2
 4015f7c:	00000a06 	br	4015fa8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4015f80:	e0bfff17 	ldw	r2,-4(fp)
 4015f84:	00c80004 	movi	r3,8192
 4015f88:	10c00115 	stw	r3,4(r2)
      return 0;
 4015f8c:	0005883a 	mov	r2,zero
 4015f90:	00000506 	br	4015fa8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4015f94:	4015ec80 	call	4015ec8 <alt_get_errno>
 4015f98:	1007883a 	mov	r3,r2
 4015f9c:	00801444 	movi	r2,81
 4015fa0:	18800015 	stw	r2,0(r3)
    return -1;
 4015fa4:	00bfffc4 	movi	r2,-1
  }
}
 4015fa8:	e037883a 	mov	sp,fp
 4015fac:	dfc00117 	ldw	ra,4(sp)
 4015fb0:	df000017 	ldw	fp,0(sp)
 4015fb4:	dec00204 	addi	sp,sp,8
 4015fb8:	f800283a 	ret

04015fbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4015fbc:	defffe04 	addi	sp,sp,-8
 4015fc0:	dfc00115 	stw	ra,4(sp)
 4015fc4:	df000015 	stw	fp,0(sp)
 4015fc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4015fcc:	d0a01017 	ldw	r2,-32704(gp)
 4015fd0:	10000326 	beq	r2,zero,4015fe0 <alt_get_errno+0x24>
 4015fd4:	d0a01017 	ldw	r2,-32704(gp)
 4015fd8:	103ee83a 	callr	r2
 4015fdc:	00000106 	br	4015fe4 <alt_get_errno+0x28>
 4015fe0:	d0a6fc04 	addi	r2,gp,-25616
}
 4015fe4:	e037883a 	mov	sp,fp
 4015fe8:	dfc00117 	ldw	ra,4(sp)
 4015fec:	df000017 	ldw	fp,0(sp)
 4015ff0:	dec00204 	addi	sp,sp,8
 4015ff4:	f800283a 	ret

04015ff8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4015ff8:	deffed04 	addi	sp,sp,-76
 4015ffc:	dfc01215 	stw	ra,72(sp)
 4016000:	df001115 	stw	fp,68(sp)
 4016004:	df001104 	addi	fp,sp,68
 4016008:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401600c:	e0bfff17 	ldw	r2,-4(fp)
 4016010:	10000816 	blt	r2,zero,4016034 <isatty+0x3c>
 4016014:	01400304 	movi	r5,12
 4016018:	e13fff17 	ldw	r4,-4(fp)
 401601c:	4007eb40 	call	4007eb4 <__mulsi3>
 4016020:	1007883a 	mov	r3,r2
 4016024:	008100b4 	movhi	r2,1026
 4016028:	10ae5104 	addi	r2,r2,-18108
 401602c:	1885883a 	add	r2,r3,r2
 4016030:	00000106 	br	4016038 <isatty+0x40>
 4016034:	0005883a 	mov	r2,zero
 4016038:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401603c:	e0bfef17 	ldw	r2,-68(fp)
 4016040:	10000e26 	beq	r2,zero,401607c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4016044:	e0bfef17 	ldw	r2,-68(fp)
 4016048:	10800017 	ldw	r2,0(r2)
 401604c:	10800817 	ldw	r2,32(r2)
 4016050:	1000021e 	bne	r2,zero,401605c <isatty+0x64>
    {
      return 1;
 4016054:	00800044 	movi	r2,1
 4016058:	00000d06 	br	4016090 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401605c:	e0bff004 	addi	r2,fp,-64
 4016060:	100b883a 	mov	r5,r2
 4016064:	e13fff17 	ldw	r4,-4(fp)
 4016068:	4015f040 	call	4015f04 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401606c:	e0bff117 	ldw	r2,-60(fp)
 4016070:	10880020 	cmpeqi	r2,r2,8192
 4016074:	10803fcc 	andi	r2,r2,255
 4016078:	00000506 	br	4016090 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401607c:	4015fbc0 	call	4015fbc <alt_get_errno>
 4016080:	1007883a 	mov	r3,r2
 4016084:	00801444 	movi	r2,81
 4016088:	18800015 	stw	r2,0(r3)
    return 0;
 401608c:	0005883a 	mov	r2,zero
  }
}
 4016090:	e037883a 	mov	sp,fp
 4016094:	dfc00117 	ldw	ra,4(sp)
 4016098:	df000017 	ldw	fp,0(sp)
 401609c:	dec00204 	addi	sp,sp,8
 40160a0:	f800283a 	ret

040160a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40160a4:	defffc04 	addi	sp,sp,-16
 40160a8:	df000315 	stw	fp,12(sp)
 40160ac:	df000304 	addi	fp,sp,12
 40160b0:	e13ffd15 	stw	r4,-12(fp)
 40160b4:	e17ffe15 	stw	r5,-8(fp)
 40160b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40160bc:	e0fffe17 	ldw	r3,-8(fp)
 40160c0:	e0bffd17 	ldw	r2,-12(fp)
 40160c4:	18800c26 	beq	r3,r2,40160f8 <alt_load_section+0x54>
  {
    while( to != end )
 40160c8:	00000806 	br	40160ec <alt_load_section+0x48>
    {
      *to++ = *from++;
 40160cc:	e0bffe17 	ldw	r2,-8(fp)
 40160d0:	10c00104 	addi	r3,r2,4
 40160d4:	e0fffe15 	stw	r3,-8(fp)
 40160d8:	e0fffd17 	ldw	r3,-12(fp)
 40160dc:	19000104 	addi	r4,r3,4
 40160e0:	e13ffd15 	stw	r4,-12(fp)
 40160e4:	18c00017 	ldw	r3,0(r3)
 40160e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40160ec:	e0fffe17 	ldw	r3,-8(fp)
 40160f0:	e0bfff17 	ldw	r2,-4(fp)
 40160f4:	18bff51e 	bne	r3,r2,40160cc <__alt_data_end+0xfc0160cc>
    {
      *to++ = *from++;
    }
  }
}
 40160f8:	0001883a 	nop
 40160fc:	e037883a 	mov	sp,fp
 4016100:	df000017 	ldw	fp,0(sp)
 4016104:	dec00104 	addi	sp,sp,4
 4016108:	f800283a 	ret

0401610c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 401610c:	defffe04 	addi	sp,sp,-8
 4016110:	dfc00115 	stw	ra,4(sp)
 4016114:	df000015 	stw	fp,0(sp)
 4016118:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 401611c:	018100b4 	movhi	r6,1026
 4016120:	31b2ee04 	addi	r6,r6,-13384
 4016124:	014100b4 	movhi	r5,1026
 4016128:	296c1204 	addi	r5,r5,-20408
 401612c:	010100b4 	movhi	r4,1026
 4016130:	2132ee04 	addi	r4,r4,-13384
 4016134:	40160a40 	call	40160a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4016138:	01810034 	movhi	r6,1024
 401613c:	31808c04 	addi	r6,r6,560
 4016140:	01410034 	movhi	r5,1024
 4016144:	29400804 	addi	r5,r5,32
 4016148:	01010034 	movhi	r4,1024
 401614c:	21000804 	addi	r4,r4,32
 4016150:	40160a40 	call	40160a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4016154:	018100b4 	movhi	r6,1026
 4016158:	31ac1204 	addi	r6,r6,-20408
 401615c:	014100b4 	movhi	r5,1026
 4016160:	296a2a04 	addi	r5,r5,-22360
 4016164:	010100b4 	movhi	r4,1026
 4016168:	212a2a04 	addi	r4,r4,-22360
 401616c:	40160a40 	call	40160a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4016170:	401982c0 	call	401982c <alt_dcache_flush_all>
  alt_icache_flush_all();
 4016174:	4019a7c0 	call	4019a7c <alt_icache_flush_all>
}
 4016178:	0001883a 	nop
 401617c:	e037883a 	mov	sp,fp
 4016180:	dfc00117 	ldw	ra,4(sp)
 4016184:	df000017 	ldw	fp,0(sp)
 4016188:	dec00204 	addi	sp,sp,8
 401618c:	f800283a 	ret

04016190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4016190:	defffe04 	addi	sp,sp,-8
 4016194:	dfc00115 	stw	ra,4(sp)
 4016198:	df000015 	stw	fp,0(sp)
 401619c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40161a0:	d0a01017 	ldw	r2,-32704(gp)
 40161a4:	10000326 	beq	r2,zero,40161b4 <alt_get_errno+0x24>
 40161a8:	d0a01017 	ldw	r2,-32704(gp)
 40161ac:	103ee83a 	callr	r2
 40161b0:	00000106 	br	40161b8 <alt_get_errno+0x28>
 40161b4:	d0a6fc04 	addi	r2,gp,-25616
}
 40161b8:	e037883a 	mov	sp,fp
 40161bc:	dfc00117 	ldw	ra,4(sp)
 40161c0:	df000017 	ldw	fp,0(sp)
 40161c4:	dec00204 	addi	sp,sp,8
 40161c8:	f800283a 	ret

040161cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40161cc:	defff904 	addi	sp,sp,-28
 40161d0:	dfc00615 	stw	ra,24(sp)
 40161d4:	df000515 	stw	fp,20(sp)
 40161d8:	df000504 	addi	fp,sp,20
 40161dc:	e13ffd15 	stw	r4,-12(fp)
 40161e0:	e17ffe15 	stw	r5,-8(fp)
 40161e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40161e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40161ec:	e0bffd17 	ldw	r2,-12(fp)
 40161f0:	10000816 	blt	r2,zero,4016214 <lseek+0x48>
 40161f4:	01400304 	movi	r5,12
 40161f8:	e13ffd17 	ldw	r4,-12(fp)
 40161fc:	4007eb40 	call	4007eb4 <__mulsi3>
 4016200:	1007883a 	mov	r3,r2
 4016204:	008100b4 	movhi	r2,1026
 4016208:	10ae5104 	addi	r2,r2,-18108
 401620c:	1885883a 	add	r2,r3,r2
 4016210:	00000106 	br	4016218 <lseek+0x4c>
 4016214:	0005883a 	mov	r2,zero
 4016218:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401621c:	e0bffc17 	ldw	r2,-16(fp)
 4016220:	10001026 	beq	r2,zero,4016264 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4016224:	e0bffc17 	ldw	r2,-16(fp)
 4016228:	10800017 	ldw	r2,0(r2)
 401622c:	10800717 	ldw	r2,28(r2)
 4016230:	10000926 	beq	r2,zero,4016258 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4016234:	e0bffc17 	ldw	r2,-16(fp)
 4016238:	10800017 	ldw	r2,0(r2)
 401623c:	10800717 	ldw	r2,28(r2)
 4016240:	e1bfff17 	ldw	r6,-4(fp)
 4016244:	e17ffe17 	ldw	r5,-8(fp)
 4016248:	e13ffc17 	ldw	r4,-16(fp)
 401624c:	103ee83a 	callr	r2
 4016250:	e0bffb15 	stw	r2,-20(fp)
 4016254:	00000506 	br	401626c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4016258:	00bfde84 	movi	r2,-134
 401625c:	e0bffb15 	stw	r2,-20(fp)
 4016260:	00000206 	br	401626c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 4016264:	00bfebc4 	movi	r2,-81
 4016268:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401626c:	e0bffb17 	ldw	r2,-20(fp)
 4016270:	1000070e 	bge	r2,zero,4016290 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 4016274:	40161900 	call	4016190 <alt_get_errno>
 4016278:	1007883a 	mov	r3,r2
 401627c:	e0bffb17 	ldw	r2,-20(fp)
 4016280:	0085c83a 	sub	r2,zero,r2
 4016284:	18800015 	stw	r2,0(r3)
    rc = -1;
 4016288:	00bfffc4 	movi	r2,-1
 401628c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4016290:	e0bffb17 	ldw	r2,-20(fp)
}
 4016294:	e037883a 	mov	sp,fp
 4016298:	dfc00117 	ldw	ra,4(sp)
 401629c:	df000017 	ldw	fp,0(sp)
 40162a0:	dec00204 	addi	sp,sp,8
 40162a4:	f800283a 	ret

040162a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40162a8:	defffd04 	addi	sp,sp,-12
 40162ac:	dfc00215 	stw	ra,8(sp)
 40162b0:	df000115 	stw	fp,4(sp)
 40162b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40162b8:	0009883a 	mov	r4,zero
 40162bc:	4016b8c0 	call	4016b8c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40162c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40162c4:	4016bc40 	call	4016bc4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40162c8:	018100b4 	movhi	r6,1026
 40162cc:	31abfd04 	addi	r6,r6,-20492
 40162d0:	014100b4 	movhi	r5,1026
 40162d4:	296bfd04 	addi	r5,r5,-20492
 40162d8:	010100b4 	movhi	r4,1026
 40162dc:	212bfd04 	addi	r4,r4,-20492
 40162e0:	4019e200 	call	4019e20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40162e4:	401992c0 	call	401992c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40162e8:	010100b4 	movhi	r4,1026
 40162ec:	21266304 	addi	r4,r4,-26228
 40162f0:	401a3ac0 	call	401a3ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40162f4:	d0a70017 	ldw	r2,-25600(gp)
 40162f8:	d0e70117 	ldw	r3,-25596(gp)
 40162fc:	d1270217 	ldw	r4,-25592(gp)
 4016300:	200d883a 	mov	r6,r4
 4016304:	180b883a 	mov	r5,r3
 4016308:	1009883a 	mov	r4,r2
 401630c:	4002d5c0 	call	4002d5c <main>
 4016310:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4016314:	01000044 	movi	r4,1
 4016318:	4015dc40 	call	4015dc4 <close>
  exit (result);
 401631c:	e13fff17 	ldw	r4,-4(fp)
 4016320:	401a3c00 	call	401a3c0 <exit>

04016324 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4016324:	defffe04 	addi	sp,sp,-8
 4016328:	df000115 	stw	fp,4(sp)
 401632c:	df000104 	addi	fp,sp,4
 4016330:	e13fff15 	stw	r4,-4(fp)
}
 4016334:	0001883a 	nop
 4016338:	e037883a 	mov	sp,fp
 401633c:	df000017 	ldw	fp,0(sp)
 4016340:	dec00104 	addi	sp,sp,4
 4016344:	f800283a 	ret

04016348 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4016348:	defffe04 	addi	sp,sp,-8
 401634c:	df000115 	stw	fp,4(sp)
 4016350:	df000104 	addi	fp,sp,4
 4016354:	e13fff15 	stw	r4,-4(fp)
}
 4016358:	0001883a 	nop
 401635c:	e037883a 	mov	sp,fp
 4016360:	df000017 	ldw	fp,0(sp)
 4016364:	dec00104 	addi	sp,sp,4
 4016368:	f800283a 	ret

0401636c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 401636c:	defff204 	addi	sp,sp,-56
 4016370:	dfc00a15 	stw	ra,40(sp)
 4016374:	df000915 	stw	fp,36(sp)
 4016378:	df000904 	addi	fp,sp,36
 401637c:	e13fff15 	stw	r4,-4(fp)
 4016380:	e1400215 	stw	r5,8(fp)
 4016384:	e1800315 	stw	r6,12(fp)
 4016388:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 401638c:	e0800204 	addi	r2,fp,8
 4016390:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 4016394:	e0bfff17 	ldw	r2,-4(fp)
 4016398:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 401639c:	00006f06 	br	401655c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 40163a0:	e0bff807 	ldb	r2,-32(fp)
 40163a4:	10800960 	cmpeqi	r2,r2,37
 40163a8:	1000041e 	bne	r2,zero,40163bc <alt_printf+0x50>
        {
            alt_putchar(c);
 40163ac:	e0bff807 	ldb	r2,-32(fp)
 40163b0:	1009883a 	mov	r4,r2
 40163b4:	40165980 	call	4016598 <alt_putchar>
 40163b8:	00006806 	br	401655c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 40163bc:	e0bff717 	ldw	r2,-36(fp)
 40163c0:	10c00044 	addi	r3,r2,1
 40163c4:	e0fff715 	stw	r3,-36(fp)
 40163c8:	10800003 	ldbu	r2,0(r2)
 40163cc:	e0bff805 	stb	r2,-32(fp)
 40163d0:	e0bff807 	ldb	r2,-32(fp)
 40163d4:	10006926 	beq	r2,zero,401657c <alt_printf+0x210>
            {
                if (c == '%')
 40163d8:	e0bff807 	ldb	r2,-32(fp)
 40163dc:	10800958 	cmpnei	r2,r2,37
 40163e0:	1000041e 	bne	r2,zero,40163f4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 40163e4:	e0bff807 	ldb	r2,-32(fp)
 40163e8:	1009883a 	mov	r4,r2
 40163ec:	40165980 	call	4016598 <alt_putchar>
 40163f0:	00005a06 	br	401655c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 40163f4:	e0bff807 	ldb	r2,-32(fp)
 40163f8:	108018d8 	cmpnei	r2,r2,99
 40163fc:	1000081e 	bne	r2,zero,4016420 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 4016400:	e0bffe17 	ldw	r2,-8(fp)
 4016404:	10c00104 	addi	r3,r2,4
 4016408:	e0fffe15 	stw	r3,-8(fp)
 401640c:	10800017 	ldw	r2,0(r2)
 4016410:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 4016414:	e13ffd17 	ldw	r4,-12(fp)
 4016418:	40165980 	call	4016598 <alt_putchar>
 401641c:	00004f06 	br	401655c <alt_printf+0x1f0>
                }
                else if (c == 'x')
 4016420:	e0bff807 	ldb	r2,-32(fp)
 4016424:	10801e18 	cmpnei	r2,r2,120
 4016428:	1000341e 	bne	r2,zero,40164fc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 401642c:	e0bffe17 	ldw	r2,-8(fp)
 4016430:	10c00104 	addi	r3,r2,4
 4016434:	e0fffe15 	stw	r3,-8(fp)
 4016438:	10800017 	ldw	r2,0(r2)
 401643c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4016440:	e0bffb17 	ldw	r2,-20(fp)
 4016444:	1000031e 	bne	r2,zero,4016454 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 4016448:	01000c04 	movi	r4,48
 401644c:	40165980 	call	4016598 <alt_putchar>
                        continue;
 4016450:	00004206 	br	401655c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 4016454:	00800704 	movi	r2,28
 4016458:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 401645c:	00000306 	br	401646c <alt_printf+0x100>
                        digit_shift -= 4;
 4016460:	e0bff917 	ldw	r2,-28(fp)
 4016464:	10bfff04 	addi	r2,r2,-4
 4016468:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 401646c:	00c003c4 	movi	r3,15
 4016470:	e0bff917 	ldw	r2,-28(fp)
 4016474:	1884983a 	sll	r2,r3,r2
 4016478:	1007883a 	mov	r3,r2
 401647c:	e0bffb17 	ldw	r2,-20(fp)
 4016480:	1884703a 	and	r2,r3,r2
 4016484:	103ff626 	beq	r2,zero,4016460 <__alt_data_end+0xfc016460>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4016488:	00001906 	br	40164f0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 401648c:	00c003c4 	movi	r3,15
 4016490:	e0bff917 	ldw	r2,-28(fp)
 4016494:	1884983a 	sll	r2,r3,r2
 4016498:	1007883a 	mov	r3,r2
 401649c:	e0bffb17 	ldw	r2,-20(fp)
 40164a0:	1886703a 	and	r3,r3,r2
 40164a4:	e0bff917 	ldw	r2,-28(fp)
 40164a8:	1884d83a 	srl	r2,r3,r2
 40164ac:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 40164b0:	e0bffc17 	ldw	r2,-16(fp)
 40164b4:	108002a8 	cmpgeui	r2,r2,10
 40164b8:	1000041e 	bne	r2,zero,40164cc <alt_printf+0x160>
                            c = '0' + digit;
 40164bc:	e0bffc17 	ldw	r2,-16(fp)
 40164c0:	10800c04 	addi	r2,r2,48
 40164c4:	e0bff805 	stb	r2,-32(fp)
 40164c8:	00000306 	br	40164d8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 40164cc:	e0bffc17 	ldw	r2,-16(fp)
 40164d0:	108015c4 	addi	r2,r2,87
 40164d4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 40164d8:	e0bff807 	ldb	r2,-32(fp)
 40164dc:	1009883a 	mov	r4,r2
 40164e0:	40165980 	call	4016598 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 40164e4:	e0bff917 	ldw	r2,-28(fp)
 40164e8:	10bfff04 	addi	r2,r2,-4
 40164ec:	e0bff915 	stw	r2,-28(fp)
 40164f0:	e0bff917 	ldw	r2,-28(fp)
 40164f4:	103fe50e 	bge	r2,zero,401648c <__alt_data_end+0xfc01648c>
 40164f8:	00001806 	br	401655c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 40164fc:	e0bff807 	ldb	r2,-32(fp)
 4016500:	10801cd8 	cmpnei	r2,r2,115
 4016504:	1000151e 	bne	r2,zero,401655c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 4016508:	e0bffe17 	ldw	r2,-8(fp)
 401650c:	10c00104 	addi	r3,r2,4
 4016510:	e0fffe15 	stw	r3,-8(fp)
 4016514:	10800017 	ldw	r2,0(r2)
 4016518:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 401651c:	00000906 	br	4016544 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 4016520:	e0bffa17 	ldw	r2,-24(fp)
 4016524:	10c00044 	addi	r3,r2,1
 4016528:	e0fffa15 	stw	r3,-24(fp)
 401652c:	10800003 	ldbu	r2,0(r2)
 4016530:	10803fcc 	andi	r2,r2,255
 4016534:	1080201c 	xori	r2,r2,128
 4016538:	10bfe004 	addi	r2,r2,-128
 401653c:	1009883a 	mov	r4,r2
 4016540:	40165980 	call	4016598 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 4016544:	e0bffa17 	ldw	r2,-24(fp)
 4016548:	10800003 	ldbu	r2,0(r2)
 401654c:	10803fcc 	andi	r2,r2,255
 4016550:	1080201c 	xori	r2,r2,128
 4016554:	10bfe004 	addi	r2,r2,-128
 4016558:	103ff11e 	bne	r2,zero,4016520 <__alt_data_end+0xfc016520>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 401655c:	e0bff717 	ldw	r2,-36(fp)
 4016560:	10c00044 	addi	r3,r2,1
 4016564:	e0fff715 	stw	r3,-36(fp)
 4016568:	10800003 	ldbu	r2,0(r2)
 401656c:	e0bff805 	stb	r2,-32(fp)
 4016570:	e0bff807 	ldb	r2,-32(fp)
 4016574:	103f8a1e 	bne	r2,zero,40163a0 <__alt_data_end+0xfc0163a0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4016578:	00000106 	br	4016580 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 401657c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 4016580:	0001883a 	nop
 4016584:	e037883a 	mov	sp,fp
 4016588:	dfc00117 	ldw	ra,4(sp)
 401658c:	df000017 	ldw	fp,0(sp)
 4016590:	dec00504 	addi	sp,sp,20
 4016594:	f800283a 	ret

04016598 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4016598:	defffd04 	addi	sp,sp,-12
 401659c:	dfc00215 	stw	ra,8(sp)
 40165a0:	df000115 	stw	fp,4(sp)
 40165a4:	df000104 	addi	fp,sp,4
 40165a8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 40165ac:	d0a00617 	ldw	r2,-32744(gp)
 40165b0:	10800217 	ldw	r2,8(r2)
 40165b4:	100b883a 	mov	r5,r2
 40165b8:	e13fff17 	ldw	r4,-4(fp)
 40165bc:	401a5140 	call	401a514 <putc>
#endif
#endif
}
 40165c0:	e037883a 	mov	sp,fp
 40165c4:	dfc00117 	ldw	ra,4(sp)
 40165c8:	df000017 	ldw	fp,0(sp)
 40165cc:	dec00204 	addi	sp,sp,8
 40165d0:	f800283a 	ret

040165d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40165d4:	defffe04 	addi	sp,sp,-8
 40165d8:	dfc00115 	stw	ra,4(sp)
 40165dc:	df000015 	stw	fp,0(sp)
 40165e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40165e4:	d0a01017 	ldw	r2,-32704(gp)
 40165e8:	10000326 	beq	r2,zero,40165f8 <alt_get_errno+0x24>
 40165ec:	d0a01017 	ldw	r2,-32704(gp)
 40165f0:	103ee83a 	callr	r2
 40165f4:	00000106 	br	40165fc <alt_get_errno+0x28>
 40165f8:	d0a6fc04 	addi	r2,gp,-25616
}
 40165fc:	e037883a 	mov	sp,fp
 4016600:	dfc00117 	ldw	ra,4(sp)
 4016604:	df000017 	ldw	fp,0(sp)
 4016608:	dec00204 	addi	sp,sp,8
 401660c:	f800283a 	ret

04016610 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4016610:	defff904 	addi	sp,sp,-28
 4016614:	dfc00615 	stw	ra,24(sp)
 4016618:	df000515 	stw	fp,20(sp)
 401661c:	df000504 	addi	fp,sp,20
 4016620:	e13ffd15 	stw	r4,-12(fp)
 4016624:	e17ffe15 	stw	r5,-8(fp)
 4016628:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401662c:	e0bffd17 	ldw	r2,-12(fp)
 4016630:	10000816 	blt	r2,zero,4016654 <read+0x44>
 4016634:	01400304 	movi	r5,12
 4016638:	e13ffd17 	ldw	r4,-12(fp)
 401663c:	4007eb40 	call	4007eb4 <__mulsi3>
 4016640:	1007883a 	mov	r3,r2
 4016644:	008100b4 	movhi	r2,1026
 4016648:	10ae5104 	addi	r2,r2,-18108
 401664c:	1885883a 	add	r2,r3,r2
 4016650:	00000106 	br	4016658 <read+0x48>
 4016654:	0005883a 	mov	r2,zero
 4016658:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401665c:	e0bffb17 	ldw	r2,-20(fp)
 4016660:	10002226 	beq	r2,zero,40166ec <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4016664:	e0bffb17 	ldw	r2,-20(fp)
 4016668:	10800217 	ldw	r2,8(r2)
 401666c:	108000cc 	andi	r2,r2,3
 4016670:	10800060 	cmpeqi	r2,r2,1
 4016674:	1000181e 	bne	r2,zero,40166d8 <read+0xc8>
        (fd->dev->read))
 4016678:	e0bffb17 	ldw	r2,-20(fp)
 401667c:	10800017 	ldw	r2,0(r2)
 4016680:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4016684:	10001426 	beq	r2,zero,40166d8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4016688:	e0bffb17 	ldw	r2,-20(fp)
 401668c:	10800017 	ldw	r2,0(r2)
 4016690:	10800517 	ldw	r2,20(r2)
 4016694:	e0ffff17 	ldw	r3,-4(fp)
 4016698:	180d883a 	mov	r6,r3
 401669c:	e17ffe17 	ldw	r5,-8(fp)
 40166a0:	e13ffb17 	ldw	r4,-20(fp)
 40166a4:	103ee83a 	callr	r2
 40166a8:	e0bffc15 	stw	r2,-16(fp)
 40166ac:	e0bffc17 	ldw	r2,-16(fp)
 40166b0:	1000070e 	bge	r2,zero,40166d0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 40166b4:	40165d40 	call	40165d4 <alt_get_errno>
 40166b8:	1007883a 	mov	r3,r2
 40166bc:	e0bffc17 	ldw	r2,-16(fp)
 40166c0:	0085c83a 	sub	r2,zero,r2
 40166c4:	18800015 	stw	r2,0(r3)
          return -1;
 40166c8:	00bfffc4 	movi	r2,-1
 40166cc:	00000c06 	br	4016700 <read+0xf0>
        }
        return rval;
 40166d0:	e0bffc17 	ldw	r2,-16(fp)
 40166d4:	00000a06 	br	4016700 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40166d8:	40165d40 	call	40165d4 <alt_get_errno>
 40166dc:	1007883a 	mov	r3,r2
 40166e0:	00800344 	movi	r2,13
 40166e4:	18800015 	stw	r2,0(r3)
 40166e8:	00000406 	br	40166fc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40166ec:	40165d40 	call	40165d4 <alt_get_errno>
 40166f0:	1007883a 	mov	r3,r2
 40166f4:	00801444 	movi	r2,81
 40166f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40166fc:	00bfffc4 	movi	r2,-1
}
 4016700:	e037883a 	mov	sp,fp
 4016704:	dfc00117 	ldw	ra,4(sp)
 4016708:	df000017 	ldw	fp,0(sp)
 401670c:	dec00204 	addi	sp,sp,8
 4016710:	f800283a 	ret

04016714 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4016714:	defffc04 	addi	sp,sp,-16
 4016718:	dfc00315 	stw	ra,12(sp)
 401671c:	df000215 	stw	fp,8(sp)
 4016720:	dc000115 	stw	r16,4(sp)
 4016724:	df000204 	addi	fp,sp,8
 4016728:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 401672c:	e0bffe17 	ldw	r2,-8(fp)
 4016730:	108000d0 	cmplti	r2,r2,3
 4016734:	1000111e 	bne	r2,zero,401677c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4016738:	040100b4 	movhi	r16,1026
 401673c:	842e5104 	addi	r16,r16,-18108
 4016740:	e0bffe17 	ldw	r2,-8(fp)
 4016744:	01400304 	movi	r5,12
 4016748:	1009883a 	mov	r4,r2
 401674c:	4007eb40 	call	4007eb4 <__mulsi3>
 4016750:	8085883a 	add	r2,r16,r2
 4016754:	10800204 	addi	r2,r2,8
 4016758:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401675c:	040100b4 	movhi	r16,1026
 4016760:	842e5104 	addi	r16,r16,-18108
 4016764:	e0bffe17 	ldw	r2,-8(fp)
 4016768:	01400304 	movi	r5,12
 401676c:	1009883a 	mov	r4,r2
 4016770:	4007eb40 	call	4007eb4 <__mulsi3>
 4016774:	8085883a 	add	r2,r16,r2
 4016778:	10000015 	stw	zero,0(r2)
  }
}
 401677c:	0001883a 	nop
 4016780:	e6ffff04 	addi	sp,fp,-4
 4016784:	dfc00217 	ldw	ra,8(sp)
 4016788:	df000117 	ldw	fp,4(sp)
 401678c:	dc000017 	ldw	r16,0(sp)
 4016790:	dec00304 	addi	sp,sp,12
 4016794:	f800283a 	ret

04016798 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4016798:	defff904 	addi	sp,sp,-28
 401679c:	df000615 	stw	fp,24(sp)
 40167a0:	df000604 	addi	fp,sp,24
 40167a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40167a8:	0005303a 	rdctl	r2,status
 40167ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40167b0:	e0fffe17 	ldw	r3,-8(fp)
 40167b4:	00bfff84 	movi	r2,-2
 40167b8:	1884703a 	and	r2,r3,r2
 40167bc:	1001703a 	wrctl	status,r2
  
  return context;
 40167c0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40167c4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40167c8:	d0a01117 	ldw	r2,-32700(gp)
 40167cc:	10c000c4 	addi	r3,r2,3
 40167d0:	00bfff04 	movi	r2,-4
 40167d4:	1884703a 	and	r2,r3,r2
 40167d8:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40167dc:	d0e01117 	ldw	r3,-32700(gp)
 40167e0:	e0bfff17 	ldw	r2,-4(fp)
 40167e4:	1887883a 	add	r3,r3,r2
 40167e8:	00820034 	movhi	r2,2048
 40167ec:	10800004 	addi	r2,r2,0
 40167f0:	10c0062e 	bgeu	r2,r3,401680c <sbrk+0x74>
 40167f4:	e0bffb17 	ldw	r2,-20(fp)
 40167f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40167fc:	e0bffa17 	ldw	r2,-24(fp)
 4016800:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4016804:	00bfffc4 	movi	r2,-1
 4016808:	00000b06 	br	4016838 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401680c:	d0a01117 	ldw	r2,-32700(gp)
 4016810:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4016814:	d0e01117 	ldw	r3,-32700(gp)
 4016818:	e0bfff17 	ldw	r2,-4(fp)
 401681c:	1885883a 	add	r2,r3,r2
 4016820:	d0a01115 	stw	r2,-32700(gp)
 4016824:	e0bffb17 	ldw	r2,-20(fp)
 4016828:	e0bffc15 	stw	r2,-16(fp)
 401682c:	e0bffc17 	ldw	r2,-16(fp)
 4016830:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4016834:	e0bffd17 	ldw	r2,-12(fp)
} 
 4016838:	e037883a 	mov	sp,fp
 401683c:	df000017 	ldw	fp,0(sp)
 4016840:	dec00104 	addi	sp,sp,4
 4016844:	f800283a 	ret

04016848 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4016848:	defffa04 	addi	sp,sp,-24
 401684c:	df000515 	stw	fp,20(sp)
 4016850:	df000504 	addi	fp,sp,20
 4016854:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016858:	0005303a 	rdctl	r2,status
 401685c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016860:	e0fffc17 	ldw	r3,-16(fp)
 4016864:	00bfff84 	movi	r2,-2
 4016868:	1884703a 	and	r2,r3,r2
 401686c:	1001703a 	wrctl	status,r2
  
  return context;
 4016870:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4016874:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4016878:	e0bfff17 	ldw	r2,-4(fp)
 401687c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4016880:	e0bffd17 	ldw	r2,-12(fp)
 4016884:	10800017 	ldw	r2,0(r2)
 4016888:	e0fffd17 	ldw	r3,-12(fp)
 401688c:	18c00117 	ldw	r3,4(r3)
 4016890:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4016894:	e0bffd17 	ldw	r2,-12(fp)
 4016898:	10800117 	ldw	r2,4(r2)
 401689c:	e0fffd17 	ldw	r3,-12(fp)
 40168a0:	18c00017 	ldw	r3,0(r3)
 40168a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40168a8:	e0bffd17 	ldw	r2,-12(fp)
 40168ac:	e0fffd17 	ldw	r3,-12(fp)
 40168b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40168b4:	e0bffd17 	ldw	r2,-12(fp)
 40168b8:	e0fffd17 	ldw	r3,-12(fp)
 40168bc:	10c00015 	stw	r3,0(r2)
 40168c0:	e0bffb17 	ldw	r2,-20(fp)
 40168c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40168c8:	e0bffe17 	ldw	r2,-8(fp)
 40168cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40168d0:	0001883a 	nop
 40168d4:	e037883a 	mov	sp,fp
 40168d8:	df000017 	ldw	fp,0(sp)
 40168dc:	dec00104 	addi	sp,sp,4
 40168e0:	f800283a 	ret

040168e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40168e4:	defffb04 	addi	sp,sp,-20
 40168e8:	dfc00415 	stw	ra,16(sp)
 40168ec:	df000315 	stw	fp,12(sp)
 40168f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40168f4:	d0a01217 	ldw	r2,-32696(gp)
 40168f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40168fc:	d0a70417 	ldw	r2,-25584(gp)
 4016900:	10800044 	addi	r2,r2,1
 4016904:	d0a70415 	stw	r2,-25584(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4016908:	00002e06 	br	40169c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401690c:	e0bffd17 	ldw	r2,-12(fp)
 4016910:	10800017 	ldw	r2,0(r2)
 4016914:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4016918:	e0bffd17 	ldw	r2,-12(fp)
 401691c:	10800403 	ldbu	r2,16(r2)
 4016920:	10803fcc 	andi	r2,r2,255
 4016924:	10000426 	beq	r2,zero,4016938 <alt_tick+0x54>
 4016928:	d0a70417 	ldw	r2,-25584(gp)
 401692c:	1000021e 	bne	r2,zero,4016938 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4016930:	e0bffd17 	ldw	r2,-12(fp)
 4016934:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4016938:	e0bffd17 	ldw	r2,-12(fp)
 401693c:	10800217 	ldw	r2,8(r2)
 4016940:	d0e70417 	ldw	r3,-25584(gp)
 4016944:	18801d36 	bltu	r3,r2,40169bc <alt_tick+0xd8>
 4016948:	e0bffd17 	ldw	r2,-12(fp)
 401694c:	10800403 	ldbu	r2,16(r2)
 4016950:	10803fcc 	andi	r2,r2,255
 4016954:	1000191e 	bne	r2,zero,40169bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4016958:	e0bffd17 	ldw	r2,-12(fp)
 401695c:	10800317 	ldw	r2,12(r2)
 4016960:	e0fffd17 	ldw	r3,-12(fp)
 4016964:	18c00517 	ldw	r3,20(r3)
 4016968:	1809883a 	mov	r4,r3
 401696c:	103ee83a 	callr	r2
 4016970:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4016974:	e0bfff17 	ldw	r2,-4(fp)
 4016978:	1000031e 	bne	r2,zero,4016988 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401697c:	e13ffd17 	ldw	r4,-12(fp)
 4016980:	40168480 	call	4016848 <alt_alarm_stop>
 4016984:	00000d06 	br	40169bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4016988:	e0bffd17 	ldw	r2,-12(fp)
 401698c:	10c00217 	ldw	r3,8(r2)
 4016990:	e0bfff17 	ldw	r2,-4(fp)
 4016994:	1887883a 	add	r3,r3,r2
 4016998:	e0bffd17 	ldw	r2,-12(fp)
 401699c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40169a0:	e0bffd17 	ldw	r2,-12(fp)
 40169a4:	10c00217 	ldw	r3,8(r2)
 40169a8:	d0a70417 	ldw	r2,-25584(gp)
 40169ac:	1880032e 	bgeu	r3,r2,40169bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40169b0:	e0bffd17 	ldw	r2,-12(fp)
 40169b4:	00c00044 	movi	r3,1
 40169b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40169bc:	e0bffe17 	ldw	r2,-8(fp)
 40169c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40169c4:	e0fffd17 	ldw	r3,-12(fp)
 40169c8:	d0a01204 	addi	r2,gp,-32696
 40169cc:	18bfcf1e 	bne	r3,r2,401690c <__alt_data_end+0xfc01690c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40169d0:	0001883a 	nop
}
 40169d4:	0001883a 	nop
 40169d8:	e037883a 	mov	sp,fp
 40169dc:	dfc00117 	ldw	ra,4(sp)
 40169e0:	df000017 	ldw	fp,0(sp)
 40169e4:	dec00204 	addi	sp,sp,8
 40169e8:	f800283a 	ret

040169ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40169ec:	defffd04 	addi	sp,sp,-12
 40169f0:	dfc00215 	stw	ra,8(sp)
 40169f4:	df000115 	stw	fp,4(sp)
 40169f8:	df000104 	addi	fp,sp,4
 40169fc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4016a00:	e13fff17 	ldw	r4,-4(fp)
 4016a04:	40196d40 	call	40196d4 <alt_busy_sleep>
}
 4016a08:	e037883a 	mov	sp,fp
 4016a0c:	dfc00117 	ldw	ra,4(sp)
 4016a10:	df000017 	ldw	fp,0(sp)
 4016a14:	dec00204 	addi	sp,sp,8
 4016a18:	f800283a 	ret

04016a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4016a1c:	defffe04 	addi	sp,sp,-8
 4016a20:	dfc00115 	stw	ra,4(sp)
 4016a24:	df000015 	stw	fp,0(sp)
 4016a28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4016a2c:	d0a01017 	ldw	r2,-32704(gp)
 4016a30:	10000326 	beq	r2,zero,4016a40 <alt_get_errno+0x24>
 4016a34:	d0a01017 	ldw	r2,-32704(gp)
 4016a38:	103ee83a 	callr	r2
 4016a3c:	00000106 	br	4016a44 <alt_get_errno+0x28>
 4016a40:	d0a6fc04 	addi	r2,gp,-25616
}
 4016a44:	e037883a 	mov	sp,fp
 4016a48:	dfc00117 	ldw	ra,4(sp)
 4016a4c:	df000017 	ldw	fp,0(sp)
 4016a50:	dec00204 	addi	sp,sp,8
 4016a54:	f800283a 	ret

04016a58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4016a58:	defff904 	addi	sp,sp,-28
 4016a5c:	dfc00615 	stw	ra,24(sp)
 4016a60:	df000515 	stw	fp,20(sp)
 4016a64:	df000504 	addi	fp,sp,20
 4016a68:	e13ffd15 	stw	r4,-12(fp)
 4016a6c:	e17ffe15 	stw	r5,-8(fp)
 4016a70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4016a74:	e0bffd17 	ldw	r2,-12(fp)
 4016a78:	10000816 	blt	r2,zero,4016a9c <write+0x44>
 4016a7c:	01400304 	movi	r5,12
 4016a80:	e13ffd17 	ldw	r4,-12(fp)
 4016a84:	4007eb40 	call	4007eb4 <__mulsi3>
 4016a88:	1007883a 	mov	r3,r2
 4016a8c:	008100b4 	movhi	r2,1026
 4016a90:	10ae5104 	addi	r2,r2,-18108
 4016a94:	1885883a 	add	r2,r3,r2
 4016a98:	00000106 	br	4016aa0 <write+0x48>
 4016a9c:	0005883a 	mov	r2,zero
 4016aa0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4016aa4:	e0bffb17 	ldw	r2,-20(fp)
 4016aa8:	10002126 	beq	r2,zero,4016b30 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4016aac:	e0bffb17 	ldw	r2,-20(fp)
 4016ab0:	10800217 	ldw	r2,8(r2)
 4016ab4:	108000cc 	andi	r2,r2,3
 4016ab8:	10001826 	beq	r2,zero,4016b1c <write+0xc4>
 4016abc:	e0bffb17 	ldw	r2,-20(fp)
 4016ac0:	10800017 	ldw	r2,0(r2)
 4016ac4:	10800617 	ldw	r2,24(r2)
 4016ac8:	10001426 	beq	r2,zero,4016b1c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4016acc:	e0bffb17 	ldw	r2,-20(fp)
 4016ad0:	10800017 	ldw	r2,0(r2)
 4016ad4:	10800617 	ldw	r2,24(r2)
 4016ad8:	e0ffff17 	ldw	r3,-4(fp)
 4016adc:	180d883a 	mov	r6,r3
 4016ae0:	e17ffe17 	ldw	r5,-8(fp)
 4016ae4:	e13ffb17 	ldw	r4,-20(fp)
 4016ae8:	103ee83a 	callr	r2
 4016aec:	e0bffc15 	stw	r2,-16(fp)
 4016af0:	e0bffc17 	ldw	r2,-16(fp)
 4016af4:	1000070e 	bge	r2,zero,4016b14 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4016af8:	4016a1c0 	call	4016a1c <alt_get_errno>
 4016afc:	1007883a 	mov	r3,r2
 4016b00:	e0bffc17 	ldw	r2,-16(fp)
 4016b04:	0085c83a 	sub	r2,zero,r2
 4016b08:	18800015 	stw	r2,0(r3)
        return -1;
 4016b0c:	00bfffc4 	movi	r2,-1
 4016b10:	00000c06 	br	4016b44 <write+0xec>
      }
      return rval;
 4016b14:	e0bffc17 	ldw	r2,-16(fp)
 4016b18:	00000a06 	br	4016b44 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4016b1c:	4016a1c0 	call	4016a1c <alt_get_errno>
 4016b20:	1007883a 	mov	r3,r2
 4016b24:	00800344 	movi	r2,13
 4016b28:	18800015 	stw	r2,0(r3)
 4016b2c:	00000406 	br	4016b40 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4016b30:	4016a1c0 	call	4016a1c <alt_get_errno>
 4016b34:	1007883a 	mov	r3,r2
 4016b38:	00801444 	movi	r2,81
 4016b3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4016b40:	00bfffc4 	movi	r2,-1
}
 4016b44:	e037883a 	mov	sp,fp
 4016b48:	dfc00117 	ldw	ra,4(sp)
 4016b4c:	df000017 	ldw	fp,0(sp)
 4016b50:	dec00204 	addi	sp,sp,8
 4016b54:	f800283a 	ret

04016b58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4016b58:	defffd04 	addi	sp,sp,-12
 4016b5c:	dfc00215 	stw	ra,8(sp)
 4016b60:	df000115 	stw	fp,4(sp)
 4016b64:	df000104 	addi	fp,sp,4
 4016b68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4016b6c:	d1600d04 	addi	r5,gp,-32716
 4016b70:	e13fff17 	ldw	r4,-4(fp)
 4016b74:	40198880 	call	4019888 <alt_dev_llist_insert>
}
 4016b78:	e037883a 	mov	sp,fp
 4016b7c:	dfc00117 	ldw	ra,4(sp)
 4016b80:	df000017 	ldw	fp,0(sp)
 4016b84:	dec00204 	addi	sp,sp,8
 4016b88:	f800283a 	ret

04016b8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4016b8c:	defffd04 	addi	sp,sp,-12
 4016b90:	dfc00215 	stw	ra,8(sp)
 4016b94:	df000115 	stw	fp,4(sp)
 4016b98:	df000104 	addi	fp,sp,4
 4016b9c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4016ba0:	401a1200 	call	401a120 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4016ba4:	00800044 	movi	r2,1
 4016ba8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4016bac:	0001883a 	nop
 4016bb0:	e037883a 	mov	sp,fp
 4016bb4:	dfc00117 	ldw	ra,4(sp)
 4016bb8:	df000017 	ldw	fp,0(sp)
 4016bbc:	dec00204 	addi	sp,sp,8
 4016bc0:	f800283a 	ret

04016bc4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4016bc4:	defffe04 	addi	sp,sp,-8
 4016bc8:	dfc00115 	stw	ra,4(sp)
 4016bcc:	df000015 	stw	fp,0(sp)
 4016bd0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4016bd4:	01c0fa04 	movi	r7,1000
 4016bd8:	01800084 	movi	r6,2
 4016bdc:	000b883a 	mov	r5,zero
 4016be0:	01020034 	movhi	r4,2048
 4016be4:	21142004 	addi	r4,r4,20608
 4016be8:	401952c0 	call	401952c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 4016bec:	010100b4 	movhi	r4,1026
 4016bf0:	212eb104 	addi	r4,r4,-17724
 4016bf4:	4016e880 	call	4016e88 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4016bf8:	01800044 	movi	r6,1
 4016bfc:	000b883a 	mov	r5,zero
 4016c00:	010100b4 	movhi	r4,1026
 4016c04:	212ec904 	addi	r4,r4,-17628
 4016c08:	40189b40 	call	40189b4 <altera_avalon_jtag_uart_init>
 4016c0c:	010100b4 	movhi	r4,1026
 4016c10:	212ebf04 	addi	r4,r4,-17668
 4016c14:	4016b580 	call	4016b58 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 4016c18:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4016c1c:	0001883a 	nop
}
 4016c20:	0001883a 	nop
 4016c24:	e037883a 	mov	sp,fp
 4016c28:	dfc00117 	ldw	ra,4(sp)
 4016c2c:	df000017 	ldw	fp,0(sp)
 4016c30:	dec00204 	addi	sp,sp,8
 4016c34:	f800283a 	ret

04016c38 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 4016c38:	defff904 	addi	sp,sp,-28
 4016c3c:	dfc00615 	stw	ra,24(sp)
 4016c40:	df000515 	stw	fp,20(sp)
 4016c44:	df000504 	addi	fp,sp,20
 4016c48:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 4016c4c:	008000b4 	movhi	r2,2
 4016c50:	10a1a804 	addi	r2,r2,-31072
 4016c54:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 4016c58:	e0bfff17 	ldw	r2,-4(fp)
 4016c5c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 4016c60:	e0bffc17 	ldw	r2,-16(fp)
 4016c64:	10800717 	ldw	r2,28(r2)
 4016c68:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 4016c6c:	e0bffd17 	ldw	r2,-12(fp)
 4016c70:	10800217 	ldw	r2,8(r2)
 4016c74:	10800098 	cmpnei	r2,r2,2
 4016c78:	1000251e 	bne	r2,zero,4016d10 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 4016c7c:	e0bffd17 	ldw	r2,-12(fp)
 4016c80:	10c00017 	ldw	r3,0(r2)
 4016c84:	e0bffd17 	ldw	r2,-12(fp)
 4016c88:	10800117 	ldw	r2,4(r2)
 4016c8c:	e13ffe04 	addi	r4,fp,-8
 4016c90:	200f883a 	mov	r7,r4
 4016c94:	100d883a 	mov	r6,r2
 4016c98:	180b883a 	mov	r5,r3
 4016c9c:	e13ffc17 	ldw	r4,-16(fp)
 4016ca0:	40173e80 	call	40173e8 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 4016ca4:	e0bffd17 	ldw	r2,-12(fp)
 4016ca8:	10c00117 	ldw	r3,4(r2)
 4016cac:	e0bffe17 	ldw	r2,-8(fp)
 4016cb0:	1887c83a 	sub	r3,r3,r2
 4016cb4:	e0bffd17 	ldw	r2,-12(fp)
 4016cb8:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 4016cbc:	e0bffd17 	ldw	r2,-12(fp)
 4016cc0:	10c00017 	ldw	r3,0(r2)
 4016cc4:	e0bffe17 	ldw	r2,-8(fp)
 4016cc8:	1887883a 	add	r3,r3,r2
 4016ccc:	e0bffd17 	ldw	r2,-12(fp)
 4016cd0:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 4016cd4:	e0bffd17 	ldw	r2,-12(fp)
 4016cd8:	10800117 	ldw	r2,4(r2)
 4016cdc:	10000c26 	beq	r2,zero,4016d10 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4016ce0:	01400704 	movi	r5,28
 4016ce4:	e13ffc17 	ldw	r4,-16(fp)
 4016ce8:	40185a00 	call	40185a0 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 4016cec:	01400084 	movi	r5,2
 4016cf0:	e13ffc17 	ldw	r4,-16(fp)
 4016cf4:	40186440 	call	4018644 <alt_avalon_i2c_int_enable>
 4016cf8:	00000e06 	br	4016d34 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 4016cfc:	e0bffb17 	ldw	r2,-20(fp)
 4016d00:	10bfffc4 	addi	r2,r2,-1
 4016d04:	e0bffb15 	stw	r2,-20(fp)
 4016d08:	e0bffb17 	ldw	r2,-20(fp)
 4016d0c:	10000426 	beq	r2,zero,4016d20 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 4016d10:	e13ffc17 	ldw	r4,-16(fp)
 4016d14:	40173a40 	call	40173a4 <alt_avalon_i2c_is_busy>
 4016d18:	103ff81e 	bne	r2,zero,4016cfc <__alt_data_end+0xfc016cfc>
 4016d1c:	00000106 	br	4016d24 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 4016d20:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 4016d24:	e13ffc17 	ldw	r4,-16(fp)
 4016d28:	401704c0 	call	401704c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 4016d2c:	e0bffd17 	ldw	r2,-12(fp)
 4016d30:	10000215 	stw	zero,8(r2)
}
 4016d34:	e037883a 	mov	sp,fp
 4016d38:	dfc00117 	ldw	ra,4(sp)
 4016d3c:	df000017 	ldw	fp,0(sp)
 4016d40:	dec00204 	addi	sp,sp,8
 4016d44:	f800283a 	ret

04016d48 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 4016d48:	defffc04 	addi	sp,sp,-16
 4016d4c:	dfc00315 	stw	ra,12(sp)
 4016d50:	df000215 	stw	fp,8(sp)
 4016d54:	df000204 	addi	fp,sp,8
 4016d58:	e13ffe15 	stw	r4,-8(fp)
 4016d5c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 4016d60:	e0bfff17 	ldw	r2,-4(fp)
 4016d64:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 4016d68:	e1ffff17 	ldw	r7,-4(fp)
 4016d6c:	000d883a 	mov	r6,zero
 4016d70:	01410074 	movhi	r5,1025
 4016d74:	295b0e04 	addi	r5,r5,27704
 4016d78:	e13ffe17 	ldw	r4,-8(fp)
 4016d7c:	4016e340 	call	4016e34 <alt_avalon_i2c_register_callback>
}
 4016d80:	0001883a 	nop
 4016d84:	e037883a 	mov	sp,fp
 4016d88:	dfc00117 	ldw	ra,4(sp)
 4016d8c:	df000017 	ldw	fp,0(sp)
 4016d90:	dec00204 	addi	sp,sp,8
 4016d94:	f800283a 	ret

04016d98 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 4016d98:	defff904 	addi	sp,sp,-28
 4016d9c:	dfc00615 	stw	ra,24(sp)
 4016da0:	df000515 	stw	fp,20(sp)
 4016da4:	df000504 	addi	fp,sp,20
 4016da8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 4016dac:	e0bfff17 	ldw	r2,-4(fp)
 4016db0:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 4016db4:	014007c4 	movi	r5,31
 4016db8:	e13ffb17 	ldw	r4,-20(fp)
 4016dbc:	40185dc0 	call	40185dc <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4016dc0:	01400704 	movi	r5,28
 4016dc4:	e13ffb17 	ldw	r4,-20(fp)
 4016dc8:	40185a00 	call	40185a0 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 4016dcc:	e0bffb17 	ldw	r2,-20(fp)
 4016dd0:	10800617 	ldw	r2,24(r2)
 4016dd4:	10001126 	beq	r2,zero,4016e1c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016dd8:	0005303a 	rdctl	r2,status
 4016ddc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016de0:	e0fffd17 	ldw	r3,-12(fp)
 4016de4:	00bfff84 	movi	r2,-2
 4016de8:	1884703a 	and	r2,r3,r2
 4016dec:	1001703a 	wrctl	status,r2
  
  return context;
 4016df0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 4016df4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 4016df8:	e0bffb17 	ldw	r2,-20(fp)
 4016dfc:	10800617 	ldw	r2,24(r2)
 4016e00:	e13ffb17 	ldw	r4,-20(fp)
 4016e04:	103ee83a 	callr	r2
 4016e08:	e0bffc17 	ldw	r2,-16(fp)
 4016e0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016e10:	e0bffe17 	ldw	r2,-8(fp)
 4016e14:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 4016e18:	0001883a 	nop
 4016e1c:	0001883a 	nop
}
 4016e20:	e037883a 	mov	sp,fp
 4016e24:	dfc00117 	ldw	ra,4(sp)
 4016e28:	df000017 	ldw	fp,0(sp)
 4016e2c:	dec00204 	addi	sp,sp,8
 4016e30:	f800283a 	ret

04016e34 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 4016e34:	defffb04 	addi	sp,sp,-20
 4016e38:	df000415 	stw	fp,16(sp)
 4016e3c:	df000404 	addi	fp,sp,16
 4016e40:	e13ffc15 	stw	r4,-16(fp)
 4016e44:	e17ffd15 	stw	r5,-12(fp)
 4016e48:	e1bffe15 	stw	r6,-8(fp)
 4016e4c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 4016e50:	e0bffc17 	ldw	r2,-16(fp)
 4016e54:	e0fffd17 	ldw	r3,-12(fp)
 4016e58:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 4016e5c:	e0bffc17 	ldw	r2,-16(fp)
 4016e60:	e0ffff17 	ldw	r3,-4(fp)
 4016e64:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 4016e68:	e0bffc17 	ldw	r2,-16(fp)
 4016e6c:	e0fffe17 	ldw	r3,-8(fp)
 4016e70:	10c00815 	stw	r3,32(r2)

    return ;
 4016e74:	0001883a 	nop
}
 4016e78:	e037883a 	mov	sp,fp
 4016e7c:	df000017 	ldw	fp,0(sp)
 4016e80:	dec00104 	addi	sp,sp,4
 4016e84:	f800283a 	ret

04016e88 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 4016e88:	defff704 	addi	sp,sp,-36
 4016e8c:	dfc00815 	stw	ra,32(sp)
 4016e90:	df000715 	stw	fp,28(sp)
 4016e94:	df000704 	addi	fp,sp,28
 4016e98:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 4016e9c:	e13fff17 	ldw	r4,-4(fp)
 4016ea0:	401704c0 	call	401704c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 4016ea4:	014007c4 	movi	r5,31
 4016ea8:	e13fff17 	ldw	r4,-4(fp)
 4016eac:	40185dc0 	call	40185dc <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4016eb0:	01400704 	movi	r5,28
 4016eb4:	e13fff17 	ldw	r4,-4(fp)
 4016eb8:	40185a00 	call	40185a0 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 4016ebc:	014000c4 	movi	r5,3
 4016ec0:	e13fff17 	ldw	r4,-4(fp)
 4016ec4:	40187e80 	call	40187e8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 4016ec8:	014000c4 	movi	r5,3
 4016ecc:	e13fff17 	ldw	r4,-4(fp)
 4016ed0:	40187380 	call	4018738 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 4016ed4:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 4016ed8:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 4016edc:	e0bffb04 	addi	r2,fp,-20
 4016ee0:	018000b4 	movhi	r6,2
 4016ee4:	31a1a804 	addi	r6,r6,-31072
 4016ee8:	100b883a 	mov	r5,r2
 4016eec:	e13fff17 	ldw	r4,-4(fp)
 4016ef0:	40172a80 	call	40172a8 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 4016ef4:	e0bffb04 	addi	r2,fp,-20
 4016ef8:	100b883a 	mov	r5,r2
 4016efc:	e13fff17 	ldw	r4,-4(fp)
 4016f00:	40171480 	call	4017148 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 4016f04:	d1601404 	addi	r5,gp,-32688
 4016f08:	e13fff17 	ldw	r4,-4(fp)
 4016f0c:	40198880 	call	4019888 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4016f10:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 4016f14:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 4016f18:	e0bffa17 	ldw	r2,-24(fp)
 4016f1c:	10000c1e 	bne	r2,zero,4016f50 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 4016f20:	e0bfff17 	ldw	r2,-4(fp)
 4016f24:	10c00417 	ldw	r3,16(r2)
 4016f28:	e0bfff17 	ldw	r2,-4(fp)
 4016f2c:	10800517 	ldw	r2,20(r2)
 4016f30:	d8000015 	stw	zero,0(sp)
 4016f34:	e1ffff17 	ldw	r7,-4(fp)
 4016f38:	01810074 	movhi	r6,1025
 4016f3c:	319b6604 	addi	r6,r6,28056
 4016f40:	100b883a 	mov	r5,r2
 4016f44:	1809883a 	mov	r4,r3
 4016f48:	4019a9c0 	call	4019a9c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 4016f4c:	00000406 	br	4016f60 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 4016f50:	010100b4 	movhi	r4,1026
 4016f54:	212c0a04 	addi	r4,r4,-20440
 4016f58:	401636c0 	call	401636c <alt_printf>
    }

    return;
 4016f5c:	0001883a 	nop

}
 4016f60:	e037883a 	mov	sp,fp
 4016f64:	dfc00117 	ldw	ra,4(sp)
 4016f68:	df000017 	ldw	fp,0(sp)
 4016f6c:	dec00204 	addi	sp,sp,8
 4016f70:	f800283a 	ret

04016f74 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 4016f74:	defffc04 	addi	sp,sp,-16
 4016f78:	dfc00315 	stw	ra,12(sp)
 4016f7c:	df000215 	stw	fp,8(sp)
 4016f80:	df000204 	addi	fp,sp,8
 4016f84:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 4016f88:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 4016f8c:	d1601404 	addi	r5,gp,-32688
 4016f90:	e13fff17 	ldw	r4,-4(fp)
 4016f94:	40199ec0 	call	40199ec <alt_find_dev>
 4016f98:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 4016f9c:	e0bffe17 	ldw	r2,-8(fp)
}
 4016fa0:	e037883a 	mov	sp,fp
 4016fa4:	dfc00117 	ldw	ra,4(sp)
 4016fa8:	df000017 	ldw	fp,0(sp)
 4016fac:	dec00204 	addi	sp,sp,8
 4016fb0:	f800283a 	ret

04016fb4 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 4016fb4:	defffc04 	addi	sp,sp,-16
 4016fb8:	df000315 	stw	fp,12(sp)
 4016fbc:	df000304 	addi	fp,sp,12
 4016fc0:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 4016fc4:	e0bfff17 	ldw	r2,-4(fp)
 4016fc8:	10800717 	ldw	r2,28(r2)
 4016fcc:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 4016fd0:	e0bfff17 	ldw	r2,-4(fp)
 4016fd4:	10800317 	ldw	r2,12(r2)
 4016fd8:	10800204 	addi	r2,r2,8
 4016fdc:	10800037 	ldwio	r2,0(r2)
 4016fe0:	1080004c 	andi	r2,r2,1
 4016fe4:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 4016fe8:	e0bffe17 	ldw	r2,-8(fp)
 4016fec:	10000226 	beq	r2,zero,4016ff8 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 4016ff0:	00bffe44 	movi	r2,-7
 4016ff4:	00001106 	br	401703c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 4016ff8:	e0bfff17 	ldw	r2,-4(fp)
 4016ffc:	10c00617 	ldw	r3,24(r2)
 4017000:	00810074 	movhi	r2,1025
 4017004:	109b0e04 	addi	r2,r2,27704
 4017008:	1880021e 	bne	r3,r2,4017014 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 401700c:	e0bffd17 	ldw	r2,-12(fp)
 4017010:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 4017014:	e0bfff17 	ldw	r2,-4(fp)
 4017018:	10800317 	ldw	r2,12(r2)
 401701c:	10800204 	addi	r2,r2,8
 4017020:	e0ffff17 	ldw	r3,-4(fp)
 4017024:	18c00317 	ldw	r3,12(r3)
 4017028:	18c00204 	addi	r3,r3,8
 401702c:	18c00037 	ldwio	r3,0(r3)
 4017030:	18c00054 	ori	r3,r3,1
 4017034:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 4017038:	0005883a 	mov	r2,zero
}
 401703c:	e037883a 	mov	sp,fp
 4017040:	df000017 	ldw	fp,0(sp)
 4017044:	dec00104 	addi	sp,sp,4
 4017048:	f800283a 	ret

0401704c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401704c:	defffe04 	addi	sp,sp,-8
 4017050:	df000115 	stw	fp,4(sp)
 4017054:	df000104 	addi	fp,sp,4
 4017058:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 401705c:	e0bfff17 	ldw	r2,-4(fp)
 4017060:	10800317 	ldw	r2,12(r2)
 4017064:	10800204 	addi	r2,r2,8
 4017068:	e0ffff17 	ldw	r3,-4(fp)
 401706c:	18c00317 	ldw	r3,12(r3)
 4017070:	18c00204 	addi	r3,r3,8
 4017074:	19000037 	ldwio	r4,0(r3)
 4017078:	00ffff84 	movi	r3,-2
 401707c:	20c6703a 	and	r3,r4,r3
 4017080:	10c00035 	stwio	r3,0(r2)

}
 4017084:	0001883a 	nop
 4017088:	e037883a 	mov	sp,fp
 401708c:	df000017 	ldw	fp,0(sp)
 4017090:	dec00104 	addi	sp,sp,4
 4017094:	f800283a 	ret

04017098 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 4017098:	defffd04 	addi	sp,sp,-12
 401709c:	df000215 	stw	fp,8(sp)
 40170a0:	df000204 	addi	fp,sp,8
 40170a4:	e13ffe15 	stw	r4,-8(fp)
 40170a8:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 40170ac:	e0bffe17 	ldw	r2,-8(fp)
 40170b0:	10c00d17 	ldw	r3,52(r2)
 40170b4:	e0bfff17 	ldw	r2,-4(fp)
 40170b8:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 40170bc:	e0bffe17 	ldw	r2,-8(fp)
 40170c0:	10800317 	ldw	r2,12(r2)
 40170c4:	10800204 	addi	r2,r2,8
 40170c8:	10800037 	ldwio	r2,0(r2)
 40170cc:	1080008c 	andi	r2,r2,2
 40170d0:	1005d07a 	srai	r2,r2,1
 40170d4:	1007883a 	mov	r3,r2
 40170d8:	e0bfff17 	ldw	r2,-4(fp)
 40170dc:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 40170e0:	e0bffe17 	ldw	r2,-8(fp)
 40170e4:	10800317 	ldw	r2,12(r2)
 40170e8:	10800904 	addi	r2,r2,36
 40170ec:	10800037 	ldwio	r2,0(r2)
 40170f0:	1007883a 	mov	r3,r2
 40170f4:	e0bfff17 	ldw	r2,-4(fp)
 40170f8:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 40170fc:	e0bffe17 	ldw	r2,-8(fp)
 4017100:	10800317 	ldw	r2,12(r2)
 4017104:	10800804 	addi	r2,r2,32
 4017108:	10800037 	ldwio	r2,0(r2)
 401710c:	1007883a 	mov	r3,r2
 4017110:	e0bfff17 	ldw	r2,-4(fp)
 4017114:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 4017118:	e0bffe17 	ldw	r2,-8(fp)
 401711c:	10800317 	ldw	r2,12(r2)
 4017120:	10800a04 	addi	r2,r2,40
 4017124:	10800037 	ldwio	r2,0(r2)
 4017128:	1007883a 	mov	r3,r2
 401712c:	e0bfff17 	ldw	r2,-4(fp)
 4017130:	10c0030d 	sth	r3,12(r2)
}
 4017134:	0001883a 	nop
 4017138:	e037883a 	mov	sp,fp
 401713c:	df000017 	ldw	fp,0(sp)
 4017140:	dec00104 	addi	sp,sp,4
 4017144:	f800283a 	ret

04017148 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 4017148:	defffd04 	addi	sp,sp,-12
 401714c:	df000215 	stw	fp,8(sp)
 4017150:	df000204 	addi	fp,sp,8
 4017154:	e13ffe15 	stw	r4,-8(fp)
 4017158:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 401715c:	e0bfff17 	ldw	r2,-4(fp)
 4017160:	10c00017 	ldw	r3,0(r2)
 4017164:	e0bffe17 	ldw	r2,-8(fp)
 4017168:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 401716c:	e0bffe17 	ldw	r2,-8(fp)
 4017170:	10800317 	ldw	r2,12(r2)
 4017174:	10c00204 	addi	r3,r2,8
 4017178:	e0bffe17 	ldw	r2,-8(fp)
 401717c:	10800317 	ldw	r2,12(r2)
 4017180:	10800204 	addi	r2,r2,8
 4017184:	10800037 	ldwio	r2,0(r2)
 4017188:	1009883a 	mov	r4,r2
 401718c:	00bfff44 	movi	r2,-3
 4017190:	2088703a 	and	r4,r4,r2
 4017194:	e0bfff17 	ldw	r2,-4(fp)
 4017198:	10800117 	ldw	r2,4(r2)
 401719c:	1085883a 	add	r2,r2,r2
 40171a0:	1080008c 	andi	r2,r2,2
 40171a4:	2084b03a 	or	r2,r4,r2
 40171a8:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 40171ac:	e0bffe17 	ldw	r2,-8(fp)
 40171b0:	10800317 	ldw	r2,12(r2)
 40171b4:	10800904 	addi	r2,r2,36
 40171b8:	e0ffff17 	ldw	r3,-4(fp)
 40171bc:	18c0020b 	ldhu	r3,8(r3)
 40171c0:	18ffffcc 	andi	r3,r3,65535
 40171c4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 40171c8:	e0bffe17 	ldw	r2,-8(fp)
 40171cc:	10800317 	ldw	r2,12(r2)
 40171d0:	10800804 	addi	r2,r2,32
 40171d4:	e0ffff17 	ldw	r3,-4(fp)
 40171d8:	18c0028b 	ldhu	r3,10(r3)
 40171dc:	18ffffcc 	andi	r3,r3,65535
 40171e0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 40171e4:	e0bffe17 	ldw	r2,-8(fp)
 40171e8:	10800317 	ldw	r2,12(r2)
 40171ec:	10800a04 	addi	r2,r2,40
 40171f0:	e0ffff17 	ldw	r3,-4(fp)
 40171f4:	18c0030b 	ldhu	r3,12(r3)
 40171f8:	18ffffcc 	andi	r3,r3,65535
 40171fc:	10c00035 	stwio	r3,0(r2)
}
 4017200:	0001883a 	nop
 4017204:	e037883a 	mov	sp,fp
 4017208:	df000017 	ldw	fp,0(sp)
 401720c:	dec00104 	addi	sp,sp,4
 4017210:	f800283a 	ret

04017214 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 4017214:	defffb04 	addi	sp,sp,-20
 4017218:	dfc00415 	stw	ra,16(sp)
 401721c:	df000315 	stw	fp,12(sp)
 4017220:	df000304 	addi	fp,sp,12
 4017224:	e13ffd15 	stw	r4,-12(fp)
 4017228:	e17ffe15 	stw	r5,-8(fp)
 401722c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 4017230:	e0bffe17 	ldw	r2,-8(fp)
 4017234:	1080028b 	ldhu	r2,10(r2)
 4017238:	10bfffcc 	andi	r2,r2,65535
 401723c:	10000426 	beq	r2,zero,4017250 <alt_avalon_i2c_master_config_speed_get+0x3c>
 4017240:	e0bffe17 	ldw	r2,-8(fp)
 4017244:	1080020b 	ldhu	r2,8(r2)
 4017248:	10bfffcc 	andi	r2,r2,65535
 401724c:	1000021e 	bne	r2,zero,4017258 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 4017250:	00bfff44 	movi	r2,-3
 4017254:	00000f06 	br	4017294 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 4017258:	e0bffd17 	ldw	r2,-12(fp)
 401725c:	11000c17 	ldw	r4,48(r2)
 4017260:	e0bffe17 	ldw	r2,-8(fp)
 4017264:	1080028b 	ldhu	r2,10(r2)
 4017268:	10ffffcc 	andi	r3,r2,65535
 401726c:	e0bffe17 	ldw	r2,-8(fp)
 4017270:	1080020b 	ldhu	r2,8(r2)
 4017274:	10bfffcc 	andi	r2,r2,65535
 4017278:	1885883a 	add	r2,r3,r2
 401727c:	100b883a 	mov	r5,r2
 4017280:	4007df80 	call	4007df8 <__udivsi3>
 4017284:	1007883a 	mov	r3,r2
 4017288:	e0bfff17 	ldw	r2,-4(fp)
 401728c:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 4017290:	0005883a 	mov	r2,zero
}
 4017294:	e037883a 	mov	sp,fp
 4017298:	dfc00117 	ldw	ra,4(sp)
 401729c:	df000017 	ldw	fp,0(sp)
 40172a0:	dec00204 	addi	sp,sp,8
 40172a4:	f800283a 	ret

040172a8 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 40172a8:	defff904 	addi	sp,sp,-28
 40172ac:	dfc00615 	stw	ra,24(sp)
 40172b0:	df000515 	stw	fp,20(sp)
 40172b4:	df000504 	addi	fp,sp,20
 40172b8:	e13ffd15 	stw	r4,-12(fp)
 40172bc:	e17ffe15 	stw	r5,-8(fp)
 40172c0:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 40172c4:	e0ffff17 	ldw	r3,-4(fp)
 40172c8:	008001b4 	movhi	r2,6
 40172cc:	1086a004 	addi	r2,r2,6784
 40172d0:	10c00436 	bltu	r2,r3,40172e4 <alt_avalon_i2c_master_config_speed_set+0x3c>
 40172d4:	e0bfff17 	ldw	r2,-4(fp)
 40172d8:	10000226 	beq	r2,zero,40172e4 <alt_avalon_i2c_master_config_speed_set+0x3c>
 40172dc:	e0bfff17 	ldw	r2,-4(fp)
 40172e0:	1000021e 	bne	r2,zero,40172ec <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 40172e4:	00bfff04 	movi	r2,-4
 40172e8:	00002906 	br	4017390 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 40172ec:	e0bffd17 	ldw	r2,-12(fp)
 40172f0:	10c00c17 	ldw	r3,48(r2)
 40172f4:	e0bfff17 	ldw	r2,-4(fp)
 40172f8:	1085883a 	add	r2,r2,r2
 40172fc:	100b883a 	mov	r5,r2
 4017300:	1809883a 	mov	r4,r3
 4017304:	4007df80 	call	4007df8 <__udivsi3>
 4017308:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401730c:	e0bffb17 	ldw	r2,-20(fp)
 4017310:	10800f04 	addi	r2,r2,60
 4017314:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4017318:	e0bffb17 	ldw	r2,-20(fp)
 401731c:	10bff104 	addi	r2,r2,-60
 4017320:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 4017324:	e0ffff17 	ldw	r3,-4(fp)
 4017328:	008000b4 	movhi	r2,2
 401732c:	10a1a804 	addi	r2,r2,-31072
 4017330:	10c0042e 	bgeu	r2,r3,4017344 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 4017334:	e0bffe17 	ldw	r2,-8(fp)
 4017338:	00c00044 	movi	r3,1
 401733c:	10c00115 	stw	r3,4(r2)
 4017340:	00000206 	br	401734c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 4017344:	e0bffe17 	ldw	r2,-8(fp)
 4017348:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 401734c:	e0bffb17 	ldw	r2,-20(fp)
 4017350:	1007883a 	mov	r3,r2
 4017354:	e0bffe17 	ldw	r2,-8(fp)
 4017358:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 401735c:	e0bffc17 	ldw	r2,-16(fp)
 4017360:	1007883a 	mov	r3,r2
 4017364:	e0bffe17 	ldw	r2,-8(fp)
 4017368:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 401736c:	e0bffb17 	ldw	r2,-20(fp)
 4017370:	1007883a 	mov	r3,r2
 4017374:	e0bffb17 	ldw	r2,-20(fp)
 4017378:	1004d07a 	srli	r2,r2,1
 401737c:	1885c83a 	sub	r2,r3,r2
 4017380:	1007883a 	mov	r3,r2
 4017384:	e0bffe17 	ldw	r2,-8(fp)
 4017388:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 401738c:	0005883a 	mov	r2,zero

}
 4017390:	e037883a 	mov	sp,fp
 4017394:	dfc00117 	ldw	ra,4(sp)
 4017398:	df000017 	ldw	fp,0(sp)
 401739c:	dec00204 	addi	sp,sp,8
 40173a0:	f800283a 	ret

040173a4 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 40173a4:	defffe04 	addi	sp,sp,-8
 40173a8:	df000115 	stw	fp,4(sp)
 40173ac:	df000104 	addi	fp,sp,4
 40173b0:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 40173b4:	e0bfff17 	ldw	r2,-4(fp)
 40173b8:	10800317 	ldw	r2,12(r2)
 40173bc:	10800504 	addi	r2,r2,20
 40173c0:	10800037 	ldwio	r2,0(r2)
 40173c4:	1080004c 	andi	r2,r2,1
 40173c8:	10000226 	beq	r2,zero,40173d4 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 40173cc:	00800044 	movi	r2,1
 40173d0:	00000106 	br	40173d8 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 40173d4:	0005883a 	mov	r2,zero
}
 40173d8:	e037883a 	mov	sp,fp
 40173dc:	df000017 	ldw	fp,0(sp)
 40173e0:	dec00104 	addi	sp,sp,4
 40173e4:	f800283a 	ret

040173e8 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 40173e8:	defffb04 	addi	sp,sp,-20
 40173ec:	df000415 	stw	fp,16(sp)
 40173f0:	df000404 	addi	fp,sp,16
 40173f4:	e13ffc15 	stw	r4,-16(fp)
 40173f8:	e17ffd15 	stw	r5,-12(fp)
 40173fc:	e1bffe15 	stw	r6,-8(fp)
 4017400:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 4017404:	e0bfff17 	ldw	r2,-4(fp)
 4017408:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401740c:	00001406 	br	4017460 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 4017410:	e0bfff17 	ldw	r2,-4(fp)
 4017414:	10800017 	ldw	r2,0(r2)
 4017418:	e0fffd17 	ldw	r3,-12(fp)
 401741c:	1885883a 	add	r2,r3,r2
 4017420:	e0fffc17 	ldw	r3,-16(fp)
 4017424:	18c00317 	ldw	r3,12(r3)
 4017428:	18c00104 	addi	r3,r3,4
 401742c:	18c00037 	ldwio	r3,0(r3)
 4017430:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 4017434:	e0bfff17 	ldw	r2,-4(fp)
 4017438:	10800017 	ldw	r2,0(r2)
 401743c:	10c00044 	addi	r3,r2,1
 4017440:	e0bfff17 	ldw	r2,-4(fp)
 4017444:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4017448:	e0bfff17 	ldw	r2,-4(fp)
 401744c:	10c00017 	ldw	r3,0(r2)
 4017450:	e0bffe17 	ldw	r2,-8(fp)
 4017454:	1880021e 	bne	r3,r2,4017460 <alt_avalon_i2c_rx_read_available+0x78>
 4017458:	e0bffe17 	ldw	r2,-8(fp)
 401745c:	1000061e 	bne	r2,zero,4017478 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 4017460:	e0bffc17 	ldw	r2,-16(fp)
 4017464:	10800317 	ldw	r2,12(r2)
 4017468:	10800704 	addi	r2,r2,28
 401746c:	10800037 	ldwio	r2,0(r2)
 4017470:	103fe71e 	bne	r2,zero,4017410 <__alt_data_end+0xfc017410>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 4017474:	00000106 	br	401747c <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4017478:	0001883a 	nop
    }
}
 401747c:	0001883a 	nop
 4017480:	e037883a 	mov	sp,fp
 4017484:	df000017 	ldw	fp,0(sp)
 4017488:	dec00104 	addi	sp,sp,4
 401748c:	f800283a 	ret

04017490 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 4017490:	defffa04 	addi	sp,sp,-24
 4017494:	dfc00515 	stw	ra,20(sp)
 4017498:	df000415 	stw	fp,16(sp)
 401749c:	df000404 	addi	fp,sp,16
 40174a0:	e13ffe15 	stw	r4,-8(fp)
 40174a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 40174a8:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 40174ac:	008000b4 	movhi	r2,2
 40174b0:	10a1a804 	addi	r2,r2,-31072
 40174b4:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 40174b8:	00000d06 	br	40174f0 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 40174bc:	e0bffd17 	ldw	r2,-12(fp)
 40174c0:	108002a8 	cmpgeui	r2,r2,10
 40174c4:	1000021e 	bne	r2,zero,40174d0 <alt_avalon_i2c_rx_read+0x40>
 40174c8:	0109c404 	movi	r4,10000
 40174cc:	40196d40 	call	40196d4 <alt_busy_sleep>
      if (--timeout == 0)
 40174d0:	e0bffd17 	ldw	r2,-12(fp)
 40174d4:	10bfffc4 	addi	r2,r2,-1
 40174d8:	e0bffd15 	stw	r2,-12(fp)
 40174dc:	e0bffd17 	ldw	r2,-12(fp)
 40174e0:	1000031e 	bne	r2,zero,40174f0 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 40174e4:	00bfff84 	movi	r2,-2
 40174e8:	e0bffc15 	stw	r2,-16(fp)
        break;
 40174ec:	00000506 	br	4017504 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 40174f0:	e0bffe17 	ldw	r2,-8(fp)
 40174f4:	10800317 	ldw	r2,12(r2)
 40174f8:	10800704 	addi	r2,r2,28
 40174fc:	10800037 	ldwio	r2,0(r2)
 4017500:	103fee26 	beq	r2,zero,40174bc <__alt_data_end+0xfc0174bc>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 4017504:	e0bffe17 	ldw	r2,-8(fp)
 4017508:	10800317 	ldw	r2,12(r2)
 401750c:	10800104 	addi	r2,r2,4
 4017510:	10800037 	ldwio	r2,0(r2)
 4017514:	1007883a 	mov	r3,r2
 4017518:	e0bfff17 	ldw	r2,-4(fp)
 401751c:	10c00005 	stb	r3,0(r2)
        
    return status;
 4017520:	e0bffc17 	ldw	r2,-16(fp)
}
 4017524:	e037883a 	mov	sp,fp
 4017528:	dfc00117 	ldw	ra,4(sp)
 401752c:	df000017 	ldw	fp,0(sp)
 4017530:	dec00204 	addi	sp,sp,8
 4017534:	f800283a 	ret

04017538 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 4017538:	defff804 	addi	sp,sp,-32
 401753c:	dfc00715 	stw	ra,28(sp)
 4017540:	df000615 	stw	fp,24(sp)
 4017544:	df000604 	addi	fp,sp,24
 4017548:	e13ffc15 	stw	r4,-16(fp)
 401754c:	2809883a 	mov	r4,r5
 4017550:	3007883a 	mov	r3,r6
 4017554:	3805883a 	mov	r2,r7
 4017558:	e13ffd05 	stb	r4,-12(fp)
 401755c:	e0fffe05 	stb	r3,-8(fp)
 4017560:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 4017564:	0089c404 	movi	r2,10000
 4017568:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401756c:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 4017570:	00000c06 	br	40175a4 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 4017574:	e0bffa17 	ldw	r2,-24(fp)
 4017578:	108002a8 	cmpgeui	r2,r2,10
 401757c:	1000021e 	bne	r2,zero,4017588 <alt_avalon_i2c_cmd_write+0x50>
 4017580:	0109c404 	movi	r4,10000
 4017584:	40196d40 	call	40196d4 <alt_busy_sleep>
      if (--timeout == 0)
 4017588:	e0bffa17 	ldw	r2,-24(fp)
 401758c:	10bfffc4 	addi	r2,r2,-1
 4017590:	e0bffa15 	stw	r2,-24(fp)
 4017594:	e0bffa17 	ldw	r2,-24(fp)
 4017598:	1000021e 	bne	r2,zero,40175a4 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 401759c:	00bfff84 	movi	r2,-2
 40175a0:	00001906 	br	4017608 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 40175a4:	e0bffc17 	ldw	r2,-16(fp)
 40175a8:	10800317 	ldw	r2,12(r2)
 40175ac:	10800404 	addi	r2,r2,16
 40175b0:	10800037 	ldwio	r2,0(r2)
 40175b4:	1080004c 	andi	r2,r2,1
 40175b8:	103fee26 	beq	r2,zero,4017574 <__alt_data_end+0xfc017574>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 40175bc:	e0bffc17 	ldw	r2,-16(fp)
 40175c0:	10800317 	ldw	r2,12(r2)
 40175c4:	e13ffd03 	ldbu	r4,-12(fp)
 40175c8:	e0fffe03 	ldbu	r3,-8(fp)
 40175cc:	1806927a 	slli	r3,r3,9
 40175d0:	20c8b03a 	or	r4,r4,r3
 40175d4:	e0ffff03 	ldbu	r3,-4(fp)
 40175d8:	1806923a 	slli	r3,r3,8
 40175dc:	20c6b03a 	or	r3,r4,r3
 40175e0:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 40175e4:	e0bffb04 	addi	r2,fp,-20
 40175e8:	100b883a 	mov	r5,r2
 40175ec:	e13ffc17 	ldw	r4,-16(fp)
 40175f0:	40177780 	call	4017778 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 40175f4:	e0bffb04 	addi	r2,fp,-20
 40175f8:	100b883a 	mov	r5,r2
 40175fc:	e13ffc17 	ldw	r4,-16(fp)
 4017600:	40177c40 	call	40177c4 <alt_avalon_i2c_check_arblost>
    
    return status;
 4017604:	e0bffb17 	ldw	r2,-20(fp)
}
 4017608:	e037883a 	mov	sp,fp
 401760c:	dfc00117 	ldw	ra,4(sp)
 4017610:	df000017 	ldw	fp,0(sp)
 4017614:	dec00204 	addi	sp,sp,8
 4017618:	f800283a 	ret

0401761c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 401761c:	defffa04 	addi	sp,sp,-24
 4017620:	dfc00515 	stw	ra,20(sp)
 4017624:	df000415 	stw	fp,16(sp)
 4017628:	df000404 	addi	fp,sp,16
 401762c:	e13ffd15 	stw	r4,-12(fp)
 4017630:	e17ffe15 	stw	r5,-8(fp)
 4017634:	3005883a 	mov	r2,r6
 4017638:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 401763c:	e0bffd17 	ldw	r2,-12(fp)
 4017640:	10800d17 	ldw	r2,52(r2)
 4017644:	10800058 	cmpnei	r2,r2,1
 4017648:	10001c1e 	bne	r2,zero,40176bc <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401764c:	e0bffd17 	ldw	r2,-12(fp)
 4017650:	10800917 	ldw	r2,36(r2)
 4017654:	109e0014 	ori	r2,r2,30720
 4017658:	1004d1fa 	srli	r2,r2,7
 401765c:	1007883a 	mov	r3,r2
 4017660:	00bfff84 	movi	r2,-2
 4017664:	1884703a 	and	r2,r3,r2
 4017668:	1007883a 	mov	r3,r2
 401766c:	e0bffe17 	ldw	r2,-8(fp)
 4017670:	1884b03a 	or	r2,r3,r2
 4017674:	10803fcc 	andi	r2,r2,255
 4017678:	e0ffff03 	ldbu	r3,-4(fp)
 401767c:	000f883a 	mov	r7,zero
 4017680:	180d883a 	mov	r6,r3
 4017684:	100b883a 	mov	r5,r2
 4017688:	e13ffd17 	ldw	r4,-12(fp)
 401768c:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 4017690:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 4017694:	e0bffd17 	ldw	r2,-12(fp)
 4017698:	10800917 	ldw	r2,36(r2)
 401769c:	10803fcc 	andi	r2,r2,255
 40176a0:	000f883a 	mov	r7,zero
 40176a4:	000d883a 	mov	r6,zero
 40176a8:	100b883a 	mov	r5,r2
 40176ac:	e13ffd17 	ldw	r4,-12(fp)
 40176b0:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 40176b4:	e0bffc15 	stw	r2,-16(fp)
 40176b8:	00000e06 	br	40176f4 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 40176bc:	e0bffd17 	ldw	r2,-12(fp)
 40176c0:	10800917 	ldw	r2,36(r2)
 40176c4:	1085883a 	add	r2,r2,r2
 40176c8:	1007883a 	mov	r3,r2
 40176cc:	e0bffe17 	ldw	r2,-8(fp)
 40176d0:	1884b03a 	or	r2,r3,r2
 40176d4:	10803fcc 	andi	r2,r2,255
 40176d8:	e0ffff03 	ldbu	r3,-4(fp)
 40176dc:	000f883a 	mov	r7,zero
 40176e0:	180d883a 	mov	r6,r3
 40176e4:	100b883a 	mov	r5,r2
 40176e8:	e13ffd17 	ldw	r4,-12(fp)
 40176ec:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 40176f0:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 40176f4:	e0bffc17 	ldw	r2,-16(fp)
}
 40176f8:	e037883a 	mov	sp,fp
 40176fc:	dfc00117 	ldw	ra,4(sp)
 4017700:	df000017 	ldw	fp,0(sp)
 4017704:	dec00204 	addi	sp,sp,8
 4017708:	f800283a 	ret

0401770c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 401770c:	defffd04 	addi	sp,sp,-12
 4017710:	df000215 	stw	fp,8(sp)
 4017714:	df000204 	addi	fp,sp,8
 4017718:	e13ffe15 	stw	r4,-8(fp)
 401771c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 4017720:	e0bffe17 	ldw	r2,-8(fp)
 4017724:	10c00917 	ldw	r3,36(r2)
 4017728:	e0bfff17 	ldw	r2,-4(fp)
 401772c:	10c00015 	stw	r3,0(r2)
}
 4017730:	0001883a 	nop
 4017734:	e037883a 	mov	sp,fp
 4017738:	df000017 	ldw	fp,0(sp)
 401773c:	dec00104 	addi	sp,sp,4
 4017740:	f800283a 	ret

04017744 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 4017744:	defffd04 	addi	sp,sp,-12
 4017748:	df000215 	stw	fp,8(sp)
 401774c:	df000204 	addi	fp,sp,8
 4017750:	e13ffe15 	stw	r4,-8(fp)
 4017754:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 4017758:	e0bffe17 	ldw	r2,-8(fp)
 401775c:	e0ffff17 	ldw	r3,-4(fp)
 4017760:	10c00915 	stw	r3,36(r2)
}
 4017764:	0001883a 	nop
 4017768:	e037883a 	mov	sp,fp
 401776c:	df000017 	ldw	fp,0(sp)
 4017770:	dec00104 	addi	sp,sp,4
 4017774:	f800283a 	ret

04017778 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 4017778:	defffd04 	addi	sp,sp,-12
 401777c:	df000215 	stw	fp,8(sp)
 4017780:	df000204 	addi	fp,sp,8
 4017784:	e13ffe15 	stw	r4,-8(fp)
 4017788:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 401778c:	e0bffe17 	ldw	r2,-8(fp)
 4017790:	10800317 	ldw	r2,12(r2)
 4017794:	10800404 	addi	r2,r2,16
 4017798:	10800037 	ldwio	r2,0(r2)
 401779c:	1080010c 	andi	r2,r2,4
 40177a0:	10000326 	beq	r2,zero,40177b0 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 40177a4:	e0bfff17 	ldw	r2,-4(fp)
 40177a8:	00fffec4 	movi	r3,-5
 40177ac:	10c00015 	stw	r3,0(r2)
    }
}
 40177b0:	0001883a 	nop
 40177b4:	e037883a 	mov	sp,fp
 40177b8:	df000017 	ldw	fp,0(sp)
 40177bc:	dec00104 	addi	sp,sp,4
 40177c0:	f800283a 	ret

040177c4 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 40177c4:	defffd04 	addi	sp,sp,-12
 40177c8:	df000215 	stw	fp,8(sp)
 40177cc:	df000204 	addi	fp,sp,8
 40177d0:	e13ffe15 	stw	r4,-8(fp)
 40177d4:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 40177d8:	e0bffe17 	ldw	r2,-8(fp)
 40177dc:	10800317 	ldw	r2,12(r2)
 40177e0:	10800404 	addi	r2,r2,16
 40177e4:	10800037 	ldwio	r2,0(r2)
 40177e8:	1080020c 	andi	r2,r2,8
 40177ec:	10000326 	beq	r2,zero,40177fc <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 40177f0:	e0bfff17 	ldw	r2,-4(fp)
 40177f4:	00fffe84 	movi	r3,-6
 40177f8:	10c00015 	stw	r3,0(r2)
    }
}
 40177fc:	0001883a 	nop
 4017800:	e037883a 	mov	sp,fp
 4017804:	df000017 	ldw	fp,0(sp)
 4017808:	dec00104 	addi	sp,sp,4
 401780c:	f800283a 	ret

04017810 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 4017810:	defff804 	addi	sp,sp,-32
 4017814:	dfc00715 	stw	ra,28(sp)
 4017818:	df000615 	stw	fp,24(sp)
 401781c:	df000604 	addi	fp,sp,24
 4017820:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4017824:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 4017828:	e0bfff17 	ldw	r2,-4(fp)
 401782c:	10800717 	ldw	r2,28(r2)
 4017830:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 4017834:	e0bffb17 	ldw	r2,-20(fp)
 4017838:	10800117 	ldw	r2,4(r2)
 401783c:	10800044 	addi	r2,r2,1
 4017840:	0149c404 	movi	r5,10000
 4017844:	1009883a 	mov	r4,r2
 4017848:	4007eb40 	call	4007eb4 <__mulsi3>
 401784c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 4017850:	e0bffd04 	addi	r2,fp,-12
 4017854:	100b883a 	mov	r5,r2
 4017858:	e13fff17 	ldw	r4,-4(fp)
 401785c:	40186a80 	call	40186a8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 4017860:	e0bffd17 	ldw	r2,-12(fp)
 4017864:	100b883a 	mov	r5,r2
 4017868:	e13fff17 	ldw	r4,-4(fp)
 401786c:	40185dc0 	call	40185dc <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 4017870:	e0bffc04 	addi	r2,fp,-16
 4017874:	100b883a 	mov	r5,r2
 4017878:	e13fff17 	ldw	r4,-4(fp)
 401787c:	40177780 	call	4017778 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 4017880:	e0bffc17 	ldw	r2,-16(fp)
 4017884:	10002226 	beq	r2,zero,4017910 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 4017888:	e0bffb17 	ldw	r2,-20(fp)
 401788c:	10800217 	ldw	r2,8(r2)
 4017890:	10001d26 	beq	r2,zero,4017908 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4017894:	00000d06 	br	40178cc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 4017898:	e0bffa17 	ldw	r2,-24(fp)
 401789c:	108002a8 	cmpgeui	r2,r2,10
 40178a0:	1000021e 	bne	r2,zero,40178ac <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 40178a4:	0109c404 	movi	r4,10000
 40178a8:	40196d40 	call	40196d4 <alt_busy_sleep>
              if (--timeout == 0)
 40178ac:	e0bffa17 	ldw	r2,-24(fp)
 40178b0:	10bfffc4 	addi	r2,r2,-1
 40178b4:	e0bffa15 	stw	r2,-24(fp)
 40178b8:	e0bffa17 	ldw	r2,-24(fp)
 40178bc:	1000031e 	bne	r2,zero,40178cc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 40178c0:	00bfff84 	movi	r2,-2
 40178c4:	e0bffc15 	stw	r2,-16(fp)
                 break;
 40178c8:	00000306 	br	40178d8 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 40178cc:	e13fff17 	ldw	r4,-4(fp)
 40178d0:	40173a40 	call	40173a4 <alt_avalon_i2c_is_busy>
 40178d4:	103ff01e 	bne	r2,zero,4017898 <__alt_data_end+0xfc017898>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 40178d8:	e0bffb17 	ldw	r2,-20(fp)
 40178dc:	10800017 	ldw	r2,0(r2)
 40178e0:	e0fffe04 	addi	r3,fp,-8
 40178e4:	180f883a 	mov	r7,r3
 40178e8:	000d883a 	mov	r6,zero
 40178ec:	100b883a 	mov	r5,r2
 40178f0:	e13fff17 	ldw	r4,-4(fp)
 40178f4:	40173e80 	call	40173e8 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 40178f8:	e13fff17 	ldw	r4,-4(fp)
 40178fc:	401704c0 	call	401704c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 4017900:	e0bffb17 	ldw	r2,-20(fp)
 4017904:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 4017908:	e0bffc17 	ldw	r2,-16(fp)
 401790c:	00000a06 	br	4017938 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 4017910:	e0bffb17 	ldw	r2,-20(fp)
 4017914:	10800217 	ldw	r2,8(r2)
 4017918:	10000626 	beq	r2,zero,4017934 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 401791c:	e0bffd17 	ldw	r2,-12(fp)
 4017920:	100b883a 	mov	r5,r2
 4017924:	e13fff17 	ldw	r4,-4(fp)
 4017928:	40186440 	call	4018644 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 401792c:	00bffe44 	movi	r2,-7
 4017930:	00000106 	br	4017938 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 4017934:	0005883a 	mov	r2,zero
}
 4017938:	e037883a 	mov	sp,fp
 401793c:	dfc00117 	ldw	ra,4(sp)
 4017940:	df000017 	ldw	fp,0(sp)
 4017944:	dec00204 	addi	sp,sp,8
 4017948:	f800283a 	ret

0401794c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401794c:	defff704 	addi	sp,sp,-36
 4017950:	dfc00815 	stw	ra,32(sp)
 4017954:	df000715 	stw	fp,28(sp)
 4017958:	df000704 	addi	fp,sp,28
 401795c:	e13ffc15 	stw	r4,-16(fp)
 4017960:	e17ffd15 	stw	r5,-12(fp)
 4017964:	e1bffe15 	stw	r6,-8(fp)
 4017968:	3805883a 	mov	r2,r7
 401796c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4017970:	0089c404 	movi	r2,10000
 4017974:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 4017978:	00002206 	br	4017a04 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 401797c:	e0bffb17 	ldw	r2,-20(fp)
 4017980:	108002a8 	cmpgeui	r2,r2,10
 4017984:	1000021e 	bne	r2,zero,4017990 <alt_avalon_i2c_master_tx+0x44>
 4017988:	0109c404 	movi	r4,10000
 401798c:	40196d40 	call	40196d4 <alt_busy_sleep>
      if (use_interrupts)
 4017990:	e0bfff03 	ldbu	r2,-4(fp)
 4017994:	10000926 	beq	r2,zero,40179bc <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 4017998:	00800044 	movi	r2,1
 401799c:	d8800015 	stw	r2,0(sp)
 40179a0:	000f883a 	mov	r7,zero
 40179a4:	e1bffe17 	ldw	r6,-8(fp)
 40179a8:	e17ffd17 	ldw	r5,-12(fp)
 40179ac:	e13ffc17 	ldw	r4,-16(fp)
 40179b0:	4017ef80 	call	4017ef8 <alt_avalon_i2c_master_transmit_using_interrupts>
 40179b4:	e0bffa15 	stw	r2,-24(fp)
 40179b8:	00000806 	br	40179dc <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 40179bc:	00800044 	movi	r2,1
 40179c0:	d8800015 	stw	r2,0(sp)
 40179c4:	000f883a 	mov	r7,zero
 40179c8:	e1bffe17 	ldw	r6,-8(fp)
 40179cc:	e17ffd17 	ldw	r5,-12(fp)
 40179d0:	e13ffc17 	ldw	r4,-16(fp)
 40179d4:	4017d380 	call	4017d38 <alt_avalon_i2c_master_transmit>
 40179d8:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40179dc:	e0bffa17 	ldw	r2,-24(fp)
 40179e0:	10bffea0 	cmpeqi	r2,r2,-6
 40179e4:	1000061e 	bne	r2,zero,4017a00 <alt_avalon_i2c_master_tx+0xb4>
 40179e8:	e0bffa17 	ldw	r2,-24(fp)
 40179ec:	10bffee0 	cmpeqi	r2,r2,-5
 40179f0:	1000031e 	bne	r2,zero,4017a00 <alt_avalon_i2c_master_tx+0xb4>
 40179f4:	e0bffa17 	ldw	r2,-24(fp)
 40179f8:	10bffe58 	cmpnei	r2,r2,-7
 40179fc:	1000061e 	bne	r2,zero,4017a18 <alt_avalon_i2c_master_tx+0xcc>
 4017a00:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 4017a04:	e0bffb17 	ldw	r2,-20(fp)
 4017a08:	10ffffc4 	addi	r3,r2,-1
 4017a0c:	e0fffb15 	stw	r3,-20(fp)
 4017a10:	103fda1e 	bne	r2,zero,401797c <__alt_data_end+0xfc01797c>
 4017a14:	00000106 	br	4017a1c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 4017a18:	0001883a 	nop
    }

    return status;
 4017a1c:	e0bffa17 	ldw	r2,-24(fp)
}        
 4017a20:	e037883a 	mov	sp,fp
 4017a24:	dfc00117 	ldw	ra,4(sp)
 4017a28:	df000017 	ldw	fp,0(sp)
 4017a2c:	dec00204 	addi	sp,sp,8
 4017a30:	f800283a 	ret

04017a34 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 4017a34:	defff704 	addi	sp,sp,-36
 4017a38:	dfc00815 	stw	ra,32(sp)
 4017a3c:	df000715 	stw	fp,28(sp)
 4017a40:	df000704 	addi	fp,sp,28
 4017a44:	e13ffc15 	stw	r4,-16(fp)
 4017a48:	e17ffd15 	stw	r5,-12(fp)
 4017a4c:	e1bffe15 	stw	r6,-8(fp)
 4017a50:	3805883a 	mov	r2,r7
 4017a54:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4017a58:	0089c404 	movi	r2,10000
 4017a5c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 4017a60:	e0bfff03 	ldbu	r2,-4(fp)
 4017a64:	10003426 	beq	r2,zero,4017b38 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 4017a68:	00001706 	br	4017ac8 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 4017a6c:	e0bffb17 	ldw	r2,-20(fp)
 4017a70:	108002a8 	cmpgeui	r2,r2,10
 4017a74:	1000021e 	bne	r2,zero,4017a80 <alt_avalon_i2c_master_rx+0x4c>
 4017a78:	0109c404 	movi	r4,10000
 4017a7c:	40196d40 	call	40196d4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4017a80:	00800044 	movi	r2,1
 4017a84:	d8800015 	stw	r2,0(sp)
 4017a88:	000f883a 	mov	r7,zero
 4017a8c:	e1bffe17 	ldw	r6,-8(fp)
 4017a90:	e17ffd17 	ldw	r5,-12(fp)
 4017a94:	e13ffc17 	ldw	r4,-16(fp)
 4017a98:	40183140 	call	4018314 <alt_avalon_i2c_master_receive_using_interrupts>
 4017a9c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4017aa0:	e0bffa17 	ldw	r2,-24(fp)
 4017aa4:	10bffea0 	cmpeqi	r2,r2,-6
 4017aa8:	1000061e 	bne	r2,zero,4017ac4 <alt_avalon_i2c_master_rx+0x90>
 4017aac:	e0bffa17 	ldw	r2,-24(fp)
 4017ab0:	10bffee0 	cmpeqi	r2,r2,-5
 4017ab4:	1000031e 	bne	r2,zero,4017ac4 <alt_avalon_i2c_master_rx+0x90>
 4017ab8:	e0bffa17 	ldw	r2,-24(fp)
 4017abc:	10bffe58 	cmpnei	r2,r2,-7
 4017ac0:	1000221e 	bne	r2,zero,4017b4c <alt_avalon_i2c_master_rx+0x118>
 4017ac4:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 4017ac8:	e0bffb17 	ldw	r2,-20(fp)
 4017acc:	10ffffc4 	addi	r3,r2,-1
 4017ad0:	e0fffb15 	stw	r3,-20(fp)
 4017ad4:	103fe51e 	bne	r2,zero,4017a6c <__alt_data_end+0xfc017a6c>
 4017ad8:	00001f06 	br	4017b58 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4017adc:	e0bffb17 	ldw	r2,-20(fp)
 4017ae0:	108002a8 	cmpgeui	r2,r2,10
 4017ae4:	1000021e 	bne	r2,zero,4017af0 <alt_avalon_i2c_master_rx+0xbc>
 4017ae8:	0109c404 	movi	r4,10000
 4017aec:	40196d40 	call	40196d4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4017af0:	00800044 	movi	r2,1
 4017af4:	d8800015 	stw	r2,0(sp)
 4017af8:	000f883a 	mov	r7,zero
 4017afc:	e1bffe17 	ldw	r6,-8(fp)
 4017b00:	e17ffd17 	ldw	r5,-12(fp)
 4017b04:	e13ffc17 	ldw	r4,-16(fp)
 4017b08:	40181040 	call	4018104 <alt_avalon_i2c_master_receive>
 4017b0c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4017b10:	e0bffa17 	ldw	r2,-24(fp)
 4017b14:	10bffea0 	cmpeqi	r2,r2,-6
 4017b18:	1000061e 	bne	r2,zero,4017b34 <alt_avalon_i2c_master_rx+0x100>
 4017b1c:	e0bffa17 	ldw	r2,-24(fp)
 4017b20:	10bffee0 	cmpeqi	r2,r2,-5
 4017b24:	1000031e 	bne	r2,zero,4017b34 <alt_avalon_i2c_master_rx+0x100>
 4017b28:	e0bffa17 	ldw	r2,-24(fp)
 4017b2c:	10bffe58 	cmpnei	r2,r2,-7
 4017b30:	1000081e 	bne	r2,zero,4017b54 <alt_avalon_i2c_master_rx+0x120>
 4017b34:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 4017b38:	e0bffb17 	ldw	r2,-20(fp)
 4017b3c:	10ffffc4 	addi	r3,r2,-1
 4017b40:	e0fffb15 	stw	r3,-20(fp)
 4017b44:	103fe51e 	bne	r2,zero,4017adc <__alt_data_end+0xfc017adc>
 4017b48:	00000306 	br	4017b58 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 4017b4c:	0001883a 	nop
 4017b50:	00000106 	br	4017b58 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 4017b54:	0001883a 	nop
      }
    }
    
    return status;
 4017b58:	e0bffa17 	ldw	r2,-24(fp)
}        
 4017b5c:	e037883a 	mov	sp,fp
 4017b60:	dfc00117 	ldw	ra,4(sp)
 4017b64:	df000017 	ldw	fp,0(sp)
 4017b68:	dec00204 	addi	sp,sp,8
 4017b6c:	f800283a 	ret

04017b70 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 4017b70:	defff604 	addi	sp,sp,-40
 4017b74:	dfc00915 	stw	ra,36(sp)
 4017b78:	df000815 	stw	fp,32(sp)
 4017b7c:	df000804 	addi	fp,sp,32
 4017b80:	e13ffb15 	stw	r4,-20(fp)
 4017b84:	e17ffc15 	stw	r5,-16(fp)
 4017b88:	e1bffd15 	stw	r6,-12(fp)
 4017b8c:	e1fffe15 	stw	r7,-8(fp)
 4017b90:	e0800317 	ldw	r2,12(fp)
 4017b94:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 4017b98:	0089c404 	movi	r2,10000
 4017b9c:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 4017ba0:	e0bfff03 	ldbu	r2,-4(fp)
 4017ba4:	10005626 	beq	r2,zero,4017d00 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 4017ba8:	00002806 	br	4017c4c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 4017bac:	e0bffa17 	ldw	r2,-24(fp)
 4017bb0:	108002a8 	cmpgeui	r2,r2,10
 4017bb4:	1000021e 	bne	r2,zero,4017bc0 <alt_avalon_i2c_master_tx_rx+0x50>
 4017bb8:	0109c404 	movi	r4,10000
 4017bbc:	40196d40 	call	40196d4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 4017bc0:	d8000015 	stw	zero,0(sp)
 4017bc4:	000f883a 	mov	r7,zero
 4017bc8:	e1bffd17 	ldw	r6,-12(fp)
 4017bcc:	e17ffc17 	ldw	r5,-16(fp)
 4017bd0:	e13ffb17 	ldw	r4,-20(fp)
 4017bd4:	4017ef80 	call	4017ef8 <alt_avalon_i2c_master_transmit_using_interrupts>
 4017bd8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4017bdc:	e0bff917 	ldw	r2,-28(fp)
 4017be0:	10bffea0 	cmpeqi	r2,r2,-6
 4017be4:	1000191e 	bne	r2,zero,4017c4c <alt_avalon_i2c_master_tx_rx+0xdc>
 4017be8:	e0bff917 	ldw	r2,-28(fp)
 4017bec:	10bffee0 	cmpeqi	r2,r2,-5
 4017bf0:	1000161e 	bne	r2,zero,4017c4c <alt_avalon_i2c_master_tx_rx+0xdc>
 4017bf4:	e0bff917 	ldw	r2,-28(fp)
 4017bf8:	10bffe58 	cmpnei	r2,r2,-7
 4017bfc:	1000011e 	bne	r2,zero,4017c04 <alt_avalon_i2c_master_tx_rx+0x94>
 4017c00:	00001206 	br	4017c4c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 4017c04:	00800044 	movi	r2,1
 4017c08:	d8800015 	stw	r2,0(sp)
 4017c0c:	01c00044 	movi	r7,1
 4017c10:	e1800217 	ldw	r6,8(fp)
 4017c14:	e17ffe17 	ldw	r5,-8(fp)
 4017c18:	e13ffb17 	ldw	r4,-20(fp)
 4017c1c:	40183140 	call	4018314 <alt_avalon_i2c_master_receive_using_interrupts>
 4017c20:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4017c24:	e0bff917 	ldw	r2,-28(fp)
 4017c28:	10bffea0 	cmpeqi	r2,r2,-6
 4017c2c:	1000061e 	bne	r2,zero,4017c48 <alt_avalon_i2c_master_tx_rx+0xd8>
 4017c30:	e0bff917 	ldw	r2,-28(fp)
 4017c34:	10bffee0 	cmpeqi	r2,r2,-5
 4017c38:	1000031e 	bne	r2,zero,4017c48 <alt_avalon_i2c_master_tx_rx+0xd8>
 4017c3c:	e0bff917 	ldw	r2,-28(fp)
 4017c40:	10bffe58 	cmpnei	r2,r2,-7
 4017c44:	1000331e 	bne	r2,zero,4017d14 <alt_avalon_i2c_master_tx_rx+0x1a4>
 4017c48:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 4017c4c:	e0bffa17 	ldw	r2,-24(fp)
 4017c50:	10ffffc4 	addi	r3,r2,-1
 4017c54:	e0fffa15 	stw	r3,-24(fp)
 4017c58:	103fd41e 	bne	r2,zero,4017bac <__alt_data_end+0xfc017bac>
 4017c5c:	00003006 	br	4017d20 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4017c60:	e0bffa17 	ldw	r2,-24(fp)
 4017c64:	108002a8 	cmpgeui	r2,r2,10
 4017c68:	1000021e 	bne	r2,zero,4017c74 <alt_avalon_i2c_master_tx_rx+0x104>
 4017c6c:	0109c404 	movi	r4,10000
 4017c70:	40196d40 	call	40196d4 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 4017c74:	d8000015 	stw	zero,0(sp)
 4017c78:	000f883a 	mov	r7,zero
 4017c7c:	e1bffd17 	ldw	r6,-12(fp)
 4017c80:	e17ffc17 	ldw	r5,-16(fp)
 4017c84:	e13ffb17 	ldw	r4,-20(fp)
 4017c88:	4017d380 	call	4017d38 <alt_avalon_i2c_master_transmit>
 4017c8c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4017c90:	e0bff917 	ldw	r2,-28(fp)
 4017c94:	10bffea0 	cmpeqi	r2,r2,-6
 4017c98:	1000191e 	bne	r2,zero,4017d00 <alt_avalon_i2c_master_tx_rx+0x190>
 4017c9c:	e0bff917 	ldw	r2,-28(fp)
 4017ca0:	10bffee0 	cmpeqi	r2,r2,-5
 4017ca4:	1000161e 	bne	r2,zero,4017d00 <alt_avalon_i2c_master_tx_rx+0x190>
 4017ca8:	e0bff917 	ldw	r2,-28(fp)
 4017cac:	10bffe58 	cmpnei	r2,r2,-7
 4017cb0:	1000011e 	bne	r2,zero,4017cb8 <alt_avalon_i2c_master_tx_rx+0x148>
 4017cb4:	00001206 	br	4017d00 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 4017cb8:	00800044 	movi	r2,1
 4017cbc:	d8800015 	stw	r2,0(sp)
 4017cc0:	01c00044 	movi	r7,1
 4017cc4:	e1800217 	ldw	r6,8(fp)
 4017cc8:	e17ffe17 	ldw	r5,-8(fp)
 4017ccc:	e13ffb17 	ldw	r4,-20(fp)
 4017cd0:	40181040 	call	4018104 <alt_avalon_i2c_master_receive>
 4017cd4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4017cd8:	e0bff917 	ldw	r2,-28(fp)
 4017cdc:	10bffea0 	cmpeqi	r2,r2,-6
 4017ce0:	1000061e 	bne	r2,zero,4017cfc <alt_avalon_i2c_master_tx_rx+0x18c>
 4017ce4:	e0bff917 	ldw	r2,-28(fp)
 4017ce8:	10bffee0 	cmpeqi	r2,r2,-5
 4017cec:	1000031e 	bne	r2,zero,4017cfc <alt_avalon_i2c_master_tx_rx+0x18c>
 4017cf0:	e0bff917 	ldw	r2,-28(fp)
 4017cf4:	10bffe58 	cmpnei	r2,r2,-7
 4017cf8:	1000081e 	bne	r2,zero,4017d1c <alt_avalon_i2c_master_tx_rx+0x1ac>
 4017cfc:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 4017d00:	e0bffa17 	ldw	r2,-24(fp)
 4017d04:	10ffffc4 	addi	r3,r2,-1
 4017d08:	e0fffa15 	stw	r3,-24(fp)
 4017d0c:	103fd41e 	bne	r2,zero,4017c60 <__alt_data_end+0xfc017c60>
 4017d10:	00000306 	br	4017d20 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 4017d14:	0001883a 	nop
 4017d18:	00000106 	br	4017d20 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 4017d1c:	0001883a 	nop
      }
    }
    
    return status;
 4017d20:	e0bff917 	ldw	r2,-28(fp)
}                                       
 4017d24:	e037883a 	mov	sp,fp
 4017d28:	dfc00117 	ldw	ra,4(sp)
 4017d2c:	df000017 	ldw	fp,0(sp)
 4017d30:	dec00204 	addi	sp,sp,8
 4017d34:	f800283a 	ret

04017d38 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 4017d38:	defff704 	addi	sp,sp,-36
 4017d3c:	dfc00815 	stw	ra,32(sp)
 4017d40:	df000715 	stw	fp,28(sp)
 4017d44:	df000704 	addi	fp,sp,28
 4017d48:	e13ffb15 	stw	r4,-20(fp)
 4017d4c:	e17ffc15 	stw	r5,-16(fp)
 4017d50:	e1bffd15 	stw	r6,-12(fp)
 4017d54:	3807883a 	mov	r3,r7
 4017d58:	e0800217 	ldw	r2,8(fp)
 4017d5c:	e0fffe05 	stb	r3,-8(fp)
 4017d60:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4017d64:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 4017d68:	0149c404 	movi	r5,10000
 4017d6c:	e13ffd17 	ldw	r4,-12(fp)
 4017d70:	4007eb40 	call	4007eb4 <__mulsi3>
 4017d74:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 4017d78:	e0bffd17 	ldw	r2,-12(fp)
 4017d7c:	1000021e 	bne	r2,zero,4017d88 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4017d80:	0005883a 	mov	r2,zero
 4017d84:	00005706 	br	4017ee4 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4017d88:	e0bffe03 	ldbu	r2,-8(fp)
 4017d8c:	10000a1e 	bne	r2,zero,4017db8 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4017d90:	e13ffb17 	ldw	r4,-20(fp)
 4017d94:	4016fb40 	call	4016fb4 <alt_avalon_i2c_enable>
 4017d98:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4017d9c:	e0bffa17 	ldw	r2,-24(fp)
 4017da0:	10000226 	beq	r2,zero,4017dac <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 4017da4:	e0bffa17 	ldw	r2,-24(fp)
 4017da8:	00004e06 	br	4017ee4 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4017dac:	01400704 	movi	r5,28
 4017db0:	e13ffb17 	ldw	r4,-20(fp)
 4017db4:	40185a00 	call	40185a0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 4017db8:	e0bffe03 	ldbu	r2,-8(fp)
 4017dbc:	100d883a 	mov	r6,r2
 4017dc0:	000b883a 	mov	r5,zero
 4017dc4:	e13ffb17 	ldw	r4,-20(fp)
 4017dc8:	401761c0 	call	401761c <alt_avalon_i2c_send_address>
 4017dcc:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 4017dd0:	e0bffa17 	ldw	r2,-24(fp)
 4017dd4:	1000271e 	bne	r2,zero,4017e74 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4017dd8:	00000f06 	br	4017e18 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4017ddc:	e0bffc17 	ldw	r2,-16(fp)
 4017de0:	10800003 	ldbu	r2,0(r2)
 4017de4:	10803fcc 	andi	r2,r2,255
 4017de8:	000f883a 	mov	r7,zero
 4017dec:	000d883a 	mov	r6,zero
 4017df0:	100b883a 	mov	r5,r2
 4017df4:	e13ffb17 	ldw	r4,-20(fp)
 4017df8:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 4017dfc:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 4017e00:	e0bffc17 	ldw	r2,-16(fp)
 4017e04:	10800044 	addi	r2,r2,1
 4017e08:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4017e0c:	e0bffd17 	ldw	r2,-12(fp)
 4017e10:	10bfffc4 	addi	r2,r2,-1
 4017e14:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4017e18:	e0bffd17 	ldw	r2,-12(fp)
 4017e1c:	108000b0 	cmpltui	r2,r2,2
 4017e20:	1000021e 	bne	r2,zero,4017e2c <alt_avalon_i2c_master_transmit+0xf4>
 4017e24:	e0bffa17 	ldw	r2,-24(fp)
 4017e28:	103fec26 	beq	r2,zero,4017ddc <__alt_data_end+0xfc017ddc>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4017e2c:	e0bffa17 	ldw	r2,-24(fp)
 4017e30:	1000101e 	bne	r2,zero,4017e74 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4017e34:	e0bffc17 	ldw	r2,-16(fp)
 4017e38:	10800003 	ldbu	r2,0(r2)
 4017e3c:	10803fcc 	andi	r2,r2,255
 4017e40:	e0ffff03 	ldbu	r3,-4(fp)
 4017e44:	180f883a 	mov	r7,r3
 4017e48:	000d883a 	mov	r6,zero
 4017e4c:	100b883a 	mov	r5,r2
 4017e50:	e13ffb17 	ldw	r4,-20(fp)
 4017e54:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 4017e58:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 4017e5c:	e0bffc17 	ldw	r2,-16(fp)
 4017e60:	10800044 	addi	r2,r2,1
 4017e64:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4017e68:	e0bffd17 	ldw	r2,-12(fp)
 4017e6c:	10bfffc4 	addi	r2,r2,-1
 4017e70:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 4017e74:	e0bfff03 	ldbu	r2,-4(fp)
 4017e78:	1000101e 	bne	r2,zero,4017ebc <alt_avalon_i2c_master_transmit+0x184>
 4017e7c:	e0bffa17 	ldw	r2,-24(fp)
 4017e80:	10001726 	beq	r2,zero,4017ee0 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4017e84:	00000d06 	br	4017ebc <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 4017e88:	e0bff917 	ldw	r2,-28(fp)
 4017e8c:	108002a8 	cmpgeui	r2,r2,10
 4017e90:	1000021e 	bne	r2,zero,4017e9c <alt_avalon_i2c_master_transmit+0x164>
 4017e94:	0109c404 	movi	r4,10000
 4017e98:	40196d40 	call	40196d4 <alt_busy_sleep>
            if (--timeout == 0)
 4017e9c:	e0bff917 	ldw	r2,-28(fp)
 4017ea0:	10bfffc4 	addi	r2,r2,-1
 4017ea4:	e0bff915 	stw	r2,-28(fp)
 4017ea8:	e0bff917 	ldw	r2,-28(fp)
 4017eac:	1000031e 	bne	r2,zero,4017ebc <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4017eb0:	00bfff84 	movi	r2,-2
 4017eb4:	e0bffa15 	stw	r2,-24(fp)
               break;
 4017eb8:	00000306 	br	4017ec8 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4017ebc:	e13ffb17 	ldw	r4,-20(fp)
 4017ec0:	40173a40 	call	40173a4 <alt_avalon_i2c_is_busy>
 4017ec4:	103ff01e 	bne	r2,zero,4017e88 <__alt_data_end+0xfc017e88>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 4017ec8:	e0bffa04 	addi	r2,fp,-24
 4017ecc:	100b883a 	mov	r5,r2
 4017ed0:	e13ffb17 	ldw	r4,-20(fp)
 4017ed4:	40177780 	call	4017778 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4017ed8:	e13ffb17 	ldw	r4,-20(fp)
 4017edc:	401704c0 	call	401704c <alt_avalon_i2c_disable>
    }


    return status;
 4017ee0:	e0bffa17 	ldw	r2,-24(fp)
}
 4017ee4:	e037883a 	mov	sp,fp
 4017ee8:	dfc00117 	ldw	ra,4(sp)
 4017eec:	df000017 	ldw	fp,0(sp)
 4017ef0:	dec00204 	addi	sp,sp,8
 4017ef4:	f800283a 	ret

04017ef8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 4017ef8:	defff604 	addi	sp,sp,-40
 4017efc:	dfc00915 	stw	ra,36(sp)
 4017f00:	df000815 	stw	fp,32(sp)
 4017f04:	df000804 	addi	fp,sp,32
 4017f08:	e13ffb15 	stw	r4,-20(fp)
 4017f0c:	e17ffc15 	stw	r5,-16(fp)
 4017f10:	e1bffd15 	stw	r6,-12(fp)
 4017f14:	3807883a 	mov	r3,r7
 4017f18:	e0800217 	ldw	r2,8(fp)
 4017f1c:	e0fffe05 	stb	r3,-8(fp)
 4017f20:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4017f24:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 4017f28:	0149c404 	movi	r5,10000
 4017f2c:	e13ffd17 	ldw	r4,-12(fp)
 4017f30:	4007eb40 	call	4007eb4 <__mulsi3>
 4017f34:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 4017f38:	e0bffb17 	ldw	r2,-20(fp)
 4017f3c:	10800717 	ldw	r2,28(r2)
 4017f40:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 4017f44:	e0bffd17 	ldw	r2,-12(fp)
 4017f48:	1000021e 	bne	r2,zero,4017f54 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4017f4c:	0005883a 	mov	r2,zero
 4017f50:	00006706 	br	40180f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 4017f54:	e0bffb17 	ldw	r2,-20(fp)
 4017f58:	10c00617 	ldw	r3,24(r2)
 4017f5c:	00810074 	movhi	r2,1025
 4017f60:	109b0e04 	addi	r2,r2,27704
 4017f64:	18800226 	beq	r3,r2,4017f70 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 4017f68:	00bfff44 	movi	r2,-3
 4017f6c:	00006006 	br	40180f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4017f70:	e0bffe03 	ldbu	r2,-8(fp)
 4017f74:	10000a1e 	bne	r2,zero,4017fa0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4017f78:	e13ffb17 	ldw	r4,-20(fp)
 4017f7c:	4016fb40 	call	4016fb4 <alt_avalon_i2c_enable>
 4017f80:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4017f84:	e0bff817 	ldw	r2,-32(fp)
 4017f88:	10000226 	beq	r2,zero,4017f94 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 4017f8c:	e0bff817 	ldw	r2,-32(fp)
 4017f90:	00005706 	br	40180f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4017f94:	01400704 	movi	r5,28
 4017f98:	e13ffb17 	ldw	r4,-20(fp)
 4017f9c:	40185a00 	call	40185a0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 4017fa0:	e0bffe03 	ldbu	r2,-8(fp)
 4017fa4:	100d883a 	mov	r6,r2
 4017fa8:	000b883a 	mov	r5,zero
 4017fac:	e13ffb17 	ldw	r4,-20(fp)
 4017fb0:	401761c0 	call	401761c <alt_avalon_i2c_send_address>
 4017fb4:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 4017fb8:	e0bff817 	ldw	r2,-32(fp)
 4017fbc:	1000271e 	bne	r2,zero,401805c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4017fc0:	00000f06 	br	4018000 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4017fc4:	e0bffc17 	ldw	r2,-16(fp)
 4017fc8:	10800003 	ldbu	r2,0(r2)
 4017fcc:	10803fcc 	andi	r2,r2,255
 4017fd0:	000f883a 	mov	r7,zero
 4017fd4:	000d883a 	mov	r6,zero
 4017fd8:	100b883a 	mov	r5,r2
 4017fdc:	e13ffb17 	ldw	r4,-20(fp)
 4017fe0:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 4017fe4:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 4017fe8:	e0bffc17 	ldw	r2,-16(fp)
 4017fec:	10800044 	addi	r2,r2,1
 4017ff0:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4017ff4:	e0bffd17 	ldw	r2,-12(fp)
 4017ff8:	10bfffc4 	addi	r2,r2,-1
 4017ffc:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4018000:	e0bffd17 	ldw	r2,-12(fp)
 4018004:	108000b0 	cmpltui	r2,r2,2
 4018008:	1000021e 	bne	r2,zero,4018014 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 401800c:	e0bff817 	ldw	r2,-32(fp)
 4018010:	103fec26 	beq	r2,zero,4017fc4 <__alt_data_end+0xfc017fc4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4018014:	e0bff817 	ldw	r2,-32(fp)
 4018018:	1000101e 	bne	r2,zero,401805c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401801c:	e0bffc17 	ldw	r2,-16(fp)
 4018020:	10800003 	ldbu	r2,0(r2)
 4018024:	10803fcc 	andi	r2,r2,255
 4018028:	e0ffff03 	ldbu	r3,-4(fp)
 401802c:	180f883a 	mov	r7,r3
 4018030:	000d883a 	mov	r6,zero
 4018034:	100b883a 	mov	r5,r2
 4018038:	e13ffb17 	ldw	r4,-20(fp)
 401803c:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 4018040:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 4018044:	e0bffc17 	ldw	r2,-16(fp)
 4018048:	10800044 	addi	r2,r2,1
 401804c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 4018050:	e0bffd17 	ldw	r2,-12(fp)
 4018054:	10bfffc4 	addi	r2,r2,-1
 4018058:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401805c:	e0bff817 	ldw	r2,-32(fp)
 4018060:	10001426 	beq	r2,zero,40180b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 4018064:	00000d06 	br	401809c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 4018068:	e0bff917 	ldw	r2,-28(fp)
 401806c:	108002a8 	cmpgeui	r2,r2,10
 4018070:	1000021e 	bne	r2,zero,401807c <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 4018074:	0109c404 	movi	r4,10000
 4018078:	40196d40 	call	40196d4 <alt_busy_sleep>
            if (--timeout == 0)
 401807c:	e0bff917 	ldw	r2,-28(fp)
 4018080:	10bfffc4 	addi	r2,r2,-1
 4018084:	e0bff915 	stw	r2,-28(fp)
 4018088:	e0bff917 	ldw	r2,-28(fp)
 401808c:	1000031e 	bne	r2,zero,401809c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4018090:	00bfff84 	movi	r2,-2
 4018094:	e0bff815 	stw	r2,-32(fp)
               break;
 4018098:	00000306 	br	40180a8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401809c:	e13ffb17 	ldw	r4,-20(fp)
 40180a0:	40173a40 	call	40173a4 <alt_avalon_i2c_is_busy>
 40180a4:	103ff01e 	bne	r2,zero,4018068 <__alt_data_end+0xfc018068>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 40180a8:	e13ffb17 	ldw	r4,-20(fp)
 40180ac:	401704c0 	call	401704c <alt_avalon_i2c_disable>
 40180b0:	00000e06 	br	40180ec <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 40180b4:	e0bfff03 	ldbu	r2,-4(fp)
 40180b8:	10000c26 	beq	r2,zero,40180ec <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40180bc:	01400704 	movi	r5,28
 40180c0:	e13ffb17 	ldw	r4,-20(fp)
 40180c4:	40185a00 	call	40185a0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 40180c8:	000b883a 	mov	r5,zero
 40180cc:	e13ffb17 	ldw	r4,-20(fp)
 40180d0:	40187e80 	call	40187e8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 40180d4:	e0bffa17 	ldw	r2,-24(fp)
 40180d8:	00c00044 	movi	r3,1
 40180dc:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 40180e0:	01400044 	movi	r5,1
 40180e4:	e13ffb17 	ldw	r4,-20(fp)
 40180e8:	40186440 	call	4018644 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 40180ec:	e0bff817 	ldw	r2,-32(fp)
}
 40180f0:	e037883a 	mov	sp,fp
 40180f4:	dfc00117 	ldw	ra,4(sp)
 40180f8:	df000017 	ldw	fp,0(sp)
 40180fc:	dec00204 	addi	sp,sp,8
 4018100:	f800283a 	ret

04018104 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 4018104:	defff404 	addi	sp,sp,-48
 4018108:	dfc00b15 	stw	ra,44(sp)
 401810c:	df000a15 	stw	fp,40(sp)
 4018110:	df000a04 	addi	fp,sp,40
 4018114:	e13ffb15 	stw	r4,-20(fp)
 4018118:	e17ffc15 	stw	r5,-16(fp)
 401811c:	e1bffd15 	stw	r6,-12(fp)
 4018120:	3807883a 	mov	r3,r7
 4018124:	e0800217 	ldw	r2,8(fp)
 4018128:	e0fffe05 	stb	r3,-8(fp)
 401812c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4018130:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 4018134:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 4018138:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 401813c:	e0bffd17 	ldw	r2,-12(fp)
 4018140:	1000021e 	bne	r2,zero,401814c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 4018144:	0005883a 	mov	r2,zero
 4018148:	00006d06 	br	4018300 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401814c:	e0bffe03 	ldbu	r2,-8(fp)
 4018150:	10000a1e 	bne	r2,zero,401817c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4018154:	e13ffb17 	ldw	r4,-20(fp)
 4018158:	4016fb40 	call	4016fb4 <alt_avalon_i2c_enable>
 401815c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4018160:	e0bff917 	ldw	r2,-28(fp)
 4018164:	10000226 	beq	r2,zero,4018170 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 4018168:	e0bff917 	ldw	r2,-28(fp)
 401816c:	00006406 	br	4018300 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 4018170:	01400704 	movi	r5,28
 4018174:	e13ffb17 	ldw	r4,-20(fp)
 4018178:	40185a00 	call	40185a0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401817c:	e0bffe03 	ldbu	r2,-8(fp)
 4018180:	100d883a 	mov	r6,r2
 4018184:	01400044 	movi	r5,1
 4018188:	e13ffb17 	ldw	r4,-20(fp)
 401818c:	401761c0 	call	401761c <alt_avalon_i2c_send_address>
 4018190:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 4018194:	e0bff917 	ldw	r2,-28(fp)
 4018198:	1000341e 	bne	r2,zero,401826c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401819c:	00001906 	br	4018204 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40181a0:	000f883a 	mov	r7,zero
 40181a4:	000d883a 	mov	r6,zero
 40181a8:	000b883a 	mov	r5,zero
 40181ac:	e13ffb17 	ldw	r4,-20(fp)
 40181b0:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 40181b4:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 40181b8:	e0bff817 	ldw	r2,-32(fp)
 40181bc:	10800044 	addi	r2,r2,1
 40181c0:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 40181c4:	e0bff917 	ldw	r2,-28(fp)
 40181c8:	10000e1e 	bne	r2,zero,4018204 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 40181cc:	e0bffa04 	addi	r2,fp,-24
 40181d0:	100f883a 	mov	r7,r2
 40181d4:	000d883a 	mov	r6,zero
 40181d8:	e17ffc17 	ldw	r5,-16(fp)
 40181dc:	e13ffb17 	ldw	r4,-20(fp)
 40181e0:	40173e80 	call	40173e8 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 40181e4:	e0bffa17 	ldw	r2,-24(fp)
 40181e8:	e0fffc17 	ldw	r3,-16(fp)
 40181ec:	1885883a 	add	r2,r3,r2
 40181f0:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 40181f4:	e0bffa17 	ldw	r2,-24(fp)
 40181f8:	e0fff717 	ldw	r3,-36(fp)
 40181fc:	1885883a 	add	r2,r3,r2
 4018200:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4018204:	e0bffd17 	ldw	r2,-12(fp)
 4018208:	10bfffc4 	addi	r2,r2,-1
 401820c:	e0fff817 	ldw	r3,-32(fp)
 4018210:	1880022e 	bgeu	r3,r2,401821c <alt_avalon_i2c_master_receive+0x118>
 4018214:	e0bff917 	ldw	r2,-28(fp)
 4018218:	103fe126 	beq	r2,zero,40181a0 <__alt_data_end+0xfc0181a0>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401821c:	e0bff917 	ldw	r2,-28(fp)
 4018220:	1000121e 	bne	r2,zero,401826c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4018224:	e0bfff03 	ldbu	r2,-4(fp)
 4018228:	100f883a 	mov	r7,r2
 401822c:	000d883a 	mov	r6,zero
 4018230:	000b883a 	mov	r5,zero
 4018234:	e13ffb17 	ldw	r4,-20(fp)
 4018238:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 401823c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 4018240:	00000a06 	br	401826c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 4018244:	e17ffc17 	ldw	r5,-16(fp)
 4018248:	e13ffb17 	ldw	r4,-20(fp)
 401824c:	40174900 	call	4017490 <alt_avalon_i2c_rx_read>
 4018250:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 4018254:	e0bffc17 	ldw	r2,-16(fp)
 4018258:	10800044 	addi	r2,r2,1
 401825c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 4018260:	e0bff717 	ldw	r2,-36(fp)
 4018264:	10800044 	addi	r2,r2,1
 4018268:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401826c:	e0fff717 	ldw	r3,-36(fp)
 4018270:	e0bffd17 	ldw	r2,-12(fp)
 4018274:	1880022e 	bgeu	r3,r2,4018280 <alt_avalon_i2c_master_receive+0x17c>
 4018278:	e0bff917 	ldw	r2,-28(fp)
 401827c:	103ff126 	beq	r2,zero,4018244 <__alt_data_end+0xfc018244>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 4018280:	e0bfff03 	ldbu	r2,-4(fp)
 4018284:	1000021e 	bne	r2,zero,4018290 <alt_avalon_i2c_master_receive+0x18c>
 4018288:	e0bff917 	ldw	r2,-28(fp)
 401828c:	10001b26 	beq	r2,zero,40182fc <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 4018290:	0149c404 	movi	r5,10000
 4018294:	e13ffd17 	ldw	r4,-12(fp)
 4018298:	4007eb40 	call	4007eb4 <__mulsi3>
 401829c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 40182a0:	00000d06 	br	40182d8 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 40182a4:	e0bff617 	ldw	r2,-40(fp)
 40182a8:	108002a8 	cmpgeui	r2,r2,10
 40182ac:	1000021e 	bne	r2,zero,40182b8 <alt_avalon_i2c_master_receive+0x1b4>
 40182b0:	0109c404 	movi	r4,10000
 40182b4:	40196d40 	call	40196d4 <alt_busy_sleep>
            if (--timeout == 0)
 40182b8:	e0bff617 	ldw	r2,-40(fp)
 40182bc:	10bfffc4 	addi	r2,r2,-1
 40182c0:	e0bff615 	stw	r2,-40(fp)
 40182c4:	e0bff617 	ldw	r2,-40(fp)
 40182c8:	1000031e 	bne	r2,zero,40182d8 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 40182cc:	00bfff84 	movi	r2,-2
 40182d0:	e0bff915 	stw	r2,-28(fp)
               break;
 40182d4:	00000306 	br	40182e4 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 40182d8:	e13ffb17 	ldw	r4,-20(fp)
 40182dc:	40173a40 	call	40173a4 <alt_avalon_i2c_is_busy>
 40182e0:	103ff01e 	bne	r2,zero,40182a4 <__alt_data_end+0xfc0182a4>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 40182e4:	e0bff904 	addi	r2,fp,-28
 40182e8:	100b883a 	mov	r5,r2
 40182ec:	e13ffb17 	ldw	r4,-20(fp)
 40182f0:	40177780 	call	4017778 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 40182f4:	e13ffb17 	ldw	r4,-20(fp)
 40182f8:	401704c0 	call	401704c <alt_avalon_i2c_disable>
    }

    return status;
 40182fc:	e0bff917 	ldw	r2,-28(fp)
}
 4018300:	e037883a 	mov	sp,fp
 4018304:	dfc00117 	ldw	ra,4(sp)
 4018308:	df000017 	ldw	fp,0(sp)
 401830c:	dec00204 	addi	sp,sp,8
 4018310:	f800283a 	ret

04018314 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 4018314:	defff504 	addi	sp,sp,-44
 4018318:	dfc00a15 	stw	ra,40(sp)
 401831c:	df000915 	stw	fp,36(sp)
 4018320:	df000904 	addi	fp,sp,36
 4018324:	e13ffb15 	stw	r4,-20(fp)
 4018328:	e17ffc15 	stw	r5,-16(fp)
 401832c:	e1bffd15 	stw	r6,-12(fp)
 4018330:	3807883a 	mov	r3,r7
 4018334:	e0800217 	ldw	r2,8(fp)
 4018338:	e0fffe05 	stb	r3,-8(fp)
 401833c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 4018340:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 4018344:	e0bffb17 	ldw	r2,-20(fp)
 4018348:	10800717 	ldw	r2,28(r2)
 401834c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 4018350:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 4018354:	e0bffd17 	ldw	r2,-12(fp)
 4018358:	1000021e 	bne	r2,zero,4018364 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401835c:	0005883a 	mov	r2,zero
 4018360:	00006306 	br	40184f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 4018364:	e0bffb17 	ldw	r2,-20(fp)
 4018368:	10c00617 	ldw	r3,24(r2)
 401836c:	00810074 	movhi	r2,1025
 4018370:	109b0e04 	addi	r2,r2,27704
 4018374:	18800226 	beq	r3,r2,4018380 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 4018378:	00bfff44 	movi	r2,-3
 401837c:	00005c06 	br	40184f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4018380:	e0bffe03 	ldbu	r2,-8(fp)
 4018384:	10000a1e 	bne	r2,zero,40183b0 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4018388:	e13ffb17 	ldw	r4,-20(fp)
 401838c:	4016fb40 	call	4016fb4 <alt_avalon_i2c_enable>
 4018390:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 4018394:	e0bff717 	ldw	r2,-36(fp)
 4018398:	10000226 	beq	r2,zero,40183a4 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 401839c:	e0bff717 	ldw	r2,-36(fp)
 40183a0:	00005306 	br	40184f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40183a4:	01400704 	movi	r5,28
 40183a8:	e13ffb17 	ldw	r4,-20(fp)
 40183ac:	40185a00 	call	40185a0 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 40183b0:	e0bffe03 	ldbu	r2,-8(fp)
 40183b4:	100d883a 	mov	r6,r2
 40183b8:	01400044 	movi	r5,1
 40183bc:	e13ffb17 	ldw	r4,-20(fp)
 40183c0:	401761c0 	call	401761c <alt_avalon_i2c_send_address>
 40183c4:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 40183c8:	e0bff717 	ldw	r2,-36(fp)
 40183cc:	1000191e 	bne	r2,zero,4018434 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 40183d0:	00000906 	br	40183f8 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40183d4:	000f883a 	mov	r7,zero
 40183d8:	000d883a 	mov	r6,zero
 40183dc:	000b883a 	mov	r5,zero
 40183e0:	e13ffb17 	ldw	r4,-20(fp)
 40183e4:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 40183e8:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 40183ec:	e0bff917 	ldw	r2,-28(fp)
 40183f0:	10800044 	addi	r2,r2,1
 40183f4:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 40183f8:	e0bffd17 	ldw	r2,-12(fp)
 40183fc:	10bfffc4 	addi	r2,r2,-1
 4018400:	e0fff917 	ldw	r3,-28(fp)
 4018404:	1880022e 	bgeu	r3,r2,4018410 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 4018408:	e0bff717 	ldw	r2,-36(fp)
 401840c:	103ff126 	beq	r2,zero,40183d4 <__alt_data_end+0xfc0183d4>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4018410:	e0bff717 	ldw	r2,-36(fp)
 4018414:	1000071e 	bne	r2,zero,4018434 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4018418:	e0bfff03 	ldbu	r2,-4(fp)
 401841c:	100f883a 	mov	r7,r2
 4018420:	000d883a 	mov	r6,zero
 4018424:	000b883a 	mov	r5,zero
 4018428:	e13ffb17 	ldw	r4,-20(fp)
 401842c:	40175380 	call	4017538 <alt_avalon_i2c_cmd_write>
 4018430:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 4018434:	e0bff717 	ldw	r2,-36(fp)
 4018438:	10001826 	beq	r2,zero,401849c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 401843c:	0149c404 	movi	r5,10000
 4018440:	e13ffd17 	ldw	r4,-12(fp)
 4018444:	4007eb40 	call	4007eb4 <__mulsi3>
 4018448:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401844c:	00000d06 	br	4018484 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 4018450:	e0bff817 	ldw	r2,-32(fp)
 4018454:	108002a8 	cmpgeui	r2,r2,10
 4018458:	1000021e 	bne	r2,zero,4018464 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 401845c:	0109c404 	movi	r4,10000
 4018460:	40196d40 	call	40196d4 <alt_busy_sleep>
            if (--timeout == 0)
 4018464:	e0bff817 	ldw	r2,-32(fp)
 4018468:	10bfffc4 	addi	r2,r2,-1
 401846c:	e0bff815 	stw	r2,-32(fp)
 4018470:	e0bff817 	ldw	r2,-32(fp)
 4018474:	1000031e 	bne	r2,zero,4018484 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4018478:	00bfff84 	movi	r2,-2
 401847c:	e0bff715 	stw	r2,-36(fp)
               break;
 4018480:	00000306 	br	4018490 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 4018484:	e13ffb17 	ldw	r4,-20(fp)
 4018488:	40173a40 	call	40173a4 <alt_avalon_i2c_is_busy>
 401848c:	103ff01e 	bne	r2,zero,4018450 <__alt_data_end+0xfc018450>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 4018490:	e13ffb17 	ldw	r4,-20(fp)
 4018494:	401704c0 	call	401704c <alt_avalon_i2c_disable>
 4018498:	00001406 	br	40184ec <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 401849c:	e0bfff03 	ldbu	r2,-4(fp)
 40184a0:	10001226 	beq	r2,zero,40184ec <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 40184a4:	01400704 	movi	r5,28
 40184a8:	e13ffb17 	ldw	r4,-20(fp)
 40184ac:	40185a00 	call	40185a0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 40184b0:	000b883a 	mov	r5,zero
 40184b4:	e13ffb17 	ldw	r4,-20(fp)
 40184b8:	40187380 	call	4018738 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 40184bc:	e0bffa17 	ldw	r2,-24(fp)
 40184c0:	00c00084 	movi	r3,2
 40184c4:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 40184c8:	e0bffa17 	ldw	r2,-24(fp)
 40184cc:	e0fffc17 	ldw	r3,-16(fp)
 40184d0:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 40184d4:	e0bffa17 	ldw	r2,-24(fp)
 40184d8:	e0fffd17 	ldw	r3,-12(fp)
 40184dc:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 40184e0:	01400084 	movi	r5,2
 40184e4:	e13ffb17 	ldw	r4,-20(fp)
 40184e8:	40186440 	call	4018644 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 40184ec:	e0bff717 	ldw	r2,-36(fp)
}
 40184f0:	e037883a 	mov	sp,fp
 40184f4:	dfc00117 	ldw	ra,4(sp)
 40184f8:	df000017 	ldw	fp,0(sp)
 40184fc:	dec00204 	addi	sp,sp,8
 4018500:	f800283a 	ret

04018504 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 4018504:	defffd04 	addi	sp,sp,-12
 4018508:	df000215 	stw	fp,8(sp)
 401850c:	df000204 	addi	fp,sp,8
 4018510:	e13ffe15 	stw	r4,-8(fp)
 4018514:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 4018518:	e0bffe17 	ldw	r2,-8(fp)
 401851c:	10800317 	ldw	r2,12(r2)
 4018520:	10800404 	addi	r2,r2,16
 4018524:	10c00037 	ldwio	r3,0(r2)
 4018528:	e0bffe17 	ldw	r2,-8(fp)
 401852c:	10800317 	ldw	r2,12(r2)
 4018530:	10800304 	addi	r2,r2,12
 4018534:	10800037 	ldwio	r2,0(r2)
 4018538:	1884703a 	and	r2,r3,r2
 401853c:	1007883a 	mov	r3,r2
 4018540:	e0bfff17 	ldw	r2,-4(fp)
 4018544:	10c00015 	stw	r3,0(r2)
}
 4018548:	0001883a 	nop
 401854c:	e037883a 	mov	sp,fp
 4018550:	df000017 	ldw	fp,0(sp)
 4018554:	dec00104 	addi	sp,sp,4
 4018558:	f800283a 	ret

0401855c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 401855c:	defffd04 	addi	sp,sp,-12
 4018560:	df000215 	stw	fp,8(sp)
 4018564:	df000204 	addi	fp,sp,8
 4018568:	e13ffe15 	stw	r4,-8(fp)
 401856c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 4018570:	e0bffe17 	ldw	r2,-8(fp)
 4018574:	10800317 	ldw	r2,12(r2)
 4018578:	10800404 	addi	r2,r2,16
 401857c:	10800037 	ldwio	r2,0(r2)
 4018580:	1007883a 	mov	r3,r2
 4018584:	e0bfff17 	ldw	r2,-4(fp)
 4018588:	10c00015 	stw	r3,0(r2)
}
 401858c:	0001883a 	nop
 4018590:	e037883a 	mov	sp,fp
 4018594:	df000017 	ldw	fp,0(sp)
 4018598:	dec00104 	addi	sp,sp,4
 401859c:	f800283a 	ret

040185a0 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 40185a0:	defffd04 	addi	sp,sp,-12
 40185a4:	df000215 	stw	fp,8(sp)
 40185a8:	df000204 	addi	fp,sp,8
 40185ac:	e13ffe15 	stw	r4,-8(fp)
 40185b0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 40185b4:	e0bffe17 	ldw	r2,-8(fp)
 40185b8:	10800317 	ldw	r2,12(r2)
 40185bc:	10800404 	addi	r2,r2,16
 40185c0:	e0ffff17 	ldw	r3,-4(fp)
 40185c4:	10c00035 	stwio	r3,0(r2)
}
 40185c8:	0001883a 	nop
 40185cc:	e037883a 	mov	sp,fp
 40185d0:	df000017 	ldw	fp,0(sp)
 40185d4:	dec00104 	addi	sp,sp,4
 40185d8:	f800283a 	ret

040185dc <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 40185dc:	defffb04 	addi	sp,sp,-20
 40185e0:	dfc00415 	stw	ra,16(sp)
 40185e4:	df000315 	stw	fp,12(sp)
 40185e8:	df000304 	addi	fp,sp,12
 40185ec:	e13ffe15 	stw	r4,-8(fp)
 40185f0:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 40185f4:	e17ffd04 	addi	r5,fp,-12
 40185f8:	e13ffe17 	ldw	r4,-8(fp)
 40185fc:	40186a80 	call	40186a8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 4018600:	e0bfff17 	ldw	r2,-4(fp)
 4018604:	0086303a 	nor	r3,zero,r2
 4018608:	e0bffd17 	ldw	r2,-12(fp)
 401860c:	1884703a 	and	r2,r3,r2
 4018610:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4018614:	e0bffe17 	ldw	r2,-8(fp)
 4018618:	10800317 	ldw	r2,12(r2)
 401861c:	10800304 	addi	r2,r2,12
 4018620:	e0fffd17 	ldw	r3,-12(fp)
 4018624:	18c007cc 	andi	r3,r3,31
 4018628:	10c00035 	stwio	r3,0(r2)
}
 401862c:	0001883a 	nop
 4018630:	e037883a 	mov	sp,fp
 4018634:	dfc00117 	ldw	ra,4(sp)
 4018638:	df000017 	ldw	fp,0(sp)
 401863c:	dec00204 	addi	sp,sp,8
 4018640:	f800283a 	ret

04018644 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 4018644:	defffb04 	addi	sp,sp,-20
 4018648:	dfc00415 	stw	ra,16(sp)
 401864c:	df000315 	stw	fp,12(sp)
 4018650:	df000304 	addi	fp,sp,12
 4018654:	e13ffe15 	stw	r4,-8(fp)
 4018658:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401865c:	e17ffd04 	addi	r5,fp,-12
 4018660:	e13ffe17 	ldw	r4,-8(fp)
 4018664:	40186a80 	call	40186a8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 4018668:	e0fffd17 	ldw	r3,-12(fp)
 401866c:	e0bfff17 	ldw	r2,-4(fp)
 4018670:	1884b03a 	or	r2,r3,r2
 4018674:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4018678:	e0bffe17 	ldw	r2,-8(fp)
 401867c:	10800317 	ldw	r2,12(r2)
 4018680:	10800304 	addi	r2,r2,12
 4018684:	e0fffd17 	ldw	r3,-12(fp)
 4018688:	18c007cc 	andi	r3,r3,31
 401868c:	10c00035 	stwio	r3,0(r2)
}
 4018690:	0001883a 	nop
 4018694:	e037883a 	mov	sp,fp
 4018698:	dfc00117 	ldw	ra,4(sp)
 401869c:	df000017 	ldw	fp,0(sp)
 40186a0:	dec00204 	addi	sp,sp,8
 40186a4:	f800283a 	ret

040186a8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 40186a8:	defffd04 	addi	sp,sp,-12
 40186ac:	df000215 	stw	fp,8(sp)
 40186b0:	df000204 	addi	fp,sp,8
 40186b4:	e13ffe15 	stw	r4,-8(fp)
 40186b8:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 40186bc:	e0bffe17 	ldw	r2,-8(fp)
 40186c0:	10800317 	ldw	r2,12(r2)
 40186c4:	10800304 	addi	r2,r2,12
 40186c8:	10800037 	ldwio	r2,0(r2)
 40186cc:	10c007cc 	andi	r3,r2,31
 40186d0:	e0bfff17 	ldw	r2,-4(fp)
 40186d4:	10c00015 	stw	r3,0(r2)
}
 40186d8:	0001883a 	nop
 40186dc:	e037883a 	mov	sp,fp
 40186e0:	df000017 	ldw	fp,0(sp)
 40186e4:	dec00104 	addi	sp,sp,4
 40186e8:	f800283a 	ret

040186ec <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 40186ec:	defffd04 	addi	sp,sp,-12
 40186f0:	df000215 	stw	fp,8(sp)
 40186f4:	df000204 	addi	fp,sp,8
 40186f8:	e13ffe15 	stw	r4,-8(fp)
 40186fc:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 4018700:	e0bffe17 	ldw	r2,-8(fp)
 4018704:	10800317 	ldw	r2,12(r2)
 4018708:	10800204 	addi	r2,r2,8
 401870c:	10800037 	ldwio	r2,0(r2)
 4018710:	10800c0c 	andi	r2,r2,48
 4018714:	1005d13a 	srai	r2,r2,4
 4018718:	1007883a 	mov	r3,r2
 401871c:	e0bfff17 	ldw	r2,-4(fp)
 4018720:	10c00015 	stw	r3,0(r2)
}
 4018724:	0001883a 	nop
 4018728:	e037883a 	mov	sp,fp
 401872c:	df000017 	ldw	fp,0(sp)
 4018730:	dec00104 	addi	sp,sp,4
 4018734:	f800283a 	ret

04018738 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 4018738:	defffd04 	addi	sp,sp,-12
 401873c:	df000215 	stw	fp,8(sp)
 4018740:	df000204 	addi	fp,sp,8
 4018744:	e13ffe15 	stw	r4,-8(fp)
 4018748:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 401874c:	e0bffe17 	ldw	r2,-8(fp)
 4018750:	10800317 	ldw	r2,12(r2)
 4018754:	10800204 	addi	r2,r2,8
 4018758:	e0fffe17 	ldw	r3,-8(fp)
 401875c:	18c00317 	ldw	r3,12(r3)
 4018760:	18c00204 	addi	r3,r3,8
 4018764:	18c00037 	ldwio	r3,0(r3)
 4018768:	1809883a 	mov	r4,r3
 401876c:	00fff3c4 	movi	r3,-49
 4018770:	20c8703a 	and	r4,r4,r3
 4018774:	e0ffff17 	ldw	r3,-4(fp)
 4018778:	1806913a 	slli	r3,r3,4
 401877c:	18c00c0c 	andi	r3,r3,48
 4018780:	20c6b03a 	or	r3,r4,r3
 4018784:	10c00035 	stwio	r3,0(r2)
}
 4018788:	0001883a 	nop
 401878c:	e037883a 	mov	sp,fp
 4018790:	df000017 	ldw	fp,0(sp)
 4018794:	dec00104 	addi	sp,sp,4
 4018798:	f800283a 	ret

0401879c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 401879c:	defffd04 	addi	sp,sp,-12
 40187a0:	df000215 	stw	fp,8(sp)
 40187a4:	df000204 	addi	fp,sp,8
 40187a8:	e13ffe15 	stw	r4,-8(fp)
 40187ac:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 40187b0:	e0bffe17 	ldw	r2,-8(fp)
 40187b4:	10800317 	ldw	r2,12(r2)
 40187b8:	10800204 	addi	r2,r2,8
 40187bc:	10800037 	ldwio	r2,0(r2)
 40187c0:	1080030c 	andi	r2,r2,12
 40187c4:	1005d0ba 	srai	r2,r2,2
 40187c8:	1007883a 	mov	r3,r2
 40187cc:	e0bfff17 	ldw	r2,-4(fp)
 40187d0:	10c00015 	stw	r3,0(r2)
}
 40187d4:	0001883a 	nop
 40187d8:	e037883a 	mov	sp,fp
 40187dc:	df000017 	ldw	fp,0(sp)
 40187e0:	dec00104 	addi	sp,sp,4
 40187e4:	f800283a 	ret

040187e8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 40187e8:	defffd04 	addi	sp,sp,-12
 40187ec:	df000215 	stw	fp,8(sp)
 40187f0:	df000204 	addi	fp,sp,8
 40187f4:	e13ffe15 	stw	r4,-8(fp)
 40187f8:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 40187fc:	e0bffe17 	ldw	r2,-8(fp)
 4018800:	10800317 	ldw	r2,12(r2)
 4018804:	10c00204 	addi	r3,r2,8
 4018808:	e0bffe17 	ldw	r2,-8(fp)
 401880c:	10800317 	ldw	r2,12(r2)
 4018810:	10800204 	addi	r2,r2,8
 4018814:	10800037 	ldwio	r2,0(r2)
 4018818:	1009883a 	mov	r4,r2
 401881c:	00bffcc4 	movi	r2,-13
 4018820:	2088703a 	and	r4,r4,r2
 4018824:	e0bfff17 	ldw	r2,-4(fp)
 4018828:	1085883a 	add	r2,r2,r2
 401882c:	1085883a 	add	r2,r2,r2
 4018830:	1080030c 	andi	r2,r2,12
 4018834:	2084b03a 	or	r2,r4,r2
 4018838:	18800035 	stwio	r2,0(r3)
}
 401883c:	0001883a 	nop
 4018840:	e037883a 	mov	sp,fp
 4018844:	df000017 	ldw	fp,0(sp)
 4018848:	dec00104 	addi	sp,sp,4
 401884c:	f800283a 	ret

04018850 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4018850:	defffa04 	addi	sp,sp,-24
 4018854:	dfc00515 	stw	ra,20(sp)
 4018858:	df000415 	stw	fp,16(sp)
 401885c:	df000404 	addi	fp,sp,16
 4018860:	e13ffd15 	stw	r4,-12(fp)
 4018864:	e17ffe15 	stw	r5,-8(fp)
 4018868:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401886c:	e0bffd17 	ldw	r2,-12(fp)
 4018870:	10800017 	ldw	r2,0(r2)
 4018874:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4018878:	e0bffc17 	ldw	r2,-16(fp)
 401887c:	10c00a04 	addi	r3,r2,40
 4018880:	e0bffd17 	ldw	r2,-12(fp)
 4018884:	10800217 	ldw	r2,8(r2)
 4018888:	100f883a 	mov	r7,r2
 401888c:	e1bfff17 	ldw	r6,-4(fp)
 4018890:	e17ffe17 	ldw	r5,-8(fp)
 4018894:	1809883a 	mov	r4,r3
 4018898:	4018e780 	call	4018e78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401889c:	e037883a 	mov	sp,fp
 40188a0:	dfc00117 	ldw	ra,4(sp)
 40188a4:	df000017 	ldw	fp,0(sp)
 40188a8:	dec00204 	addi	sp,sp,8
 40188ac:	f800283a 	ret

040188b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40188b0:	defffa04 	addi	sp,sp,-24
 40188b4:	dfc00515 	stw	ra,20(sp)
 40188b8:	df000415 	stw	fp,16(sp)
 40188bc:	df000404 	addi	fp,sp,16
 40188c0:	e13ffd15 	stw	r4,-12(fp)
 40188c4:	e17ffe15 	stw	r5,-8(fp)
 40188c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40188cc:	e0bffd17 	ldw	r2,-12(fp)
 40188d0:	10800017 	ldw	r2,0(r2)
 40188d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40188d8:	e0bffc17 	ldw	r2,-16(fp)
 40188dc:	10c00a04 	addi	r3,r2,40
 40188e0:	e0bffd17 	ldw	r2,-12(fp)
 40188e4:	10800217 	ldw	r2,8(r2)
 40188e8:	100f883a 	mov	r7,r2
 40188ec:	e1bfff17 	ldw	r6,-4(fp)
 40188f0:	e17ffe17 	ldw	r5,-8(fp)
 40188f4:	1809883a 	mov	r4,r3
 40188f8:	40190940 	call	4019094 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40188fc:	e037883a 	mov	sp,fp
 4018900:	dfc00117 	ldw	ra,4(sp)
 4018904:	df000017 	ldw	fp,0(sp)
 4018908:	dec00204 	addi	sp,sp,8
 401890c:	f800283a 	ret

04018910 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4018910:	defffc04 	addi	sp,sp,-16
 4018914:	dfc00315 	stw	ra,12(sp)
 4018918:	df000215 	stw	fp,8(sp)
 401891c:	df000204 	addi	fp,sp,8
 4018920:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4018924:	e0bfff17 	ldw	r2,-4(fp)
 4018928:	10800017 	ldw	r2,0(r2)
 401892c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4018930:	e0bffe17 	ldw	r2,-8(fp)
 4018934:	10c00a04 	addi	r3,r2,40
 4018938:	e0bfff17 	ldw	r2,-4(fp)
 401893c:	10800217 	ldw	r2,8(r2)
 4018940:	100b883a 	mov	r5,r2
 4018944:	1809883a 	mov	r4,r3
 4018948:	4018d200 	call	4018d20 <altera_avalon_jtag_uart_close>
}
 401894c:	e037883a 	mov	sp,fp
 4018950:	dfc00117 	ldw	ra,4(sp)
 4018954:	df000017 	ldw	fp,0(sp)
 4018958:	dec00204 	addi	sp,sp,8
 401895c:	f800283a 	ret

04018960 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4018960:	defffa04 	addi	sp,sp,-24
 4018964:	dfc00515 	stw	ra,20(sp)
 4018968:	df000415 	stw	fp,16(sp)
 401896c:	df000404 	addi	fp,sp,16
 4018970:	e13ffd15 	stw	r4,-12(fp)
 4018974:	e17ffe15 	stw	r5,-8(fp)
 4018978:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401897c:	e0bffd17 	ldw	r2,-12(fp)
 4018980:	10800017 	ldw	r2,0(r2)
 4018984:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4018988:	e0bffc17 	ldw	r2,-16(fp)
 401898c:	10800a04 	addi	r2,r2,40
 4018990:	e1bfff17 	ldw	r6,-4(fp)
 4018994:	e17ffe17 	ldw	r5,-8(fp)
 4018998:	1009883a 	mov	r4,r2
 401899c:	4018d880 	call	4018d88 <altera_avalon_jtag_uart_ioctl>
}
 40189a0:	e037883a 	mov	sp,fp
 40189a4:	dfc00117 	ldw	ra,4(sp)
 40189a8:	df000017 	ldw	fp,0(sp)
 40189ac:	dec00204 	addi	sp,sp,8
 40189b0:	f800283a 	ret

040189b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40189b4:	defffa04 	addi	sp,sp,-24
 40189b8:	dfc00515 	stw	ra,20(sp)
 40189bc:	df000415 	stw	fp,16(sp)
 40189c0:	df000404 	addi	fp,sp,16
 40189c4:	e13ffd15 	stw	r4,-12(fp)
 40189c8:	e17ffe15 	stw	r5,-8(fp)
 40189cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40189d0:	e0bffd17 	ldw	r2,-12(fp)
 40189d4:	00c00044 	movi	r3,1
 40189d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40189dc:	e0bffd17 	ldw	r2,-12(fp)
 40189e0:	10800017 	ldw	r2,0(r2)
 40189e4:	10800104 	addi	r2,r2,4
 40189e8:	1007883a 	mov	r3,r2
 40189ec:	e0bffd17 	ldw	r2,-12(fp)
 40189f0:	10800817 	ldw	r2,32(r2)
 40189f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40189f8:	e0bffe17 	ldw	r2,-8(fp)
 40189fc:	e0ffff17 	ldw	r3,-4(fp)
 4018a00:	d8000015 	stw	zero,0(sp)
 4018a04:	e1fffd17 	ldw	r7,-12(fp)
 4018a08:	018100b4 	movhi	r6,1026
 4018a0c:	31a29d04 	addi	r6,r6,-30092
 4018a10:	180b883a 	mov	r5,r3
 4018a14:	1009883a 	mov	r4,r2
 4018a18:	4019a9c0 	call	4019a9c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4018a1c:	e0bffd17 	ldw	r2,-12(fp)
 4018a20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4018a24:	e0bffd17 	ldw	r2,-12(fp)
 4018a28:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4018a2c:	d0e70317 	ldw	r3,-25588(gp)
 4018a30:	e1fffd17 	ldw	r7,-12(fp)
 4018a34:	018100b4 	movhi	r6,1026
 4018a38:	31a32004 	addi	r6,r6,-29568
 4018a3c:	180b883a 	mov	r5,r3
 4018a40:	1009883a 	mov	r4,r2
 4018a44:	40195a80 	call	40195a8 <alt_alarm_start>
 4018a48:	1000040e 	bge	r2,zero,4018a5c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4018a4c:	e0fffd17 	ldw	r3,-12(fp)
 4018a50:	00a00034 	movhi	r2,32768
 4018a54:	10bfffc4 	addi	r2,r2,-1
 4018a58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4018a5c:	0001883a 	nop
 4018a60:	e037883a 	mov	sp,fp
 4018a64:	dfc00117 	ldw	ra,4(sp)
 4018a68:	df000017 	ldw	fp,0(sp)
 4018a6c:	dec00204 	addi	sp,sp,8
 4018a70:	f800283a 	ret

04018a74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4018a74:	defff804 	addi	sp,sp,-32
 4018a78:	df000715 	stw	fp,28(sp)
 4018a7c:	df000704 	addi	fp,sp,28
 4018a80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4018a84:	e0bfff17 	ldw	r2,-4(fp)
 4018a88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4018a8c:	e0bffb17 	ldw	r2,-20(fp)
 4018a90:	10800017 	ldw	r2,0(r2)
 4018a94:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4018a98:	e0bffc17 	ldw	r2,-16(fp)
 4018a9c:	10800104 	addi	r2,r2,4
 4018aa0:	10800037 	ldwio	r2,0(r2)
 4018aa4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4018aa8:	e0bffd17 	ldw	r2,-12(fp)
 4018aac:	1080c00c 	andi	r2,r2,768
 4018ab0:	10006d26 	beq	r2,zero,4018c68 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4018ab4:	e0bffd17 	ldw	r2,-12(fp)
 4018ab8:	1080400c 	andi	r2,r2,256
 4018abc:	10003526 	beq	r2,zero,4018b94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4018ac0:	00800074 	movhi	r2,1
 4018ac4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4018ac8:	e0bffb17 	ldw	r2,-20(fp)
 4018acc:	10800a17 	ldw	r2,40(r2)
 4018ad0:	10800044 	addi	r2,r2,1
 4018ad4:	1081ffcc 	andi	r2,r2,2047
 4018ad8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4018adc:	e0bffb17 	ldw	r2,-20(fp)
 4018ae0:	10c00b17 	ldw	r3,44(r2)
 4018ae4:	e0bffe17 	ldw	r2,-8(fp)
 4018ae8:	18801526 	beq	r3,r2,4018b40 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4018aec:	e0bffc17 	ldw	r2,-16(fp)
 4018af0:	10800037 	ldwio	r2,0(r2)
 4018af4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4018af8:	e0bff917 	ldw	r2,-28(fp)
 4018afc:	10a0000c 	andi	r2,r2,32768
 4018b00:	10001126 	beq	r2,zero,4018b48 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4018b04:	e0bffb17 	ldw	r2,-20(fp)
 4018b08:	10800a17 	ldw	r2,40(r2)
 4018b0c:	e0fff917 	ldw	r3,-28(fp)
 4018b10:	1809883a 	mov	r4,r3
 4018b14:	e0fffb17 	ldw	r3,-20(fp)
 4018b18:	1885883a 	add	r2,r3,r2
 4018b1c:	10800e04 	addi	r2,r2,56
 4018b20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4018b24:	e0bffb17 	ldw	r2,-20(fp)
 4018b28:	10800a17 	ldw	r2,40(r2)
 4018b2c:	10800044 	addi	r2,r2,1
 4018b30:	10c1ffcc 	andi	r3,r2,2047
 4018b34:	e0bffb17 	ldw	r2,-20(fp)
 4018b38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4018b3c:	003fe206 	br	4018ac8 <__alt_data_end+0xfc018ac8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4018b40:	0001883a 	nop
 4018b44:	00000106 	br	4018b4c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4018b48:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4018b4c:	e0bff917 	ldw	r2,-28(fp)
 4018b50:	10bfffec 	andhi	r2,r2,65535
 4018b54:	10000f26 	beq	r2,zero,4018b94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4018b58:	e0bffb17 	ldw	r2,-20(fp)
 4018b5c:	10c00817 	ldw	r3,32(r2)
 4018b60:	00bfff84 	movi	r2,-2
 4018b64:	1886703a 	and	r3,r3,r2
 4018b68:	e0bffb17 	ldw	r2,-20(fp)
 4018b6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4018b70:	e0bffc17 	ldw	r2,-16(fp)
 4018b74:	10800104 	addi	r2,r2,4
 4018b78:	1007883a 	mov	r3,r2
 4018b7c:	e0bffb17 	ldw	r2,-20(fp)
 4018b80:	10800817 	ldw	r2,32(r2)
 4018b84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4018b88:	e0bffc17 	ldw	r2,-16(fp)
 4018b8c:	10800104 	addi	r2,r2,4
 4018b90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4018b94:	e0bffd17 	ldw	r2,-12(fp)
 4018b98:	1080800c 	andi	r2,r2,512
 4018b9c:	103fbe26 	beq	r2,zero,4018a98 <__alt_data_end+0xfc018a98>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4018ba0:	e0bffd17 	ldw	r2,-12(fp)
 4018ba4:	1004d43a 	srli	r2,r2,16
 4018ba8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4018bac:	00001406 	br	4018c00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4018bb0:	e0bffc17 	ldw	r2,-16(fp)
 4018bb4:	e0fffb17 	ldw	r3,-20(fp)
 4018bb8:	18c00d17 	ldw	r3,52(r3)
 4018bbc:	e13ffb17 	ldw	r4,-20(fp)
 4018bc0:	20c7883a 	add	r3,r4,r3
 4018bc4:	18c20e04 	addi	r3,r3,2104
 4018bc8:	18c00003 	ldbu	r3,0(r3)
 4018bcc:	18c03fcc 	andi	r3,r3,255
 4018bd0:	18c0201c 	xori	r3,r3,128
 4018bd4:	18ffe004 	addi	r3,r3,-128
 4018bd8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4018bdc:	e0bffb17 	ldw	r2,-20(fp)
 4018be0:	10800d17 	ldw	r2,52(r2)
 4018be4:	10800044 	addi	r2,r2,1
 4018be8:	10c1ffcc 	andi	r3,r2,2047
 4018bec:	e0bffb17 	ldw	r2,-20(fp)
 4018bf0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4018bf4:	e0bffa17 	ldw	r2,-24(fp)
 4018bf8:	10bfffc4 	addi	r2,r2,-1
 4018bfc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4018c00:	e0bffa17 	ldw	r2,-24(fp)
 4018c04:	10000526 	beq	r2,zero,4018c1c <altera_avalon_jtag_uart_irq+0x1a8>
 4018c08:	e0bffb17 	ldw	r2,-20(fp)
 4018c0c:	10c00d17 	ldw	r3,52(r2)
 4018c10:	e0bffb17 	ldw	r2,-20(fp)
 4018c14:	10800c17 	ldw	r2,48(r2)
 4018c18:	18bfe51e 	bne	r3,r2,4018bb0 <__alt_data_end+0xfc018bb0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4018c1c:	e0bffa17 	ldw	r2,-24(fp)
 4018c20:	103f9d26 	beq	r2,zero,4018a98 <__alt_data_end+0xfc018a98>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4018c24:	e0bffb17 	ldw	r2,-20(fp)
 4018c28:	10c00817 	ldw	r3,32(r2)
 4018c2c:	00bfff44 	movi	r2,-3
 4018c30:	1886703a 	and	r3,r3,r2
 4018c34:	e0bffb17 	ldw	r2,-20(fp)
 4018c38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4018c3c:	e0bffb17 	ldw	r2,-20(fp)
 4018c40:	10800017 	ldw	r2,0(r2)
 4018c44:	10800104 	addi	r2,r2,4
 4018c48:	1007883a 	mov	r3,r2
 4018c4c:	e0bffb17 	ldw	r2,-20(fp)
 4018c50:	10800817 	ldw	r2,32(r2)
 4018c54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4018c58:	e0bffc17 	ldw	r2,-16(fp)
 4018c5c:	10800104 	addi	r2,r2,4
 4018c60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4018c64:	003f8c06 	br	4018a98 <__alt_data_end+0xfc018a98>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4018c68:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4018c6c:	0001883a 	nop
 4018c70:	e037883a 	mov	sp,fp
 4018c74:	df000017 	ldw	fp,0(sp)
 4018c78:	dec00104 	addi	sp,sp,4
 4018c7c:	f800283a 	ret

04018c80 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4018c80:	defff804 	addi	sp,sp,-32
 4018c84:	df000715 	stw	fp,28(sp)
 4018c88:	df000704 	addi	fp,sp,28
 4018c8c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4018c90:	e0bffb17 	ldw	r2,-20(fp)
 4018c94:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4018c98:	e0bff917 	ldw	r2,-28(fp)
 4018c9c:	10800017 	ldw	r2,0(r2)
 4018ca0:	10800104 	addi	r2,r2,4
 4018ca4:	10800037 	ldwio	r2,0(r2)
 4018ca8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4018cac:	e0bffa17 	ldw	r2,-24(fp)
 4018cb0:	1081000c 	andi	r2,r2,1024
 4018cb4:	10000b26 	beq	r2,zero,4018ce4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4018cb8:	e0bff917 	ldw	r2,-28(fp)
 4018cbc:	10800017 	ldw	r2,0(r2)
 4018cc0:	10800104 	addi	r2,r2,4
 4018cc4:	1007883a 	mov	r3,r2
 4018cc8:	e0bff917 	ldw	r2,-28(fp)
 4018ccc:	10800817 	ldw	r2,32(r2)
 4018cd0:	10810014 	ori	r2,r2,1024
 4018cd4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4018cd8:	e0bff917 	ldw	r2,-28(fp)
 4018cdc:	10000915 	stw	zero,36(r2)
 4018ce0:	00000a06 	br	4018d0c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4018ce4:	e0bff917 	ldw	r2,-28(fp)
 4018ce8:	10c00917 	ldw	r3,36(r2)
 4018cec:	00a00034 	movhi	r2,32768
 4018cf0:	10bfff04 	addi	r2,r2,-4
 4018cf4:	10c00536 	bltu	r2,r3,4018d0c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4018cf8:	e0bff917 	ldw	r2,-28(fp)
 4018cfc:	10800917 	ldw	r2,36(r2)
 4018d00:	10c00044 	addi	r3,r2,1
 4018d04:	e0bff917 	ldw	r2,-28(fp)
 4018d08:	10c00915 	stw	r3,36(r2)
 4018d0c:	d0a70317 	ldw	r2,-25588(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4018d10:	e037883a 	mov	sp,fp
 4018d14:	df000017 	ldw	fp,0(sp)
 4018d18:	dec00104 	addi	sp,sp,4
 4018d1c:	f800283a 	ret

04018d20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4018d20:	defffd04 	addi	sp,sp,-12
 4018d24:	df000215 	stw	fp,8(sp)
 4018d28:	df000204 	addi	fp,sp,8
 4018d2c:	e13ffe15 	stw	r4,-8(fp)
 4018d30:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4018d34:	00000506 	br	4018d4c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4018d38:	e0bfff17 	ldw	r2,-4(fp)
 4018d3c:	1090000c 	andi	r2,r2,16384
 4018d40:	10000226 	beq	r2,zero,4018d4c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4018d44:	00bffd44 	movi	r2,-11
 4018d48:	00000b06 	br	4018d78 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4018d4c:	e0bffe17 	ldw	r2,-8(fp)
 4018d50:	10c00d17 	ldw	r3,52(r2)
 4018d54:	e0bffe17 	ldw	r2,-8(fp)
 4018d58:	10800c17 	ldw	r2,48(r2)
 4018d5c:	18800526 	beq	r3,r2,4018d74 <altera_avalon_jtag_uart_close+0x54>
 4018d60:	e0bffe17 	ldw	r2,-8(fp)
 4018d64:	10c00917 	ldw	r3,36(r2)
 4018d68:	e0bffe17 	ldw	r2,-8(fp)
 4018d6c:	10800117 	ldw	r2,4(r2)
 4018d70:	18bff136 	bltu	r3,r2,4018d38 <__alt_data_end+0xfc018d38>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4018d74:	0005883a 	mov	r2,zero
}
 4018d78:	e037883a 	mov	sp,fp
 4018d7c:	df000017 	ldw	fp,0(sp)
 4018d80:	dec00104 	addi	sp,sp,4
 4018d84:	f800283a 	ret

04018d88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4018d88:	defffa04 	addi	sp,sp,-24
 4018d8c:	df000515 	stw	fp,20(sp)
 4018d90:	df000504 	addi	fp,sp,20
 4018d94:	e13ffd15 	stw	r4,-12(fp)
 4018d98:	e17ffe15 	stw	r5,-8(fp)
 4018d9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4018da0:	00bff9c4 	movi	r2,-25
 4018da4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4018da8:	e0bffe17 	ldw	r2,-8(fp)
 4018dac:	10da8060 	cmpeqi	r3,r2,27137
 4018db0:	1800031e 	bne	r3,zero,4018dc0 <altera_avalon_jtag_uart_ioctl+0x38>
 4018db4:	109a80a0 	cmpeqi	r2,r2,27138
 4018db8:	1000181e 	bne	r2,zero,4018e1c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4018dbc:	00002906 	br	4018e64 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4018dc0:	e0bffd17 	ldw	r2,-12(fp)
 4018dc4:	10c00117 	ldw	r3,4(r2)
 4018dc8:	00a00034 	movhi	r2,32768
 4018dcc:	10bfffc4 	addi	r2,r2,-1
 4018dd0:	18802126 	beq	r3,r2,4018e58 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4018dd4:	e0bfff17 	ldw	r2,-4(fp)
 4018dd8:	10800017 	ldw	r2,0(r2)
 4018ddc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4018de0:	e0bffc17 	ldw	r2,-16(fp)
 4018de4:	10800090 	cmplti	r2,r2,2
 4018de8:	1000061e 	bne	r2,zero,4018e04 <altera_avalon_jtag_uart_ioctl+0x7c>
 4018dec:	e0fffc17 	ldw	r3,-16(fp)
 4018df0:	00a00034 	movhi	r2,32768
 4018df4:	10bfffc4 	addi	r2,r2,-1
 4018df8:	18800226 	beq	r3,r2,4018e04 <altera_avalon_jtag_uart_ioctl+0x7c>
 4018dfc:	e0bffc17 	ldw	r2,-16(fp)
 4018e00:	00000206 	br	4018e0c <altera_avalon_jtag_uart_ioctl+0x84>
 4018e04:	00a00034 	movhi	r2,32768
 4018e08:	10bfff84 	addi	r2,r2,-2
 4018e0c:	e0fffd17 	ldw	r3,-12(fp)
 4018e10:	18800115 	stw	r2,4(r3)
      rc = 0;
 4018e14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4018e18:	00000f06 	br	4018e58 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4018e1c:	e0bffd17 	ldw	r2,-12(fp)
 4018e20:	10c00117 	ldw	r3,4(r2)
 4018e24:	00a00034 	movhi	r2,32768
 4018e28:	10bfffc4 	addi	r2,r2,-1
 4018e2c:	18800c26 	beq	r3,r2,4018e60 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4018e30:	e0bffd17 	ldw	r2,-12(fp)
 4018e34:	10c00917 	ldw	r3,36(r2)
 4018e38:	e0bffd17 	ldw	r2,-12(fp)
 4018e3c:	10800117 	ldw	r2,4(r2)
 4018e40:	1885803a 	cmpltu	r2,r3,r2
 4018e44:	10c03fcc 	andi	r3,r2,255
 4018e48:	e0bfff17 	ldw	r2,-4(fp)
 4018e4c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4018e50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4018e54:	00000206 	br	4018e60 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4018e58:	0001883a 	nop
 4018e5c:	00000106 	br	4018e64 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4018e60:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4018e64:	e0bffb17 	ldw	r2,-20(fp)
}
 4018e68:	e037883a 	mov	sp,fp
 4018e6c:	df000017 	ldw	fp,0(sp)
 4018e70:	dec00104 	addi	sp,sp,4
 4018e74:	f800283a 	ret

04018e78 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4018e78:	defff304 	addi	sp,sp,-52
 4018e7c:	dfc00c15 	stw	ra,48(sp)
 4018e80:	df000b15 	stw	fp,44(sp)
 4018e84:	df000b04 	addi	fp,sp,44
 4018e88:	e13ffc15 	stw	r4,-16(fp)
 4018e8c:	e17ffd15 	stw	r5,-12(fp)
 4018e90:	e1bffe15 	stw	r6,-8(fp)
 4018e94:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4018e98:	e0bffd17 	ldw	r2,-12(fp)
 4018e9c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4018ea0:	00004706 	br	4018fc0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4018ea4:	e0bffc17 	ldw	r2,-16(fp)
 4018ea8:	10800a17 	ldw	r2,40(r2)
 4018eac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4018eb0:	e0bffc17 	ldw	r2,-16(fp)
 4018eb4:	10800b17 	ldw	r2,44(r2)
 4018eb8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4018ebc:	e0fff717 	ldw	r3,-36(fp)
 4018ec0:	e0bff817 	ldw	r2,-32(fp)
 4018ec4:	18800536 	bltu	r3,r2,4018edc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4018ec8:	e0fff717 	ldw	r3,-36(fp)
 4018ecc:	e0bff817 	ldw	r2,-32(fp)
 4018ed0:	1885c83a 	sub	r2,r3,r2
 4018ed4:	e0bff615 	stw	r2,-40(fp)
 4018ed8:	00000406 	br	4018eec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4018edc:	00c20004 	movi	r3,2048
 4018ee0:	e0bff817 	ldw	r2,-32(fp)
 4018ee4:	1885c83a 	sub	r2,r3,r2
 4018ee8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4018eec:	e0bff617 	ldw	r2,-40(fp)
 4018ef0:	10001e26 	beq	r2,zero,4018f6c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4018ef4:	e0fffe17 	ldw	r3,-8(fp)
 4018ef8:	e0bff617 	ldw	r2,-40(fp)
 4018efc:	1880022e 	bgeu	r3,r2,4018f08 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4018f00:	e0bffe17 	ldw	r2,-8(fp)
 4018f04:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4018f08:	e0bffc17 	ldw	r2,-16(fp)
 4018f0c:	10c00e04 	addi	r3,r2,56
 4018f10:	e0bff817 	ldw	r2,-32(fp)
 4018f14:	1885883a 	add	r2,r3,r2
 4018f18:	e1bff617 	ldw	r6,-40(fp)
 4018f1c:	100b883a 	mov	r5,r2
 4018f20:	e13ff517 	ldw	r4,-44(fp)
 4018f24:	400c0a00 	call	400c0a0 <memcpy>
      ptr   += n;
 4018f28:	e0fff517 	ldw	r3,-44(fp)
 4018f2c:	e0bff617 	ldw	r2,-40(fp)
 4018f30:	1885883a 	add	r2,r3,r2
 4018f34:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4018f38:	e0fffe17 	ldw	r3,-8(fp)
 4018f3c:	e0bff617 	ldw	r2,-40(fp)
 4018f40:	1885c83a 	sub	r2,r3,r2
 4018f44:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4018f48:	e0fff817 	ldw	r3,-32(fp)
 4018f4c:	e0bff617 	ldw	r2,-40(fp)
 4018f50:	1885883a 	add	r2,r3,r2
 4018f54:	10c1ffcc 	andi	r3,r2,2047
 4018f58:	e0bffc17 	ldw	r2,-16(fp)
 4018f5c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4018f60:	e0bffe17 	ldw	r2,-8(fp)
 4018f64:	00bfcf16 	blt	zero,r2,4018ea4 <__alt_data_end+0xfc018ea4>
 4018f68:	00000106 	br	4018f70 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4018f6c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4018f70:	e0fff517 	ldw	r3,-44(fp)
 4018f74:	e0bffd17 	ldw	r2,-12(fp)
 4018f78:	1880141e 	bne	r3,r2,4018fcc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4018f7c:	e0bfff17 	ldw	r2,-4(fp)
 4018f80:	1090000c 	andi	r2,r2,16384
 4018f84:	1000131e 	bne	r2,zero,4018fd4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4018f88:	0001883a 	nop
 4018f8c:	e0bffc17 	ldw	r2,-16(fp)
 4018f90:	10c00a17 	ldw	r3,40(r2)
 4018f94:	e0bff717 	ldw	r2,-36(fp)
 4018f98:	1880051e 	bne	r3,r2,4018fb0 <altera_avalon_jtag_uart_read+0x138>
 4018f9c:	e0bffc17 	ldw	r2,-16(fp)
 4018fa0:	10c00917 	ldw	r3,36(r2)
 4018fa4:	e0bffc17 	ldw	r2,-16(fp)
 4018fa8:	10800117 	ldw	r2,4(r2)
 4018fac:	18bff736 	bltu	r3,r2,4018f8c <__alt_data_end+0xfc018f8c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4018fb0:	e0bffc17 	ldw	r2,-16(fp)
 4018fb4:	10c00a17 	ldw	r3,40(r2)
 4018fb8:	e0bff717 	ldw	r2,-36(fp)
 4018fbc:	18800726 	beq	r3,r2,4018fdc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4018fc0:	e0bffe17 	ldw	r2,-8(fp)
 4018fc4:	00bfb716 	blt	zero,r2,4018ea4 <__alt_data_end+0xfc018ea4>
 4018fc8:	00000506 	br	4018fe0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4018fcc:	0001883a 	nop
 4018fd0:	00000306 	br	4018fe0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4018fd4:	0001883a 	nop
 4018fd8:	00000106 	br	4018fe0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4018fdc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4018fe0:	e0fff517 	ldw	r3,-44(fp)
 4018fe4:	e0bffd17 	ldw	r2,-12(fp)
 4018fe8:	18801826 	beq	r3,r2,401904c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018fec:	0005303a 	rdctl	r2,status
 4018ff0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018ff4:	e0fffb17 	ldw	r3,-20(fp)
 4018ff8:	00bfff84 	movi	r2,-2
 4018ffc:	1884703a 	and	r2,r3,r2
 4019000:	1001703a 	wrctl	status,r2
  
  return context;
 4019004:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4019008:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401900c:	e0bffc17 	ldw	r2,-16(fp)
 4019010:	10800817 	ldw	r2,32(r2)
 4019014:	10c00054 	ori	r3,r2,1
 4019018:	e0bffc17 	ldw	r2,-16(fp)
 401901c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4019020:	e0bffc17 	ldw	r2,-16(fp)
 4019024:	10800017 	ldw	r2,0(r2)
 4019028:	10800104 	addi	r2,r2,4
 401902c:	1007883a 	mov	r3,r2
 4019030:	e0bffc17 	ldw	r2,-16(fp)
 4019034:	10800817 	ldw	r2,32(r2)
 4019038:	18800035 	stwio	r2,0(r3)
 401903c:	e0bffa17 	ldw	r2,-24(fp)
 4019040:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019044:	e0bff917 	ldw	r2,-28(fp)
 4019048:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401904c:	e0fff517 	ldw	r3,-44(fp)
 4019050:	e0bffd17 	ldw	r2,-12(fp)
 4019054:	18800426 	beq	r3,r2,4019068 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4019058:	e0fff517 	ldw	r3,-44(fp)
 401905c:	e0bffd17 	ldw	r2,-12(fp)
 4019060:	1885c83a 	sub	r2,r3,r2
 4019064:	00000606 	br	4019080 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4019068:	e0bfff17 	ldw	r2,-4(fp)
 401906c:	1090000c 	andi	r2,r2,16384
 4019070:	10000226 	beq	r2,zero,401907c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4019074:	00bffd44 	movi	r2,-11
 4019078:	00000106 	br	4019080 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401907c:	00bffec4 	movi	r2,-5
}
 4019080:	e037883a 	mov	sp,fp
 4019084:	dfc00117 	ldw	ra,4(sp)
 4019088:	df000017 	ldw	fp,0(sp)
 401908c:	dec00204 	addi	sp,sp,8
 4019090:	f800283a 	ret

04019094 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4019094:	defff304 	addi	sp,sp,-52
 4019098:	dfc00c15 	stw	ra,48(sp)
 401909c:	df000b15 	stw	fp,44(sp)
 40190a0:	df000b04 	addi	fp,sp,44
 40190a4:	e13ffc15 	stw	r4,-16(fp)
 40190a8:	e17ffd15 	stw	r5,-12(fp)
 40190ac:	e1bffe15 	stw	r6,-8(fp)
 40190b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40190b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40190b8:	e0bffd17 	ldw	r2,-12(fp)
 40190bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40190c0:	00003706 	br	40191a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40190c4:	e0bffc17 	ldw	r2,-16(fp)
 40190c8:	10800c17 	ldw	r2,48(r2)
 40190cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40190d0:	e0bffc17 	ldw	r2,-16(fp)
 40190d4:	10800d17 	ldw	r2,52(r2)
 40190d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40190dc:	e0fff917 	ldw	r3,-28(fp)
 40190e0:	e0bff517 	ldw	r2,-44(fp)
 40190e4:	1880062e 	bgeu	r3,r2,4019100 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40190e8:	e0fff517 	ldw	r3,-44(fp)
 40190ec:	e0bff917 	ldw	r2,-28(fp)
 40190f0:	1885c83a 	sub	r2,r3,r2
 40190f4:	10bfffc4 	addi	r2,r2,-1
 40190f8:	e0bff615 	stw	r2,-40(fp)
 40190fc:	00000b06 	br	401912c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4019100:	e0bff517 	ldw	r2,-44(fp)
 4019104:	10000526 	beq	r2,zero,401911c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4019108:	00c20004 	movi	r3,2048
 401910c:	e0bff917 	ldw	r2,-28(fp)
 4019110:	1885c83a 	sub	r2,r3,r2
 4019114:	e0bff615 	stw	r2,-40(fp)
 4019118:	00000406 	br	401912c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401911c:	00c1ffc4 	movi	r3,2047
 4019120:	e0bff917 	ldw	r2,-28(fp)
 4019124:	1885c83a 	sub	r2,r3,r2
 4019128:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401912c:	e0bff617 	ldw	r2,-40(fp)
 4019130:	10001e26 	beq	r2,zero,40191ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4019134:	e0fffe17 	ldw	r3,-8(fp)
 4019138:	e0bff617 	ldw	r2,-40(fp)
 401913c:	1880022e 	bgeu	r3,r2,4019148 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4019140:	e0bffe17 	ldw	r2,-8(fp)
 4019144:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4019148:	e0bffc17 	ldw	r2,-16(fp)
 401914c:	10c20e04 	addi	r3,r2,2104
 4019150:	e0bff917 	ldw	r2,-28(fp)
 4019154:	1885883a 	add	r2,r3,r2
 4019158:	e1bff617 	ldw	r6,-40(fp)
 401915c:	e17ffd17 	ldw	r5,-12(fp)
 4019160:	1009883a 	mov	r4,r2
 4019164:	400c0a00 	call	400c0a0 <memcpy>
      ptr   += n;
 4019168:	e0fffd17 	ldw	r3,-12(fp)
 401916c:	e0bff617 	ldw	r2,-40(fp)
 4019170:	1885883a 	add	r2,r3,r2
 4019174:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4019178:	e0fffe17 	ldw	r3,-8(fp)
 401917c:	e0bff617 	ldw	r2,-40(fp)
 4019180:	1885c83a 	sub	r2,r3,r2
 4019184:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019188:	e0fff917 	ldw	r3,-28(fp)
 401918c:	e0bff617 	ldw	r2,-40(fp)
 4019190:	1885883a 	add	r2,r3,r2
 4019194:	10c1ffcc 	andi	r3,r2,2047
 4019198:	e0bffc17 	ldw	r2,-16(fp)
 401919c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40191a0:	e0bffe17 	ldw	r2,-8(fp)
 40191a4:	00bfc716 	blt	zero,r2,40190c4 <__alt_data_end+0xfc0190c4>
 40191a8:	00000106 	br	40191b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40191ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40191b0:	0005303a 	rdctl	r2,status
 40191b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40191b8:	e0fffb17 	ldw	r3,-20(fp)
 40191bc:	00bfff84 	movi	r2,-2
 40191c0:	1884703a 	and	r2,r3,r2
 40191c4:	1001703a 	wrctl	status,r2
  
  return context;
 40191c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40191cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40191d0:	e0bffc17 	ldw	r2,-16(fp)
 40191d4:	10800817 	ldw	r2,32(r2)
 40191d8:	10c00094 	ori	r3,r2,2
 40191dc:	e0bffc17 	ldw	r2,-16(fp)
 40191e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40191e4:	e0bffc17 	ldw	r2,-16(fp)
 40191e8:	10800017 	ldw	r2,0(r2)
 40191ec:	10800104 	addi	r2,r2,4
 40191f0:	1007883a 	mov	r3,r2
 40191f4:	e0bffc17 	ldw	r2,-16(fp)
 40191f8:	10800817 	ldw	r2,32(r2)
 40191fc:	18800035 	stwio	r2,0(r3)
 4019200:	e0bffa17 	ldw	r2,-24(fp)
 4019204:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019208:	e0bff817 	ldw	r2,-32(fp)
 401920c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4019210:	e0bffe17 	ldw	r2,-8(fp)
 4019214:	0080100e 	bge	zero,r2,4019258 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4019218:	e0bfff17 	ldw	r2,-4(fp)
 401921c:	1090000c 	andi	r2,r2,16384
 4019220:	1000101e 	bne	r2,zero,4019264 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4019224:	0001883a 	nop
 4019228:	e0bffc17 	ldw	r2,-16(fp)
 401922c:	10c00d17 	ldw	r3,52(r2)
 4019230:	e0bff517 	ldw	r2,-44(fp)
 4019234:	1880051e 	bne	r3,r2,401924c <altera_avalon_jtag_uart_write+0x1b8>
 4019238:	e0bffc17 	ldw	r2,-16(fp)
 401923c:	10c00917 	ldw	r3,36(r2)
 4019240:	e0bffc17 	ldw	r2,-16(fp)
 4019244:	10800117 	ldw	r2,4(r2)
 4019248:	18bff736 	bltu	r3,r2,4019228 <__alt_data_end+0xfc019228>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401924c:	e0bffc17 	ldw	r2,-16(fp)
 4019250:	10800917 	ldw	r2,36(r2)
 4019254:	1000051e 	bne	r2,zero,401926c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4019258:	e0bffe17 	ldw	r2,-8(fp)
 401925c:	00bfd016 	blt	zero,r2,40191a0 <__alt_data_end+0xfc0191a0>
 4019260:	00000306 	br	4019270 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4019264:	0001883a 	nop
 4019268:	00000106 	br	4019270 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401926c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4019270:	e0fffd17 	ldw	r3,-12(fp)
 4019274:	e0bff717 	ldw	r2,-36(fp)
 4019278:	18800426 	beq	r3,r2,401928c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401927c:	e0fffd17 	ldw	r3,-12(fp)
 4019280:	e0bff717 	ldw	r2,-36(fp)
 4019284:	1885c83a 	sub	r2,r3,r2
 4019288:	00000606 	br	40192a4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401928c:	e0bfff17 	ldw	r2,-4(fp)
 4019290:	1090000c 	andi	r2,r2,16384
 4019294:	10000226 	beq	r2,zero,40192a0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4019298:	00bffd44 	movi	r2,-11
 401929c:	00000106 	br	40192a4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40192a0:	00bffec4 	movi	r2,-5
}
 40192a4:	e037883a 	mov	sp,fp
 40192a8:	dfc00117 	ldw	ra,4(sp)
 40192ac:	df000017 	ldw	fp,0(sp)
 40192b0:	dec00204 	addi	sp,sp,8
 40192b4:	f800283a 	ret

040192b8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 40192b8:	defff404 	addi	sp,sp,-48
 40192bc:	df000b15 	stw	fp,44(sp)
 40192c0:	df000b04 	addi	fp,sp,44
 40192c4:	e13ffc15 	stw	r4,-16(fp)
 40192c8:	e17ffd15 	stw	r5,-12(fp)
 40192cc:	e1bffe15 	stw	r6,-8(fp)
 40192d0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 40192d4:	e0ffff17 	ldw	r3,-4(fp)
 40192d8:	e0bffe17 	ldw	r2,-8(fp)
 40192dc:	1885883a 	add	r2,r3,r2
 40192e0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 40192e4:	e0c00217 	ldw	r3,8(fp)
 40192e8:	e0800117 	ldw	r2,4(fp)
 40192ec:	1885883a 	add	r2,r3,r2
 40192f0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 40192f4:	e0800117 	ldw	r2,4(fp)
 40192f8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 40192fc:	e0bffe17 	ldw	r2,-8(fp)
 4019300:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4019304:	00800044 	movi	r2,1
 4019308:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401930c:	e0bffc17 	ldw	r2,-16(fp)
 4019310:	10800504 	addi	r2,r2,20
 4019314:	1009883a 	mov	r4,r2
 4019318:	00c00044 	movi	r3,1
 401931c:	e0bffd17 	ldw	r2,-12(fp)
 4019320:	1884983a 	sll	r2,r3,r2
 4019324:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4019328:	e0800317 	ldw	r2,12(fp)
 401932c:	1080008c 	andi	r2,r2,2
 4019330:	1000051e 	bne	r2,zero,4019348 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4019334:	e0bffc17 	ldw	r2,-16(fp)
 4019338:	10800304 	addi	r2,r2,12
 401933c:	1007883a 	mov	r3,r2
 4019340:	00810004 	movi	r2,1024
 4019344:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4019348:	e0bffc17 	ldw	r2,-16(fp)
 401934c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4019350:	e0bffc17 	ldw	r2,-16(fp)
 4019354:	10800204 	addi	r2,r2,8
 4019358:	10800037 	ldwio	r2,0(r2)
 401935c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4019360:	e0bffa17 	ldw	r2,-24(fp)
 4019364:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4019368:	10000226 	beq	r2,zero,4019374 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401936c:	e0bff717 	ldw	r2,-36(fp)
 4019370:	1000031e 	bne	r2,zero,4019380 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4019374:	e0bffa17 	ldw	r2,-24(fp)
 4019378:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401937c:	103ff426 	beq	r2,zero,4019350 <__alt_data_end+0xfc019350>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4019380:	e0bffa17 	ldw	r2,-24(fp)
 4019384:	1080100c 	andi	r2,r2,64
 4019388:	10001e26 	beq	r2,zero,4019404 <alt_avalon_spi_command+0x14c>
 401938c:	e0bff717 	ldw	r2,-36(fp)
 4019390:	00801c0e 	bge	zero,r2,4019404 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4019394:	e0bff717 	ldw	r2,-36(fp)
 4019398:	10bfffc4 	addi	r2,r2,-1
 401939c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 40193a0:	e0ffff17 	ldw	r3,-4(fp)
 40193a4:	e0bff817 	ldw	r2,-32(fp)
 40193a8:	18800a2e 	bgeu	r3,r2,40193d4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 40193ac:	e0bffc17 	ldw	r2,-16(fp)
 40193b0:	10800104 	addi	r2,r2,4
 40193b4:	1009883a 	mov	r4,r2
 40193b8:	e0bfff17 	ldw	r2,-4(fp)
 40193bc:	10c00044 	addi	r3,r2,1
 40193c0:	e0ffff15 	stw	r3,-4(fp)
 40193c4:	10800003 	ldbu	r2,0(r2)
 40193c8:	10803fcc 	andi	r2,r2,255
 40193cc:	20800035 	stwio	r2,0(r4)
 40193d0:	00000c06 	br	4019404 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 40193d4:	e0bff517 	ldw	r2,-44(fp)
 40193d8:	10000826 	beq	r2,zero,40193fc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 40193dc:	e0bff517 	ldw	r2,-44(fp)
 40193e0:	10bfffc4 	addi	r2,r2,-1
 40193e4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 40193e8:	e0bffc17 	ldw	r2,-16(fp)
 40193ec:	10800104 	addi	r2,r2,4
 40193f0:	0007883a 	mov	r3,zero
 40193f4:	10c00035 	stwio	r3,0(r2)
 40193f8:	00000206 	br	4019404 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 40193fc:	00bf0004 	movi	r2,-1024
 4019400:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4019404:	e0bffa17 	ldw	r2,-24(fp)
 4019408:	1080200c 	andi	r2,r2,128
 401940c:	103fd026 	beq	r2,zero,4019350 <__alt_data_end+0xfc019350>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4019410:	e0bffc17 	ldw	r2,-16(fp)
 4019414:	10800037 	ldwio	r2,0(r2)
 4019418:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 401941c:	e0bff617 	ldw	r2,-40(fp)
 4019420:	10000426 	beq	r2,zero,4019434 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4019424:	e0bff617 	ldw	r2,-40(fp)
 4019428:	10bfffc4 	addi	r2,r2,-1
 401942c:	e0bff615 	stw	r2,-40(fp)
 4019430:	00000506 	br	4019448 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4019434:	e0800217 	ldw	r2,8(fp)
 4019438:	10c00044 	addi	r3,r2,1
 401943c:	e0c00215 	stw	r3,8(fp)
 4019440:	e0fffb17 	ldw	r3,-20(fp)
 4019444:	10c00005 	stb	r3,0(r2)
      credits++;
 4019448:	e0bff717 	ldw	r2,-36(fp)
 401944c:	10800044 	addi	r2,r2,1
 4019450:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4019454:	e0bff617 	ldw	r2,-40(fp)
 4019458:	103fbd1e 	bne	r2,zero,4019350 <__alt_data_end+0xfc019350>
 401945c:	e0c00217 	ldw	r3,8(fp)
 4019460:	e0bff917 	ldw	r2,-28(fp)
 4019464:	18bfba1e 	bne	r3,r2,4019350 <__alt_data_end+0xfc019350>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4019468:	e0bffc17 	ldw	r2,-16(fp)
 401946c:	10800204 	addi	r2,r2,8
 4019470:	10800037 	ldwio	r2,0(r2)
 4019474:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4019478:	e0bffa17 	ldw	r2,-24(fp)
 401947c:	1080080c 	andi	r2,r2,32
 4019480:	103ff926 	beq	r2,zero,4019468 <__alt_data_end+0xfc019468>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4019484:	e0800317 	ldw	r2,12(fp)
 4019488:	1080004c 	andi	r2,r2,1
 401948c:	1000041e 	bne	r2,zero,40194a0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4019490:	e0bffc17 	ldw	r2,-16(fp)
 4019494:	10800304 	addi	r2,r2,12
 4019498:	0007883a 	mov	r3,zero
 401949c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 40194a0:	e0800117 	ldw	r2,4(fp)
}
 40194a4:	e037883a 	mov	sp,fp
 40194a8:	df000017 	ldw	fp,0(sp)
 40194ac:	dec00104 	addi	sp,sp,4
 40194b0:	f800283a 	ret

040194b4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40194b4:	defffa04 	addi	sp,sp,-24
 40194b8:	dfc00515 	stw	ra,20(sp)
 40194bc:	df000415 	stw	fp,16(sp)
 40194c0:	df000404 	addi	fp,sp,16
 40194c4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40194c8:	0007883a 	mov	r3,zero
 40194cc:	e0bfff17 	ldw	r2,-4(fp)
 40194d0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40194d4:	e0bfff17 	ldw	r2,-4(fp)
 40194d8:	10800104 	addi	r2,r2,4
 40194dc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40194e0:	0005303a 	rdctl	r2,status
 40194e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40194e8:	e0fffd17 	ldw	r3,-12(fp)
 40194ec:	00bfff84 	movi	r2,-2
 40194f0:	1884703a 	and	r2,r3,r2
 40194f4:	1001703a 	wrctl	status,r2
  
  return context;
 40194f8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40194fc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4019500:	40168e40 	call	40168e4 <alt_tick>
 4019504:	e0bffc17 	ldw	r2,-16(fp)
 4019508:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401950c:	e0bffe17 	ldw	r2,-8(fp)
 4019510:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4019514:	0001883a 	nop
 4019518:	e037883a 	mov	sp,fp
 401951c:	dfc00117 	ldw	ra,4(sp)
 4019520:	df000017 	ldw	fp,0(sp)
 4019524:	dec00204 	addi	sp,sp,8
 4019528:	f800283a 	ret

0401952c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401952c:	defff804 	addi	sp,sp,-32
 4019530:	dfc00715 	stw	ra,28(sp)
 4019534:	df000615 	stw	fp,24(sp)
 4019538:	df000604 	addi	fp,sp,24
 401953c:	e13ffc15 	stw	r4,-16(fp)
 4019540:	e17ffd15 	stw	r5,-12(fp)
 4019544:	e1bffe15 	stw	r6,-8(fp)
 4019548:	e1ffff15 	stw	r7,-4(fp)
 401954c:	e0bfff17 	ldw	r2,-4(fp)
 4019550:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4019554:	d0a70317 	ldw	r2,-25588(gp)
 4019558:	1000021e 	bne	r2,zero,4019564 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401955c:	e0bffb17 	ldw	r2,-20(fp)
 4019560:	d0a70315 	stw	r2,-25588(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4019564:	e0bffc17 	ldw	r2,-16(fp)
 4019568:	10800104 	addi	r2,r2,4
 401956c:	00c001c4 	movi	r3,7
 4019570:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4019574:	d8000015 	stw	zero,0(sp)
 4019578:	e1fffc17 	ldw	r7,-16(fp)
 401957c:	018100b4 	movhi	r6,1026
 4019580:	31a52d04 	addi	r6,r6,-27468
 4019584:	e17ffe17 	ldw	r5,-8(fp)
 4019588:	e13ffd17 	ldw	r4,-12(fp)
 401958c:	4019a9c0 	call	4019a9c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4019590:	0001883a 	nop
 4019594:	e037883a 	mov	sp,fp
 4019598:	dfc00117 	ldw	ra,4(sp)
 401959c:	df000017 	ldw	fp,0(sp)
 40195a0:	dec00204 	addi	sp,sp,8
 40195a4:	f800283a 	ret

040195a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 40195a8:	defff504 	addi	sp,sp,-44
 40195ac:	df000a15 	stw	fp,40(sp)
 40195b0:	df000a04 	addi	fp,sp,40
 40195b4:	e13ffc15 	stw	r4,-16(fp)
 40195b8:	e17ffd15 	stw	r5,-12(fp)
 40195bc:	e1bffe15 	stw	r6,-8(fp)
 40195c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40195c4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40195c8:	d0a70317 	ldw	r2,-25588(gp)
  
  if (alt_ticks_per_second ())
 40195cc:	10003c26 	beq	r2,zero,40196c0 <alt_alarm_start+0x118>
  {
    if (alarm)
 40195d0:	e0bffc17 	ldw	r2,-16(fp)
 40195d4:	10003826 	beq	r2,zero,40196b8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40195d8:	e0bffc17 	ldw	r2,-16(fp)
 40195dc:	e0fffe17 	ldw	r3,-8(fp)
 40195e0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40195e4:	e0bffc17 	ldw	r2,-16(fp)
 40195e8:	e0ffff17 	ldw	r3,-4(fp)
 40195ec:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40195f0:	0005303a 	rdctl	r2,status
 40195f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40195f8:	e0fff917 	ldw	r3,-28(fp)
 40195fc:	00bfff84 	movi	r2,-2
 4019600:	1884703a 	and	r2,r3,r2
 4019604:	1001703a 	wrctl	status,r2
  
  return context;
 4019608:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401960c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4019610:	d0a70417 	ldw	r2,-25584(gp)
      
      current_nticks = alt_nticks();
 4019614:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4019618:	e0fffd17 	ldw	r3,-12(fp)
 401961c:	e0bff617 	ldw	r2,-40(fp)
 4019620:	1885883a 	add	r2,r3,r2
 4019624:	10c00044 	addi	r3,r2,1
 4019628:	e0bffc17 	ldw	r2,-16(fp)
 401962c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4019630:	e0bffc17 	ldw	r2,-16(fp)
 4019634:	10c00217 	ldw	r3,8(r2)
 4019638:	e0bff617 	ldw	r2,-40(fp)
 401963c:	1880042e 	bgeu	r3,r2,4019650 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4019640:	e0bffc17 	ldw	r2,-16(fp)
 4019644:	00c00044 	movi	r3,1
 4019648:	10c00405 	stb	r3,16(r2)
 401964c:	00000206 	br	4019658 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4019650:	e0bffc17 	ldw	r2,-16(fp)
 4019654:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4019658:	e0bffc17 	ldw	r2,-16(fp)
 401965c:	d0e01204 	addi	r3,gp,-32696
 4019660:	e0fffa15 	stw	r3,-24(fp)
 4019664:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4019668:	e0bffb17 	ldw	r2,-20(fp)
 401966c:	e0fffa17 	ldw	r3,-24(fp)
 4019670:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4019674:	e0bffa17 	ldw	r2,-24(fp)
 4019678:	10c00017 	ldw	r3,0(r2)
 401967c:	e0bffb17 	ldw	r2,-20(fp)
 4019680:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4019684:	e0bffa17 	ldw	r2,-24(fp)
 4019688:	10800017 	ldw	r2,0(r2)
 401968c:	e0fffb17 	ldw	r3,-20(fp)
 4019690:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4019694:	e0bffa17 	ldw	r2,-24(fp)
 4019698:	e0fffb17 	ldw	r3,-20(fp)
 401969c:	10c00015 	stw	r3,0(r2)
 40196a0:	e0bff817 	ldw	r2,-32(fp)
 40196a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40196a8:	e0bff717 	ldw	r2,-36(fp)
 40196ac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40196b0:	0005883a 	mov	r2,zero
 40196b4:	00000306 	br	40196c4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 40196b8:	00bffa84 	movi	r2,-22
 40196bc:	00000106 	br	40196c4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 40196c0:	00bfde84 	movi	r2,-134
  }
}
 40196c4:	e037883a 	mov	sp,fp
 40196c8:	df000017 	ldw	fp,0(sp)
 40196cc:	dec00104 	addi	sp,sp,4
 40196d0:	f800283a 	ret

040196d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 40196d4:	defffa04 	addi	sp,sp,-24
 40196d8:	dfc00515 	stw	ra,20(sp)
 40196dc:	df000415 	stw	fp,16(sp)
 40196e0:	df000404 	addi	fp,sp,16
 40196e4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 40196e8:	00800244 	movi	r2,9
 40196ec:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40196f0:	014003f4 	movhi	r5,15
 40196f4:	29509004 	addi	r5,r5,16960
 40196f8:	e13ffd17 	ldw	r4,-12(fp)
 40196fc:	4007eb40 	call	4007eb4 <__mulsi3>
 4019700:	100b883a 	mov	r5,r2
 4019704:	0100bef4 	movhi	r4,763
 4019708:	213c2004 	addi	r4,r4,-3968
 401970c:	4007df80 	call	4007df8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4019710:	100b883a 	mov	r5,r2
 4019714:	01200034 	movhi	r4,32768
 4019718:	213fffc4 	addi	r4,r4,-1
 401971c:	4007df80 	call	4007df8 <__udivsi3>
 4019720:	100b883a 	mov	r5,r2
 4019724:	e13fff17 	ldw	r4,-4(fp)
 4019728:	4007df80 	call	4007df8 <__udivsi3>
 401972c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4019730:	e0bffe17 	ldw	r2,-8(fp)
 4019734:	10002a26 	beq	r2,zero,40197e0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4019738:	e03ffc15 	stw	zero,-16(fp)
 401973c:	00001706 	br	401979c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4019740:	00a00034 	movhi	r2,32768
 4019744:	10bfffc4 	addi	r2,r2,-1
 4019748:	10bfffc4 	addi	r2,r2,-1
 401974c:	103ffe1e 	bne	r2,zero,4019748 <__alt_data_end+0xfc019748>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4019750:	014003f4 	movhi	r5,15
 4019754:	29509004 	addi	r5,r5,16960
 4019758:	e13ffd17 	ldw	r4,-12(fp)
 401975c:	4007eb40 	call	4007eb4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4019760:	100b883a 	mov	r5,r2
 4019764:	0100bef4 	movhi	r4,763
 4019768:	213c2004 	addi	r4,r4,-3968
 401976c:	4007df80 	call	4007df8 <__udivsi3>
 4019770:	100b883a 	mov	r5,r2
 4019774:	01200034 	movhi	r4,32768
 4019778:	213fffc4 	addi	r4,r4,-1
 401977c:	4007df80 	call	4007df8 <__udivsi3>
 4019780:	1007883a 	mov	r3,r2
 4019784:	e0bfff17 	ldw	r2,-4(fp)
 4019788:	10c5c83a 	sub	r2,r2,r3
 401978c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4019790:	e0bffc17 	ldw	r2,-16(fp)
 4019794:	10800044 	addi	r2,r2,1
 4019798:	e0bffc15 	stw	r2,-16(fp)
 401979c:	e0fffc17 	ldw	r3,-16(fp)
 40197a0:	e0bffe17 	ldw	r2,-8(fp)
 40197a4:	18bfe616 	blt	r3,r2,4019740 <__alt_data_end+0xfc019740>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40197a8:	014003f4 	movhi	r5,15
 40197ac:	29509004 	addi	r5,r5,16960
 40197b0:	e13ffd17 	ldw	r4,-12(fp)
 40197b4:	4007eb40 	call	4007eb4 <__mulsi3>
 40197b8:	100b883a 	mov	r5,r2
 40197bc:	0100bef4 	movhi	r4,763
 40197c0:	213c2004 	addi	r4,r4,-3968
 40197c4:	4007df80 	call	4007df8 <__udivsi3>
 40197c8:	e17fff17 	ldw	r5,-4(fp)
 40197cc:	1009883a 	mov	r4,r2
 40197d0:	4007eb40 	call	4007eb4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40197d4:	10bfffc4 	addi	r2,r2,-1
 40197d8:	103ffe1e 	bne	r2,zero,40197d4 <__alt_data_end+0xfc0197d4>
 40197dc:	00000d06 	br	4019814 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40197e0:	014003f4 	movhi	r5,15
 40197e4:	29509004 	addi	r5,r5,16960
 40197e8:	e13ffd17 	ldw	r4,-12(fp)
 40197ec:	4007eb40 	call	4007eb4 <__mulsi3>
 40197f0:	100b883a 	mov	r5,r2
 40197f4:	0100bef4 	movhi	r4,763
 40197f8:	213c2004 	addi	r4,r4,-3968
 40197fc:	4007df80 	call	4007df8 <__udivsi3>
 4019800:	e17fff17 	ldw	r5,-4(fp)
 4019804:	1009883a 	mov	r4,r2
 4019808:	4007eb40 	call	4007eb4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401980c:	10bfffc4 	addi	r2,r2,-1
 4019810:	00bffe16 	blt	zero,r2,401980c <__alt_data_end+0xfc01980c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4019814:	0005883a 	mov	r2,zero
}
 4019818:	e037883a 	mov	sp,fp
 401981c:	dfc00117 	ldw	ra,4(sp)
 4019820:	df000017 	ldw	fp,0(sp)
 4019824:	dec00204 	addi	sp,sp,8
 4019828:	f800283a 	ret

0401982c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401982c:	deffff04 	addi	sp,sp,-4
 4019830:	df000015 	stw	fp,0(sp)
 4019834:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4019838:	0001883a 	nop
 401983c:	e037883a 	mov	sp,fp
 4019840:	df000017 	ldw	fp,0(sp)
 4019844:	dec00104 	addi	sp,sp,4
 4019848:	f800283a 	ret

0401984c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401984c:	defffe04 	addi	sp,sp,-8
 4019850:	dfc00115 	stw	ra,4(sp)
 4019854:	df000015 	stw	fp,0(sp)
 4019858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401985c:	d0a01017 	ldw	r2,-32704(gp)
 4019860:	10000326 	beq	r2,zero,4019870 <alt_get_errno+0x24>
 4019864:	d0a01017 	ldw	r2,-32704(gp)
 4019868:	103ee83a 	callr	r2
 401986c:	00000106 	br	4019874 <alt_get_errno+0x28>
 4019870:	d0a6fc04 	addi	r2,gp,-25616
}
 4019874:	e037883a 	mov	sp,fp
 4019878:	dfc00117 	ldw	ra,4(sp)
 401987c:	df000017 	ldw	fp,0(sp)
 4019880:	dec00204 	addi	sp,sp,8
 4019884:	f800283a 	ret

04019888 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4019888:	defffa04 	addi	sp,sp,-24
 401988c:	dfc00515 	stw	ra,20(sp)
 4019890:	df000415 	stw	fp,16(sp)
 4019894:	df000404 	addi	fp,sp,16
 4019898:	e13ffe15 	stw	r4,-8(fp)
 401989c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40198a0:	e0bffe17 	ldw	r2,-8(fp)
 40198a4:	10000326 	beq	r2,zero,40198b4 <alt_dev_llist_insert+0x2c>
 40198a8:	e0bffe17 	ldw	r2,-8(fp)
 40198ac:	10800217 	ldw	r2,8(r2)
 40198b0:	1000061e 	bne	r2,zero,40198cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40198b4:	401984c0 	call	401984c <alt_get_errno>
 40198b8:	1007883a 	mov	r3,r2
 40198bc:	00800584 	movi	r2,22
 40198c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40198c4:	00bffa84 	movi	r2,-22
 40198c8:	00001306 	br	4019918 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40198cc:	e0bffe17 	ldw	r2,-8(fp)
 40198d0:	e0ffff17 	ldw	r3,-4(fp)
 40198d4:	e0fffc15 	stw	r3,-16(fp)
 40198d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40198dc:	e0bffd17 	ldw	r2,-12(fp)
 40198e0:	e0fffc17 	ldw	r3,-16(fp)
 40198e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40198e8:	e0bffc17 	ldw	r2,-16(fp)
 40198ec:	10c00017 	ldw	r3,0(r2)
 40198f0:	e0bffd17 	ldw	r2,-12(fp)
 40198f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40198f8:	e0bffc17 	ldw	r2,-16(fp)
 40198fc:	10800017 	ldw	r2,0(r2)
 4019900:	e0fffd17 	ldw	r3,-12(fp)
 4019904:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4019908:	e0bffc17 	ldw	r2,-16(fp)
 401990c:	e0fffd17 	ldw	r3,-12(fp)
 4019910:	10c00015 	stw	r3,0(r2)

  return 0;  
 4019914:	0005883a 	mov	r2,zero
}
 4019918:	e037883a 	mov	sp,fp
 401991c:	dfc00117 	ldw	ra,4(sp)
 4019920:	df000017 	ldw	fp,0(sp)
 4019924:	dec00204 	addi	sp,sp,8
 4019928:	f800283a 	ret

0401992c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401992c:	defffd04 	addi	sp,sp,-12
 4019930:	dfc00215 	stw	ra,8(sp)
 4019934:	df000115 	stw	fp,4(sp)
 4019938:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401993c:	008100b4 	movhi	r2,1026
 4019940:	10aa2904 	addi	r2,r2,-22364
 4019944:	e0bfff15 	stw	r2,-4(fp)
 4019948:	00000606 	br	4019964 <_do_ctors+0x38>
        (*ctor) (); 
 401994c:	e0bfff17 	ldw	r2,-4(fp)
 4019950:	10800017 	ldw	r2,0(r2)
 4019954:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4019958:	e0bfff17 	ldw	r2,-4(fp)
 401995c:	10bfff04 	addi	r2,r2,-4
 4019960:	e0bfff15 	stw	r2,-4(fp)
 4019964:	e0ffff17 	ldw	r3,-4(fp)
 4019968:	008100b4 	movhi	r2,1026
 401996c:	10aa2a04 	addi	r2,r2,-22360
 4019970:	18bff62e 	bgeu	r3,r2,401994c <__alt_data_end+0xfc01994c>
        (*ctor) (); 
}
 4019974:	0001883a 	nop
 4019978:	e037883a 	mov	sp,fp
 401997c:	dfc00117 	ldw	ra,4(sp)
 4019980:	df000017 	ldw	fp,0(sp)
 4019984:	dec00204 	addi	sp,sp,8
 4019988:	f800283a 	ret

0401998c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401998c:	defffd04 	addi	sp,sp,-12
 4019990:	dfc00215 	stw	ra,8(sp)
 4019994:	df000115 	stw	fp,4(sp)
 4019998:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401999c:	008100b4 	movhi	r2,1026
 40199a0:	10aa2904 	addi	r2,r2,-22364
 40199a4:	e0bfff15 	stw	r2,-4(fp)
 40199a8:	00000606 	br	40199c4 <_do_dtors+0x38>
        (*dtor) (); 
 40199ac:	e0bfff17 	ldw	r2,-4(fp)
 40199b0:	10800017 	ldw	r2,0(r2)
 40199b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40199b8:	e0bfff17 	ldw	r2,-4(fp)
 40199bc:	10bfff04 	addi	r2,r2,-4
 40199c0:	e0bfff15 	stw	r2,-4(fp)
 40199c4:	e0ffff17 	ldw	r3,-4(fp)
 40199c8:	008100b4 	movhi	r2,1026
 40199cc:	10aa2a04 	addi	r2,r2,-22360
 40199d0:	18bff62e 	bgeu	r3,r2,40199ac <__alt_data_end+0xfc0199ac>
        (*dtor) (); 
}
 40199d4:	0001883a 	nop
 40199d8:	e037883a 	mov	sp,fp
 40199dc:	dfc00117 	ldw	ra,4(sp)
 40199e0:	df000017 	ldw	fp,0(sp)
 40199e4:	dec00204 	addi	sp,sp,8
 40199e8:	f800283a 	ret

040199ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40199ec:	defffa04 	addi	sp,sp,-24
 40199f0:	dfc00515 	stw	ra,20(sp)
 40199f4:	df000415 	stw	fp,16(sp)
 40199f8:	df000404 	addi	fp,sp,16
 40199fc:	e13ffe15 	stw	r4,-8(fp)
 4019a00:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4019a04:	e0bfff17 	ldw	r2,-4(fp)
 4019a08:	10800017 	ldw	r2,0(r2)
 4019a0c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4019a10:	e13ffe17 	ldw	r4,-8(fp)
 4019a14:	400c37c0 	call	400c37c <strlen>
 4019a18:	10800044 	addi	r2,r2,1
 4019a1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4019a20:	00000d06 	br	4019a58 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4019a24:	e0bffc17 	ldw	r2,-16(fp)
 4019a28:	10800217 	ldw	r2,8(r2)
 4019a2c:	e0fffd17 	ldw	r3,-12(fp)
 4019a30:	180d883a 	mov	r6,r3
 4019a34:	e17ffe17 	ldw	r5,-8(fp)
 4019a38:	1009883a 	mov	r4,r2
 4019a3c:	401a3f80 	call	401a3f8 <memcmp>
 4019a40:	1000021e 	bne	r2,zero,4019a4c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4019a44:	e0bffc17 	ldw	r2,-16(fp)
 4019a48:	00000706 	br	4019a68 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4019a4c:	e0bffc17 	ldw	r2,-16(fp)
 4019a50:	10800017 	ldw	r2,0(r2)
 4019a54:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4019a58:	e0fffc17 	ldw	r3,-16(fp)
 4019a5c:	e0bfff17 	ldw	r2,-4(fp)
 4019a60:	18bff01e 	bne	r3,r2,4019a24 <__alt_data_end+0xfc019a24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4019a64:	0005883a 	mov	r2,zero
}
 4019a68:	e037883a 	mov	sp,fp
 4019a6c:	dfc00117 	ldw	ra,4(sp)
 4019a70:	df000017 	ldw	fp,0(sp)
 4019a74:	dec00204 	addi	sp,sp,8
 4019a78:	f800283a 	ret

04019a7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4019a7c:	deffff04 	addi	sp,sp,-4
 4019a80:	df000015 	stw	fp,0(sp)
 4019a84:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4019a88:	0001883a 	nop
 4019a8c:	e037883a 	mov	sp,fp
 4019a90:	df000017 	ldw	fp,0(sp)
 4019a94:	dec00104 	addi	sp,sp,4
 4019a98:	f800283a 	ret

04019a9c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4019a9c:	defff904 	addi	sp,sp,-28
 4019aa0:	dfc00615 	stw	ra,24(sp)
 4019aa4:	df000515 	stw	fp,20(sp)
 4019aa8:	df000504 	addi	fp,sp,20
 4019aac:	e13ffc15 	stw	r4,-16(fp)
 4019ab0:	e17ffd15 	stw	r5,-12(fp)
 4019ab4:	e1bffe15 	stw	r6,-8(fp)
 4019ab8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4019abc:	e0800217 	ldw	r2,8(fp)
 4019ac0:	d8800015 	stw	r2,0(sp)
 4019ac4:	e1ffff17 	ldw	r7,-4(fp)
 4019ac8:	e1bffe17 	ldw	r6,-8(fp)
 4019acc:	e17ffd17 	ldw	r5,-12(fp)
 4019ad0:	e13ffc17 	ldw	r4,-16(fp)
 4019ad4:	4019c4c0 	call	4019c4c <alt_iic_isr_register>
}  
 4019ad8:	e037883a 	mov	sp,fp
 4019adc:	dfc00117 	ldw	ra,4(sp)
 4019ae0:	df000017 	ldw	fp,0(sp)
 4019ae4:	dec00204 	addi	sp,sp,8
 4019ae8:	f800283a 	ret

04019aec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4019aec:	defff904 	addi	sp,sp,-28
 4019af0:	df000615 	stw	fp,24(sp)
 4019af4:	df000604 	addi	fp,sp,24
 4019af8:	e13ffe15 	stw	r4,-8(fp)
 4019afc:	e17fff15 	stw	r5,-4(fp)
 4019b00:	e0bfff17 	ldw	r2,-4(fp)
 4019b04:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019b08:	0005303a 	rdctl	r2,status
 4019b0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019b10:	e0fffb17 	ldw	r3,-20(fp)
 4019b14:	00bfff84 	movi	r2,-2
 4019b18:	1884703a 	and	r2,r3,r2
 4019b1c:	1001703a 	wrctl	status,r2
  
  return context;
 4019b20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4019b24:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4019b28:	00c00044 	movi	r3,1
 4019b2c:	e0bffa17 	ldw	r2,-24(fp)
 4019b30:	1884983a 	sll	r2,r3,r2
 4019b34:	1007883a 	mov	r3,r2
 4019b38:	d0a70517 	ldw	r2,-25580(gp)
 4019b3c:	1884b03a 	or	r2,r3,r2
 4019b40:	d0a70515 	stw	r2,-25580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4019b44:	d0a70517 	ldw	r2,-25580(gp)
 4019b48:	100170fa 	wrctl	ienable,r2
 4019b4c:	e0bffc17 	ldw	r2,-16(fp)
 4019b50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019b54:	e0bffd17 	ldw	r2,-12(fp)
 4019b58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4019b5c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4019b60:	0001883a 	nop
}
 4019b64:	e037883a 	mov	sp,fp
 4019b68:	df000017 	ldw	fp,0(sp)
 4019b6c:	dec00104 	addi	sp,sp,4
 4019b70:	f800283a 	ret

04019b74 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4019b74:	defff904 	addi	sp,sp,-28
 4019b78:	df000615 	stw	fp,24(sp)
 4019b7c:	df000604 	addi	fp,sp,24
 4019b80:	e13ffe15 	stw	r4,-8(fp)
 4019b84:	e17fff15 	stw	r5,-4(fp)
 4019b88:	e0bfff17 	ldw	r2,-4(fp)
 4019b8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019b90:	0005303a 	rdctl	r2,status
 4019b94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019b98:	e0fffb17 	ldw	r3,-20(fp)
 4019b9c:	00bfff84 	movi	r2,-2
 4019ba0:	1884703a 	and	r2,r3,r2
 4019ba4:	1001703a 	wrctl	status,r2
  
  return context;
 4019ba8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4019bac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4019bb0:	00c00044 	movi	r3,1
 4019bb4:	e0bffa17 	ldw	r2,-24(fp)
 4019bb8:	1884983a 	sll	r2,r3,r2
 4019bbc:	0084303a 	nor	r2,zero,r2
 4019bc0:	1007883a 	mov	r3,r2
 4019bc4:	d0a70517 	ldw	r2,-25580(gp)
 4019bc8:	1884703a 	and	r2,r3,r2
 4019bcc:	d0a70515 	stw	r2,-25580(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4019bd0:	d0a70517 	ldw	r2,-25580(gp)
 4019bd4:	100170fa 	wrctl	ienable,r2
 4019bd8:	e0bffc17 	ldw	r2,-16(fp)
 4019bdc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019be0:	e0bffd17 	ldw	r2,-12(fp)
 4019be4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4019be8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4019bec:	0001883a 	nop
}
 4019bf0:	e037883a 	mov	sp,fp
 4019bf4:	df000017 	ldw	fp,0(sp)
 4019bf8:	dec00104 	addi	sp,sp,4
 4019bfc:	f800283a 	ret

04019c00 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4019c00:	defffc04 	addi	sp,sp,-16
 4019c04:	df000315 	stw	fp,12(sp)
 4019c08:	df000304 	addi	fp,sp,12
 4019c0c:	e13ffe15 	stw	r4,-8(fp)
 4019c10:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4019c14:	000530fa 	rdctl	r2,ienable
 4019c18:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4019c1c:	00c00044 	movi	r3,1
 4019c20:	e0bfff17 	ldw	r2,-4(fp)
 4019c24:	1884983a 	sll	r2,r3,r2
 4019c28:	1007883a 	mov	r3,r2
 4019c2c:	e0bffd17 	ldw	r2,-12(fp)
 4019c30:	1884703a 	and	r2,r3,r2
 4019c34:	1004c03a 	cmpne	r2,r2,zero
 4019c38:	10803fcc 	andi	r2,r2,255
}
 4019c3c:	e037883a 	mov	sp,fp
 4019c40:	df000017 	ldw	fp,0(sp)
 4019c44:	dec00104 	addi	sp,sp,4
 4019c48:	f800283a 	ret

04019c4c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4019c4c:	defff504 	addi	sp,sp,-44
 4019c50:	dfc00a15 	stw	ra,40(sp)
 4019c54:	df000915 	stw	fp,36(sp)
 4019c58:	df000904 	addi	fp,sp,36
 4019c5c:	e13ffc15 	stw	r4,-16(fp)
 4019c60:	e17ffd15 	stw	r5,-12(fp)
 4019c64:	e1bffe15 	stw	r6,-8(fp)
 4019c68:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4019c6c:	00bffa84 	movi	r2,-22
 4019c70:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4019c74:	e0bffd17 	ldw	r2,-12(fp)
 4019c78:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4019c7c:	e0bff817 	ldw	r2,-32(fp)
 4019c80:	10800808 	cmpgei	r2,r2,32
 4019c84:	1000271e 	bne	r2,zero,4019d24 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019c88:	0005303a 	rdctl	r2,status
 4019c8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019c90:	e0fffb17 	ldw	r3,-20(fp)
 4019c94:	00bfff84 	movi	r2,-2
 4019c98:	1884703a 	and	r2,r3,r2
 4019c9c:	1001703a 	wrctl	status,r2
  
  return context;
 4019ca0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4019ca4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4019ca8:	008100b4 	movhi	r2,1026
 4019cac:	10ba4404 	addi	r2,r2,-5872
 4019cb0:	e0fff817 	ldw	r3,-32(fp)
 4019cb4:	180690fa 	slli	r3,r3,3
 4019cb8:	10c5883a 	add	r2,r2,r3
 4019cbc:	e0fffe17 	ldw	r3,-8(fp)
 4019cc0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4019cc4:	008100b4 	movhi	r2,1026
 4019cc8:	10ba4404 	addi	r2,r2,-5872
 4019ccc:	e0fff817 	ldw	r3,-32(fp)
 4019cd0:	180690fa 	slli	r3,r3,3
 4019cd4:	10c5883a 	add	r2,r2,r3
 4019cd8:	10800104 	addi	r2,r2,4
 4019cdc:	e0ffff17 	ldw	r3,-4(fp)
 4019ce0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4019ce4:	e0bffe17 	ldw	r2,-8(fp)
 4019ce8:	10000526 	beq	r2,zero,4019d00 <alt_iic_isr_register+0xb4>
 4019cec:	e0bff817 	ldw	r2,-32(fp)
 4019cf0:	100b883a 	mov	r5,r2
 4019cf4:	e13ffc17 	ldw	r4,-16(fp)
 4019cf8:	4019aec0 	call	4019aec <alt_ic_irq_enable>
 4019cfc:	00000406 	br	4019d10 <alt_iic_isr_register+0xc4>
 4019d00:	e0bff817 	ldw	r2,-32(fp)
 4019d04:	100b883a 	mov	r5,r2
 4019d08:	e13ffc17 	ldw	r4,-16(fp)
 4019d0c:	4019b740 	call	4019b74 <alt_ic_irq_disable>
 4019d10:	e0bff715 	stw	r2,-36(fp)
 4019d14:	e0bffa17 	ldw	r2,-24(fp)
 4019d18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019d1c:	e0bff917 	ldw	r2,-28(fp)
 4019d20:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4019d24:	e0bff717 	ldw	r2,-36(fp)
}
 4019d28:	e037883a 	mov	sp,fp
 4019d2c:	dfc00117 	ldw	ra,4(sp)
 4019d30:	df000017 	ldw	fp,0(sp)
 4019d34:	dec00204 	addi	sp,sp,8
 4019d38:	f800283a 	ret

04019d3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4019d3c:	defff804 	addi	sp,sp,-32
 4019d40:	dfc00715 	stw	ra,28(sp)
 4019d44:	df000615 	stw	fp,24(sp)
 4019d48:	dc000515 	stw	r16,20(sp)
 4019d4c:	df000604 	addi	fp,sp,24
 4019d50:	e13ffb15 	stw	r4,-20(fp)
 4019d54:	e17ffc15 	stw	r5,-16(fp)
 4019d58:	e1bffd15 	stw	r6,-12(fp)
 4019d5c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4019d60:	e1bffe17 	ldw	r6,-8(fp)
 4019d64:	e17ffd17 	ldw	r5,-12(fp)
 4019d68:	e13ffc17 	ldw	r4,-16(fp)
 4019d6c:	4019fc40 	call	4019fc4 <open>
 4019d70:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4019d74:	e0bffa17 	ldw	r2,-24(fp)
 4019d78:	10002216 	blt	r2,zero,4019e04 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4019d7c:	040100b4 	movhi	r16,1026
 4019d80:	842e5104 	addi	r16,r16,-18108
 4019d84:	e0bffa17 	ldw	r2,-24(fp)
 4019d88:	01400304 	movi	r5,12
 4019d8c:	1009883a 	mov	r4,r2
 4019d90:	4007eb40 	call	4007eb4 <__mulsi3>
 4019d94:	8085883a 	add	r2,r16,r2
 4019d98:	10c00017 	ldw	r3,0(r2)
 4019d9c:	e0bffb17 	ldw	r2,-20(fp)
 4019da0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4019da4:	040100b4 	movhi	r16,1026
 4019da8:	842e5104 	addi	r16,r16,-18108
 4019dac:	e0bffa17 	ldw	r2,-24(fp)
 4019db0:	01400304 	movi	r5,12
 4019db4:	1009883a 	mov	r4,r2
 4019db8:	4007eb40 	call	4007eb4 <__mulsi3>
 4019dbc:	8085883a 	add	r2,r16,r2
 4019dc0:	10800104 	addi	r2,r2,4
 4019dc4:	10c00017 	ldw	r3,0(r2)
 4019dc8:	e0bffb17 	ldw	r2,-20(fp)
 4019dcc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4019dd0:	040100b4 	movhi	r16,1026
 4019dd4:	842e5104 	addi	r16,r16,-18108
 4019dd8:	e0bffa17 	ldw	r2,-24(fp)
 4019ddc:	01400304 	movi	r5,12
 4019de0:	1009883a 	mov	r4,r2
 4019de4:	4007eb40 	call	4007eb4 <__mulsi3>
 4019de8:	8085883a 	add	r2,r16,r2
 4019dec:	10800204 	addi	r2,r2,8
 4019df0:	10c00017 	ldw	r3,0(r2)
 4019df4:	e0bffb17 	ldw	r2,-20(fp)
 4019df8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4019dfc:	e13ffa17 	ldw	r4,-24(fp)
 4019e00:	40167140 	call	4016714 <alt_release_fd>
  }
} 
 4019e04:	0001883a 	nop
 4019e08:	e6ffff04 	addi	sp,fp,-4
 4019e0c:	dfc00217 	ldw	ra,8(sp)
 4019e10:	df000117 	ldw	fp,4(sp)
 4019e14:	dc000017 	ldw	r16,0(sp)
 4019e18:	dec00304 	addi	sp,sp,12
 4019e1c:	f800283a 	ret

04019e20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4019e20:	defffb04 	addi	sp,sp,-20
 4019e24:	dfc00415 	stw	ra,16(sp)
 4019e28:	df000315 	stw	fp,12(sp)
 4019e2c:	df000304 	addi	fp,sp,12
 4019e30:	e13ffd15 	stw	r4,-12(fp)
 4019e34:	e17ffe15 	stw	r5,-8(fp)
 4019e38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4019e3c:	01c07fc4 	movi	r7,511
 4019e40:	01800044 	movi	r6,1
 4019e44:	e17ffd17 	ldw	r5,-12(fp)
 4019e48:	010100b4 	movhi	r4,1026
 4019e4c:	212e5404 	addi	r4,r4,-18096
 4019e50:	4019d3c0 	call	4019d3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4019e54:	01c07fc4 	movi	r7,511
 4019e58:	000d883a 	mov	r6,zero
 4019e5c:	e17ffe17 	ldw	r5,-8(fp)
 4019e60:	010100b4 	movhi	r4,1026
 4019e64:	212e5104 	addi	r4,r4,-18108
 4019e68:	4019d3c0 	call	4019d3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4019e6c:	01c07fc4 	movi	r7,511
 4019e70:	01800044 	movi	r6,1
 4019e74:	e17fff17 	ldw	r5,-4(fp)
 4019e78:	010100b4 	movhi	r4,1026
 4019e7c:	212e5704 	addi	r4,r4,-18084
 4019e80:	4019d3c0 	call	4019d3c <alt_open_fd>
}  
 4019e84:	0001883a 	nop
 4019e88:	e037883a 	mov	sp,fp
 4019e8c:	dfc00117 	ldw	ra,4(sp)
 4019e90:	df000017 	ldw	fp,0(sp)
 4019e94:	dec00204 	addi	sp,sp,8
 4019e98:	f800283a 	ret

04019e9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4019e9c:	defffe04 	addi	sp,sp,-8
 4019ea0:	dfc00115 	stw	ra,4(sp)
 4019ea4:	df000015 	stw	fp,0(sp)
 4019ea8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4019eac:	d0a01017 	ldw	r2,-32704(gp)
 4019eb0:	10000326 	beq	r2,zero,4019ec0 <alt_get_errno+0x24>
 4019eb4:	d0a01017 	ldw	r2,-32704(gp)
 4019eb8:	103ee83a 	callr	r2
 4019ebc:	00000106 	br	4019ec4 <alt_get_errno+0x28>
 4019ec0:	d0a6fc04 	addi	r2,gp,-25616
}
 4019ec4:	e037883a 	mov	sp,fp
 4019ec8:	dfc00117 	ldw	ra,4(sp)
 4019ecc:	df000017 	ldw	fp,0(sp)
 4019ed0:	dec00204 	addi	sp,sp,8
 4019ed4:	f800283a 	ret

04019ed8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4019ed8:	defffb04 	addi	sp,sp,-20
 4019edc:	dfc00415 	stw	ra,16(sp)
 4019ee0:	df000315 	stw	fp,12(sp)
 4019ee4:	dc000215 	stw	r16,8(sp)
 4019ee8:	df000304 	addi	fp,sp,12
 4019eec:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4019ef0:	e0bffe17 	ldw	r2,-8(fp)
 4019ef4:	10800217 	ldw	r2,8(r2)
 4019ef8:	10d00034 	orhi	r3,r2,16384
 4019efc:	e0bffe17 	ldw	r2,-8(fp)
 4019f00:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4019f04:	e03ffd15 	stw	zero,-12(fp)
 4019f08:	00002306 	br	4019f98 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4019f0c:	040100b4 	movhi	r16,1026
 4019f10:	842e5104 	addi	r16,r16,-18108
 4019f14:	e0bffd17 	ldw	r2,-12(fp)
 4019f18:	01400304 	movi	r5,12
 4019f1c:	1009883a 	mov	r4,r2
 4019f20:	4007eb40 	call	4007eb4 <__mulsi3>
 4019f24:	8085883a 	add	r2,r16,r2
 4019f28:	10c00017 	ldw	r3,0(r2)
 4019f2c:	e0bffe17 	ldw	r2,-8(fp)
 4019f30:	10800017 	ldw	r2,0(r2)
 4019f34:	1880151e 	bne	r3,r2,4019f8c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4019f38:	040100b4 	movhi	r16,1026
 4019f3c:	842e5104 	addi	r16,r16,-18108
 4019f40:	e0bffd17 	ldw	r2,-12(fp)
 4019f44:	01400304 	movi	r5,12
 4019f48:	1009883a 	mov	r4,r2
 4019f4c:	4007eb40 	call	4007eb4 <__mulsi3>
 4019f50:	8085883a 	add	r2,r16,r2
 4019f54:	10800204 	addi	r2,r2,8
 4019f58:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4019f5c:	10000b0e 	bge	r2,zero,4019f8c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4019f60:	01400304 	movi	r5,12
 4019f64:	e13ffd17 	ldw	r4,-12(fp)
 4019f68:	4007eb40 	call	4007eb4 <__mulsi3>
 4019f6c:	1007883a 	mov	r3,r2
 4019f70:	008100b4 	movhi	r2,1026
 4019f74:	10ae5104 	addi	r2,r2,-18108
 4019f78:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4019f7c:	e0bffe17 	ldw	r2,-8(fp)
 4019f80:	18800226 	beq	r3,r2,4019f8c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4019f84:	00bffcc4 	movi	r2,-13
 4019f88:	00000806 	br	4019fac <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4019f8c:	e0bffd17 	ldw	r2,-12(fp)
 4019f90:	10800044 	addi	r2,r2,1
 4019f94:	e0bffd15 	stw	r2,-12(fp)
 4019f98:	d0a00f17 	ldw	r2,-32708(gp)
 4019f9c:	1007883a 	mov	r3,r2
 4019fa0:	e0bffd17 	ldw	r2,-12(fp)
 4019fa4:	18bfd92e 	bgeu	r3,r2,4019f0c <__alt_data_end+0xfc019f0c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4019fa8:	0005883a 	mov	r2,zero
}
 4019fac:	e6ffff04 	addi	sp,fp,-4
 4019fb0:	dfc00217 	ldw	ra,8(sp)
 4019fb4:	df000117 	ldw	fp,4(sp)
 4019fb8:	dc000017 	ldw	r16,0(sp)
 4019fbc:	dec00304 	addi	sp,sp,12
 4019fc0:	f800283a 	ret

04019fc4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4019fc4:	defff604 	addi	sp,sp,-40
 4019fc8:	dfc00915 	stw	ra,36(sp)
 4019fcc:	df000815 	stw	fp,32(sp)
 4019fd0:	df000804 	addi	fp,sp,32
 4019fd4:	e13ffd15 	stw	r4,-12(fp)
 4019fd8:	e17ffe15 	stw	r5,-8(fp)
 4019fdc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4019fe0:	00bfffc4 	movi	r2,-1
 4019fe4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4019fe8:	00bffb44 	movi	r2,-19
 4019fec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4019ff0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4019ff4:	d1600d04 	addi	r5,gp,-32716
 4019ff8:	e13ffd17 	ldw	r4,-12(fp)
 4019ffc:	40199ec0 	call	40199ec <alt_find_dev>
 401a000:	e0bff815 	stw	r2,-32(fp)
 401a004:	e0bff817 	ldw	r2,-32(fp)
 401a008:	1000051e 	bne	r2,zero,401a020 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401a00c:	e13ffd17 	ldw	r4,-12(fp)
 401a010:	401a1440 	call	401a144 <alt_find_file>
 401a014:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401a018:	00800044 	movi	r2,1
 401a01c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401a020:	e0bff817 	ldw	r2,-32(fp)
 401a024:	10002b26 	beq	r2,zero,401a0d4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401a028:	e13ff817 	ldw	r4,-32(fp)
 401a02c:	401a24c0 	call	401a24c <alt_get_fd>
 401a030:	e0bff915 	stw	r2,-28(fp)
 401a034:	e0bff917 	ldw	r2,-28(fp)
 401a038:	1000030e 	bge	r2,zero,401a048 <open+0x84>
    {
      status = index;
 401a03c:	e0bff917 	ldw	r2,-28(fp)
 401a040:	e0bffa15 	stw	r2,-24(fp)
 401a044:	00002506 	br	401a0dc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 401a048:	01400304 	movi	r5,12
 401a04c:	e13ff917 	ldw	r4,-28(fp)
 401a050:	4007eb40 	call	4007eb4 <__mulsi3>
 401a054:	1007883a 	mov	r3,r2
 401a058:	008100b4 	movhi	r2,1026
 401a05c:	10ae5104 	addi	r2,r2,-18108
 401a060:	1885883a 	add	r2,r3,r2
 401a064:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401a068:	e0fffe17 	ldw	r3,-8(fp)
 401a06c:	00900034 	movhi	r2,16384
 401a070:	10bfffc4 	addi	r2,r2,-1
 401a074:	1886703a 	and	r3,r3,r2
 401a078:	e0bffc17 	ldw	r2,-16(fp)
 401a07c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401a080:	e0bffb17 	ldw	r2,-20(fp)
 401a084:	1000051e 	bne	r2,zero,401a09c <open+0xd8>
 401a088:	e13ffc17 	ldw	r4,-16(fp)
 401a08c:	4019ed80 	call	4019ed8 <alt_file_locked>
 401a090:	e0bffa15 	stw	r2,-24(fp)
 401a094:	e0bffa17 	ldw	r2,-24(fp)
 401a098:	10001016 	blt	r2,zero,401a0dc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401a09c:	e0bff817 	ldw	r2,-32(fp)
 401a0a0:	10800317 	ldw	r2,12(r2)
 401a0a4:	10000826 	beq	r2,zero,401a0c8 <open+0x104>
 401a0a8:	e0bff817 	ldw	r2,-32(fp)
 401a0ac:	10800317 	ldw	r2,12(r2)
 401a0b0:	e1ffff17 	ldw	r7,-4(fp)
 401a0b4:	e1bffe17 	ldw	r6,-8(fp)
 401a0b8:	e17ffd17 	ldw	r5,-12(fp)
 401a0bc:	e13ffc17 	ldw	r4,-16(fp)
 401a0c0:	103ee83a 	callr	r2
 401a0c4:	00000106 	br	401a0cc <open+0x108>
 401a0c8:	0005883a 	mov	r2,zero
 401a0cc:	e0bffa15 	stw	r2,-24(fp)
 401a0d0:	00000206 	br	401a0dc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401a0d4:	00bffb44 	movi	r2,-19
 401a0d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401a0dc:	e0bffa17 	ldw	r2,-24(fp)
 401a0e0:	1000090e 	bge	r2,zero,401a108 <open+0x144>
  {
    alt_release_fd (index);  
 401a0e4:	e13ff917 	ldw	r4,-28(fp)
 401a0e8:	40167140 	call	4016714 <alt_release_fd>
    ALT_ERRNO = -status;
 401a0ec:	4019e9c0 	call	4019e9c <alt_get_errno>
 401a0f0:	1007883a 	mov	r3,r2
 401a0f4:	e0bffa17 	ldw	r2,-24(fp)
 401a0f8:	0085c83a 	sub	r2,zero,r2
 401a0fc:	18800015 	stw	r2,0(r3)
    return -1;
 401a100:	00bfffc4 	movi	r2,-1
 401a104:	00000106 	br	401a10c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 401a108:	e0bff917 	ldw	r2,-28(fp)
}
 401a10c:	e037883a 	mov	sp,fp
 401a110:	dfc00117 	ldw	ra,4(sp)
 401a114:	df000017 	ldw	fp,0(sp)
 401a118:	dec00204 	addi	sp,sp,8
 401a11c:	f800283a 	ret

0401a120 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401a120:	deffff04 	addi	sp,sp,-4
 401a124:	df000015 	stw	fp,0(sp)
 401a128:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401a12c:	000170fa 	wrctl	ienable,zero
}
 401a130:	0001883a 	nop
 401a134:	e037883a 	mov	sp,fp
 401a138:	df000017 	ldw	fp,0(sp)
 401a13c:	dec00104 	addi	sp,sp,4
 401a140:	f800283a 	ret

0401a144 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401a144:	defffb04 	addi	sp,sp,-20
 401a148:	dfc00415 	stw	ra,16(sp)
 401a14c:	df000315 	stw	fp,12(sp)
 401a150:	df000304 	addi	fp,sp,12
 401a154:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401a158:	d0a00b17 	ldw	r2,-32724(gp)
 401a15c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401a160:	00003106 	br	401a228 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401a164:	e0bffd17 	ldw	r2,-12(fp)
 401a168:	10800217 	ldw	r2,8(r2)
 401a16c:	1009883a 	mov	r4,r2
 401a170:	400c37c0 	call	400c37c <strlen>
 401a174:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401a178:	e0bffd17 	ldw	r2,-12(fp)
 401a17c:	10c00217 	ldw	r3,8(r2)
 401a180:	e0bffe17 	ldw	r2,-8(fp)
 401a184:	10bfffc4 	addi	r2,r2,-1
 401a188:	1885883a 	add	r2,r3,r2
 401a18c:	10800003 	ldbu	r2,0(r2)
 401a190:	10803fcc 	andi	r2,r2,255
 401a194:	1080201c 	xori	r2,r2,128
 401a198:	10bfe004 	addi	r2,r2,-128
 401a19c:	10800bd8 	cmpnei	r2,r2,47
 401a1a0:	1000031e 	bne	r2,zero,401a1b0 <alt_find_file+0x6c>
    {
      len -= 1;
 401a1a4:	e0bffe17 	ldw	r2,-8(fp)
 401a1a8:	10bfffc4 	addi	r2,r2,-1
 401a1ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401a1b0:	e0bffe17 	ldw	r2,-8(fp)
 401a1b4:	e0ffff17 	ldw	r3,-4(fp)
 401a1b8:	1885883a 	add	r2,r3,r2
 401a1bc:	10800003 	ldbu	r2,0(r2)
 401a1c0:	10803fcc 	andi	r2,r2,255
 401a1c4:	1080201c 	xori	r2,r2,128
 401a1c8:	10bfe004 	addi	r2,r2,-128
 401a1cc:	10800be0 	cmpeqi	r2,r2,47
 401a1d0:	1000081e 	bne	r2,zero,401a1f4 <alt_find_file+0xb0>
 401a1d4:	e0bffe17 	ldw	r2,-8(fp)
 401a1d8:	e0ffff17 	ldw	r3,-4(fp)
 401a1dc:	1885883a 	add	r2,r3,r2
 401a1e0:	10800003 	ldbu	r2,0(r2)
 401a1e4:	10803fcc 	andi	r2,r2,255
 401a1e8:	1080201c 	xori	r2,r2,128
 401a1ec:	10bfe004 	addi	r2,r2,-128
 401a1f0:	10000a1e 	bne	r2,zero,401a21c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401a1f4:	e0bffd17 	ldw	r2,-12(fp)
 401a1f8:	10800217 	ldw	r2,8(r2)
 401a1fc:	e0fffe17 	ldw	r3,-8(fp)
 401a200:	180d883a 	mov	r6,r3
 401a204:	e17fff17 	ldw	r5,-4(fp)
 401a208:	1009883a 	mov	r4,r2
 401a20c:	401a3f80 	call	401a3f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401a210:	1000021e 	bne	r2,zero,401a21c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401a214:	e0bffd17 	ldw	r2,-12(fp)
 401a218:	00000706 	br	401a238 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401a21c:	e0bffd17 	ldw	r2,-12(fp)
 401a220:	10800017 	ldw	r2,0(r2)
 401a224:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401a228:	e0fffd17 	ldw	r3,-12(fp)
 401a22c:	d0a00b04 	addi	r2,gp,-32724
 401a230:	18bfcc1e 	bne	r3,r2,401a164 <__alt_data_end+0xfc01a164>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401a234:	0005883a 	mov	r2,zero
}
 401a238:	e037883a 	mov	sp,fp
 401a23c:	dfc00117 	ldw	ra,4(sp)
 401a240:	df000017 	ldw	fp,0(sp)
 401a244:	dec00204 	addi	sp,sp,8
 401a248:	f800283a 	ret

0401a24c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401a24c:	defffa04 	addi	sp,sp,-24
 401a250:	dfc00515 	stw	ra,20(sp)
 401a254:	df000415 	stw	fp,16(sp)
 401a258:	dc000315 	stw	r16,12(sp)
 401a25c:	df000404 	addi	fp,sp,16
 401a260:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401a264:	00bffa04 	movi	r2,-24
 401a268:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401a26c:	e03ffc15 	stw	zero,-16(fp)
 401a270:	00001d06 	br	401a2e8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401a274:	040100b4 	movhi	r16,1026
 401a278:	842e5104 	addi	r16,r16,-18108
 401a27c:	e0bffc17 	ldw	r2,-16(fp)
 401a280:	01400304 	movi	r5,12
 401a284:	1009883a 	mov	r4,r2
 401a288:	4007eb40 	call	4007eb4 <__mulsi3>
 401a28c:	8085883a 	add	r2,r16,r2
 401a290:	10800017 	ldw	r2,0(r2)
 401a294:	1000111e 	bne	r2,zero,401a2dc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 401a298:	040100b4 	movhi	r16,1026
 401a29c:	842e5104 	addi	r16,r16,-18108
 401a2a0:	e0bffc17 	ldw	r2,-16(fp)
 401a2a4:	01400304 	movi	r5,12
 401a2a8:	1009883a 	mov	r4,r2
 401a2ac:	4007eb40 	call	4007eb4 <__mulsi3>
 401a2b0:	8085883a 	add	r2,r16,r2
 401a2b4:	e0fffe17 	ldw	r3,-8(fp)
 401a2b8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401a2bc:	d0e00f17 	ldw	r3,-32708(gp)
 401a2c0:	e0bffc17 	ldw	r2,-16(fp)
 401a2c4:	1880020e 	bge	r3,r2,401a2d0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 401a2c8:	e0bffc17 	ldw	r2,-16(fp)
 401a2cc:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
 401a2d0:	e0bffc17 	ldw	r2,-16(fp)
 401a2d4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 401a2d8:	00000606 	br	401a2f4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401a2dc:	e0bffc17 	ldw	r2,-16(fp)
 401a2e0:	10800044 	addi	r2,r2,1
 401a2e4:	e0bffc15 	stw	r2,-16(fp)
 401a2e8:	e0bffc17 	ldw	r2,-16(fp)
 401a2ec:	10800810 	cmplti	r2,r2,32
 401a2f0:	103fe01e 	bne	r2,zero,401a274 <__alt_data_end+0xfc01a274>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401a2f4:	e0bffd17 	ldw	r2,-12(fp)
}
 401a2f8:	e6ffff04 	addi	sp,fp,-4
 401a2fc:	dfc00217 	ldw	ra,8(sp)
 401a300:	df000117 	ldw	fp,4(sp)
 401a304:	dc000017 	ldw	r16,0(sp)
 401a308:	dec00304 	addi	sp,sp,12
 401a30c:	f800283a 	ret

0401a310 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401a310:	defffe04 	addi	sp,sp,-8
 401a314:	df000115 	stw	fp,4(sp)
 401a318:	df000104 	addi	fp,sp,4
 401a31c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401a320:	e0bfff17 	ldw	r2,-4(fp)
 401a324:	10bffe84 	addi	r2,r2,-6
 401a328:	10c00428 	cmpgeui	r3,r2,16
 401a32c:	18001a1e 	bne	r3,zero,401a398 <alt_exception_cause_generated_bad_addr+0x88>
 401a330:	100690ba 	slli	r3,r2,2
 401a334:	008100b4 	movhi	r2,1026
 401a338:	10a8d204 	addi	r2,r2,-23736
 401a33c:	1885883a 	add	r2,r3,r2
 401a340:	10800017 	ldw	r2,0(r2)
 401a344:	1000683a 	jmp	r2
 401a348:	0401a388 	cmpgei	r16,zero,1678
 401a34c:	0401a388 	cmpgei	r16,zero,1678
 401a350:	0401a398 	cmpnei	r16,zero,1678
 401a354:	0401a398 	cmpnei	r16,zero,1678
 401a358:	0401a398 	cmpnei	r16,zero,1678
 401a35c:	0401a388 	cmpgei	r16,zero,1678
 401a360:	0401a390 	cmplti	r16,zero,1678
 401a364:	0401a398 	cmpnei	r16,zero,1678
 401a368:	0401a388 	cmpgei	r16,zero,1678
 401a36c:	0401a388 	cmpgei	r16,zero,1678
 401a370:	0401a398 	cmpnei	r16,zero,1678
 401a374:	0401a388 	cmpgei	r16,zero,1678
 401a378:	0401a390 	cmplti	r16,zero,1678
 401a37c:	0401a398 	cmpnei	r16,zero,1678
 401a380:	0401a398 	cmpnei	r16,zero,1678
 401a384:	0401a388 	cmpgei	r16,zero,1678
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401a388:	00800044 	movi	r2,1
 401a38c:	00000306 	br	401a39c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401a390:	0005883a 	mov	r2,zero
 401a394:	00000106 	br	401a39c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401a398:	0005883a 	mov	r2,zero
  }
}
 401a39c:	e037883a 	mov	sp,fp
 401a3a0:	df000017 	ldw	fp,0(sp)
 401a3a4:	dec00104 	addi	sp,sp,4
 401a3a8:	f800283a 	ret

0401a3ac <atexit>:
 401a3ac:	200b883a 	mov	r5,r4
 401a3b0:	000f883a 	mov	r7,zero
 401a3b4:	000d883a 	mov	r6,zero
 401a3b8:	0009883a 	mov	r4,zero
 401a3bc:	401a5dc1 	jmpi	401a5dc <__register_exitproc>

0401a3c0 <exit>:
 401a3c0:	defffe04 	addi	sp,sp,-8
 401a3c4:	000b883a 	mov	r5,zero
 401a3c8:	dc000015 	stw	r16,0(sp)
 401a3cc:	dfc00115 	stw	ra,4(sp)
 401a3d0:	2021883a 	mov	r16,r4
 401a3d4:	401a6f40 	call	401a6f4 <__call_exitprocs>
 401a3d8:	008100b4 	movhi	r2,1026
 401a3dc:	10b2dc04 	addi	r2,r2,-13456
 401a3e0:	11000017 	ldw	r4,0(r2)
 401a3e4:	20800f17 	ldw	r2,60(r4)
 401a3e8:	10000126 	beq	r2,zero,401a3f0 <exit+0x30>
 401a3ec:	103ee83a 	callr	r2
 401a3f0:	8009883a 	mov	r4,r16
 401a3f4:	401a8740 	call	401a874 <_exit>

0401a3f8 <memcmp>:
 401a3f8:	01c000c4 	movi	r7,3
 401a3fc:	3980192e 	bgeu	r7,r6,401a464 <memcmp+0x6c>
 401a400:	2144b03a 	or	r2,r4,r5
 401a404:	11c4703a 	and	r2,r2,r7
 401a408:	10000f26 	beq	r2,zero,401a448 <memcmp+0x50>
 401a40c:	20800003 	ldbu	r2,0(r4)
 401a410:	28c00003 	ldbu	r3,0(r5)
 401a414:	10c0151e 	bne	r2,r3,401a46c <memcmp+0x74>
 401a418:	31bfff84 	addi	r6,r6,-2
 401a41c:	01ffffc4 	movi	r7,-1
 401a420:	00000406 	br	401a434 <memcmp+0x3c>
 401a424:	20800003 	ldbu	r2,0(r4)
 401a428:	28c00003 	ldbu	r3,0(r5)
 401a42c:	31bfffc4 	addi	r6,r6,-1
 401a430:	10c00e1e 	bne	r2,r3,401a46c <memcmp+0x74>
 401a434:	21000044 	addi	r4,r4,1
 401a438:	29400044 	addi	r5,r5,1
 401a43c:	31fff91e 	bne	r6,r7,401a424 <__alt_data_end+0xfc01a424>
 401a440:	0005883a 	mov	r2,zero
 401a444:	f800283a 	ret
 401a448:	20c00017 	ldw	r3,0(r4)
 401a44c:	28800017 	ldw	r2,0(r5)
 401a450:	18bfee1e 	bne	r3,r2,401a40c <__alt_data_end+0xfc01a40c>
 401a454:	31bfff04 	addi	r6,r6,-4
 401a458:	21000104 	addi	r4,r4,4
 401a45c:	29400104 	addi	r5,r5,4
 401a460:	39bff936 	bltu	r7,r6,401a448 <__alt_data_end+0xfc01a448>
 401a464:	303fe91e 	bne	r6,zero,401a40c <__alt_data_end+0xfc01a40c>
 401a468:	003ff506 	br	401a440 <__alt_data_end+0xfc01a440>
 401a46c:	10c5c83a 	sub	r2,r2,r3
 401a470:	f800283a 	ret

0401a474 <_putc_r>:
 401a474:	defffc04 	addi	sp,sp,-16
 401a478:	dc000215 	stw	r16,8(sp)
 401a47c:	dfc00315 	stw	ra,12(sp)
 401a480:	2021883a 	mov	r16,r4
 401a484:	20000226 	beq	r4,zero,401a490 <_putc_r+0x1c>
 401a488:	20800e17 	ldw	r2,56(r4)
 401a48c:	10001b26 	beq	r2,zero,401a4fc <_putc_r+0x88>
 401a490:	30800217 	ldw	r2,8(r6)
 401a494:	10bfffc4 	addi	r2,r2,-1
 401a498:	30800215 	stw	r2,8(r6)
 401a49c:	10000a16 	blt	r2,zero,401a4c8 <_putc_r+0x54>
 401a4a0:	30800017 	ldw	r2,0(r6)
 401a4a4:	11400005 	stb	r5,0(r2)
 401a4a8:	30800017 	ldw	r2,0(r6)
 401a4ac:	10c00044 	addi	r3,r2,1
 401a4b0:	30c00015 	stw	r3,0(r6)
 401a4b4:	10800003 	ldbu	r2,0(r2)
 401a4b8:	dfc00317 	ldw	ra,12(sp)
 401a4bc:	dc000217 	ldw	r16,8(sp)
 401a4c0:	dec00404 	addi	sp,sp,16
 401a4c4:	f800283a 	ret
 401a4c8:	30c00617 	ldw	r3,24(r6)
 401a4cc:	10c00616 	blt	r2,r3,401a4e8 <_putc_r+0x74>
 401a4d0:	30800017 	ldw	r2,0(r6)
 401a4d4:	00c00284 	movi	r3,10
 401a4d8:	11400005 	stb	r5,0(r2)
 401a4dc:	30800017 	ldw	r2,0(r6)
 401a4e0:	11400003 	ldbu	r5,0(r2)
 401a4e4:	28fff11e 	bne	r5,r3,401a4ac <__alt_data_end+0xfc01a4ac>
 401a4e8:	8009883a 	mov	r4,r16
 401a4ec:	dfc00317 	ldw	ra,12(sp)
 401a4f0:	dc000217 	ldw	r16,8(sp)
 401a4f4:	dec00404 	addi	sp,sp,16
 401a4f8:	4014de01 	jmpi	4014de0 <__swbuf_r>
 401a4fc:	d9400015 	stw	r5,0(sp)
 401a500:	d9800115 	stw	r6,4(sp)
 401a504:	40107d40 	call	40107d4 <__sinit>
 401a508:	d9800117 	ldw	r6,4(sp)
 401a50c:	d9400017 	ldw	r5,0(sp)
 401a510:	003fdf06 	br	401a490 <__alt_data_end+0xfc01a490>

0401a514 <putc>:
 401a514:	008100b4 	movhi	r2,1026
 401a518:	defffc04 	addi	sp,sp,-16
 401a51c:	10b2dd04 	addi	r2,r2,-13452
 401a520:	dc000115 	stw	r16,4(sp)
 401a524:	14000017 	ldw	r16,0(r2)
 401a528:	dc400215 	stw	r17,8(sp)
 401a52c:	dfc00315 	stw	ra,12(sp)
 401a530:	2023883a 	mov	r17,r4
 401a534:	80000226 	beq	r16,zero,401a540 <putc+0x2c>
 401a538:	80800e17 	ldw	r2,56(r16)
 401a53c:	10001a26 	beq	r2,zero,401a5a8 <putc+0x94>
 401a540:	28800217 	ldw	r2,8(r5)
 401a544:	10bfffc4 	addi	r2,r2,-1
 401a548:	28800215 	stw	r2,8(r5)
 401a54c:	10000b16 	blt	r2,zero,401a57c <putc+0x68>
 401a550:	28800017 	ldw	r2,0(r5)
 401a554:	14400005 	stb	r17,0(r2)
 401a558:	28800017 	ldw	r2,0(r5)
 401a55c:	10c00044 	addi	r3,r2,1
 401a560:	28c00015 	stw	r3,0(r5)
 401a564:	10800003 	ldbu	r2,0(r2)
 401a568:	dfc00317 	ldw	ra,12(sp)
 401a56c:	dc400217 	ldw	r17,8(sp)
 401a570:	dc000117 	ldw	r16,4(sp)
 401a574:	dec00404 	addi	sp,sp,16
 401a578:	f800283a 	ret
 401a57c:	28c00617 	ldw	r3,24(r5)
 401a580:	10c00e16 	blt	r2,r3,401a5bc <putc+0xa8>
 401a584:	28800017 	ldw	r2,0(r5)
 401a588:	01000284 	movi	r4,10
 401a58c:	14400005 	stb	r17,0(r2)
 401a590:	28800017 	ldw	r2,0(r5)
 401a594:	10c00003 	ldbu	r3,0(r2)
 401a598:	193ff01e 	bne	r3,r4,401a55c <__alt_data_end+0xfc01a55c>
 401a59c:	280d883a 	mov	r6,r5
 401a5a0:	180b883a 	mov	r5,r3
 401a5a4:	00000706 	br	401a5c4 <putc+0xb0>
 401a5a8:	8009883a 	mov	r4,r16
 401a5ac:	d9400015 	stw	r5,0(sp)
 401a5b0:	40107d40 	call	40107d4 <__sinit>
 401a5b4:	d9400017 	ldw	r5,0(sp)
 401a5b8:	003fe106 	br	401a540 <__alt_data_end+0xfc01a540>
 401a5bc:	280d883a 	mov	r6,r5
 401a5c0:	880b883a 	mov	r5,r17
 401a5c4:	8009883a 	mov	r4,r16
 401a5c8:	dfc00317 	ldw	ra,12(sp)
 401a5cc:	dc400217 	ldw	r17,8(sp)
 401a5d0:	dc000117 	ldw	r16,4(sp)
 401a5d4:	dec00404 	addi	sp,sp,16
 401a5d8:	4014de01 	jmpi	4014de0 <__swbuf_r>

0401a5dc <__register_exitproc>:
 401a5dc:	defffa04 	addi	sp,sp,-24
 401a5e0:	dc000315 	stw	r16,12(sp)
 401a5e4:	040100b4 	movhi	r16,1026
 401a5e8:	8432dc04 	addi	r16,r16,-13456
 401a5ec:	80c00017 	ldw	r3,0(r16)
 401a5f0:	dc400415 	stw	r17,16(sp)
 401a5f4:	dfc00515 	stw	ra,20(sp)
 401a5f8:	18805217 	ldw	r2,328(r3)
 401a5fc:	2023883a 	mov	r17,r4
 401a600:	10003726 	beq	r2,zero,401a6e0 <__register_exitproc+0x104>
 401a604:	10c00117 	ldw	r3,4(r2)
 401a608:	010007c4 	movi	r4,31
 401a60c:	20c00e16 	blt	r4,r3,401a648 <__register_exitproc+0x6c>
 401a610:	1a000044 	addi	r8,r3,1
 401a614:	8800221e 	bne	r17,zero,401a6a0 <__register_exitproc+0xc4>
 401a618:	18c00084 	addi	r3,r3,2
 401a61c:	18c7883a 	add	r3,r3,r3
 401a620:	18c7883a 	add	r3,r3,r3
 401a624:	12000115 	stw	r8,4(r2)
 401a628:	10c7883a 	add	r3,r2,r3
 401a62c:	19400015 	stw	r5,0(r3)
 401a630:	0005883a 	mov	r2,zero
 401a634:	dfc00517 	ldw	ra,20(sp)
 401a638:	dc400417 	ldw	r17,16(sp)
 401a63c:	dc000317 	ldw	r16,12(sp)
 401a640:	dec00604 	addi	sp,sp,24
 401a644:	f800283a 	ret
 401a648:	00810074 	movhi	r2,1025
 401a64c:	10ae1b04 	addi	r2,r2,-18324
 401a650:	10002626 	beq	r2,zero,401a6ec <__register_exitproc+0x110>
 401a654:	01006404 	movi	r4,400
 401a658:	d9400015 	stw	r5,0(sp)
 401a65c:	d9800115 	stw	r6,4(sp)
 401a660:	d9c00215 	stw	r7,8(sp)
 401a664:	400b86c0 	call	400b86c <malloc>
 401a668:	d9400017 	ldw	r5,0(sp)
 401a66c:	d9800117 	ldw	r6,4(sp)
 401a670:	d9c00217 	ldw	r7,8(sp)
 401a674:	10001d26 	beq	r2,zero,401a6ec <__register_exitproc+0x110>
 401a678:	81000017 	ldw	r4,0(r16)
 401a67c:	10000115 	stw	zero,4(r2)
 401a680:	02000044 	movi	r8,1
 401a684:	22405217 	ldw	r9,328(r4)
 401a688:	0007883a 	mov	r3,zero
 401a68c:	12400015 	stw	r9,0(r2)
 401a690:	20805215 	stw	r2,328(r4)
 401a694:	10006215 	stw	zero,392(r2)
 401a698:	10006315 	stw	zero,396(r2)
 401a69c:	883fde26 	beq	r17,zero,401a618 <__alt_data_end+0xfc01a618>
 401a6a0:	18c9883a 	add	r4,r3,r3
 401a6a4:	2109883a 	add	r4,r4,r4
 401a6a8:	1109883a 	add	r4,r2,r4
 401a6ac:	21802215 	stw	r6,136(r4)
 401a6b0:	01800044 	movi	r6,1
 401a6b4:	12406217 	ldw	r9,392(r2)
 401a6b8:	30cc983a 	sll	r6,r6,r3
 401a6bc:	4992b03a 	or	r9,r9,r6
 401a6c0:	12406215 	stw	r9,392(r2)
 401a6c4:	21c04215 	stw	r7,264(r4)
 401a6c8:	01000084 	movi	r4,2
 401a6cc:	893fd21e 	bne	r17,r4,401a618 <__alt_data_end+0xfc01a618>
 401a6d0:	11006317 	ldw	r4,396(r2)
 401a6d4:	218cb03a 	or	r6,r4,r6
 401a6d8:	11806315 	stw	r6,396(r2)
 401a6dc:	003fce06 	br	401a618 <__alt_data_end+0xfc01a618>
 401a6e0:	18805304 	addi	r2,r3,332
 401a6e4:	18805215 	stw	r2,328(r3)
 401a6e8:	003fc606 	br	401a604 <__alt_data_end+0xfc01a604>
 401a6ec:	00bfffc4 	movi	r2,-1
 401a6f0:	003fd006 	br	401a634 <__alt_data_end+0xfc01a634>

0401a6f4 <__call_exitprocs>:
 401a6f4:	defff504 	addi	sp,sp,-44
 401a6f8:	df000915 	stw	fp,36(sp)
 401a6fc:	dd400615 	stw	r21,24(sp)
 401a700:	dc800315 	stw	r18,12(sp)
 401a704:	dfc00a15 	stw	ra,40(sp)
 401a708:	ddc00815 	stw	r23,32(sp)
 401a70c:	dd800715 	stw	r22,28(sp)
 401a710:	dd000515 	stw	r20,20(sp)
 401a714:	dcc00415 	stw	r19,16(sp)
 401a718:	dc400215 	stw	r17,8(sp)
 401a71c:	dc000115 	stw	r16,4(sp)
 401a720:	d9000015 	stw	r4,0(sp)
 401a724:	2839883a 	mov	fp,r5
 401a728:	04800044 	movi	r18,1
 401a72c:	057fffc4 	movi	r21,-1
 401a730:	008100b4 	movhi	r2,1026
 401a734:	10b2dc04 	addi	r2,r2,-13456
 401a738:	12000017 	ldw	r8,0(r2)
 401a73c:	45005217 	ldw	r20,328(r8)
 401a740:	44c05204 	addi	r19,r8,328
 401a744:	a0001c26 	beq	r20,zero,401a7b8 <__call_exitprocs+0xc4>
 401a748:	a0800117 	ldw	r2,4(r20)
 401a74c:	15ffffc4 	addi	r23,r2,-1
 401a750:	b8000d16 	blt	r23,zero,401a788 <__call_exitprocs+0x94>
 401a754:	14000044 	addi	r16,r2,1
 401a758:	8421883a 	add	r16,r16,r16
 401a75c:	8421883a 	add	r16,r16,r16
 401a760:	84402004 	addi	r17,r16,128
 401a764:	a463883a 	add	r17,r20,r17
 401a768:	a421883a 	add	r16,r20,r16
 401a76c:	e0001e26 	beq	fp,zero,401a7e8 <__call_exitprocs+0xf4>
 401a770:	80804017 	ldw	r2,256(r16)
 401a774:	e0801c26 	beq	fp,r2,401a7e8 <__call_exitprocs+0xf4>
 401a778:	bdffffc4 	addi	r23,r23,-1
 401a77c:	843fff04 	addi	r16,r16,-4
 401a780:	8c7fff04 	addi	r17,r17,-4
 401a784:	bd7ff91e 	bne	r23,r21,401a76c <__alt_data_end+0xfc01a76c>
 401a788:	00810074 	movhi	r2,1025
 401a78c:	10ae2004 	addi	r2,r2,-18304
 401a790:	10000926 	beq	r2,zero,401a7b8 <__call_exitprocs+0xc4>
 401a794:	a0800117 	ldw	r2,4(r20)
 401a798:	1000301e 	bne	r2,zero,401a85c <__call_exitprocs+0x168>
 401a79c:	a0800017 	ldw	r2,0(r20)
 401a7a0:	10003226 	beq	r2,zero,401a86c <__call_exitprocs+0x178>
 401a7a4:	a009883a 	mov	r4,r20
 401a7a8:	98800015 	stw	r2,0(r19)
 401a7ac:	400b8800 	call	400b880 <free>
 401a7b0:	9d000017 	ldw	r20,0(r19)
 401a7b4:	a03fe41e 	bne	r20,zero,401a748 <__alt_data_end+0xfc01a748>
 401a7b8:	dfc00a17 	ldw	ra,40(sp)
 401a7bc:	df000917 	ldw	fp,36(sp)
 401a7c0:	ddc00817 	ldw	r23,32(sp)
 401a7c4:	dd800717 	ldw	r22,28(sp)
 401a7c8:	dd400617 	ldw	r21,24(sp)
 401a7cc:	dd000517 	ldw	r20,20(sp)
 401a7d0:	dcc00417 	ldw	r19,16(sp)
 401a7d4:	dc800317 	ldw	r18,12(sp)
 401a7d8:	dc400217 	ldw	r17,8(sp)
 401a7dc:	dc000117 	ldw	r16,4(sp)
 401a7e0:	dec00b04 	addi	sp,sp,44
 401a7e4:	f800283a 	ret
 401a7e8:	a0800117 	ldw	r2,4(r20)
 401a7ec:	80c00017 	ldw	r3,0(r16)
 401a7f0:	10bfffc4 	addi	r2,r2,-1
 401a7f4:	15c01426 	beq	r2,r23,401a848 <__call_exitprocs+0x154>
 401a7f8:	80000015 	stw	zero,0(r16)
 401a7fc:	183fde26 	beq	r3,zero,401a778 <__alt_data_end+0xfc01a778>
 401a800:	95c8983a 	sll	r4,r18,r23
 401a804:	a0806217 	ldw	r2,392(r20)
 401a808:	a5800117 	ldw	r22,4(r20)
 401a80c:	2084703a 	and	r2,r4,r2
 401a810:	10000b26 	beq	r2,zero,401a840 <__call_exitprocs+0x14c>
 401a814:	a0806317 	ldw	r2,396(r20)
 401a818:	2088703a 	and	r4,r4,r2
 401a81c:	20000c1e 	bne	r4,zero,401a850 <__call_exitprocs+0x15c>
 401a820:	89400017 	ldw	r5,0(r17)
 401a824:	d9000017 	ldw	r4,0(sp)
 401a828:	183ee83a 	callr	r3
 401a82c:	a0800117 	ldw	r2,4(r20)
 401a830:	15bfbf1e 	bne	r2,r22,401a730 <__alt_data_end+0xfc01a730>
 401a834:	98800017 	ldw	r2,0(r19)
 401a838:	153fcf26 	beq	r2,r20,401a778 <__alt_data_end+0xfc01a778>
 401a83c:	003fbc06 	br	401a730 <__alt_data_end+0xfc01a730>
 401a840:	183ee83a 	callr	r3
 401a844:	003ff906 	br	401a82c <__alt_data_end+0xfc01a82c>
 401a848:	a5c00115 	stw	r23,4(r20)
 401a84c:	003feb06 	br	401a7fc <__alt_data_end+0xfc01a7fc>
 401a850:	89000017 	ldw	r4,0(r17)
 401a854:	183ee83a 	callr	r3
 401a858:	003ff406 	br	401a82c <__alt_data_end+0xfc01a82c>
 401a85c:	a0800017 	ldw	r2,0(r20)
 401a860:	a027883a 	mov	r19,r20
 401a864:	1029883a 	mov	r20,r2
 401a868:	003fb606 	br	401a744 <__alt_data_end+0xfc01a744>
 401a86c:	0005883a 	mov	r2,zero
 401a870:	003ffb06 	br	401a860 <__alt_data_end+0xfc01a860>

0401a874 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401a874:	defffd04 	addi	sp,sp,-12
 401a878:	df000215 	stw	fp,8(sp)
 401a87c:	df000204 	addi	fp,sp,8
 401a880:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401a884:	0001883a 	nop
 401a888:	e0bfff17 	ldw	r2,-4(fp)
 401a88c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401a890:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401a894:	10000226 	beq	r2,zero,401a8a0 <_exit+0x2c>
    ALT_SIM_FAIL();
 401a898:	002af070 	cmpltui	zero,zero,43969
 401a89c:	00000106 	br	401a8a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401a8a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401a8a4:	003fff06 	br	401a8a4 <__alt_data_end+0xfc01a8a4>
